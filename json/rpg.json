{"types":{"Vulnerability":1,"Code Smell":46,"Bug":16,"Other":0},"rules":[{"summary":"The \"*srcstmt\" header option should be used","type":"Bug","defaultSeverity":"Major","description":"<p>Turning on the <code>*srcstmt</code> header option means that any line numbers cited in error statements will actually correspond correctly to the\ncode. Otherwise, object line numbers will be shown, making errors difficult to debug.</p>\n<p>The <code>*srcstmt</code> option is also recommended for accurate line numbers during debugging, particularly in combination with\n<code>*nodebugio</code>, (<code>H option(*srcstmt:*nodebugio)</code>) which prevents debug operations from stopping on I/O.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nH*\nH* AMENDED BY : G. Ann Campbell\nH* DATE       : 16JUL2014\nH* H24 - Miscellaneous Online Maintenance/Enquiry/Printing\nH*\nF/EJECT\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nH*\nH* AMENDED BY : G. Ann Campbell\nH* DATE       : 16JUL2014\nH* H24 - Miscellaneous Online Maintenance/Enquiry/Printing\nH*\nH option(*srcstmt)\nF/EJECT\n</pre>","debt":"5min"},{"summary":"Columns to be read with a \"SELECT\" statement should be clearly defined","type":"Bug","defaultSeverity":"Minor","description":"<p><code>SELECT *</code> should be avoided because it releases control of the returned columns and could therefore lead to errors and potentially to\nperformance issues.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT *\n       FROM persons\n       INTO newyorkers\n       WHERE city = 'NEW YORK'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT firstname, lastname\n       FROM persons\n       INTO newyorkers\n       WHERE city = 'NEW YORK'\n</pre>","debt":"30min"},{"summary":"\"/COPY\" statements should include specification letters","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared coding conventions allow teams to collaborate effectively. While it is possible to omit the specification letter before a <code>/COPY</code>\nstatement, it is advisable not to do so because including a specification on the line indicates to other developers what type of statements will be\nadded to the program by the copybook. Further, using a specification letter on the line makes it clearer to those who might be skimming the file that\nthe line is not just a comment, but does contain code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n      /COPY MBR1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n     I/COPY MBR1\n</pre>","debt":"5min"},{"summary":"Standard language features should be in upper case","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared coding conventions allow teams to collaborate effectively. Typing operation codes, keywords, specification codes, compiler directives and\nbuilt-in functions in upper case makes them more immediately recognizable as such, thereby making the code easier to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n     c     test12        plist\n     c                   parm                    asdf01\n     c                   parm                    asdf02\n     c                   parm                    @pdq\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n     C     test12        PLIST\n     C                   PARM                    asdf01\n     C                   PARM                    asdf02\n     C                   PARM                    @pdq\n</pre>","debt":"5min"},{"summary":"Track lack of copyright and license headers","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Each program should contain an initial section of <code>H*</code> comments lines, which includes a copyright and/or license statement. This rule\nmust be fed with the header text that is expected in the header.</p>\n<h2>Compliant Solution</h2>\n<pre>\n     H*  Copyright (C) 2008-2013 SonarSource\n     H*  mailto:contact AT sonarsource DOT com\n     H*\n     H*  SonarQube is free software; you can redistribute it and/or\n     H*  modify it under the terms of the GNU Lesser General Public\n     H*  License as published by the Free Software Foundation; either\n     H*  version 3 of the License, or (at your option) any later version.\n     H*\n     H*  SonarQube is distributed in the hope that it will be useful,\n     H*  but WITHOUT ANY WARRANTY; without even the implied warranty of\n     H*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n     H*  Lesser General Public License for more details.\n     H*\n     H*  You should have received a copy of the GNU Lesser General Public License\n     H*  along with this program; if not, write to the Free Software Foundation,\n     H*  Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n</pre>","debt":"5min"},{"summary":"Unused subprocedures should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>Subprocedures that aren't called from anywhere in the codebase are dead code, which can only distract and possibly confuse developers during\nmaintenance. Therefore, unused subprocedures should be removed.</p>","debt":"5min"},{"summary":"\"E\" should be found in F-spec lines","type":"Code Smell","defaultSeverity":"Major","description":"<p>Externally described files standardize file access, and result in simpler, easier to read code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n     FEPBLMSL2  IF   F  100        DISK    INFSR(*PSSR)\n     F*\n     F*\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n     F*\n     FIPBDCCP   IF   E           K DISK    INFSR(*PSSR)\n     F*\n\n     FEP210     CF   E             WORKSTN INFSR(*PSSR)\n     F                                     SFILE(EP21003S:RELN03)\n\n\n     FEP471R1   O    E             PRINTER INFSR(*PSSR)\n     F                                     USROPN\n     F                                     INFDS(W1SF01)\n</pre>","debt":"30min"},{"summary":"Error handling should be defined in F specs","type":"Bug","defaultSeverity":"Critical","description":"<p>Error handling should be defined on file operations to ensure correct processing of program failures rather than defaulting to an abnormal program\nend. This rule checks two things: </p>\n<ul>\n  <li> error handling is defined on file operations INFSR. </li>\n  <li> error handling is delegated to an appropriately named routine. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>Given the default parameter value, <code>^*PSSR$</code>:</p>\n<pre>\n     FIPBDCCP   IF   E           K DISK\n\n     FEP210     CF   E             WORKSTN\n     F                                     SFILE(EP21003S:RELN03)\n\n\n     FEP471R1   O    E             PRINTER\n     F                                     USROPN\n     F                                     INFDS(W1SF01)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n     FIPBDCCP   IF   E           K DISK    INFSR(*PSSR)\n\n     FEP210     CF   E             WORKSTN INFSR(*PSSR)\n     F                                     SFILE(EP21003S:RELN03)\n\n     FEP471R1   O    E             PRINTER INFSR(*PSSR)\n     F                                     USROPN\n     F                                     INFDS(W1SF01)\n</pre>","debt":"5min"},{"summary":"Variables used in only one subprocedure should not be global","type":"Code Smell","defaultSeverity":"Major","description":"<p>Global variables that are only used by a single subprocedure should be declared in that subprocedure, thus limiting both their scope and other\nprocedures' ability to modify the variable unexpectedly.</p>\n<p>If the variable has been declared in the global scope to preserve its value between calls, add the <code>STATIC</code> keyword to the new local\ndeclaration. It will be added to the global heap and retained until the program ends, but only accessible by the subprocedure in which it was\ndeclared.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n     D SUBPROC1        PR\n     D  Parm1                         5  0 Const\n\n     D X               S              5  0    // Noncompliant; only used in one subproc\n\n      /Free\n       SUBPROC1(1234);\n       *inlr = *on;\n       return;\n       /End-free\n\n     P SUBPROC1        B\n     D SUBPROC1        PI\n     D  Parm1                         5  0 Const\n      /Free\n       X = Parm1 + 1;                        // X is only used here\n       DSPLY(E) X;\n      /End-Free\n     P                 E\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n     D SUBPROC1        PR\n     D  Parm1                         5  0 Const\n\n      /Free\n       SUBPROC1(1234);\n       *inlr = *on;\n       return;\n       /End-free\n\n     P SUBPROC1        B\n     D SUBPROC1        PI\n     D  Parm1                         5  0 Const\n     D X               S              5  0\n      /Free\n       X = Parm1 + 1;\n       DSPLY(E) X;\n      /End-Free\n     P                 E\n</pre>","debt":"10min"},{"summary":"Variables should not be self-assigned","type":"Bug","defaultSeverity":"Major","description":"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n      /free\n        name = name;\n      /end-free\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n      /free\n        customer.name = name;\n      /end-free\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"3min"},{"summary":"\"GOTO\" statements should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>GOTO</code> is an unstructured control flow statement. It makes code less readable and maintainable, and should only be used to branch to\ndefined <code>ENDSR</code> points within the source. For normal loop functions use <code>ITER</code> or <code>LEAVE</code> instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nC     LOOP1         TAG\n...\nC                   GOTO      LOOP1\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>\n  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>\n</ul>","debt":"10min"},{"summary":"Standard figurative constants *ON, *OFF and *BLANK should be used in place of '1', '0' and ' '","type":"Code Smell","defaultSeverity":"Major","description":"<p>Initializing an alphanumeric field with the literal character <code>' '</code>, <code>'1'</code>, or <code>'0'</code> has the same effect as using\nthe equivalent figurative constant <code>*BLANK</code>, <code>*ON</code>, or <code>*OFF</code>, but the constant version removes ambiguity and makes\nthe code more readable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nC                   MOVE      ' '           FLD1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nC                   MOVE      *BLANK        FLD1\n</pre>","debt":"5min"},{"summary":"Files should not have too many lines","type":"Code Smell","defaultSeverity":"Major","description":"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>","debt":"1h"},{"summary":"Nested blocks of code should not be left empty","type":"Code Smell","defaultSeverity":"Major","description":"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n     C   99W1SCNO        IFEQ      1\n     C                   EXSR      SR201\n     C                   ELSE\n     C* Empty on purpose or missing a piece of code?\n     C                   END\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>","debt":"5min"},{"summary":"\"IF\" statements should not be conditioned on Indicators","type":"Code Smell","defaultSeverity":"Major","description":"<p>Indicators should not be used on \"IF\" statements because they foster poor logic flow and result in code that is difficult to read and maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nC   99FLD1          IFEQ      FLD2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nC     FLD1          IFEQ      FLD2\nC     *IN99         ANDEQ     *ON\n</pre>","debt":"10min"},{"summary":"LIKE keyword should be used to define work fields","type":"Code Smell","defaultSeverity":"Major","description":"<p>Use of the LIKE statement for fields with the same specification that are being used together in the same statements makes the relevance of\nindividual fields more understandable, and gives easy reference information, and makes relationships between those fields more obvious. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nD NAME            S             20A\nD PNAM            S             20A\n</pre>\n<h2>Compliant Solutions</h2>\n<pre>\nD NAME            S             20A\nD PNAM            S             LIKE(NAME)\n</pre>","debt":"10min"},{"summary":"Related \"IF/ELSEIF\" statements and \"WHEN\" clauses in a \"SELECT\" should not have the same condition","type":"Bug","defaultSeverity":"Major","description":"<p>A <code>Select</code> or a chain of <code>If</code>/<code>Elseif</code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/free\n     IF param = 1;\n        doX();\n     ELSEIF param = 2;\n        doY();\n     ELSEIF param = 1; // Noncompliant\n        doZ();\n     ENDIF;\n\n     SELECT;\n       WHEN param = 1;\n         doX();\n       WHEN param = 2;\n         doY();\n       WHEN param = 1; // Noncompliant\n         doZ();\n     ENDSL;\n/end-free\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/free\n     IF param = 1;\n        doX();\n     ELSEIF param = 2;\n        doY();\n     ELSEIF param = 3;\n        doZ();\n     ENDIF;\n\n     SELECT;\n       WHEN param = 1;\n         doX();\n       WHEN param = 2;\n         doY();\n       WHEN param = 3;\n         doZ();\n     ENDSL;\n/end-free\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"10min"},{"summary":"Compile-time arrays should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>Having all the pieces in front of you makes it easier to understand and debug or maintain a piece of code. Unfortunately, that's often not the case\nwith compile-time arrays, since they are often separated from the code that uses them by many, many lines. Instead, data structures are often a better\noption.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n     D directions      S              5  0 dim(4) ctdata perrcd(1)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\t\n     D dirData         DS\n     D                                5    Inz('North')\n     D                                5    Inz('South')\n     D                                5    Inz('East')\n     D                                5    Inz('West')\n     D directions                     5    Dim(4) Overlay(dirData)\n</pre>","debt":"20min"},{"summary":"Optional operation codes should be omitted","type":"Code Smell","defaultSeverity":"Minor","description":"<p><code>Eval</code> and <code>Callp</code> are the only two exceptions to the rule that each free-format line must start with an operation code.\nSince you can leave these two opcodes out, you should for cleaner, more readable code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEval Regpay = hours * perHour;\nCallp calcTax();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nRegpay = hours * perHour;\ncalcTax();\n</pre>","debt":"2min"},{"summary":"Unused variables should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>If a variable is declared but not used in the program, it can be considered dead code and should therefore be removed. This will improve\nmaintainability because developers will not wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nD I               S              5P 0      INZ\nD* Noncompliant; X is not used in C-Specs\nD X               S              5P 0      INZ\n\nC                   EVAL      I = I + 1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nD I               S              5P 0      INZ\n\nC                   EVAL      I = I + 1\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"5min"},{"summary":"Subroutines should not be too complex","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The cyclomatic complexity of subroutines should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>","debt":"10min"},{"summary":"\"QUALIFIED\" data structures should be used","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>QUALIFIED</code> data structures result in cleaner code because you can't reference the fields without using the qualifying name. They also\nallow you to have multiple sub-fields with the same name, meaning subfield names don't have to be convoluted for uniqueness, and can be expressive\ninstead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n      * Noncompliant\n     D Employee        DS\n     D  EmpId                         7P 0\n     D  EFName                       30A\n     D  ELName                       30A\n     D  EPhone                       11P 0\n\n      * Noncompliant\n     D Contractor      DS\n     D  CntId                         7P 0\n     D  CFName                       30A\n     D  CLName                       30A\n     D  CPhone                       11P 0\n\n      /free\n        EmpId = '000220';\n      /end-free\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n     D Employee        DS                  QUALIFIED\n     D  Id                            7P 0\n     D  FName                        30A\n     D  LName                        30A\n     D  Phone                        11P 0\n\n     D Contractor      DS                  QUALIFIED\n     D  Id                            7P 0\n     D  FName                        30A\n     D  LName                        30A\n     D  Phone                        11P 0\n\n      /free\n        Employee.Id = '000220';\n      /end-free\n</pre>","debt":"30min"},{"summary":"Expressions should not be too complex","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The complexity of an expression is defined by the number of <code>AND</code>, <code>OR</code>.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3</p>\n<pre>\nC                   IF        (condition1 AND condition2)\nC                             OR (condition2 AND condition2)\nC                             OR (condition3 AND condition4)\n...\n</pre>","debt":"5min"},{"summary":"The correct \"ENDxx\" statement should be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>While <code>END</code> will adequately close a statement, it is less clear than the use of the relevant, statement-specific <code>ENDxx</code>.\nThus, the statement-specific version is preferred to facilitate code maintenance and enhance clarity.</p>\n<p>This rule is applied to the following operations: <code>CASxx</code>, <code>DO</code>, <code>DOU</code>, <code>DOUxx</code>, <code>DOW</code>,\n<code>DOWxx</code>, <code>FOR</code>, <code>IF</code>, <code>IFxx</code> and <code>SELECT</code> groups.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nC     W0PKEX        DOUEQ     W0ON\n...\nC                   END\n\nC     W0PKEX        IFEQ      W0ON\n...\nC                   END\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nC     W0PKEX        DOUEQ     W0ON\n...\nC                   ENDDO\n\nC     W0PKEX        DOWEQ     W0ON\n...\nC                   ENDDO\n\nC     W0PKEX        IFEQ      W0ON\n...\nC                   ENDIF\n\nC                   FOR       W0ON\n...\nC                   ENDFOR\n\nC                   SELECT\nC     W0PKEX        WHENGT    W0ON\n...\nC     W0PKEX        WHENEQ    W0ON\n...\nC                   ENDSL\n</pre>","debt":"10min"},{"summary":"Debugging statements \"DEBUG(*YES)\" and \"DUMP\" should not be used","type":"Vulnerability","defaultSeverity":"Minor","description":"<p>The <code>DEBUG(*YES)</code> and <code>DUMP</code> statements are useful during development and debugging, but could expose sensitive information\nto attackers and should not be included in production code. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n   H*-------------------------------------------------------------------------\n   H   DATEDIT(*YMD) DEBUG(*YES)\n   H**************************************************************************\n\n   C     SR990         BegSR\n   C     'CVTERR'      DUMP                                                   DUMP for error\n   C                   Move      *on           *INLR\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n   H*-------------------------------------------------------------------------\n   H   DATEDIT(*YMD)\n   H**************************************************************************\n\n   C     SR990         BegSR\n   C                   Move      *on           *INLR\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n</ul>","debt":"10min"},{"summary":"Subprocedures should not reference global variables","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Global variables can seem like a handy way to pass state information around in a program, but the use of global variables only works well in very\nsmall programs. As the code base grows, you'll need to understand every subprocedure's impact on the global state in order to understand how the\nprogram works. This is a task that quickly becomes impossible.</p>\n<p>To control the situation, only the main procedure should be allowed access to global variables; it can then pass that state information to\nsubprocedures as parameters. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n     D FirstName       S             20A\n     D LastName        S             20A\n\n      /free\n       FirstName = 'John';\n       LastName = 'Smith';\n       DSPLY FullName();\n      /end-free\n\n     P FullName        B\n     D FullName        PI            41A\n      /free\n       return FirstName + ' ' + LastName;\n      /end-Free\n     P                 E\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n      /free\n       DSPLY FullName('John':'Smith');\n      /end-free\n\n     P FullName        B\n     D FullName        PI            41A\n     D  FirstName                    20A   Const\n     D  LastName                     20A   Const\n      /free\n       return FirstName + ' ' + LastName;\n      /end-Free\n     P                 E\n</pre>","debt":"30min"},{"summary":"Line count data should be retrieved from the file information data structure","type":"Bug","defaultSeverity":"Major","description":"<p>When using a <code>PRINTER</code> defined file, an <code>INFDS</code> keyword should be used to read the file's line count from <code>*PSSR</code>\npositions 367-368.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n FCSO602R1  O    E             PRINTER USROPN\n or ...\n FCSO602R1  O    E             PRINTER USROPN\n F                                     INFDS(WSFD01)\n F                                     INFSR(*PSSR)\n\n D WSFD01          DS\n D  W1ST01           *STATUS\n D  W1SPNO               123    124B 0\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n FCSO602R1  O    E             PRINTER USROPN\n F                                     INFDS(WSFD01)\n F                                     INFSR(*PSSR)\n\n D WSFD01          DS\n D  W1ST01           *STATUS\n D  W1SPNO               123    124B 0\n D  W1LNCT               367    368B 0\n D  W1PGNO               369    372B 0\n</pre>","debt":"30min"},{"summary":"\"/EJECT\" should be used after \"F\", \"D\" and \"C\" specification sections","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The <code>/EJECT</code> compiler directive adds a page break when the code is printed, and should be used at the end of each <code>F</code>,\n<code>D</code>, and <code>C</code> specification section to make the structure of the code clearer and to enhance overall readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nF* Conversion Job Activity File (CV)\nF*\nFCVJBAVP   IF   E           K DISK\nF* Conversion Job Dependency File (CZ)\nF*\nFCVJBDPP   IF   E           K DISK\nF*\nDP0RTCD           S              1\nDP0JBNM           S             10A\nDP0ERMG           S            100A\nDK0JBNM           S                   LIKE(CVJBNM)\nDK1JBNM           S                   LIKE(CVJBNM)\nDJST              S             10A   DIM(10)\nDI                S              3  0 INZ\nC\nC                   EXSR      SR999\nC\nC                   EXSR      SR100\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nF* Conversion Job Activity File (CV)\nF*\nFCVJBAVP   IF   E           K DISK\nF* Conversion Job Dependency File (CZ)\nF*\nFCVJBDPP   IF   E           K DISK\nF*\nF/EJECT\nDP0RTCD           S              1\nDP0JBNM           S             10A\nDP0ERMG           S            100A\nDK0JBNM           S                   LIKE(CVJBNM)\nDK1JBNM           S                   LIKE(CVJBNM)\nDJST              S             10A   DIM(10)\nDI                S              3  0 INZ\nD/EJECT\nC\nC                   EXSR      SR999\nC\nC                   EXSR      SR100\nC/EJECT\n</pre>","debt":"5min"},{"summary":"Track uses of disallowed operation codes","type":"Code Smell","defaultSeverity":"Major","description":"<p>Certain operation codes are proscribed by company policy.</p>","debt":"30min"},{"summary":"Subroutines should be documented","type":"Code Smell","defaultSeverity":"Major","description":"<p>Every subroutine should be commented to explain its goal and how it works. This non-empty comment must be located before or after the subroutine\ndefinition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nC     SR012         BEGSR\nC                         ...\nC                   ENDSR\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nC********************************************************************\nC* SR012- Here is my comment\nC********************************************************************\nC     SR012         BEGSR\nC                         ...\nC                   ENDSR\n</pre>","debt":"5min"},{"summary":"\"CONST\" should be used for parameters that are not modified","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The <code>CONST</code> keyword on a subprocedure's parameter indicates that the parameter value will not be changed by the subprocedure. This is\nnot just a nice way to communicate with the programmers who will call the procedure. It also offers performance benefits, because it allows the\ncompiler to produce more optimized code. Further, using <code>CONST</code> means that a field of a similar data type will automatically be converted\nto the correct type and size for the parameter.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n     D X               S             15A   INZ('ABC')\n\n     P SubProc1        B\n     D SubProc1        PI\n     D  Parm1                        15A    // Noncompliant; read-only. Should be CONST\n     D  Parm2                        15A\n      /Free\n       X = Parm1;\n       Parm2 = X;\n       return;\n      /End-free\n     P SubProc1        E\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n     D X               S             15A   INZ('ABC')\n\n     P SubProc1        B\n     D SubProc1        PI\n     D  Parm1                        15A   CONST\n     D  Parm2                        15A\n      /Free\n       X = Parm1;\n       Parm2 = X;\n       return;\n      /End-free\n     P SubProc1        E\n</pre>","debt":"10min"},{"summary":"An indicator should be used on a \"CHAIN\" statement","type":"Bug","defaultSeverity":"Major","description":"<p>A resulting indicator should be used on a <code>CHAIN</code> statement because it leads to cleaner, more readable, and more correct code. Using an\nindicator results in the conditions <code>record not found</code>, and <code>end of file</code> being automatically handled correctly, without the\nneed for further error handling. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nC     K0GMCP        CHAIN     SSGMCPR\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nC     K0GMCP        CHAIN     SSGMCPR                            81\n</pre>\n<h2>Exceptions</h2>\n<p>Free-form <code>CHAIN</code> statements are exempt from this rule because they cannot have indicators.</p>","debt":"30min"},{"summary":"The first parameter of a \"CHAIN/READx\" statement should be a \"KLIST\"","type":"Code Smell","defaultSeverity":"Major","description":"<p>Using a unique <code>KLIST</code> to access files ensures that the correct key is used at all times and creates a standard method of accessing the\ndata throughout the code, simplifying maintenance and improving readability. </p>\n<p>This rule flags non-compliant instances of <code>CHAIN</code>, <code>DELETE</code>, <code>READE</code>, <code>READPE</code>, <code>SETGT</code>,\nand <code>SETLL</code> operations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nC     'D001 B'      CHAIN     KYCUSTN                            20\n...\nC     DEPT          CHAIN     KYCUSTN                            20\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nC     DEPTKY        KLIST\nC                   KFLD                    DEPT\nC                   KFLD                    SHIFT\n\nC     DEPTKY        CHAIN     KYCUSTN                            20\n</pre>","debt":"30min"},{"summary":"The parameters of a \"CALL\" or \"CALLB\" statement should be defined as a \"PLIST\"","type":"Code Smell","defaultSeverity":"Major","description":"<p>Using a unique symbolic <code>PLIST</code> name provides a single definition point for the parameters used by any external routine being called.\nThis ensures that the same information is passed every time the external routine is called, reducing the potential for mistakes in operation. </p>\n<p>This rule flags non-compliant instances of <code>CALL</code> and <code>CALLB</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nC                   CALLB(D)  'XR01'\nC                   PARM                    WSXR07\nC                   PARM                    WSFLD1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nC     P0XR07        PLIST\nC                   PARM                    WSXR07\nC                   PARM                    WSFLD1\n\nC                   CALLB     'XR07'        P0XR07\n</pre>","debt":"1h"},{"summary":"Numeric fields should be defined as odd length packed fields.","type":"Bug","defaultSeverity":"Major","description":"<p>When storing numeric fields, using an odd number of digits allows the sign to be included in the storage area without wasting any space. </p>\n<p>For example the number -1234567, when packed as 7 digits is stored as follows. </p>\n<pre>\n1357\n246-\n</pre>\n<p>thus taking up only 4 data slots. but when packed as 8 characters it uses 5 data slots </p>\n<pre>\n02467\n0135-\n</pre>\n<p>or when 7 digits, non-packed, it will be stored as 8 data slots, including the sign. </p>\n<pre>\nFFFFFFF6\n12345670\n</pre>\n<h2>Noncompliant Code Example</h2>\n<pre>\n     D NUMFLD          S              8P 0\n     D NUMFLD          S              7S 0\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n     D NUMFLD          S              7P 0\n</pre>","debt":"30min"},{"summary":"Comment lines should not be too long","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared coding conventions allow teams to collaborate effectively. This rule ensures that comments end at or before the last line position which is\neasily viewable at the default screen resolution.</p>","debt":"5min"},{"summary":"\"IF\" blocks should not have too many lines","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>IF</code> blocks that contain too many lines are difficult to read and understand. </p>\n<p>Above a specific threshold, it is strongly advised to refactor the contents of the <code>IF</code> block into multiple, well-named subroutines or\nsubfunctions, each of which focuses on a well-defined task. Those smaller subroutines will not only be easier to understand, but probably also easier\nto test.</p>","debt":"20min"},{"summary":"\"/COPY\" should be avoided","type":"Code Smell","defaultSeverity":"Major","description":"<p>Historically <code>/COPY</code> procedures contained all of the specifications required for each procedure, so for example <code>xxxxF /COPY</code>\nwould be used to copy the F lines from another <code>F</code> spec. However, this practice results in code that is difficult to understand and\nmaintain. Instead, the use of <code>/COPY</code> statements should be replaced with explicit declarations.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given the default list of specs, H,F,I,D,C,O:</p>\n<pre>\nF/COPY HRSILERPG,RSX36\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nFSSINRTP   IF   E           K DISK    INFSR(*PSSR)\nF*\nF*  Interest Rates File\nF*\n</pre>","debt":"30min"},{"summary":"SQL statements should not join too many tables","type":"Bug","defaultSeverity":"Major","description":"<p>When you need access to data from multiple tables, it is more efficient, effective, and understandable to use pre-built views than to select the\ndata from a large number of tables - effectively creating in-memory views - at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 3 joined tables:</p>\n<pre>\nSELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME\nFROM PERSONS\n  INNER JOIN COUNTRIES ON COUNTRIES.ID = PERSON.COUNTRY_ID\n  INNER JOIN GENRES ON GENRES.ID = PERSONS.GENRE_ID\n  INNER JOIN PROFESSIONS ON PROFESSIONS.ID = PERSONS.PROFESSIONS_ID  -- Noncompliant; this is table #4\nWHERE COUNTRIES.CODE = 'US'\n\nSELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME\nFROM PERSONS, COUNTRIES, GENRES, PROFESSIONS -- Noncompliant\nWHERE COUNTRIES.CODE = 'US' AND COUNTRIES.ID = PERSON.COUNTRY_ID AND GENRES.ID = PERSONS.GENRE_ID AND PROFESSIONS.ID = PERSONS.PROFESSIONS_ID\n</pre>","debt":"3h"},{"summary":"\"DO\" blocks should not have too many lines","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>DO</code> blocks that contain too many lines are difficult to read and understand. </p>\n<p>Above a specific threshold, it is strongly advised to refactor the contents of the <code>DO</code> block into multiple, well-named subroutines or\nsubfunctions, each of which focuses on a well-defined task. Those smaller subroutines will not only be easier to understand, but probably also easier\nto test.</p>","debt":"20min"},{"summary":"All opened \"USROPN\" files should be explicitly closed","type":"Bug","defaultSeverity":"Critical","description":"<p>If a file is defined without the <code>USROPN</code> statement then the natural RPG logic will deal with opening and closing it. However, files\ndefined with <code>USROPN</code>, must be both explicitly <code>OPEN</code>ed and <code>CLOSE</code>d.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFEWPCCR1   O    E             PRINTER USROPN\nF                                     INFDS(WSFD01)\nF                                     INFSR(*PSSR)\n\nC                   OPEN      EWPCCR1\n\nC                   CLOSE     *ALL\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nFEWPCCR1   O    E             PRINTER USROPN\nF                                     INFDS(WSFD01)\nF                                     INFSR(*PSSR)\n\nC                   OPEN      EWPCCR1\n\nC                   CLOSE     EWPCCR1\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>","debt":"30min"},{"summary":"Prototypes should be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>Specifying the parameters to a procedure with a <code>PLIST</code> makes that procedure unusable from free-format code. Instead, prototypes should\nbe used - both when defining a procedure and when calling it. They have the additional benefit of allowing you to use keywords such as\n<code>Const</code> to better-specify how parameters are passed to a procedure. Further, the use of a prototype instead of a <code>PLIST</code> is\ncleaner and more consistent with the code required for subprocedures. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n      * Noncompliant; PLIST specified\n     C     *ENTRY        PLIST\n     C                   PARM                    ZipCode           5 0\n     C                   PARM                    City             20\n...\n      * Noncompliant; PLIST used in call\n     C                   CALL      'OTHERPROG'\n     C                   PARM                    ZipCode\n     C                   PARM                    City\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n     D MYPROG          PR\n     D  ZipCode                       5I   Const\n     D  City                         20A   Const\n     D MYPROG          PI\n     D  ZipCode                       5I   Const\n     D  City                         20A   Const\n...\n     D OTHERPROG       PR                  ExtPgm('OtherProgram')\n     D  ZipCode                       5I   Const\n     D  City                         20A   Const\n      /free\n        OTHERPROG(ZipCode:City);\n      /end-free\n</pre>","debt":"20min"},{"summary":"Two branches in the same conditional structure should not have exactly the same implementation","type":"Bug","defaultSeverity":"Minor","description":"<p>Having two <code>WHEN</code> in the same <code>SELECT</code> statement or branches in the same <code>IF</code> structure with the same\nimplementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, they should be\ncombined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nselect;\n  when i = 1;\n    doSomething();\n  when i = 2;\n    doSomethingDifferent();\n  when i = 3:  // Noncompliant; duplicates first when's implementation\n    doSomething();\nendsl;\n\nif (a &gt;= 0 and a &lt; 10);\n  doTheThing();\nelseif (a &gt;= 10 and a &lt; 20);\n  doTheOtherThing();\nelseif (a &gt;= 20 and a &lt; 50);\n  doTheThing();  // Noncompliant; duplicates first condition\nelse;\n  doTheRest();\nendif;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nselect;\n  when i = 1 or i = 3;\n    doSomething();\n  when i = 2;\n    doSomethingDifferent();\nendsl;\n\nif ((a &gt;= 0 and a &lt; 10) or (a &gt;= 20 and a &lt; 50));\n  doTheThing();\nelseif (a &gt;= 10 &amp;&amp; a &lt; 20);\n  doTheOtherThing();\nelse;\n  doTheRest();\nendif;\n\n</pre>\n<p>or </p>\n<pre>\nselect;\n  when i = 1;\n    doSomething();\n  when i = 2;\n    doSomethingDifferent();\n  when i = 3:\n    doThirdThing();\nendsl;\n\nif (a &gt;= 0 and a &lt; 10);\n  doTheThing();\nelseif (a &gt;= 10 and a &lt; 20);\n  doTheOtherThing();\nelseif (a &gt;= 20 and a &lt; 50);\n  doTheThirdThing();\nelse;\n  doTheRest();\nendif;\n</pre>","debt":"10min"},{"summary":"Control flow statements \"IF\", \"FOR\", \"DO\", ... should not be nested too deeply","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Nested <code>CASxx</code>, <code>DO</code>, <code>DOU</code>, <code>DOW</code>, <code>DOUxx</code>, <code>DOWxx</code>, <code>FOR</code>,\n<code>IF</code>, <code>IFxx</code>, <code>MONITOR</code> and <code>SELECT</code> statements is a key ingredient for making what's known as \"Spaghetti\ncode\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nIF        A &lt;&gt; B\nIF        B &lt;&gt; C\nDOW       B &lt;&gt; A\nIF        A &lt;&gt; D\n...\nENDIF\nENDDO\nENDIF\nENDIF\n</pre>","debt":"10min"},{"summary":"Multiple occurrence data structures should not be used","type":"Bug","defaultSeverity":"Major","description":"<p>While the <code>OCCURS</code> keyword still works, it is slower than its more modern replacement: <code>DIM</code>, which should be used\ninstead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nD cussls          ds                  Occurs(200)\nD CustNo                         7p 0\nD MonthlySls                    11P 2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nD cussls          ds                  dim(200)\nD CustNo                         7p 0\nD MonthlySls                    11P 2\n</pre>","debt":"5min"},{"summary":"Non-input files should be accessed with the no lock option","type":"Bug","defaultSeverity":"Minor","description":"<p>When accessing a non-input-only file with a <code>CHAIN</code>/<code>READx</code> operation, the record is locked and becomes inaccessible to the\nsystem, and unreadable other programs. This is fine if you are about to update the record immediately, but if you have data processing to do following\nthe read, it can leave the record unavailable for too long. Therefore, non-input files using the <code>CHAIN</code>, <code>READ</code>,\n<code>READE</code>, <code>READP</code>, and <code>READPE</code> operation codes should always be accessed with the no lock option,\n<code>(N)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFDDDLJNL7  UF   E           K DISK    INFSR(*PSSR)\n...\nC                   READ      DDDLJNL7\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nFDDDLJNL7  UF   E           K DISK    INFSR(*PSSR)\n...\nC                   READ(N)   DDDLJNL7\n</pre>","debt":"10min"},{"summary":"The data area structure for \"IN\" should be defined in D spec lines.","type":"Code Smell","defaultSeverity":"Major","description":"<p>Both the name and the field definitions of a parameter 2 data area used in an <code>IN</code> should be coded in the <code>D</code> specification.\nThis ensures that all definition data is kept together, and the specific data is not manually extracted in the code, thus making the code easier to\nread and maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nD WSFD08          S             30A 0\n\nC                   IN        WSFD08\nC                   MOVEL     WSFD08        VAR9S\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nD WSFD08          DS    30             DTAARA(HEPDTAR005)\nD  W3SPNO               123    124B 0\nD  W3LNCT               367    368B 0\n\nC                   IN        WSFD08\n</pre>","debt":"30min"},{"summary":"\"SELECT WHEN\" clauses should not have too many lines","type":"Code Smell","defaultSeverity":"Major","description":"<p>The <code>SELECT</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>WHEN</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of\n<code>WHEN</code> clause should be extracted in a dedicated subroutine.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nC                   SELECT\nC                   WHEN      X=1\nC                   MOVE      A             B\nC                   MOVE      C             D\nC                   MOVE      E             F\nC                   MOVE      J             K\nC                   MOVE      L             M\nC                   WHEN      X=2\nC                   ....\nC                   ENDSL\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nC                   SELECT\nC                   WHEN      X=1\nC                   EXSR      SR011\nC                   WHEN      X=2\nC                   ....\nC                   ENDSL\nC                   ...\nC     SR011         BEGSR\nC                   MOVE      A             B\nC                   MOVE      C             D\nC                   MOVE      E             F\nC                   MOVE      J             K\nC                   MOVE      L             M\nC                   ENDSR\n</pre>","debt":"5min"},{"summary":"Sections of code should not be \"commented out\"","type":"Code Smell","defaultSeverity":"Major","description":"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>","debt":"5min"},{"summary":"String literals should not be duplicated","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nC                   MOVEL     'CLEAR'       W1CLR                           Noncompliant\nC                   MOVEL     '*DECOD'      W1DCDE\nC                   MOVEL     '*ERROR'      W1ERR\nC                   MOVEL     '*EXIT '      W1EXIT\nC                   MOVEL     'CLEAR'       W1FIRT\nC                   MOVEL     'CLEAR'       W1HELP\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nD W0Clr         C                   CONST('ERR1')\nC                   MOVEL     W0Clr         W1CLR\nC                   MOVEL     '*DECOD'      W1DCDE\nC                   MOVEL     '*ERROR'      W1ERR\nC                   MOVEL     '*EXIT '      W1EXIT\nC                   MOVEL     W0Clr         W1FIRT\nC                   MOVEL     W0Clr         W1HELP\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>","debt":"2min"},{"summary":"\"IF ... ELSEIF\" constructs should end with \"ELSE\" clauses","type":"Code Smell","defaultSeverity":"Critical","description":"<p>This rule applies whenever an <code>IF</code> statement is followed by one or more <code>ELSEIF</code> statements; the final <code>ELSEIF</code>\nshould be followed by an <code>ELSE</code> statement.</p>\n<p>The requirement for a final <code>ELSE</code> statement is defensive programming. </p>\n<p>The <code>ELSE</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>OTHER</code> clause in a <code>SELECT</code> statement. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nC                   IF         RESULT = 0\nC                   ...\nC                   ELSEIF     RESULT &gt; 0\nC                   ...\nC                   ENDIF\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nC                   IF         RESULT = 0\nC                   ...\nC                   ELSEIF     RESULT &gt; 0\nC                   ...\nC                   ELSE\nC                   EXSR       ERRO\nC                   ENDIF\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PQHRAw\">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>","debt":"5min"},{"summary":"Subprocedures should be used instead of subroutines","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Subprocedures and subroutines are both mechanisms to segregate logic, but subprocedures are preferred for three reasons:</p>\n<ul>\n  <li> their local files and variables make maintenance faster and cleaner. They allow you to create variables without worrying about name clashes,\n  and to change fields without worrying about negatively impacting other parts of the program. </li>\n  <li> their local files and variables make code reuse easy. </li>\n  <li> they can be called with parameters as functions, yielding clearer more readable code. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n     D  FirstName      S             20A\n     D  Initial        S              1A\n     D  LastName       S             20A\n     D  FullName       S             43A\n\n      /free\n       FirstName = 'John';\n       Initial = 'A';\n       LastName = 'Smith';\n       EXSR SPFullName;\n       DSPLY FullName;\n       ...\n\t\n       begsr SPFullName;\n         FullName = FirstName + ' ' + Initial + ' ' + LastName;\n       endsr;\n      /end-free\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n      /free\n       DSPLY FullName('John':'A':'Smith');\n       ...\n      /end-free\n\n     P FullName        B\n     D FullName        PI            43A\n     D  FirstName                    20A   Const\n     D  Initial                       1A   Const\n     D  LastName                     20A   Const\n      /free\n       return FirstName + ' ' + Initial + ' ' + LastName;\n      /end-Free\n     P                 E\n</pre>","debt":"30min"},{"summary":"Identical expressions should not be used on both sides of a binary operator","type":"Bug","defaultSeverity":"Major","description":"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code> and <code>+</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n      /free\n        if a = a; // always true\n          doZ();\n        endif;\n        if a &lt;&gt; a; // always false\n          doY();\n        endif;\n        if a = b and a = b; // if the first one is true, the second one is too\n          doX();\n        endif;\n        if a = b or a = b; // if the first one is true, the second one is too\n          doV();\n        endif;\n\n        j = 5 / 5; //always 1\n        k = 5 - 5; //always 0\n      /end-free\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n      /free\n        doZ();\n\n        if a = b;\n          doX();\n        endif;\n        if a = b;\n          doV();\n        endif;\n\n        j = 1;\n        k = 0;\n      /end-free\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> Rule <a href='/coding_rules#rule_key=rpg%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>","debt":"2min"},{"summary":"Record formats  should be cleared before each use","type":"Bug","defaultSeverity":"Critical","description":"<p>The format used to write a record to a file should be cleared before each use. Otherwise stale data left in the format from previous records may be\nsaved into the current record if it does not have data for all the fields in the format.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nC                   IF        X &lt;&gt; Y\n...\nC                   ENDIF\nC                   WRITE     RECFMT\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nC                   CLEAR                   RECFMT\nC                   IF        X &lt;&gt; Y\n...\nC                   ENDIF\nC                   WRITE     RECFMT\n</pre>","debt":"5min"},{"summary":"Subroutine names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\nsubroutine names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^SR[a-zA-Z0-9]*$</code>:</p>\n<pre>\nC     XXXXX         BEGSR\n...\nC                   ENDSR\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nC     SR102         BEGSR\n...\nC                   ENDSR\n</pre>","debt":"30min"},{"summary":"Unused subroutines should be removed","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Unused subroutines are dead code and there isn't any good argument to leave them in the source code. </p>","debt":"5min"},{"summary":"Subroutines should not have too manylines","type":"Code Smell","defaultSeverity":"Major","description":"<p>A subroutine that grows too large tends to aggregate too many responsibilities. Such subroutine inevitably become harder to understand and\ntherefore harder to maintain. Above a specific threshold, it is strongly advised to refactor into smaller subroutines which focus on well-defined\ntasks. Those smaller subroutines will not only be easier to understand, but also probably easier to test.</p>","debt":"20min"},{"summary":"Failed unit tests should be fixed","type":"Bug","defaultSeverity":"Major","description":"Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions."},{"summary":"Skipped unit tests should be either removed or fixed","type":"Code Smell","defaultSeverity":"Major","description":"Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed."},{"summary":"Source files should not have any duplicated blocks","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as there is at least one block of duplicated code on this file","debt":"10min"},{"summary":"Source files should have a sufficient density of comment lines","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message."},{"summary":"Lines should have sufficient coverage by tests","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold."},{"summary":"Branches should have sufficient coverage by tests","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold."}]}