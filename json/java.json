{"types":{"Vulnerability":121,"Code Smell":1017,"Bug":552,"Other":0},"rules":[{"summary":"Modified Control Variable","type":"Code Smell","defaultSeverity":"Major","description":"Check for ensuring that for loop control variables are not modified inside the for block.\n\n<p>\n</p>","debt":"30min"},{"summary":"Method Length","type":"Code Smell","defaultSeverity":"Major","description":"Checks for long methods.\n\n<p>\n</p>","debt":"1h"},{"summary":"Illegal Instantiation","type":"Code Smell","defaultSeverity":"Major","description":"Checks for illegal instantiations where a factory method is preferred. Depending on the project, for some classes it might be preferable to create instances through factory methods rather than calling the constructor. A simple example is the <code>java.lang.Boolean</code> class. In order to save memory and CPU cycles, it is preferable to use the predefined constants TRUE and FALSE. Constructor invocations should be replaced by calls to <code>Boolean.valueOf()</code>. Some extremely performance sensitive projects may require the use of factory methods for other classes as well, to enforce the usage of number caches or object pools.","debt":"30min"},{"summary":"Local Final Variable Name","type":"Code Smell","defaultSeverity":"Major","description":"Checks that local final variable names, including catch parameters, conform to the specified format\n\n<p>\n</p>","debt":"10min"},{"summary":"Method Name","type":"Code Smell","defaultSeverity":"Major","description":"Checks that method names conform to the specified format\n\n<p>\n</p>","debt":"10min"},{"summary":"Need Braces","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\nChecks for braces around code blocks.\n</p>\n\n<p>\n</p>","debt":"10min"},{"summary":"Avoid Static Import","type":"Code Smell","defaultSeverity":"Minor","description":"<p> Checks that there are no static import statements. Rationale: Importing static members can lead to naming conflicts between class' members. It may lead to poor code readability since it may no longer be clear what class a member resides in (without looking at the import statement).</p>","debt":"15min"},{"summary":"Annotation Location","type":"Code Smell","defaultSeverity":"Major","description":"<p>Check location of annotation on language elements. By default, Check enforce to locate annotations immetiately after documentation block and before target element, annotation should be located on separate line from target element.</p>\n\n<p>Example:</p>\n\n<pre>\n@Override\n@Nullable\npublic String getNameIfPresent() { ... }\n</pre>"},{"summary":"File Contents Holder","type":"Code Smell","defaultSeverity":"Minor","description":"Holds the current file contents for global access when configured as a TreeWalker sub-module. For example, a filter can access the current file contents through this module."},{"summary":"Javadoc summary","type":"Code Smell","defaultSeverity":"Major","description":"Checks that Javadoc summary sentence does not contain phrases that are not recommended to use.","debt":"10min"},{"summary":"Javadoc Paragraph","type":"Code Smell","defaultSeverity":"Major","description":"Checks that:\n<ul>\n    <li>There is one blank line between each of two paragraphs and one blank line before the at-clauses block if it is present.</li>\n    <li>Each paragraph but the first has &lt;p&gt; immediately before the first word, with no space after.</li>\n</ul>","debt":"10min"},{"summary":"Package name","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nChecks that package names conform to the specified format. The default value of format\n       has been chosen to match the requirements in the Java Language specification and the Sun coding conventions.\n       However both underscores and uppercase letters are rather uncommon, so most configurations should probably\n       assign value ^[a-z]+(\\.[a-z][a-z0-9]*)*$ to format\n</p>\n\n<p>\n</p>","debt":"20min"},{"summary":"Explicit Initialization","type":"Code Smell","defaultSeverity":"Major","description":"Checks if any class or object member explicitly initialized to default for its type value (null for object references, zero for numeric types and char and false for boolean).\n\n<p>\n</p>","debt":"30min"},{"summary":"No Clone","type":"Code Smell","defaultSeverity":"Major","description":"<p> Checks that the clone method is not overridden from the Object class.</p>\n\n<p>Rationale: The clone method relies on strange/hard to follow rules that do not work it all situations. Consequently, it is difficult to override correctly. Below are some of the rules/reasons why the clone method should be avoided.</p>\n<ul>\n    <li>Classes supporting the clone method should implement the Cloneable interface but the Cloneable interface does not include the clone method. As a result, it doesn't enforce the method override.</li>\n    <li>The Cloneable interface forces the Object's clone method to work correctly. Without implementing it, the Object's clone method will throw a CloneNotSupportedException.</li>\n    <li>Non-final classes must return the object returned from a call to super.clone().</li>\n    <li>Final classes can use a constructor to create a clone which is different from non-final classes.</li>\n    <li>If a super class implements the clone method incorrectly all subclasses calling super.clone() are doomed to failure.</li>\n    <li>If a class has references to mutable objects then those object references must be replaced with copies in the clone method after calling super.clone().</li>\n    <li>The clone method does not work correctly with final mutable object references because final references cannot be reassigned.</li>\n    <li>If a super class overrides the clone method then all subclasses must provide a correct clone implementation.</li>\n</ul>\n<p>Two alternatives to the clone method, in some cases, is a copy constructor or a static factory method to return copies of an object. Both of these approaches are simpler and do not conflict with final fields. The do not force the calling client to handle a CloneNotSuportException. They also are typed therefore no casting is necessary. Finally, they are more flexible since they can take interface types rather than concrete classes.</p>\n\n<p>Sometimes a copy constructor or static factory is not an acceptable alternative to the clone method. The example below highlights the limitation of a copy constructor (or static factory). Assume Square is a subclass for Shape.</p>\n<pre>\n  Shape s1 = new Square();\n  System.out.println(s1 instanceof Square); //true\n</pre>\n<p>...assume at this point the code knows nothing of s1 being a Square that's the beauty of polymorphism but the code wants to copy the Square which is declared as a Shape, its super type...</p>\n<pre>\n  Shape s2 = new Shape(s1); //using the copy constructor\n  System.out.println(s2 instanceof Square); //false\n</pre>\n\n<p>The working solution (without knowing about all subclasses and doing many casts) is to do the following (assuming correct clone implementation).</p>\n<pre>\n  Shape s2 = s1.clone();\n  System.out.println(s2 instanceof Square); //true\n</pre>\n\n<p>Just keep in mind if this type of polymorphic cloning is required then a properly implemented clone method may be the best choice.</p>\n\n<p>Much of this information was taken from Effective Java: Programming Language Guide First Edition by Joshua Bloch pages 45-52. Give Bloch credit for writing an excellent book.</p>\n\n<p>This check is almost exactly the same as the \"No Finalizer Check\".</p>","debt":"20min"},{"summary":"Redundant Modifier","type":"Code Smell","defaultSeverity":"Minor","description":"Checks for redundant modifiers in interface and annotation definitions.","debt":"2min"},{"summary":"No Whitespace Before","type":"Code Smell","defaultSeverity":"Minor","description":"Checks that there is no whitespace before a token.","debt":"2min"},{"summary":"Javadoc Package","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Checks that each Java package has a Javadoc file used for commenting. By default it only allows a package-info.java file, but can be configured to allow a package.html file. An error will be reported if both files exist as this is not allowed by the Javadoc tool.</p>\n\n<p>\n</p>","debt":"30min"},{"summary":"Javadoc Style","type":"Code Smell","defaultSeverity":"Major","description":"Validates Javadoc comments to help ensure they are well formed. The following checks are performed:\n    <ul>\n      <li>Ensures the first sentence ends with proper punctuation (That is a period, question mark, or exclamation mark, by default). \n      Javadoc automatically places the first sentence in the method summary table and index. With out proper punctuation the Javadoc may be malformed. \n      All items eligible for the {@inheritDoc} tag are exempt from this requirement.</li>\n      <li>Check text for Javadoc statements that do not have any description. \n      This includes both completely empty Javadoc, and Javadoc with only tags such as @param and @return.</li>\n      <li>Check text for incomplete HTML tags. Verifies that HTML tags have corresponding end tags and issues an \"Unclosed HTML tag found:\" error if not. \n      An \"Extra HTML tag found:\" error is issued if an end tag is found without a previous open tag.</li>\n      <li>Check that a package Javadoc comment is well-formed (as described above) and NOT missing from any package-info.java files.</li>\n      <li>Check for allowed HTML tags. The list of allowed HTML tags is \"a\", \"abbr\", \"acronym\", \"address\", \"area\", \"b\", \n      \"bdo\", \"big\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"colgroup\", \"del\", \"div\", \"dfn\", \"dl\", \"em\", \"fieldset\", \n      \"h1\" to \"h6\", \"hr\", \"i\", \"img\", \"ins\", \"kbd\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"samp\", \"small\", \"span\", \"strong\", \n      \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thread\", \"tr\", \"tt\", \"ul\"</li>\n    </ul>","debt":"30min"},{"summary":"Boolean Expression Complexity","type":"Code Smell","defaultSeverity":"Major","description":"Restricts nested boolean operators (&amp;&amp;, || and ^) to a specified depth (default = 3).\n\n<p>\n</p>","debt":"30min"},{"summary":"Class Type(Generic) Parameter Name","type":"Code Smell","defaultSeverity":"Major","description":"Checks that class parameter names conform to the specified format\n\n<p>\nThe following code snippet illustrates this rule for format \"^[A-Z]$\":\n</p>\n<pre>\nclass Something&lt;type&gt; { // Non-compliant\n}\n\nclass Something&lt;T&gt; { // Compliant\n}\n</pre>\n\n<p>\n</p>","debt":"10min"},{"summary":"Unused Imports","type":"Code Smell","defaultSeverity":"Info","description":"Checks for unused import statements.\n\n<p>\n</p>","debt":"2min"},{"summary":"Nested Try Depth","type":"Code Smell","defaultSeverity":"Major","description":"Restricts nested try-catch-finally blocks to a specified depth (default = 1).\n\n<p>\n</p>","debt":"20min"},{"summary":"Hide Utility Class Constructor","type":"Code Smell","defaultSeverity":"Major","description":"Make sure that utility classes (classes that contain only static methods) do not have a public constructor.\n\n<p>\n</p>","debt":"30min"},{"summary":"Generic Whitespace","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Checks that the whitespace around the Generic tokens &lt; and &gt;  is correct to the typical convention. The convention is not configurable.</p>\n<p>\nFor example the following is legal:\n</p>\n<pre>\n  List&lt;Integer&gt; x = new ArrayList&lt;Integer&gt;();\n  List&lt;List&lt;Integer&gt;&gt; y = new ArrayList&lt;List&lt;Integer&gt;&gt;();\n</pre>\n<p>\nBut the following example is not:\n</p>\n<pre>\n  List &lt; Integer &gt; x = new ArrayList &lt; Integer &gt; ();\n  List &lt; List &lt; Integer &gt; &gt; y = new ArrayList &lt; List &lt; Integer &gt; &gt; ();\n</pre>","debt":"2min"},{"summary":"Illegal Type","type":"Code Smell","defaultSeverity":"Major","description":"Checks that particular class are never used as types in variable declarations, return values or parameters.","debt":"30min"},{"summary":"No Line Wrap","type":"Code Smell","defaultSeverity":"Major","description":"Checks that chosen statements are not line-wrapped. By default this Check restricts wrapping import and package statements, but it's possible to check any statement.","debt":"5min"},{"summary":"Whitespace Around","type":"Code Smell","defaultSeverity":"Minor","description":"Checks that a token is surrounded by whitespace.","debt":"2min"},{"summary":"Nested For Depth","type":"Code Smell","defaultSeverity":"Major","description":"Restricts nested for blocks to a specified depth.\n\n<p>\n</p>","debt":"20min"},{"summary":"Upper Ell","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n          Checks that long constants are defined with an upper ell. That\n          is <tt>' L'</tt> and not <tt>'l'</tt>. This is in accordance with the Java\n          Language Specification, <a class=\"externalLink\" href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.10.1\">\n          Section 3.10.1</a>.\n        </p>\n\n        \n<p>\n          The capital L looks a lot like <tt>1</tt>.\n        </p>","debt":"2min"},{"summary":"Nested If Depth","type":"Code Smell","defaultSeverity":"Major","description":"Restricts nested if-else blocks to a specified depth (default = 1).\n\n<p>\n</p>","debt":"20min"},{"summary":"Constant Name","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\nChecks that constant names conform to the specified format\n</p>\n\n<p>\n</p>","debt":"10min"},{"summary":"Unique Properties","type":"Code Smell","defaultSeverity":"Major","description":"<p>Checks properties file for a duplicated properties.</p>\n\n<p>Rationale: Multiple property keys usualy appears after merge or rebase of several branches. While there is no errors in runtime, there can be a confusion on having different values for the duplicated properties.</p>","debt":"10min"},{"summary":"Empty Block","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nChecks for empty blocks.\n</p>","debt":"10min"},{"summary":"Type Name","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nChecks that type names conform to the specified format\n</p>\n\n<p>\n</p>","debt":"10min"},{"summary":"Indentation","type":"Code Smell","defaultSeverity":"Minor","description":"Checks correct indentation of Java Code.\n\n<p>\n</p>"},{"summary":"Interface Is Type","type":"Code Smell","defaultSeverity":"Major","description":"Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types.  According to Bloch, an interface should describe a type. It is therefore inappropriate to define an interface that does not contain any methods but only constants. The Standard class javax.swing.SwingConstants is an example of a class that would be flagged by this check. The check can be configured to also disallow marker interfaces like java.io.Serializable, that do not contain methods or constants at all.\n\n<p>\n</p>","debt":"20min"},{"summary":"Regexp On Filename","type":"Code Smell","defaultSeverity":"Major","description":"Implementation of a check that looks for a file name and/or path match (or mis-match) against specified patterns. It can also be used to verify files match specific naming patterns not covered by other checks (Ex: properties, xml, etc.)."},{"summary":"Hidden Field","type":"Code Smell","defaultSeverity":"Major","description":"Checks that a local variable or a parameter does not shadow a field that is defined in the same class.\n\n<p>\n</p>","debt":"30min"},{"summary":"Javadoc Method","type":"Code Smell","defaultSeverity":"Major","description":"Checks the Javadoc of a method or constructor. By default, does not check for unused throws.\n    To allow documented java.lang.RuntimeExceptions that are not declared, set property allowUndeclaredRTE to true.\n    The scope to verify is specified using the Scope class and defaults to Scope.PRIVATE.\n    To verify another scope, set property scope to a different scope.\n\n    <br><br>Error messages about parameters and type parameters for which no param tags are present can be suppressed by defining property allowMissingParamTags.\n    Error messages about exceptions which are declared to be thrown, but for which no throws tag is present can be suppressed by defining property allowMissingThrowsTags.\n    Error messages about methods which return non-void but for which no return tag is present can be suppressed by defining property allowMissingReturnTag.\n\n    <br><br>Javadoc is not required on a method that is tagged with the @Override annotation.\n    However under Java 5 it is not possible to mark a method required for an interface (this was corrected under Java 6).\n    Hence Checkstyle supports using the convention of using a single {@inheritDoc} tag instead of all the other tags.\n\n    <br><br>Note that only inheritable items will allow the {@inheritDoc} tag to be used in place of comments.\n    Static methods at all visibilities, private non-static methods and constructors are not inheritable.\n\n<p>\n</p>","debt":"30min"},{"summary":"Unnecessary Parentheses","type":"Code Smell","defaultSeverity":"Minor","description":"Checks if unnecessary parentheses are used in a statement or expression.\n\n<p>\n</p>","debt":"1min"},{"summary":"Multiple Variable Declarations","type":"Code Smell","defaultSeverity":"Major","description":"Checks that each variable declaration is in its own statement and on its own line.\n\n<p>\n</p>","debt":"5min"},{"summary":"Suppress Warnings Holder","type":"Code Smell","defaultSeverity":"Minor","description":"Maintains a set of check suppressions from @SuppressWarnings annotations. It allows to prevent Checkstyle from reporting errors from parts of code that were annotated with @SuppressWarnings and using name of the check to be excluded. You can also define aliases for check names that need to be suppressed."},{"summary":"Final Local Variable","type":"Code Smell","defaultSeverity":"Minor","description":"Ensures that local variables that never get their values changed, must be declared final.","debt":"10min"},{"summary":"Method Type(Generic) Parameter Name","type":"Code Smell","defaultSeverity":"Major","description":"Checks that method type parameter names conform to the specified format\n\n<p>\nThe following code snippet illustrates this rule for format \"^[A-Z]$\":\n</p>\n<pre>\npublic &lt;type&gt; boolean containsAll(Collection&lt;type&gt; c) { // Non-compliant\n  return null;\n}\n\npublic &lt;T&gt; boolean containsAll(Collection&lt;T&gt; c) { // Compliant\n}\n</pre>\n\n<p>\n</p>","debt":"10min"},{"summary":"Inner Type Last","type":"Code Smell","defaultSeverity":"Info","description":"Check nested (internal) classes/interfaces are declared at the bottom of the class after all method and field declarations.","debt":"15min"},{"summary":"Anon Inner Length","type":"Code Smell","defaultSeverity":"Major","description":"Checks for long anonymous inner classes.\n\n<p>\n</p>","debt":"1h"},{"summary":"Header","type":"Code Smell","defaultSeverity":"Major","description":"<p>Checks that a source file begins with a specified header. Property headerFile specifies a file that contains the required header. Alternatively, the header specification can be set directly in the header property without the need for an external file.</p>\n<p>Property ignoreLines specifies the line numbers to ignore when matching lines in a header file. This property is very useful for supporting headers that contain copyright dates. For example, consider the following header:</p>\n<pre>\n    line 1: ////////////////////////////////////////////////////////////////////\n    line 2: // checkstyle:\n    line 3: // Checks Java source code for adherence to a set of rules.\n    line 4: // Copyright (C) 2002  Oliver Burn\n    line 5: ////////////////////////////////////////////////////////////////////\n</pre>\n<p>Since the year information will change over time, you can tell Checkstyle to ignore line 4 by setting property ignoreLines to 4.</p>","debt":"5min"},{"summary":"Regexp","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n          A check that makes sure that a specified pattern exists, exists less\n          than a set number of times, or does not exist in the file.\n        </p>\n        \n<p>\n          This check combines all the functionality provided by\n          <a href=\"http://checkstyle.sourceforge.net/config_header.html#RegexpHeader\">RegexpHeader</a>\n          except supplying the regular expression from a file.\n        </p>\n        \n<p>\n          It differs from them in that it works in multiline mode.\n          Its regular expression can span multiple lines and it checks this\n          against the whole file at once.\n          The others work in singleline mode.\n          Their single or multiple regular expressions can only span one line.\n          They check each of these against each line in the file in turn.\n        </p>\n        \n<p>\n          <b>Note:</b> Because of the different mode of operation there may be\n          some changes in the regular expressions used to achieve a particular end.\n        </p>\n        \n<p>In multiline mode...</p>\n        \n<ul>\n          \n<li> <code>^</code> means the beginning of a line, as opposed to beginning of the input.</li>\n          \n<li> For beginning of the input use <code>\\A</code>.</li>\n          \n<li> <code>$</code> means the end of a line, as opposed to the end of the input.</li>\n          \n<li> For end of input use <code>\\Z</code>.</li>\n          \n<li> Each line in the file is terminated with a line feed character.</li>\n        </ul>\n        \n<p>\n          <b>Note:</b> Not all regular expression engines are created equal. Some provide extra\n          functions that others do not and some elements of the syntax may vary.\n          This check makes use of the <a class=\"externalLink\" href=\"https://docs.oracle.com/javase/8/docs/api/java/util/regex/package-summary.html\">\n          java.util.regex package</a>; please check its documentation for\n          details of how to construct a regular expression to achieve a particular\n          goal.\n        </p>\n        \n<p>\n          <b>Note:</b> When entering a regular expression as a parameter in the\n          XML config file you must also take into account the XML rules. e.g. if\n          you want to match a &lt; symbol you need to enter &amp;lt;. The regular\n          expression should be entered on one line.\n        </p>"},{"summary":"No Whitespace After","type":"Code Smell","defaultSeverity":"Minor","description":"Checks that there is no whitespace after a token."},{"summary":"Class Data Abstraction Coupling","type":"Code Smell","defaultSeverity":"Major","description":"This metric measures the number of instantiations of other classes within the given class.","debt":"1h"},{"summary":"One Statement Per Line","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nChecks there is only one statement per line. The following line will be flagged as an error: <code>x = 1; y = 2; // Two statments on a single line.</code>\n</p>\n\n<p>\n</p>"},{"summary":"File Length","type":"Code Smell","defaultSeverity":"Major","description":"<p>Checks for long source files.</p>\n<p>Rationale: If a source file becomes very long it is hard to understand. Therefore long classes should usually be refactored into several individual classes that focus on a specific task.</p>","debt":"3h"},{"summary":"Illegal Import","type":"Code Smell","defaultSeverity":"Major","description":"Checks for imports from a set of illegal packages, like sun.*\n\n<p>\n</p>","debt":"1h"},{"summary":"Multiple String Literals","type":"Code Smell","defaultSeverity":"Major","description":"Checks for multiple occurrences of the same string literal within a single file. Code duplication makes maintenance more difficult, so it can be better to replace the multiple occurrences with a constant.\n\n<p>\n</p>","debt":"10min"},{"summary":"Left Curly","type":"Code Smell","defaultSeverity":"Minor","description":"Checks for the placement of left curly braces for code blocks. The policy to verify is specified using property option. Policies <code>eol</code> and <code>nlow</code> take into account property maxLineLength.\n\n<p>\n</p>","debt":"1min"},{"summary":"Parameter Number","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nChecks the number of parameters that a method or constructor has.\n</p>\n\n<p>\n</p>","debt":"1h"},{"summary":"Super Finalize","type":"Code Smell","defaultSeverity":"Major","description":"Checks that an overriding finalize() method invokes super.finalize().\n\n<p>\n</p>","debt":"5min"},{"summary":"One Top Level Class","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n          Checks that each top-level class, interface or\n          enum resides in a source file of its own.\n          Official description of a 'top-level' term:<a class=\"externalLink\" href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.6\">7.6. Top Level Type Declarations</a>.\n          If file doesn't contains public class, enum or interface,\n          top-level type is the first type in file.\n        </p>","debt":"10min"},{"summary":"Abbreviation As Word In Name","type":"Code Smell","defaultSeverity":"Major","description":"<div >\n<h2><a name=\"AbbreviationAsWordInName\"></a>AbbreviationAsWordInName</h2>\n      \n<div class=\"section\">\n<h3><a name=\"Description\"></a>Description</h3>\n        \n<p>\n         The Check validate abbreviations(consecutive capital letters)\n         length in identifier name, it also allows to enforce camel case naming. Please read more at\n         <a class=\"externalLink\" href=\"http://checkstyle.sourceforge.net/reports/google-java-style.html#s5.3-camel-case\">\n         Google Style Guide</a>\n         to get to know how to avoid long abbreviations in names.\n        </p>\n      </div>\n\n       \n<div class=\"section\">\n<h3><a name=\"Properties\"></a>Properties</h3>\n        \n<table class=\"bodyTable\" border=\"0\">\n          \n<tbody><tr class=\"a\">\n            \n<th>name</th>\n            \n<th>description</th>\n            \n<th>type</th>\n            \n<th>default value</th>\n          </tr>\n          \n<tr class=\"b\">\n            \n<td>allowedAbbreviationLength</td>\n            \n<td>indicates on the allowed amount of capital letters in targeted identifiers\n             (abbreviations in the classes, interfaces, variables and methods names, ... ).</td>\n            \n<td><a href=\"http://checkstyle.sourceforge.net/property_types.html#integer\">Integer</a></td>\n            \n<td>3</td>\n          </tr>\n          \n<tr class=\"a\">\n            \n<td>allowedAbbreviations</td>\n            \n<td>list of abbreviations that must be skipped for checking.\n            Abbreviations should be separated by comma, no spaces are allowed.</td>\n            \n<td><a href=\"http://checkstyle.sourceforge.net/property_types.html#stringSet\">String Set</a></td>\n            \n<td>null</td>\n          </tr>\n          \n<tr class=\"b\">\n            \n<td>ignoreFinal</td>\n            \n<td>allow to skip variables with final modifier.</td>\n            \n<td><a href=\"http://checkstyle.sourceforge.net/property_types.html#boolean\">Boolean</a></td>\n            \n<td>true</td>\n          </tr>\n          \n<tr class=\"a\">\n            \n<td>ignoreStatic</td>\n            \n<td>allow to skip variables with static modifier.</td>\n            \n<td><a href=\"http://checkstyle.sourceforge.net/property_types.html#boolean\">Boolean</a></td>\n            \n<td>true</td>\n          </tr>\n          \n<tr class=\"b\">\n            \n<td>ignoreOverriddenMethods</td>\n            \n<td>Allows to ignore methods tagged with @Override annotation\n            (that usually mean inherited name).</td>\n            \n<td><a href=\"http://checkstyle.sourceforge.net/property_types.html#boolean\">Boolean</a></td>\n            \n<td>true</td>\n          </tr>\n          \n<tr class=\"a\">\n            \n<td>tokens</td>\n            \n<td>tokens to check</td>\n            \n<td>\n              subset of tokens\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CLASS_DEF\">CLASS_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INTERFACE_DEF\">INTERFACE_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_DEF\">ENUM_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_DEF\">ANNOTATION_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_FIELD_DEF\">ANNOTATION_FIELD_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#PARAMETER_DEF\">PARAMETER_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#VARIABLE_DEF\">VARIABLE_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF\">METHOD_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_CONSTANT_DEF\">ENUM_CONSTANT_DEF</a>.\n            </td>\n            \n<td>\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CLASS_DEF\">CLASS_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INTERFACE_DEF\">INTERFACE_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_DEF\">ENUM_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_DEF\">ANNOTATION_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_FIELD_DEF\">ANNOTATION_FIELD_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#PARAMETER_DEF\">PARAMETER_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#VARIABLE_DEF\">VARIABLE_DEF</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF\">METHOD_DEF</a>.\n            </td>\n          </tr>\n        </tbody></table>\n      </div>\n\n      \n<div class=\"section\">\n<h3><a name=\"Examples\"></a>Examples</h3>\n       \n<p>\n         Default configuration\n         </p>\n<div class=\"source\">\n<pre>&lt;module name=\"AbbreviationAsWordInName\"/&gt;\n         </pre></div>\n       \n       \n<p>\n          To configure to check variables and classes identifiers,\n          do not ignore variables with static modifier and allow\n          no abbreviations (enforce camel case phrase) and\n          allow no abbreviations to use (camel case phrase) and allow XML and URL abbreviations.\n        </p>\n        \n<div class=\"source\">\n<pre>&lt;module name=\"AbbreviationAsWordInName\"&gt;\n    &lt;property name=\"tokens\" value=\"VARIABLE_DEF,CLASS_DEF\"/&gt;\n    &lt;property name=\"ignoreStatic\" value=\"false\"/&gt;\n    &lt;property name=\"allowedAbbreviationLength\" value=\"1\"/&gt;\n    &lt;property name=\"allowedAbbreviations\" value=\"XML,URL\"/&gt;\n&lt;/module&gt;\n        </pre></div>\n      </div>\n\n</div>","debt":"10min"},{"summary":"Trailing Comment","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  The check to ensure that requires that comments be the only thing on a line. For the case of // comments that means that the only thing that should precede it is whitespace. It\n  doesn't check comments if they do not end line, i.e. it accept the following: Thread.sleep( 10 &lt;some comment here&gt; ); Format property is intended to deal with the \"} //\n  while\" example.\n</p>\n<p>\n  Rationale: Steve McConnel in \"Code Complete\" suggests that endline comments are a bad practice. An end line comment would be one that is on the same line as actual code. For\n  example:\n</p>\n<pre>\n  <code>\n    a = b + c; // Some insightful comment\n    d = e / f; // Another comment for this line\n  </code>\n</pre>\n\n<p>\n  Quoting \"Code Complete\" for the justfication:\n</p>\n<ul>\n  <li>\"The comments have to be aligned so that they do not interfere with the visual structure of the code. If you don't align them neatly, they'll make your listing look like it's\n    been through a washing machine.\"\n  </li>\n  <li>\"Endline comments tend to be hard to format...It takes time to align them. Such time is not spent learning more about the code; it's dedicated solely to the tedious task of\n    pressing the spacebar or tab key.\"\n  </li>\n  <li>\"Endline comments are also hard to maintain. If the code on any line containing an endline comment grows, it bumps the comment farther out, and all the other endline comments\n    will have to bumped out to match. Styles that are hard to maintain aren't maintained....\"\n  </li>\n  <li>\"Endline comments also tend to be cryptic. The right side of the line doesn't offer much room and the desire to keep the comment on one line means the comment must be short.\n    Work\n    then goes into making the line as short as possible instead of as clear as possible. The comment usually ends up as cryptic as possible....\"\n  </li>\n  <li>\"A systemic problem with endline comments is that it's hard to write a meaningful comment for one line of code. Most endline comments just repeat the line of code, which\n    hurts\n    more than it helps.\"\n  </li>\n</ul>\n<p>\n  His comments on being hard to maintain when the size of the line changes are even more important in the age of automated refactorings.\n</p>\n\n<p>\n</p>","debt":"10min"},{"summary":"Inner Assignment","type":"Code Smell","defaultSeverity":"Major","description":"Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);.\n\n<p>\n</p>","debt":"10min"},{"summary":"Comments Indentation","type":"Code Smell","defaultSeverity":"Minor","description":"<div >\n<h2><a name=\"CommentsIndentation\"></a>CommentsIndentation</h2>\n      \n<div class=\"section\">\n<h3><a name=\"Description\"></a>Description</h3>\n        \n<p>\n          Controls the indentation between comments and surrounding code.\n          Comments are indented at the same level as the surrounding code.\n          Detailed info about such convention can be found <a class=\"externalLink\" href=\"http://checkstyle.sourceforge.net/reports/google-java-style.html#s4.8.6.1-block-comment-style\">\n          here</a>\n        </p>\n        \n<p>Please take a look at the following examples to understand how the check works:</p>\n\n        \n<p>Example #1: Block comments.</p>\n        \n<div class=\"source\">\n<pre>1   /*\n2    * it is Ok\n3    */\n4   boolean bool = true;\n5\n6     /* violation\n7      * (block comment should have the same indentation level as line 9)\n8      */\n9   double d = 3.14;\n        </pre></div>\n        \n<p>Example #2: Comment is placed at the end of the block and has previous statement.</p>\n        \n<div class=\"source\">\n<pre>1   public void foo1() {\n2       foo2();\n3       // it is OK\n4   }\n5\n6   public void foo2() {\n7       foo3();\n8          // violation (comment should have the same indentation level as line 7)\n9   }\n        </pre></div>\n        \n<p>Example #3: Comment is used as a single line border to separate groups of methods.</p>\n        \n<div class=\"source\">\n<pre>1   /////////////////////////////// it is OK\n2\n3   public void foo7() {\n4      int a = 0;\n5   }\n6\n7     /////////////////////////////// violation (should have the same indentation level as line 9)\n8\n9   public void foo8() {}\n        </pre></div>\n        \n<p>Example #4: Comment has destributed previous statement.</p>\n        \n<div class=\"source\">\n<pre>1   public void foo11() {\n2       CheckUtils\n3           .getFirstNode(new DetailAST())\n4           .getFirstChild()\n5           .getNextSibling();\n6       // it is OK\n7   }\n8\n9   public void foo12() {\n10       CheckUtils\n11          .getFirstNode(new DetailAST())\n12          .getFirstChild()\n13          .getNextSibling();\n14                // violation (should have the same indentation level as line 10)\n15  }\n        </pre></div>\n        \n<p>\n          Example #5: Single line block comment is placed within an empty code block.\n          Note, if comment is placed at the end of the empty code block, we have Checkstyle's\n          limitations to clearly detect user intention of explanation target - above or below. The\n          only case we can assume as a violation is when a single line comment within the empty\n          code block has indentation level that is lower than the indentation level of the closing\n          right curly brace.\n        </p>\n        \n<div class=\"source\">\n<pre>1   public void foo46() {\n2       // comment\n3       // block\n4       // it is OK (we cannot clearly detect user intention of explanation target)\n5   }\n6\n7   public void foo46() {\n8  // comment\n9  // block\n10 // violation (comment hould have the same indentation level as line 11)\n11  }\n        </pre></div>\n        \n<p>Example #6: 'fallthrough' comments and similar.</p>\n        \n<div class=\"source\">\n<pre>0   switch(a) {\n1     case \"1\":\n2        int k = 7;\n3        // it is OK\n4     case \"2\":\n5        int k = 7;\n6     // it is OK\n7     case \"3\":\n8        if (true) {}\n9           // violation (should have the same indentation level as line 8 or 10)\n10    case \"4\":\n11    case \"5\": {\n12        int a;\n13    }\n14    // fall through (it is OK)\n15    case \"12\": {\n16        int a;\n17    }\n18    default:\n19        // it is OK\n20  }\n        </pre></div>\n        \n<p>Example #7: Comment is placed within a destributed statement.</p>\n        \n<div class=\"source\">\n<pre>1   String breaks = \"J\"\n2   // violation (comment should have the same indentation level as line 3)\n3       + \"A\"\n4       // it is OK\n5       + \"V\"\n6       + \"A\"\n7   // it is OK\n8   ;\n        </pre></div>\n        \n<p>\n          Examnple #8: Comment is placed within an empty case block.\n          Note, if comment is placed at the end of the empty case block, we have Checkstyle's\n          limitations to clearly detect user intention of explanation target - above or below. The\n          only case we can assume as a violation is when a single line comment within the empty case\n          block has indentation level that is lower than the indentation level of the next case\n          token.\n        </p>\n        \n<div class=\"source\">\n<pre>1   case 4:\n2     // it is OK\n3   case 5:\n4  // violation (should have the same indentation level as line 3 or 5)\n5   case 6:\n        </pre></div>\n        \n<p>Example #9: Single line block comment has previous and next statement.</p>\n        \n<div class=\"source\">\n<pre>1   String s1 = \"Clean code!\";\n2      s.toString().toString().toString();\n3   // single line\n4   // block\n5   // comment (it is OK)\n6   int a = 5;\n7\n8   String s2 = \"Code complete!\";\n9    s.toString().toString().toString();\n10            // violation (should have the same indentation level as line 11)\n11       // violation (should have the same indentation level as line 12)\n12     // violation (should have the same indentation level as line 13)\n13  int b = 18;\n        </pre></div>\n        \n<p>Example #10: Comment within the block tries to describe the next code block.</p>\n        \n<div class=\"source\">\n<pre>1   public void foo42() {\n2      int a = 5;\n3      if (a == 5) {\n4         int b;\n5         // it is OK\n6      } else if (a ==6) { ... }\n7   }\n8\n9   public void foo43() {\n10     try {\n11        int a;\n12     // Why do we catch exception here? - violation (should have the same indenatation as line 11)\n13     } catch (Exception e) { ... }\n14  }\n        </pre></div>\n      </div>\n      \n<div >\n<h3><a name=\"Properties\"></a>Properties</h3>\n        \n<table class=\"bodyTable\" border=\"0\">\n          \n<tbody><tr class=\"a\">\n            \n<th>name</th>\n            \n<th>description</th>\n            \n<th>type</th>\n            \n<th>default value</th>\n          </tr>\n            \n<tr class=\"b\">\n            \n<td>tokens</td>\n            \n<td>tokens to check</td>\n            \n<td>\n              subset of tokens\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#SINGLE_LINE_COMMENT\">SINGLE_LINE_COMMENT</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#BLOCK_COMMENT_BEGIN\">BLOCK_COMMENT_BEGIN</a>.\n            </td>\n            \n<td>\n              <a href=\"http://checkstyle.sourceforge.net/pidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#SINGLE_LINE_COMMENT\">SINGLE_LINE_COMMENT</a>,\n              <a href=\"http://checkstyle.sourceforge.net/apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#BLOCK_COMMENT_BEGIN\">BLOCK_COMMENT_BEGIN</a>.\n            </td>\n          </tr>\n        </tbody></table>\n      </div>"},{"summary":"Abstract Class Name","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nChecks that abstract class names conform to the specified format\n</p>\n\n<p>\n</p>","debt":"10min"},{"summary":"Missing Override","type":"Code Smell","defaultSeverity":"Major","description":"Verifies that the java.lang.Override annotation is present when the {@inheritDoc} javadoc tag is present.","debt":"10min"},{"summary":"Final Parameters","type":"Code Smell","defaultSeverity":"Minor","description":"Check that method/constructor/catch/foreach parameters are final.\n\n<p>\n</p>","debt":"5min"},{"summary":"Illegal Token Text","type":"Code Smell","defaultSeverity":"Major","description":"Checks for illegal token text.","debt":"30min"},{"summary":"Regexp Header","type":"Code Smell","defaultSeverity":"Major","description":"<p>Checks the header of a source file against a header that contains a regular expression for each line of the source header.</p>\n<p>Rationale: In some projects checking against a fixed header is not sufficient, e.g. the header might require a copyright line where the year information is not static. For example, consider the following header:</p>\n<pre>\n    line  1: ^/{71}$\n    line  2: ^// checkstyle:$\n    line  3: ^// Checks Java source code for adherence to a set of rules\\.$\n    line  4: ^// Copyright \\(C\\) \\d\\d\\d\\d  Oliver Burn$\n    line  5: ^// Last modification by \\$Author.*\\$$\n    line  6: ^/{71}$\n    line  7:\n    line  8: ^package\n    line  9:\n    line 10: ^import\n    line 11:\n    line 12: ^/\\*\\*\n    line 13: ^ \\*([^/]|$)\n    line 14: ^ \\*/\n</pre>\n<p>Lines 1 and 6 demonstrate a more compact notation for 71 '/' characters. Line 4 enforces that the copyright notice includes a four digit year. Line 5 is an example how to enforce revision control keywords in a file header. Lines 12-14 is a template for javadoc (line 13 is so complicated to remove conflict with and of javadoc comment).</p>\n<p>Different programming languages have different comment syntax rules, but all of them start a comment with a non-word character. Hence you can often use the non-word character class to abstract away the concrete comment syntax and allow checking the header for different languages with a single header definition. For example, consider the following header specification (note that this is not the full Apache license header):</p>\n<pre>\n    line 1: ^#!\n    line 2: ^&lt;\\?xml.*&gt;$\n    line 3: ^\\W*$\n    line 4: ^\\W*Copyright 2006 The Apache Software Foundation or its licensors, as applicable\\.$\n    line 5: ^\\W*Licensed under the Apache License, Version 2\\.0 \\(the \"License\"\\);$\n    line 6: ^\\W*$\n</pre>\n<p>Lines 1 and 2 leave room for technical header lines, e.g. the \"#!/bin/sh\" line in Unix shell scripts, or the xml file header of XML files. Set the multiline property to \"1, 2\" so these lines can be ignored for file types where they do no apply. Lines 3 through 6 define the actual header content. Note how lines 2, 4 and 5 use escapes for characters that have special regexp semantics.</p>\n<p>Note: ignoreLines property has been removed from this check to simplify it. To make some line optional use \"^.*$\" regexp for this line. </p>\n\n<p>\n</p>"},{"summary":"Empty Line Separator","type":"Code Smell","defaultSeverity":"Major","description":"Checks for empty line separators after header, package, all import declarations, fields, constructors, methods, nested classes, static initializers and instance initializers.","debt":"2min"},{"summary":"Return Count","type":"Code Smell","defaultSeverity":"Major","description":"Restricts return statements to a specified count (default = 2).\n\n<p>\n</p>","debt":"20min"},{"summary":"Throws Count","type":"Code Smell","defaultSeverity":"Major","description":"Restricts throws statements to a specified count (default = 1).\n\n<p>\n</p>","debt":"1h"},{"summary":"Require This","type":"Code Smell","defaultSeverity":"Major","description":"Checks that code doesn't rely on the this default.","debt":"5min"},{"summary":"Executable Statement Count","type":"Code Smell","defaultSeverity":"Major","description":"Restricts the number of executable statements to a specified limit (default = 30).","debt":"1h"},{"summary":"Avoid Inline Conditionals","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Detects inline conditionals.</p>\n\n<p>\n</p>","debt":"15min"},{"summary":"Simplify Boolean Return","type":"Code Smell","defaultSeverity":"Major","description":"Checks for overly complicated boolean return statements.\n\n<p>\n</p>","debt":"10min"},{"summary":"Method Param Pad","type":"Code Smell","defaultSeverity":"Major","description":"Checks the padding between the identifier of a method definition, constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list.","debt":"1min"},{"summary":"Covariant Equals","type":"Code Smell","defaultSeverity":"Critical","description":"Checks that if a class defines a covariant method equals, then it defines method equals(java.lang.Object).\n\n<p>\n</p>","debt":"10min"},{"summary":"Avoid Star Import","type":"Code Smell","defaultSeverity":"Minor","description":"Check that finds import statements that use the * notation.\n\n<p>\n</p>"},{"summary":"Static Variable Name","type":"Code Smell","defaultSeverity":"Major","description":"Checks that static, non-final fields conform to the specified format\n\n<p>\n</p>","debt":"10min"},{"summary":"Mutable Exception","type":"Code Smell","defaultSeverity":"Major","description":"Ensures that exceptions (defined as any class name conforming to some regular expression) are immutable.\n\n<p>\n</p>","debt":"30min"},{"summary":"No Finalizer","type":"Code Smell","defaultSeverity":"Major","description":"<p>Verifies there are no finalize() methods defined in a class.</p>\n\n<p>\n</p>","debt":"20min"},{"summary":"Paren Pad","type":"Code Smell","defaultSeverity":"Minor","description":"Checks the padding of parentheses; that is whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden, with the exception that it does not check for padding of the right parenthesis at an empty for iterator.","debt":"2min"},{"summary":"Member name","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nChecks that name of non-static fields conform to the specified format\n</p>\n\n<p>\n</p>","debt":"20min"},{"summary":"Final Class","type":"Code Smell","defaultSeverity":"Major","description":"Checks that class which has only private constructors is declared as final.\n\n<p>\n</p>","debt":"10min"},{"summary":"Parameter Name","type":"Code Smell","defaultSeverity":"Major","description":"Checks that parameter names conform to the specified format\nFor more details please refere to <a href=\"http://checkstyle.sourceforge.net/config_naming.html#ParameterName\">online documentation</a>\n<p>\n</p>","debt":"10min"},{"summary":"Import Control","type":"Code Smell","defaultSeverity":"Blocker","description":"<div >\n<div class=\"section\">\n<h2><a name=\"ImportControl\"></a>ImportControl<span class=\"anchor\"><a href=\"http://checkstyle.sourceforge.net/config_imports.html#ImportControl\"><img src=\"images/anchor.png\"></a></span></h2>\n\n<div class=\"section\">\n<h3><a name=\"Description\"></a>Description</h3>\n\n<p>\n          Controls what can be imported in each package. Useful for\n          ensuring that application layering rules are not violated,\n          especially on large projects.\n        </p>\n\n\n<p>\n          The DTD for a import control XML document is at <a class=\"externalLink\" href=\"http://checkstyle.sourceforge.net/dtds/import_control_1_2.dtd\">\n          http://checkstyle.sourceforge.net/dtds/import_control_1_2.dtd</a>. It\n          contains documentation on each of the elements and attributes.\n        </p>\n\n\n<p>\n          The check validates a XML document when it loads the document.\n          To validate against the above DTD, include the following\n          document type declaration in your XML document:\n        </p>\n\n\n<div>\n<pre>&lt;!DOCTYPE import-control PUBLIC\n    \"-//Puppy Crawl//DTD Import Control 1.2//EN\"\n    \"http://checkstyle.sourceforge.net/dtds/import_control_1_2.dtd\"&gt;\n        </pre></div>\n      </div>\n\n\n<div class=\"section\">\n<h3><a name=\"Properties\"></a>Properties</h3>\n\n<table class=\"bodyTable\" border=\"0\">\n\n<tbody><tr class=\"a\">\n\n<th>name</th>\n\n<th>description</th>\n\n<th>type</th>\n\n<th>default value</th>\n          </tr>\n\n<tr class=\"b\">\n\n<td>file</td>\n\n<td>\n              The location of the file containing the import control configuration.\n              It can be a regular file, URL or resource path. It will try loading\n              the path as a URL first, then as a file, and finally as a resource.\n            </td>\n\n<td><a href=\"property_types.html#uri\">URI</a></td>\n\n<td><tt>null</tt></td>\n          </tr>\n\n<tr class=\"a\">\n\n<td>url</td>\n\n<td>\n              URL of the file containing the import control configuration.\n              This property is deprecated. Please use the file property to load configurations\n              from URLs.\n            </td>\n\n<td><a href=\"property_types.html#uri\">URI</a></td>\n\n<td><tt>null</tt></td>\n          </tr>\n\n<tr class=\"b\">\n\n<td>path</td>\n\n<td>\n              Regular expression of file paths to which this check should apply. Files that\n              don't match the pattern will not be checked. The pattern will be matched against\n              the full absolute file path.\n            </td>\n\n<td><a href=\"property_types.html#regexp\">Regular Expression</a></td>\n\n<td><tt>\".*\"</tt></td>\n          </tr>\n        </tbody></table>\n      </div>\n\n\n<div class=\"section\">\n<h3><a name=\"Examples\"></a>Examples</h3>\n\n<p>\n          To configure the check using an import control file called\n          \"config/import-control.xml\", then have the following:\n        </p>\n\n\n<div class=\"source\">\n<pre>&lt;module name=\"ImportControl\"&gt;\n    &lt;property name=\"file\" value=\"config/import-control.xml\"/&gt;\n&lt;/module&gt;\n        </pre></div>\n\n\n<p>\n          To configure the check to only check the \"src/main\" directory\n          using an import control file called \"config/import-control.xml\",\n          then have the following:\n        </p>\n\n\n<div class=\"source\">\n<pre>&lt;module name=\"ImportControl\"&gt;\n    &lt;property name=\"file\" value=\"config/import-control.xml\"/&gt;\n    &lt;property name=\"path\" value=\"^.*[\\\\/]src[\\\\/]main[\\\\/].*$\"/&gt;\n&lt;/module&gt;\n        </pre></div>\n\n\n<p>\n            In the example below access to package\n            <tt>com.puppycrawl.tools.checkstyle.checks</tt> and its subpackages is\n            allowed from anywhere in <tt>com.puppycrawl.tools.checkstyle</tt> except\n            from the <tt>filters</tt> subpackage where access to all\n            <tt>check</tt>'s subpackages is disallowed. Two <tt>java.lang.ref</tt>\n            classes are allowed by virtue of one regular expression instead of listing\n            them in two separate allow rules (as it is done with the <tt>Files</tt>\n            and <tt>ClassPath</tt> classes).\n        </p>\n\n\n<div class=\"source\">\n<pre>&lt;import-control pkg=\"com.puppycrawl.tools.checkstyle\"&gt;\n    &lt;allow pkg=\"com.puppycrawl.tools.checkstyle.api\"/&gt;\n    &lt;allow pkg=\"com.puppycrawl.tools.checkstyle.checks\"/&gt;\n    &lt;allow class=\"com.google.common.io.Files\"/&gt;\n    &lt;allow class=\"com.google.common.reflect.ClassPath\"/&gt;\n    &lt;subpackage name=\"filters\"&gt;\n        &lt;allow class=\"java\\.lang\\.ref\\.(Weak|Soft)Reference\"\n            regex=\"true\"/&gt;\n        &lt;disallow pkg=\"com\\.puppycrawl\\.tools\\.checkstyle\\.checks\\.[^.]+\"\n            regex=\"true\"/&gt;\n        &lt;disallow pkg=\"com.puppycrawl.tools.checkstyle.ant\"/&gt;\n        &lt;disallow pkg=\"com.puppycrawl.tools.checkstyle.doclets\"/&gt;\n        &lt;disallow pkg=\"com.puppycrawl.tools.checkstyle.gui\"/&gt;\n    &lt;/subpackage&gt;\n&lt;/import-control&gt;\n        </pre></div>\n\n\n<p>\n          In the next example regular expressions are used to enforce a layering rule: In all\n          <tt>dao</tt> packages it is not allowed to access UI layer code (<tt>ui</tt>,\n          <tt>awt</tt>, and <tt>swing</tt>). On the other hand it is not allowed to directly\n          access <tt>dao</tt> and <tt>service</tt> layer from <tt>ui</tt> packages. The\n          root package is also a regular expression that is used to handle old and new domain name\n          with the same rules.\n        </p>\n\n\n<div class=\"source\">\n<pre>&lt;import-control pkg=\"(de.olddomain|de.newdomain)\\..*\" regex=\"true\"&gt;\n    &lt;subpackage pkg=\"[^.]+\\.dao\" regex=\"true\"&gt;\n        &lt;disallow pkg=\".*\\.ui\" regex=\"true\"/&gt;\n        &lt;disallow pkg=\".*\\.(awt|swing).\\.*\" regex=\"true\"/&gt;\n    &lt;/subpackage&gt;\n    &lt;subpackage pkg=\"[^.]+\\.ui\" regex=\"true\"&gt;\n        &lt;disallow pkg=\".*\\.(dao|service)\" regex=\"true\"/&gt;\n    &lt;/subpackage&gt;\n&lt;/import-control&gt;\n        </pre></div>\n\n\n<p>\n          For a real-life import control file look at the file called <a class=\"externalLink\" href=\"https://github.com/checkstyle/checkstyle/blob/master/config/import-control.xml\">\n          import-control.xml</a>\n          which is part of the Checkstyle distribution.\n        </p>\n\n\n<div class=\"section\">\n<h4 id=\"regex-notes\">Notes on regular expressions</h4>\n\n<p>\n          Regular expressions in import rules have to match either Java packages or\n          classes. The language rules for packages and class names can be described by the\n          following complicated regular expression that takes into account that Java names may\n          contain any unicode letter, numbers, underscores, and dollar signs (see section 3.8\n          in the <a class=\"externalLink\" href=\"http://docs.oracle.com/javase/specs/\">Java specs</a>):\n        </p>\n\n<ul>\n\n<li>\n            <tt>[\\p{Letter}_$][\\p{Letter}\\p{Number}_$]*</tt> or short\n            <tt>[\\p{L}_$][\\p{L}\\p{N}_$]*</tt> for a class name or package component.\n          </li>\n\n<li>\n            <tt>([\\p{L}_$][\\p{L}\\p{N}_$]*\\.)*[\\p{L}_$][\\p{L}\\p{N}_$]*</tt>\n            for a fully qualified name.\n          </li>\n        </ul>\n\n<p>\n          But it is not necessary to use these complicated expressions since no validation is\n          required. Differentiating between package separator '.' and others is\n          sufficient. Unfortunately '.' has a special meaning in regular expressions so one has\n          to write <tt>\\.</tt> to match an actual dot.\n        </p>\n\n<ul>\n\n<li>\n            Use <tt>[^.]+</tt> (one or more \"not a dot\" characters) for a class name or\n            package component.\n          </li>\n\n<li>\n            Use <tt>com\\.google\\.common\\.[^.]+</tt> to match any subpackage of\n            <tt>com.google.common</tt>.\n          </li>\n\n<li>\n            When matching concrete packages like <tt>com.google.common</tt> omitting the\n            backslash before the dots may improve readability and may be just exact enough:\n            <tt>com.google.common\\.[^.]+</tt> matches not only subpackages of\n            <tt>com.google.common</tt> but e.g. also of <tt>com.googleecommon</tt> but\n            you may not care for that.\n          </li>\n\n<li>\n            Do not use <tt>.*</tt> unless you really do not care for what is matched. Often\n            you want to match only a certain package level instead.\n          </li>\n        </ul>\n      </div></div>\n\n\n<div class=\"section\">\n<h3><a name=\"Example_of_Usage\"></a>Example of Usage</h3>\n\n<ul>\n\n<li>\n            <a class=\"externalLink\" href=\"https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+ImportControl\">\n            Checkstyle Style</a>\n          </li>\n        </ul>\n      </div>\n\n\n<div class=\"section\">\n<h3><a name=\"Error_Messages\"></a>Error Messages</h3>\n\n<ul>\n\n<li>\n            <a class=\"externalLink\" href=\"https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fimports+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22import.control.disallowed%22\">\n            import.control.disallowed</a>\n          </li>\n\n<li>\n            <a class=\"externalLink\" href=\"https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fimports+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22import.control.missing.file%22\">\n            import.control.missing.file</a>\n          </li>\n\n<li>\n            <a class=\"externalLink\" href=\"https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fimports+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22import.control.unknown.pkg%22\">\n            import.control.unknown.pkg</a>\n          </li>\n        </ul>\n\n<p>\n          All messages can be customized if the default message doesn't suite you.\n          Please <a href=\"config.html#Custom_messages\">see the documentation</a> to learn how to.\n        </p>\n      </div>\n\n\n\n</div>\n</div>"},{"summary":"Magic Number","type":"Code Smell","defaultSeverity":"Minor","description":"Checks for magic numbers.\n\n<p>\n</p>","debt":"5min"},{"summary":"Missing Switch Default","type":"Code Smell","defaultSeverity":"Major","description":"Checks that switch statement has default clause.\n\n<p>\n</p>","debt":"30min"},{"summary":"Suppress Warnings","type":"Code Smell","defaultSeverity":"Major","description":"<p> This check allows you to specify what warnings that SuppressWarnings is not allowed to suppress. You can also specify a list of TokenTypes that the configured warning(s) cannot be suppressed on.</p>\n<p>Limitations: This check does not consider conditionals inside the SuppressWarnings annotation.\nFor example: @SupressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\") According to the above example, the \"unused\" warning is being suppressed not the \"unchecked\" or \"foo\" warnings. All of these warnings will be considered and matched against regardless of what the conditional evaluates to.</p>","debt":"30min"},{"summary":"NPath Complexity","type":"Code Smell","defaultSeverity":"Major","description":"Checks the npath complexity of a method against a specified limit (default = 200). The NPATH metric computes the number of possible execution paths through a function. It takes into account the nesting of conditional statements and multi-part boolean expressions (e.g., A &amp;&amp; B, C || D, etc.).","debt":"1h"},{"summary":"Variable Declaration Usage Distance","type":"Code Smell","defaultSeverity":"Major","description":"Checks the distance between declaration of variable and its first usage.","debt":"10min"},{"summary":"Custom Import Order","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n          Checks that the groups of import declarations appear in the order specified\n          by the user. If there is an import but its group is not specified in the\n          configuration such an import should be placed at the end of the import list.\n        </p>\n\n        <p>\n          The rule consists of:\n        </p>\n        <p>\n         1) STATIC group. This group sets the ordering of static imports.\n        </p>\n        <p>\n          2) SAME_PACKAGE(n) group. This group sets the ordering of the same package imports.\n          n' - a number of the first package domains. For example:\n        </p>\n        <pre>\n package java.util.concurrent;\n\n import java.util.regex.Pattern;\n import java.util.List;\n import java.util.StringTokenizer;\n import java.util.regex.Pattern;\n import java.util.*;\n import java.util.concurrent.AbstractExecutorService;\n import java.util.concurrent.*;\n        </pre>\n        <p>\n          And we have such configuration: SAME_PACKAGE (3).\n          Same package imports are java.util.*, java.util.concurrent.*,\n          java.util.concurrent.AbstractExecutorService,\n          java.util.List and java.util.StringTokenizer\n        </p>\n        <p>\n          3) THIRD_PARTY_PACKAGE group. This group sets ordering of third party imports.\n          Third party imports are all imports except STATIC,\n          SAME_PACKAGE(n) and STANDARD_JAVA_PACKAGE.\n        </p>\n        <p>\n          4) STANDARD_JAVA_PACKAGE group. This group sets ordering of standard java (java|javax) imports.\n        </p>\n        <p>\n          5) SPECIAL_IMPORTS group. This group may contains some imports\n          that have particular meaning for the user.\n        </p>\n\n        <p>\n          Use the separator '###' between rules.\n        </p>","debt":"10min"},{"summary":"Newline At End Of File","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\nChecks that there is a newline at the end of each file. Any source files and text files in general should end with a newline character, especially when using SCM systems such as CVS. CVS will even print a warning when it encounters a file that doesn't end with a newline.\n</p>\n\n<p>\n</p>","debt":"2min"},{"summary":"Missing Constructor","type":"Code Smell","defaultSeverity":"Major","description":"Checks that classes (except abstract one) define a constructor and don't rely on the default one.","debt":"30min"},{"summary":"Design For Extension","type":"Code Smell","defaultSeverity":"Minor","description":"<h2>DesignForExtension</h2>\n      \n<div>\n<h3><a name=\"Description\"></a>Description</h3>\n        \n<p>\n          The check finds classes that are designed for extension (subclass creation).\n        </p>\n        \n<p>\n          Nothing wrong could be with founded classes.\n          This check makes sense only for library project (not an application projects)\n          which care of ideal OOP-design to make sure that class works in all cases even misusage.\n          Even in library projects this check most likely will find classes that are designed\n          for extension by somebody. User needs to use suppressions extensively to got a benefit from\n          this check, and keep in suppressions all confirmed/known classes that are deigned for\n          inheritance intentionally to let the check catch only new classes, and bring this to\n          team/user attention.\n        </p>\n        \n<p>\n         ATTENTION: Only user can decide whether a class is designed for extension or not.\n         The check just shows all classes which are possibly designed for extension.\n         If smth inappropriate is found please use suppression.\n        </p>\n        \n<p>\n         ATTENTION: If the method which can be overridden in a subclass has a javadoc comment\n         (a good practise is to explain its self-use of overridable methods) the check will not\n         rise a violation. The violation can also be skipped if the method which can be overridden\n         in a subclass has one or more annotations that are specified in ignoredAnnotations\n         option. Note, that by default @Override annotation is not included in the\n         ignoredAnnotations set as in a subclass the method which has the annotation can also be\n         overridden in its subclass.\n        </p>\n         \n<p>\n          Problem is described at \"Effective Java, 2nd Edition by Josh Bloch\" book, chapter \"Item 17: Design and document for inheritance or else prohibit it\".\n        </p>\n        \n<p>\n          Some quotes from book:\n        </p>\n        \n<blockquote>The class must document its self-use of overridable methods.\nBy convention, a method that invokes overridable methods contains a description\nof these invocations at the end of its documentation comment. The description\nbegins with the phrase “This implementation.”\n        </blockquote>\n        \n<blockquote>The best solution to this problem is to prohibit subclassing in classes that\nare not designed and documented to be safely subclassed.\n        </blockquote>\n        \n<blockquote>If a concrete class does not implement a standard interface, then you may\ninconvenience some programmers by prohibiting inheritance. If you feel that you\nmust allow inheritance from such a class, one reasonable approach is to ensure\nthat the class never invokes any of its overridable methods and to document this\nfact. In other words, eliminate the class’s self-use of overridable methods entirely.\nIn doing so, you’ll create a class that is reasonably safe to subclass. Overriding a\nmethod will never affect the behavior of any other method.\n        </blockquote>\n        \n<p>\n          The check finds classes that have overridable methods (public or protected methods\n          that are non-static, not-final, non-abstract) and have non-empty implementation.\n        </p>\n\n        \n<p>\n          Rationale: This library design style protects superclasses against\n          being broken by subclasses. The downside is that subclasses are\n          limited in their flexibility, in particular they cannot prevent\n          execution of code in the superclass, but that also means that\n          subclasses cannot corrupt the state of the superclass by forgetting\n          to call the superclass's method.\n        </p>\n        \n<p>\n          More specifically,\n          it enforces a programming style where superclasses provide empty\n          \"hooks\" that can be implemented by subclasses.\n        </p>\n        \n<p>\n          Example of code that cause violation as it is designed for extension:\n        </p>\n        \n<div class=\"source\">\n<pre>public abstract class Plant {\n    private String roots;\n    private String trunk;\n\n    protected void validate() {\n      if (roots == null) throw new IllegalArgumentException(\"No roots!\");\n      if (trunk == null) throw new IllegalArgumentException(\"No trunk!\");\n    }\n\n    public abstract void grow();\n}\n\npublic class Tree extends Plant {\n    private List leaves;\n\n    @Overrides\n    protected void validate() {\n      super.validate();\n      if (leaves == null) throw new IllegalArgumentException(\"No leaves!\");\n    }\n\n    public void grow() {\n      validate();\n    }\n}\n        </pre></div>\n        \n<p>\n          Example of code without violation:\n        </p>\n        \n<div class=\"source\">\n<pre>public abstract class Plant {\n    private String roots;\n    private String trunk;\n\n    private void validate() {\n        if (roots == null) throw new IllegalArgumentException(\"No roots!\");\n        if (trunk == null) throw new IllegalArgumentException(\"No trunk!\");\n        validateEx();\n    }\n\n    protected void validateEx() { }\n\n    public abstract void grow();\n}\n        </pre></div>\n      </div>\n\n      \n<div>\n<h3><a name=\"Properties\"></a>Properties</h3>\n            \n<table class=\"bodyTable\" border=\"0\">\n                \n<tbody><tr class=\"a\">\n                    \n<th>name</th>\n                    \n<th>description</th>\n                    \n<th>type</th>\n                    \n<th>default value</th>\n                </tr>\n                \n<tr class=\"b\">\n                    \n<td>ignoredAnnotations</td>\n                    \n<td>\n                        Annotations which allow the check to skip the method from validation.\n                    </td>\n                    \n<td>String Set</td>\n                    \n<td><tt>Test, Before, After, BeforeClass, AfterClass</tt></td>\n                </tr>\n            </tbody></table>\n        </div>\n\n      \n<div class=\"section\">\n<h3><a name=\"Examples\"></a>Examples</h3>\n        \n<p>\n          To configure the check:\n        </p>\n\n        \n<div class=\"source\">\n<pre>&lt;module name=\"DesignForExtension\"/&gt;\n        </pre></div>\n\n        \n<p>\n          To configure the check to allow methods which have @Override and @Test annotations to be\n          designed for extension.\n        </p>\n\n        \n<div class=\"source\">\n<pre>&lt;module name=\"DesignForExtension\"&gt;\n  &lt;property name=\"ignoredAnnotations\" value=\"Override, Test\"/&gt;\n&lt;/module&gt;\n        </pre></div>\n\n        \n<div class=\"source\">\n<pre>public class A extends B {\n  @Override\n  public int foo() {\n    return 2;\n  }\n\n  public int foo2() {return 8;} // violation\n}\n\npublic class B {\n  /**\n   * This implementation ...\n     @return some int value.\n   */\n  public int foo() {\n    return 1;\n  }\n\n  public int foo3() {return 3;} // violation\n}\n\npublic class FooTest {\n  @Test\n  public void testFoo() {\n     final B b = new A();\n     assertEquals(2, b.foo());\n  }\n\n  public int foo4() {return 4;} // violation\n}\n        </pre></div>\n      </div>","debt":"1h"},{"summary":"Default Comes Last","type":"Code Smell","defaultSeverity":"Major","description":"Check that the default is after all the cases in a switch statement.\n\n<p>\n</p>","debt":"10min"},{"summary":"Outer Type Filename","type":"Code Smell","defaultSeverity":"Major","description":"Checks that the outer type name and the file name match. For example, the class Foo must be in a file named Foo.java.","debt":"10min"},{"summary":"Array Type Style","type":"Code Smell","defaultSeverity":"Minor","description":"Checks the style of array type definitions. Some like Java-style: public static void main(String[] args) and some like C-style: public static void main(String args[])\n\n<p>\n</p>","debt":"5min"},{"summary":"Empty catch block","type":"Code Smell","defaultSeverity":"Major","description":"Checks for empty catch blocks. There are two options to make validation more precise (by default Check allows empty catch block with any comment inside)","debt":"10min"},{"summary":"Interface Type Parameter Name","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nChecks that interface names conform to the specified format\n</p>","debt":"10min"},{"summary":"String Literal Equality","type":"Code Smell","defaultSeverity":"Critical","description":"Checks that string literals are not used with == or !=.\n\n<p>\n</p>","debt":"5min"},{"summary":"Import Order","type":"Code Smell","defaultSeverity":"Minor","description":"Checks the ordering/grouping of imports. Features are:<ul>\n    <li>groups imports: ensures that groups of imports come in a specific order (e.g., java. comes first, javax. comes second, then everything else)</li>\n    <li>adds a separation between groups : ensures that a blank line sit between each group</li>\n    <li>sorts imports inside each group: ensures that imports within each group are in lexicographic order</li>\n    <li>sorts according to case: ensures that the comparison between imports is case sensitive</li>\n    <li>groups static imports: ensures the relative order between regular imports and static imports</li>\n    </ul>","debt":"10min"},{"summary":"File Tab Character","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Checks that there are no tab characters ('\\t') in the source code. Rationale:</p>\n<ul>\n    <li>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</li>\n    <li>From the Apache jakarta coding standards: In a distributed development environment, when the commit messages get sent to a mailing list, they are almost impossible to read if you use tabs.</li>\n</ul>","debt":"10min"},{"summary":"Visibility Modifier","type":"Code Smell","defaultSeverity":"Major","description":"Checks visibility of class members. Only static final members may be public; other class members must be private unless property protectedAllowed or packageAllowed is set.\n\n<p>\n</p>","debt":"10min"},{"summary":"Write Tag","type":"Code Smell","defaultSeverity":"Minor","description":"Outputs a JavaDoc tag as information. Can be used e.g. with the stylesheets that sort the report by author name. To define the format for a tag, set property tagFormat to a regular expression. This check uses two different severity levels. The normal one is used for reporting when the tag is missing. The additional one (tagSeverity) is used for the level of reporting when the tag exists.","debt":"30min"},{"summary":"Translation","type":"Code Smell","defaultSeverity":"Minor","description":"A FileSetCheck that ensures the correct translation of code by checking property files for consistency regarding their keys. Two property files describing one and the same context are consistent if they contain the same keys. TranslationCheck also can check an existence of required translations which must exist in project, if 'requiredTranslations' option is used."},{"summary":"Fall Through","type":"Code Smell","defaultSeverity":"Major","description":"Checks for fall through in switch statements Finds locations where a case contains Java code - but lacks a break, return, throw or continue statement.\n\n<p>\n</p>","debt":"20min"},{"summary":"Simplify Boolean Expression","type":"Code Smell","defaultSeverity":"Major","description":"Checks for overly complicated boolean expressions.\n\n<p>\n</p>","debt":"10min"},{"summary":"Empty Statement","type":"Code Smell","defaultSeverity":"Minor","description":"Detects empty statements (standalone ';').\n\n<p>\n</p>","debt":"10min"},{"summary":"Empty For Iterator Pad","type":"Code Smell","defaultSeverity":"Minor","description":"Checks the padding of an empty for iterator; that is whether a space is required at an empty for iterator, or such spaces are forbidden. Example : <code>for (Iterator foo = very.long.line.iterator(); foo.hasNext(); )</code>","debt":"2min"},{"summary":"Array Trailing Comma","type":"Code Smell","defaultSeverity":"Major","description":"Checks if array initialization contains optional trailing comma.","debt":"2min"},{"summary":"Operator Wrap","type":"Code Smell","defaultSeverity":"Minor","description":"Checks the policy on how to wrap lines on operators.","debt":"5min"},{"summary":"Javadoc Tag Continuation Indentation","type":"Code Smell","defaultSeverity":"Major","description":"Checks the indentation of the continuation lines in at-clauses.","debt":"5min"},{"summary":"Single Line Javadoc","type":"Code Smell","defaultSeverity":"Major","description":"Checks that a JavaDoc block which can fit on a single line and doesn't contain at-clauses. Javadoc comment that contains at leat one at-clause should be formatted in few lines.","debt":"10min"},{"summary":"Super Clone","type":"Code Smell","defaultSeverity":"Major","description":"Checks that an overriding clone() method invokes super.clone().\n\n<p>\n</p>","debt":"20min"},{"summary":"Redundant import","type":"Code Smell","defaultSeverity":"Minor","description":"Checks for redundant import statements. An import statement is considered redundant if:\n<ul>\n    <li>It is a duplicate of another import. This is, when a class is imported more than once.</li>\n    <li>The class imported is from the java.lang package, e.g. importing java.lang.String.</li>\n    <li>The class imported is from the same package.</li></ul>\n\n<p>\n</p>","debt":"5min"},{"summary":"Avoid Escaped Unicode Characters","type":"Code Smell","defaultSeverity":"Major","description":"<div >\n<h2><a name=\"AvoidEscapedUnicodeCharacters\"></a>AvoidEscapedUnicodeCharacters</h2>\n      \n<div >\n<h3><a name=\"Description\"></a>Description</h3>\n        \n<p>\n          Restrict using <a class=\"externalLink\" href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.3\">\n          Unicode escapes</a> (e.g. \\u221e).\n          It is possible to allow using escapes for\n          <a class=\"externalLink\" href=\"https://en.wiktionary.org/wiki/Appendix:Control_characters\"> non-printable(control) characters</a>.\n          Also, this check can be configured to allow using escapes\n          if trail comment is present. By the option it is possible to\n          allow using escapes if literal contains only them.\n        </p>\n      </div>\n\n       \n<div class=\"section\">\n<h3><a name=\"Properties\"></a>Properties</h3>\n        \n<table class=\"bodyTable\" border=\"0\">\n          \n<tbody><tr class=\"a\">\n            \n<th>name</th>\n            \n<th>description</th>\n            \n<th>type</th>\n            \n<th>default value</th>\n          </tr>\n          \n<tr class=\"b\">\n            \n<td>allowEscapesForControlCharacters</td>\n            \n<td>Allow use escapes for non-printable(control) characters.</td>\n            \n<td><a href=\"http://checkstyle.sourceforge.net/property_types.html#boolean\">Boolean</a></td>\n            \n<td>false</td>\n          </tr>\n          \n<tr class=\"a\">\n            \n<td>allowByTailComment</td>\n            \n<td>Allow use escapes if trail comment is present.</td>\n            \n<td><a href=\"http://checkstyle.sourceforge.net/property_types.html#boolean\">Boolean</a></td>\n            \n<td>false</td>\n          </tr>\n          \n<tr class=\"b\">\n            \n<td>allowIfAllCharactersEscaped</td>\n            \n<td>Allow if all characters in literal are escaped.</td>\n            \n<td><a href=\"http://checkstyle.sourceforge.net/property_types.html#boolean\">Boolean</a></td>\n            \n<td>false</td>\n          </tr>\n          \n<tr class=\"a\">\n            \n<td>allowNonPrintableEscapes</td>\n            \n<td>Allow non-printable escapes.</td>\n            \n<td><a href=\"http://checkstyle.sourceforge.net/property_types.html#boolean\">Boolean</a></td>\n            \n<td>false</td>\n          </tr>\n        </tbody></table>\n      </div>\n\n      \n<div class=\"section\">\n<h3><a name=\"Examples\"></a>Examples</h3>\n       \n<p>\n          Examples of using Unicode:\n        </p>\n        \n<div class=\"source\">\n<pre>String unitAbbrev = \"μs\"; //Best: perfectly clear even without a comment.\nString unitAbbrev = \"\\u03bcs\"; //Poor: the reader has no idea what this is.\n        </pre></div>\n        \n<p>\n          An example of how to configure the check is:\n        </p>\n        \n<div class=\"source\">\n<pre>&lt;module name=\"AvoidEscapedUnicodeCharacters\"/&gt;\n        </pre></div>\n        \n<p>\n          An example of non-printable(control) characters.\n        </p>\n        \n<div class=\"source\">\n<pre>return '\\ufeff' + content; // byte order mark\n        </pre></div>\n        \n<p>\n          An example of how to configure the check to allow using escapes\n          for non-printable(control) characters:\n        </p>\n        \n<div class=\"source\">\n<pre>&lt;module name=\"AvoidEscapedUnicodeCharacters\"&gt;\n    &lt;property name=\"allowEscapesForControlCharacters\" value=\"true\"/&gt;\n&lt;/module&gt;\n        </pre></div>\n        \n<p>\n          Example of using escapes with trail comment:\n        </p>\n        \n<div class=\"source\">\n<pre>String unitAbbrev = \"\\u03bcs\"; // Greek letter mu, \"s\"\n        </pre></div>\n        \n<p>\n          An example of how to configure the check to allow using escapes\n          if trail comment is present:\n        </p>\n        \n<div class=\"source\">\n<pre>&lt;module name=\"AvoidEscapedUnicodeCharacters\"&gt;\n    &lt;property name=\"allowByTailComment\" value=\"true\"/&gt;\n&lt;/module&gt;\n        </pre></div>\n        \n<p>\n          Example of using escapes if literal contains only them:\n        </p>\n        \n<div class=\"source\">\n<pre>String unitAbbrev = \"\\u03bc\\u03bc\\u03bc\";\n        </pre></div>\n        \n<p>\n          An example of how to configure the check to allow escapes\n          if literal contains only them:\n        </p>\n        \n<div class=\"source\">\n<pre>&lt;module name=\"AvoidEscapedUnicodeCharacters\"&gt;\n    &lt;property name=\"allowIfAllCharactersEscaped\" value=\"true\"/&gt;\n&lt;/module&gt;\n        </pre></div>\n        \n<p>\n          An example of how to configure the check to allow non-printable escapes:\n        </p>\n        \n<div class=\"source\">\n<pre>&lt;module name=\"AvoidEscapedUnicodeCharacters\"&gt;\n    &lt;property name=\"allowNonPrintableEscapes\" value=\"true\"/&gt;\n&lt;/module&gt;\n        </pre></div>\n      </div>\n\n      </div>","debt":"10min"},{"summary":"Outer Type Number","type":"Code Smell","defaultSeverity":"Minor","description":"<p> Checks for the number of types declared at the outer (or root) level in a file. Rationale: It is considered good practice to only define one outer type per file.</p>","debt":"10min"},{"summary":"Uncommented Main","type":"Code Smell","defaultSeverity":"Major","description":"Detects uncommented main methods.","debt":"20min"},{"summary":"Missing Deprecated","type":"Code Smell","defaultSeverity":"Major","description":"Verifies that both the java.lang.Deprecated annotation is present and the @deprecated Javadoc tag is present when either is present.\n\n<p>\n</p>","debt":"10min"},{"summary":"Modifier Order","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n          Checks that the order of modifiers conforms to the suggestions in\n          the <a class=\"externalLink\" href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html\">Java\n          Language specification, sections 8.1.1, 8.3.1, 8.4.3</a> and <a class=\"externalLink\" href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html\">\n          9.4</a>. The correct order is:\n        </p>\n\n\n<ol style=\"list-style-type: decimal;\">\n\n<li>\n            <tt>public</tt>\n          </li>\n\n<li>\n            <tt>protected</tt>\n          </li>\n\n<li>\n            <tt>private</tt>\n          </li>\n\n<li>\n            <tt>abstract</tt>\n          </li>\n\n<li>\n            <tt>default</tt>\n          </li>\n\n<li>\n            <tt>static</tt>\n          </li>\n\n<li>\n            <tt>final</tt>\n          </li>\n\n<li>\n            <tt>transient</tt>\n          </li>\n\n<li>\n            <tt>volatile</tt>\n          </li>\n\n<li>\n            <tt>synchronized</tt>\n          </li>\n\n<li>\n            <tt>native</tt>\n          </li>\n\n<li>\n            <tt>strictfp</tt>\n          </li>\n        </ol>\n\n\n<p>\n          ATTENTION: We skip <a class=\"externalLink\" href=\"http://www.oracle.com/technetwork/articles/java/ma14-architect-annotations-2177655.html\">\n          type annotations</a> from validation.\n        </p>","debt":"10min"},{"summary":"Illegal Token","type":"Code Smell","defaultSeverity":"Major","description":"Checks for illegal tokens. Certain language features often lead to hard to maintain code or are non-obvious to novice developers. Other features may be discouraged in certain frameworks, such as not having native methods in EJB components.","debt":"30min"},{"summary":"Class Fan Out Complexity","type":"Code Smell","defaultSeverity":"Major","description":"The number of other classes a given class relies on.\n\n<p>\n</p>","debt":"2h"},{"summary":"Empty For Initializer Pad","type":"Code Smell","defaultSeverity":"Minor","description":"Checks the padding of an empty for initializer; that is whether a space is required at an empty for initializer, or such spaces are forbidden. Example : <code>for ( ; i &lt; j; i++, j--)</code>","debt":"2min"},{"summary":"Regexp Singleline","type":"Code Smell","defaultSeverity":"Major","description":"<p> A check for detecting single lines that match a supplied regular expression. Works with any file type. Rationale: This check can be used to prototype checks and to find common bad practice such as calling ex.printStacktrace(), System.out.println(), System.exit(), etc.</p>"},{"summary":"Regexp Multiline","type":"Code Smell","defaultSeverity":"Major","description":"<p>A check for detecting that matches across multiple lines. Rationale: This check can be used to when the regular expression can be span multiple lines.</p>"},{"summary":"Illegal Catch","type":"Code Smell","defaultSeverity":"Major","description":"Catching java.lang.Exception, java.lang.Error or java.lang.RuntimeException is almost never acceptable.","debt":"15min"},{"summary":"Whitespace After","type":"Code Smell","defaultSeverity":"Minor","description":"Checks that a token is followed by whitespace, with the exception that it does not check for whitespace after the semicolon of an empty for iterator.","debt":"2min"},{"summary":"Illegal Throws","type":"Code Smell","defaultSeverity":"Major","description":"Throwing java.lang.Error or java.lang.RuntimeException is almost never acceptable.\n\n<p>\n</p>","debt":"20min"},{"summary":"Overload Methods Declaration Order","type":"Code Smell","defaultSeverity":"Major","description":"Checks that overload methods are grouped together.","debt":"10min"},{"summary":"Single Space Separator","type":"Code Smell","defaultSeverity":"Major","description":"Checks that non-whitespace characters are separated by no more than one whitespace. Separating characters by tabs or multiple spaces will be reported. Currently the check doesn't permit horizontal alignment. To inspect whitespaces before and after comments, set the property validateComments to true.","debt":"1min"},{"summary":"At-clause Order","type":"Code Smell","defaultSeverity":"Major","description":"Checks the order of at-clauses.","debt":"5min"},{"summary":"Javadoc Type","type":"Code Smell","defaultSeverity":"Major","description":"Checks Javadoc comments for class and interface definitions. By default, does not check for author or version tags.\n    The scope to verify is specified using the Scope class and defaults to Scope.PRIVATE. To verify another scope, set property scope to one of the Scope constants.\n    To define the format for an author tag or a version tag, set property authorFormat or versionFormat respectively to a regular expression.\n    <br><br>Error messages about type parameters for which no param tags are present can be suppressed by defining property allowMissingParamTags.\n\n<p>\n</p>","debt":"10min"},{"summary":"Catch Parameter Name","type":"Code Smell","defaultSeverity":"Major","description":"Checks that catch parameter names conform to a format specified by the format property.","debt":"10min"},{"summary":"Local Variable Name","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nChecks that local, non-final variable names conform to the specified format\n</p>\n\n<p>\n</p>","debt":"10min"},{"summary":"Typecast Paren Pad","type":"Code Smell","defaultSeverity":"Major","description":"Checks the padding of parentheses for typecasts.","debt":"2min"},{"summary":"Separator Wrap","type":"Code Smell","defaultSeverity":"Minor","description":"Checks line wrapping with separators.","debt":"5min"},{"summary":"Line Length","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nChecks for long lines.\n</p>"},{"summary":"Package Declaration","type":"Code Smell","defaultSeverity":"Major","description":"Ensures there is a package declaration.\n\n<p>\n</p>","debt":"10min"},{"summary":"Non Empty At-clause Description","type":"Code Smell","defaultSeverity":"Major","description":"Checks that the at-clause tag is followed by description.","debt":"10min"},{"summary":"Avoid Nested Blocks","type":"Code Smell","defaultSeverity":"Major","description":"Finds nested blocks.\n\n<p>\n</p>","debt":"10min"},{"summary":"Method Count","type":"Code Smell","defaultSeverity":"Major","description":"Checks the number of methods declared in each type. This includes the number of each scope (private, package, protected and public) as well as an overall total.","debt":"1h"},{"summary":"Comment pattern matcher","type":"Code Smell","defaultSeverity":"Minor","description":"This rule allows to find any kind of pattern inside comments like TODO, NOPMD, ..., except NOSONAR\n\n<p>\n</p>"},{"summary":"Declaration Order","type":"Code Smell","defaultSeverity":"Info","description":"Checks that the parts of a class or interface declaration appear in the order suggested by the Code Convention for the Java Programming Language : <ul><li>Class (static) variables. First the public class variables, then the protected, then package level (no access modifier), and then the private.</li><li>Instance variables. First the public class variables, then the protected, then package level (no access modifier), and then the private.</li><li>Constructors</li><li>Methods</li></ul>\n\n<p>\n</p>","debt":"10min"},{"summary":"Annotation Use Style","type":"Code Smell","defaultSeverity":"Major","description":"Controls the style with the usage of annotations.","debt":"15min"},{"summary":"Equals Hash Code","type":"Bug","defaultSeverity":"Critical","description":"Checks that classes that override equals() also override hashCode().\n\n<p>\n</p>","debt":"30min"},{"summary":"JavaNCSS","type":"Code Smell","defaultSeverity":"Major","description":"Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS). This check adheres to the  specification for the JavaNCSS-Tool  written by Chr. Clemens Lee.\nRougly said the NCSS metric is calculated by counting the source lines which are not comments, (nearly) equivalent to counting the semicolons and opening curly braces.\nThe NCSS for a class is summarized from the NCSS of all its methods, the NCSS of its nested classes and the number of member variable declarations.\nThe NCSS for a file is summarized from the ncss of all its top level classes, the number of imports and the package declaration.\n<br>\nRationale: Too large methods and classes are hard to read and costly to maintain. A large NCSS number often means that a method or class has too many responsabilities and/or functionalities which should be decomposed into smaller units.","debt":"3h"},{"summary":"Parameter Assignment","type":"Code Smell","defaultSeverity":"Major","description":"Disallow assignment of parameters.\n\n<p>\n</p>","debt":"10min"},{"summary":"Descendant Token","type":"Code Smell","defaultSeverity":"Minor","description":"Checks for restricted tokens beneath other tokens.\n\nWARNING: This is a very powerful and flexible check, but, at the same time, it is low-level and very implementation-dependent because its results depend on the grammar we use to build abstract syntax trees. Thus we recommend using other checks when they provide the desired functionality. Essentially, this check just works on the level of an abstract syntax tree and knows nothing about language structures.","debt":"1h"},{"summary":"Package Annotation","type":"Code Smell","defaultSeverity":"Minor","description":"<h2><a name=\"PackageAnnotation\"></a>PackageAnnotation</h2>\n\n<div >\n<h3><a name=\"Description\"></a>Description</h3>\n        \n<p>  This check makes sure that all package annotations are in the\n             package-info.java file.\n        </p>\n        \n<p>\n             According to the Java Language Specification.\n        </p>\n\n        \n<p>\n            The JLS does not enforce the placement of package annotations.\n            This placement may vary based on implementation. The JLS\n            does highly recommend that all package annotations are\n            placed in the package-info.java file.\n\n            See <a class=\"externalLink\" href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-7.html#jls-7.4.1\">\n            Java Language Specification, section 7.4.1</a>.\n        </p>\n      </div>","debt":"10min"},{"summary":"Javadoc Variable","type":"Code Smell","defaultSeverity":"Major","description":"Checks that a variable has Javadoc comment.\n\n<p>\n</p>","debt":"10min"},{"summary":"Equals Avoid Null","type":"Code Smell","defaultSeverity":"Major","description":"<p>Checks that any combination of String literals with optional assignment is on the left side of an equals() comparison.</p>\n<p>Rationale: Calling the equals() method on String literals will avoid a potential NullPointerException. Also, it is pretty common to see null check right before equals comparisons which is not necessary in the below example.</p>\n<p>For example:</p>\n<pre>\n  String nullString = null;\n  nullString.equals(\"My_Sweet_String\");\n</pre>\n\n<p>should be refactored to:</p>\n<pre>\n  String nullString = null;\n  \"My_Sweet_String\".equals(nullString);\n</pre>\n<p>Limitations: If the equals method is overridden or a covariant equals method is defined and the implementation is incorrect (where s.equals(t) does not return the same result as t.equals(s)) then rearranging the called on object and parameter may have unexpected results.</p>\n<p>Java's Autoboxing feature has an affect on how this check is implemented. Pre Java 5 all IDENT + IDENT object concatenations would not cause a NullPointerException even if null. Those situations could have been included in this check. They would simply act as if they surrounded by String.valueof() which would concatenate the String null.</p>\n<p>The following example will cause a NullPointerException as a result of what autoboxing does.</p>\n<pre>\n  Integer i = null, j = null;\n  String number = \"5\"\n  number.equals(i + j);\n</pre>\n<p>Since, it is difficult to determine what kind of Object is being concatenated all ident concatenation is considered unsafe.</p>\n\n<p>\n</p>","debt":"10min"},{"summary":"Regexp Singleline Java","type":"Code Smell","defaultSeverity":"Major","description":"<p>This class is variation on RegexpSingleline for detecting single lines that match a supplied regular expression in Java files. It supports suppressing matches in Java comments.</p>"},{"summary":"Right Curly","type":"Code Smell","defaultSeverity":"Minor","description":"Checks the placement of right curly braces.\n\n<p>\n</p>","debt":"2min"},{"summary":"Cyclomatic Complexity","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nChecks cyclomatic complexity of methods against a specified limit. The complexity is measured by the number of if, while, do, for, ?:, catch, switch, case  statements, and operators &amp;&amp; and || (plus one) in the body of a constructor, method, static initializer, or instance initializer. It is a measure of the minimum number of possible paths through the source and therefore the number of required tests. Generally 1-4 is considered good, 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now !\n</p>\n\n<p>\n</p>","debt":"3h"},{"summary":"Use Assert True Instead Of Assert Equals","type":"Code Smell","defaultSeverity":"Minor","description":"When asserting a value is the same as a boolean literal, use assertTrue/assertFalse, instead of assertEquals. Example: \n<pre>\npublic class MyTestCase extends TestCase {\n\tpublic void testMyCase() {\n\t\tboolean myVar = true;\n\t\t// Ok\n\t\tassertTrue(\"myVar is true\", myVar);\n\t\t// Bad\n\t\tassertEquals(\"myVar is true\", true, myVar);\n\t\t// Bad\n\t\tassertEquals(\"myVar is false\", false, myVar);\n\t}\n}\n</pre>","debt":"10min"},{"summary":"Test class without test cases (JUnit 3.x only)","type":"Code Smell","defaultSeverity":"Major","description":"Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named testXXX.\nBeware: This rule doesn't support JUnit 4.x's @Test annotation.\n<pre>\npublic class CarTest { // violation, consider changing the name of the class if it is not a test\n  // consider adding test methods if it is a test\n  public static void main(String[] args) {\n    // do something\n  }\n}\n</pre>","debt":"10min"},{"summary":"Use assertEquals instead of assertTrue","type":"Code Smell","defaultSeverity":"Minor","description":"This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.\n<pre>\npublic class FooTest extends TestCase {\n  void testCode() {\n    Object a, b;\n\n    assertTrue(a.equals(b)); // violation\n    assertEquals(\"a should equals b\", a, b); // good usage\n  }\n}</pre>","debt":"10min"},{"summary":"JUnit tests should include an assert","type":"Code Smell","defaultSeverity":"Major","description":"JUnit tests should include at least one assertion. This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does.\n<pre>\npublic class Foo extends TestCase {\n  public void testSomething() {\n    Bar b = findBar();\n    b.work();\n    // violation, we could use assertNotNull(\"bar not found\", b);\n  }\n}\n</pre>","debt":"15min"},{"summary":"JUnit spelling","type":"Code Smell","defaultSeverity":"Major","description":"Some JUnit framework methods are easy to misspell.\n<pre>\nimport junit.framework.*;\n\npublic class Foo extends TestCase {\n  public void setup() {} // violation, should be setUp()\n  public void TearDown() {} // violation, should be tearDown()\n}\n</pre>","debt":"10min"},{"summary":"Use assertNull instead of assertTrue","type":"Code Smell","defaultSeverity":"Minor","description":"This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertNull, assertNotNull.\n<pre>\npublic class FooTest extends TestCase {\n  void testCode() {\n    Object a = doSomething();\n\n    assertTrue(a==null); // violation\n    assertNull(a);  // good usage\n    assertTrue(a != null); // violation\n    assertNotNull(a);  // good usage\n  }\n}\n</pre>","debt":"10min"},{"summary":"JUnit4 Test Should Use After Annotation","type":"Code Smell","defaultSeverity":"Major","description":"In JUnit 3, the tearDown method was used to clean up all data entities required in running tests. \nJUnit 4 skips the tearDown method and executes all methods annotated with @After after running each test Example: \n<pre>\npublic class MyTest {\n    public void tearDown() {\n        bad();\n    }\n}\npublic class MyTest2 {\n    @After public void tearDown() {\n        good();\n    }\n}\n</pre>","debt":"2min"},{"summary":"Simplify boolean assertion","type":"Code Smell","defaultSeverity":"Minor","description":"Avoid negation in an assertTrue or assertFalse test. For example, rephrase: assertTrue(!expr); as: assertFalse(expr);\n<pre>\npublic class SimpleTest extends TestCase {\n  public void testX() {\n    assertTrue(\"not empty\", !r.isEmpty()); // violation, replace with assertFalse(\"not empty\", r.isEmpty())\n    assertFalse(!r.isEmpty()); // violation, replace with assertTrue(\"empty\", r.isEmpty())\n  }\n}\n</pre>","debt":"10min"},{"summary":"Unnecessary boolean assertion","type":"Code Smell","defaultSeverity":"Minor","description":"A JUnit test assertion with a boolean literal is unnecessary since it always will eval to the same thing. Consider using flow control (in case of assertTrue(false) or similar) or simply removing statements like assertTrue(true) and assertFalse(false). If you just want a test to halt, use the fail method.\n<pre>\npublic class SimpleTest extends TestCase {\n  public void testX() {\n    assertTrue(true); // violation\n  }\n}</pre>","debt":"10min"},{"summary":"JUnit static suite","type":"Code Smell","defaultSeverity":"Major","description":"The suite() method in a JUnit test needs to be both public and static.\n<pre>\nimport junit.framework.*;\n\npublic class Foo extends TestCase {\n  public void suite() {} // violation, should be static\n  private static void suite() {} // violation, should be public\n}\n</pre>","debt":"10min"},{"summary":"JUnit4 Test Should Use Before Annotation","type":"Code Smell","defaultSeverity":"Major","description":"In JUnit 3, the setUp method was used to set up all data entities required in running tests. \nJUnit 4 skips the setUp method and executes all methods annotated with @Before before all tests Example: \n<pre>\npublic class MyTest {\n    public void setUp() {\n        bad();\n    }\n}\npublic class MyTest2 {\n    @Before public void setUp() {\n        good();\n    }\n}\n</pre>","debt":"2min"},{"summary":"JUnit4 Test Should Use Test Annotation","type":"Code Smell","defaultSeverity":"Major","description":"In JUnit 3, the framework executed all methods which started with the word test as a unit test. \nIn JUnit 4, only methods annotated with the @Test annotation are executed. Example: \n<pre>\npublic class MyTest {\n    public void testBad() {\n        doSomething();\n    }\n\n\t@Test\n    public void testGood() {\n        doSomething();\n    }\n}\n</pre>","debt":"2min"},{"summary":"JUnit assertions should include a message","type":"Code Smell","defaultSeverity":"Minor","description":"JUnit assertions should include a message - i.e., use the three argument version of assertEquals(), not the two argument version.\n<pre>\npublic class Foo extends TestCase {\n  public void testSomething() {\n    assertEquals(\"foo\", \"bar\"); // violation, should be assertEquals(\"Foo does not equals bar\", \"foo\", \"bar\");\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2698'>S2698</a> instead.\n</p>","debt":"10min"},{"summary":"JUnit4 Suites Should Use Suite Annotation","type":"Code Smell","defaultSeverity":"Major","description":"In JUnit 3, test suites are indicated by the suite() method. In JUnit 4, suites are indicated\nthrough the @RunWith(Suite.class) annotation. Example: \n<pre>\npublic class BadExample extends TestCase{\n\n    public static Test suite(){\n    \treturn new Suite();\n    }\n}\n\n@RunWith(Suite.class)\n@SuiteClasses( { TestOne.class, TestTwo.class })\npublic class GoodTest {\n}\n</pre>","debt":"5min"},{"summary":"JUnit Use Expected","type":"Code Smell","defaultSeverity":"Major","description":"In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions. Example: \n<pre>\npublic class MyTest {\n\t@Test\n    public void testBad() {\n        try {\n            doSomething();\n            fail(\"should have thrown an exception\");\n        } catch (Exception e) {\n        }\n    }\n\n\t@Test(expected=Exception.class)\n    public void testGood() {\n        doSomething();\n    }\n}\n</pre>","debt":"2min"},{"summary":"JUnit Test Contains Too Many Asserts","type":"Code Smell","defaultSeverity":"Major","description":"JUnit tests should not contain too many asserts.  Many asserts are indicative of a complex test, for which \nit is harder to verify correctness.  Consider breaking the test scenario into multiple, shorter test scenarios.  \nCustomize the maximum number of assertions used by this Rule to suit your needs. Example: \n<pre>\npublic class MyTestCase extends TestCase {\n\t// Ok\n\tpublic void testMyCaseWithOneAssert() {\n\t\tboolean myVar = false;\t\t\n\t\tassertFalse(\"should be false\", myVar);\n\t}\n\n\t// Bad, too many asserts (assuming max=1)\n\tpublic void testMyCaseWithMoreAsserts() {\n\t\tboolean myVar = false;\t\t\n\t\tassertFalse(\"myVar should be false\", myVar);\n\t\tassertEquals(\"should equals false\", false, myVar);\n\t}\n}\n</pre>","debt":"30min"},{"summary":"Use assertSame instead of assertTrue","type":"Code Smell","defaultSeverity":"Minor","description":"This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertSame, assertNotSame.\n<pre>\npublic class FooTest extends TestCase {\n  void testCode() {\n    Object a, b;\n\n    assertTrue(a==b); // violation\n    assertSame(a, b); // good usage\n  }\n}\n</pre>","debt":"10min"},{"summary":"Package case","type":"Code Smell","defaultSeverity":"Major","description":"Detects when a package definition contains upper case characters. Example :\n<pre>\npackage com.MyCompany;  // <- should be lower case name\npublic class SomeClass {\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00120'>S00120</a> instead.\n</p>","debt":"10min"},{"summary":"Finalize Does Not Call Super Finalize","type":"Code Smell","defaultSeverity":"Major","description":"If the finalize() is implemented, its last action should be to call super.finalize.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AObjectFinalizeOverridenCallsSuperFinalizeCheck'>ObjectFinalizeOverridenCallsSuperFinalizeCheck</a> instead.\n</p>","debt":"5min"},{"summary":"One Declaration Per Line","type":"Code Smell","defaultSeverity":"Major","description":"Java allows the use of several variables declaration of the same type on one line. However, it\ncan lead to quite messy code. This rule looks for several declarations on the same line. Example: \n<pre>\nString name; // separate declarations\nString lastname;\n\nString name, lastname; // combined declaration, a violation\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00122'>S00122</a> instead.\n</p>","debt":"2min"},{"summary":"Naming - Avoid field name matching method name","type":"Code Smell","defaultSeverity":"Major","description":"It is somewhat confusing to have a field name with the same name as a method. While this is totally legal, having information (field) and actions (method) is not clear naming. Example :\n<pre>\npublic class Foo {\n  Object bar;\n  // bar is data or an action or both?\n  void bar() {\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1845'>S1845</a> instead.\n</p>","debt":"10min"},{"summary":"Excessive Public Count","type":"Code Smell","defaultSeverity":"Major","description":"A large number of public methods and attributes declared in a class can indicate the class may need to be broken up as increased effort will be required to thoroughly test it.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1448'>S1448</a> instead.\n</p>","debt":"1h"},{"summary":"Close Resource","type":"Bug","defaultSeverity":"Critical","description":"Ensure that resources (like Connection, Statement, and ResultSet objects) are always closed after use. It does this by looking for code patterned like :\n<pre>\nConnection c = openConnection();\ntry {\n  // do stuff, and maybe catch something\n} finally {\n  c.close();\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2095'>S2095</a> instead.\n</p>","debt":"10min"},{"summary":"Avoid Reassigning Parameters","type":"Code Smell","defaultSeverity":"Major","description":"Reassigning values to parameters is a questionable practice. Use a temporary local variable instead.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1226'>S1226</a> instead.\n</p>","debt":"10min"},{"summary":"If Stmts Must Use Braces","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nAvoid using if statements without using curly braces.\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00121'>S00121</a> instead.\n</p>","debt":"5min"},{"summary":"Equals Null","type":"Bug","defaultSeverity":"Critical","description":"Inexperienced programmers sometimes confuse comparison concepts and use equals() to compare to null.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2159'>S2159</a> instead.\n</p>","debt":"5min"},{"summary":"Use Array List Instead Of Vector","type":"Code Smell","defaultSeverity":"Major","description":"ArrayList is a much better Collection implementation than Vector.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1149'>S1149</a> instead.\n</p>","debt":"20min"},{"summary":"Unnecessary Fully Qualified Name","type":"Code Smell","defaultSeverity":"Major","description":"Import statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name. Example: \n<pre>\nimport java.util.List;\n\npublic class Foo {\n   private java.util.List list1; // Unnecessary FQN\n   private List list2; // More appropriate given import of 'java.util.List'\n}\n</pre>","debt":"2min"},{"summary":"Unnecessary Local Before Return","type":"Code Smell","defaultSeverity":"Major","description":"Avoid unnecessarily creating local variables\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1488'>S1488</a> instead.\n</p>","debt":"5min"},{"summary":"Too Many Static Imports","type":"Code Smell","defaultSeverity":"Major","description":"If you overuse the static import feature, it can make your program unreadable and  unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide).","debt":"1h"},{"summary":"Empty Statement Block","type":"Code Smell","defaultSeverity":"Major","description":"Empty block statements serve no purpose and should be removed. Example: \n<pre>\npublic class Foo {\n\n   private int _bar;\n\n   public void setBar(int bar) {\n      { _bar = bar; } // Why not?\n      {} // But remove this.\n   }\n\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.\n</p>","debt":"2min"},{"summary":"Clone Throws Clone Not Supported Exception","type":"Code Smell","defaultSeverity":"Major","description":"The method clone() should throw a CloneNotSupportedException.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> instead.\n</p>","debt":"20min"},{"summary":"Avoid Enum As Identifier","type":"Code Smell","defaultSeverity":"Major","description":"Finds all places 'enum' is used as an identifier is used.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1190'>S1190</a> instead.\n</p>","debt":"5min"},{"summary":"Empty Synchronized Block","type":"Code Smell","defaultSeverity":"Critical","description":"Avoid empty synchronized blocks - they're useless.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.\n</p>","debt":"20min"},{"summary":"Compare Objects With Equals","type":"Code Smell","defaultSeverity":"Major","description":"Use equals() to compare object references; avoid comparing them with ==.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1698'>S1698</a> instead.\n</p>","debt":"2min"},{"summary":"Consecutive Appends Should Reuse","type":"Code Smell","defaultSeverity":"Major","description":"Consecutively calls to StringBuffer/StringBuilder .append should reuse the target object. This can improve the performance. Example: \n<pre>\nString foo = \" \";\n\nStringBuffer buf = new StringBuffer();\nbuf.append(\"Hello\"); // poor\nbuf.append(foo);\nbuf.append(\"World\");\n\nStringBuffer buf = new StringBuffer();\nbuf.append(\"Hello\").append(foo).append(\"World\"); // good\n</pre>","debt":"5min"},{"summary":"Use Arrays As List","type":"Code Smell","defaultSeverity":"Major","description":"The class java.util.Arrays has a asList method that should be use when you want to create a new List from an array of objects. It is faster than executing a loop to cpy all the elements of the array one by one","debt":"15min"},{"summary":"If a class implements Cloneable the return type of the method clone() must be the class name","type":"Code Smell","defaultSeverity":"Major","description":"<p>Minimum Language Version: java 1.5</p>\n<p>\n  If a class implements cloneable the return type of the method clone() must be the class name. That way, the caller of the clone method doesn’t need to cast the returned clone to the correct type.\n</p>\n<p>\n  Note: This is only possible with Java 1.5 or higher.\n</p>\n\n<p>Examples:</p>\n<pre>\npublic class Foo implements Cloneable {\n    @Override\n    protected Object clone() { // Violation, Object must be Foo\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    public Foo clone() { //Ok\n    }\n}\n</pre>","debt":"20min"},{"summary":"Unused formal parameter","type":"Code Smell","defaultSeverity":"Major","description":"<p>Avoid passing parameters to methods or constructors and then not using those parameters.</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1172'>S1172</a> instead.\n</p>","debt":"5min"},{"summary":"Avoid Constants Interface","type":"Code Smell","defaultSeverity":"Major","description":"An interface should be used only to model a behaviour of a class: using an interface as a container of constants is a poor usage pattern.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1214'>S1214</a> instead.\n</p>","debt":"20min"},{"summary":"Avoid Rethrowing Exception","type":"Code Smell","defaultSeverity":"Major","description":"Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1166'>S1166</a> instead.\n</p>","debt":"10min"},{"summary":"Avoid Duplicate Literals","type":"Code Smell","defaultSeverity":"Major","description":"Code containing duplicate String literals can usually be improved by declaring the String as a constant field. Example :\n<pre>\npublic class Foo {\n private void bar() {\n    buz(\"Howdy\");\n    buz(\"Howdy\");\n    buz(\"Howdy\");\n    buz(\"Howdy\");\n }\n private void buz(String x) {}\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1192'>S1192</a> instead.\n</p>","debt":"10min"},{"summary":"XPath rule template","type":"Code Smell","defaultSeverity":"Major","description":"PMD provides a very handy method for creating new rules by writing an XPath query. When the XPath query finds a match, a violation is created.\nLet's take a simple example: assume we have a Factory class that must be always declared final.\nWe'd like to report a violation each time a declaration of Factory is not declared final. Consider the following class:\n<pre>\npublic class a {\n  Factory f1;\n\n  void myMethod() {\n    Factory f2;\n    int a;\n  }\n}\n</pre>\nThe following expression does the magic we need:\n<pre>\n//VariableDeclarator\n [../Type/ReferenceType/ClassOrInterfaceType\n  [@Image = 'Factory'] and ..[@Final='false']]\n</pre>\nSee the <a href=\"http://pmd.sourceforge.net/xpathruletutorial.html\" target=\"_blank\">XPath rule tutorial</a> for more information.\n\n<p>\nThis rule is deprecated, please see the documentation on <a href=\"http://docs.sonarqube.org/x/HQxR\" target=\"_blank\">Extending Coding Rules</a>.\n</p>"},{"summary":"Empty Switch Statements","type":"Code Smell","defaultSeverity":"Major","description":"Avoid empty switch statements.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.\n</p>","debt":"20min"},{"summary":"Confusing Ternary","type":"Code Smell","defaultSeverity":"Major","description":"In an if expression with an else clause, avoid negation in the test. For example, rephrase: if (x != y) diff(); else same(); as: if (x == y) same(); else diff(); Most if (x != y) cases without an else are often return cases, so consistent use of this rule makes the code easier to read. Also, this resolves trivial ordering problems, such as does the error case go first? or does the common case go first?.","debt":"10min"},{"summary":"Comment Required","type":"Code Smell","defaultSeverity":"Minor","description":"Denotes whether comments are required (or unwanted) for specific language elements. Example: \n<pre>\n/**\n* \n*\n* @author George Bush\n*/\n</pre>","debt":"5min"},{"summary":"Insufficient String Buffer Declaration","type":"Code Smell","defaultSeverity":"Major","description":"Failing to pre-size a StringBuffer properly could cause it to re-size many times during runtime. This rule checks the characters that are actually passed into StringBuffer.append(), but represents a best guess worst case scenario. An empty StringBuffer constructor initializes the object to 16 characters. This default is assumed if the length of the constructor can not be determined.","debt":"10min"},{"summary":"Uncommented Empty Constructor","type":"Code Smell","defaultSeverity":"Major","description":"Uncommented Empty Constructor finds instances where a constructor does not contain statements, but there is no comment. By explicitly commenting empty constructors it is easier to distinguish between intentional (commented) and unintentional empty constructors.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2094'>S2094</a> instead.\n</p>","debt":"15min"},{"summary":"Abstract Class Without Abstract Method","type":"Code Smell","defaultSeverity":"Major","description":"The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated direcly) a protected constructor can be provided prevent direct instantiation.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1694'>S1694</a> instead.\n</p>","debt":"5min"},{"summary":"No package","type":"Code Smell","defaultSeverity":"Major","description":"Detects when a class or interface does not have a package definition. Example :\n  <pre>\n// no package declaration\npublic class ClassInDefaultPackage {\n}\n  </pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1220'>S1220</a> instead.\n</p>","debt":"10min"},{"summary":"Unnecessary Final Modifier","type":"Code Smell","defaultSeverity":"Info","description":"When a class has the final modifier, all the methods are automatically final.","debt":"5min"},{"summary":"Use Proper Class Loader","type":"Code Smell","defaultSeverity":"Critical","description":"In J2EE getClassLoader() might not work as expected. Use Thread.currentThread().getContextClassLoader() instead.","debt":"15min"},{"summary":"By convention, classes that implement the Cloneable interface should override Object.clone (which is protected) with a public method","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  The java Manual says “By convention, classes that implement this interface should override Object.clone (which is protected) with a public method.”\n</p>\n\n<p>Examples:</p>\n<pre>\npublic class Foo implements Cloneable {\n  @Override\n  protected Object clone() throws CloneNotSupportedException { // Violation, must be public\n  }\n}\n\npublic class Foo implements Cloneable {\n  @Override\n  protected Foo clone() { // Violation, must be public\n  }\n}\n\npublic class Foo implements Cloneable {\n  @Override\n  public Object clone() // Ok\n}\n</pre>","debt":"2min"},{"summary":"Dont Call Thread Run","type":"Code Smell","defaultSeverity":"Major","description":"Explicitly calling Thread.run() method will execute in the caller's thread of control.  Instead, call Thread.start() for the intended behavior.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1217'>S1217</a> instead.\n</p>","debt":"10min"},{"summary":"Redundant Field Initializer","type":"Code Smell","defaultSeverity":"Major","description":"Java will initialize fields with known default values so any explicit initialization of those same defaults\nis redundant and results in a larger class file (approximately three additional bytecode instructions per field). Example: \n<pre>\npublic class C {\n  boolean b = false; // examples of redundant initializers\n  byte by   = 0;\n  short s   = 0;\n  char c    = 0;\n  int i     = 0;\n  long l    = 0;\n\n  float f   = .0f;   // all possible float literals\n  doable d  = 0d;    // all possible double literals\n  Object o  = null;\n\n  MyClass mca[] = null;\n  int i1 = 0, ia1[] = null;\n\n  class Nested {\n    boolean b = false;\n  }\n}\n</pre>","debt":"2min"},{"summary":"Naming - Misleading variable name","type":"Code Smell","defaultSeverity":"Major","description":"Detects when a non-field has a name starting with 'm_'. This usually indicates a field and thus is confusing. Example :\n<pre>\npublic class Foo {\n  private int m_foo; // OK\n  public void bar(String m_baz) {  // Bad\n    int m_boz = 42; // Bad\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00117'>S00117</a> instead.\n</p>","debt":"10min"},{"summary":"Naming - Method naming conventions","type":"Code Smell","defaultSeverity":"Major","description":"Method names should always begin with a lower case character, and should not contain underscores. Example :\n<pre>\npublic class Foo {\n  public void fooStuff() {\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00100'>S00100</a> instead.\n</p>","debt":"10min"},{"summary":"Exception As Flow Control","type":"Code Smell","defaultSeverity":"Major","description":"Using Exceptions as flow control leads to GOTOish code and obscures true exceptions when debugging.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1141'>S1141</a> instead.\n</p>","debt":"20min"},{"summary":"God Class","type":"Code Smell","defaultSeverity":"Major","description":"The God Class rule detects the God Class design flaw using metrics. God classes do too many things,\nare very big and overly complex. They should be split apart to be more object-oriented.\nThe rule uses the detection strategy described in \"Object-Oriented Metrics in Practice\".\nThe violations are reported against the entire class. See also the references:\nMichele Lanza and Radu Marinescu. Object-Oriented Metrics in Practice:\nUsing Software Metrics to Characterize, Evaluate, and Improve the Design\nof Object-Oriented Systems. Springer, Berlin, 1 edition, October 2006. Page 80.","debt":"2h"},{"summary":"Clone method must implement Cloneable","type":"Code Smell","defaultSeverity":"Major","description":"The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> instead.\n</p>","debt":"20min"},{"summary":"Big Integer Instantiation","type":"Code Smell","defaultSeverity":"Major","description":"Don't create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and for 1.5 on, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)","debt":"5min"},{"summary":"Empty Static Initializer","type":"Code Smell","defaultSeverity":"Major","description":"An empty static initializer was found.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.\n</p>","debt":"20min"},{"summary":"Modified Cyclomatic Complexity","type":"Code Smell","defaultSeverity":"Major","description":"Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry. The decision points include 'if', 'while', 'for', and 'case labels' calls. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote high complexity, and 11+ is very high complexity. Modified complexity treats switch statements as a single decision point.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AMethodCyclomaticComplexity'>MethodCyclomaticComplexity</a> instead.\n</p>","debt":"1h"},{"summary":"Add Empty String","type":"Code Smell","defaultSeverity":"Major","description":"Finds empty string literals which are being added. This is an inefficient way to convert any type to a String.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2131'>S2131</a> instead.\n</p>","debt":"5min"},{"summary":"Unused private method","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nUnused Private Method detects when a private method is declared but is unused. This PMD rule should be switched off and replaced by its equivalent from Squid that is more effective : it generates less false-positives and detects more dead code.\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUnusedPrivateMethod'>UnusedPrivateMethod</a> instead.\n</p>","debt":"15min"},{"summary":"Too few branches for a switch statement","type":"Code Smell","defaultSeverity":"Minor","description":"Swith are designed complex branches, and allow branches to share treatement. Using a switch for only a few branches is ill advised, as switches are not as easy to understand as if. In this case, it's most likely is a good idea to use a if statement instead, at least to increase code readability. Example :\n<pre>\n// With a minimumNumberCaseForASwitch of 3\npublic class Foo {\n  public void bar() {\n    switch (condition) {\n      case ONE:\n        instruction;\n        break;\n      default:\n        break; // not enough for a 'switch' stmt,\n               // a simple 'if' stmt would have been more appropriate\n    }\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1301'>S1301</a> instead.\n</p>","debt":"30min"},{"summary":"Code size - cyclomatic complexity","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nComplexity is determined by the number of decision points in a method plus one for the method entry. The decision points are 'if', 'while', 'for', and 'case labels'. Generally, 1-4 is low complexity, 5-7 indicates moderate complexity, 8-10 is high complexity, and 11+ is very high complexity.\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AMethodCyclomaticComplexity'>MethodCyclomaticComplexity</a> or <a href='/coding_rules#rule_key=squid%3AClassCyclomaticComplexity'>ClassCyclomaticComplexity</a> instead.\n</p>","debt":"3h"},{"summary":"Avoid unnecessary comparisons in boolean expressions","type":"Code Smell","defaultSeverity":"Major","description":"Avoid unnecessary comparisons in boolean expressions - this complicates simple code. Example :\n<pre>\npublic class Bar {\n // can be simplified to\n // bar = isFoo();\n private boolean bar = (isFoo() == true);\n\n public isFoo() { return false;}\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1125'>S1125</a> instead.\n</p>","debt":"10min"},{"summary":"Boolean Get Method Name","type":"Code Smell","defaultSeverity":"Major","description":"Looks for methods named \"getX()\" with \"boolean\" as the return type. The convention is to name these methods \"isX()\".","debt":"10min"},{"summary":"Ncss Method Count","type":"Code Smell","defaultSeverity":"Major","description":"This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS138'>S138</a> instead.\n</p>","debt":"1h"},{"summary":"Unnecessary Return","type":"Code Smell","defaultSeverity":"Minor","description":"Avoid unnecessary return statements","debt":"15min"},{"summary":"Avoid Synchronized At Method Level","type":"Code Smell","defaultSeverity":"Major","description":"Method level synchronization can backfire when new code is added to the method. Block-level synchronization helps to ensure that only the code that needs synchronization gets it.","debt":"15min"},{"summary":"String To String","type":"Code Smell","defaultSeverity":"Major","description":"Avoid calling toString() on String objects; this is unnecessary.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1858'>S1858</a> instead.\n</p>","debt":"5min"},{"summary":"Empty Try Block","type":"Code Smell","defaultSeverity":"Major","description":"Avoid empty try blocks - what's the point?\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.\n</p>","debt":"20min"},{"summary":"Check ResultSet","type":"Code Smell","defaultSeverity":"Major","description":"Always check the return of one of the navigation method (next,previous,first,last) of a ResultSet. Indeed, if the value return is \"false\", the developer should deal with it !","debt":"5min"},{"summary":"Too Many Fields","type":"Code Smell","defaultSeverity":"Major","description":"Classes that have too many fields could be redesigned to have fewer fields, possibly through some nested object grouping of some of the information. For example, a class with city/state/zip fields could instead have one Address field.","debt":"1h"},{"summary":"Accessor Class Generation","type":"Code Smell","defaultSeverity":"Major","description":"Instantiation by way of private constructors from outside of the constructor's class often causes the generation of an accessor. A factory method, or non-privitization of the constructor can eliminate this situation. The generated class file is actually an interface. It gives the accessing class the ability to invoke a new hidden package scope constructor that takes the interface as a supplementary parameter. This turns a private constructor effectively into one with package scope, and is challenging to discern.","debt":"20min"},{"summary":"Extends Object","type":"Code Smell","defaultSeverity":"Minor","description":"No need to explicitly extend Object. Example: \n<pre>\npublic class Foo extends Object { // not required\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1939'>S1939</a> instead.\n</p>","debt":"2min"},{"summary":"Naming - Suspicious equals method name","type":"Code Smell","defaultSeverity":"Critical","description":"The method name and parameter number are suspiciously close to equals(Object), which may mean you are intending to override the equals(Object) method. Example :\n<pre>\npublic class Foo {\n  public int equals(Object o) {\n  // oops, this probably was supposed to be boolean equals\n  }\n  public boolean equals(String s) {\n  // oops, this probably was supposed to be equals(Object)\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1201'>S1201</a> instead.\n</p>","debt":"10min"},{"summary":"Inefficient String Buffering","type":"Code Smell","defaultSeverity":"Major","description":"Avoid concatenating non literals in a StringBuffer constructor or append().","debt":"20min"},{"summary":"Non Static Initializer","type":"Code Smell","defaultSeverity":"Major","description":"A nonstatic initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing. Example :<br/><code>public class MyClass {<br/>// this block gets run before any call to a constructor {<br/>System.out.println(\"I am about to construct myself\");<br/>}<br/>}</code>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1171'>S1171</a> instead.\n</p>","debt":"20min"},{"summary":"Replace Enumeration With Iterator","type":"Code Smell","defaultSeverity":"Major","description":"Consider replacing this Enumeration with the newer java.util.Iterator\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1150'>S1150</a> instead.\n</p>","debt":"1h"},{"summary":"Avoid Protected Field In Final Class","type":"Code Smell","defaultSeverity":"Major","description":"Do not use protected fields in final classes since they cannot be subclassed. Clarify your intent by using private or package access modifiers instead.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2156'>S2156</a> instead.\n</p>","debt":"10min"},{"summary":"Avoid Using Octal Values","type":"Code Smell","defaultSeverity":"Major","description":"Integer literals should not start with zero. Zero means that the rest of literal will be interpreted as an octal value.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1314'>S1314</a> instead.\n</p>","debt":"5min"},{"summary":"Naming - Suspicious constant field name","type":"Code Smell","defaultSeverity":"Major","description":"A field name is all in uppercase characters, which in Sun's Java naming conventions indicate a constant. However, the field is not final. Example :\n<pre>\npublic class Foo {\n  // this is bad, since someone could accidentally\n  // do PI = 2.71828; which is actualy e\n  // final double PI = 3.16; is ok\n  double PI = 3.16;\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00116'>S00116</a> instead.\n</p>","debt":"10min"},{"summary":"Long Variable","type":"Code Smell","defaultSeverity":"Major","description":"Detects when a field, formal or local variable is declared with a long name.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00117'>S00117</a> instead.\n</p>","debt":"5min"},{"summary":"Unnecessary parentheses","type":"Code Smell","defaultSeverity":"Minor","description":"Sometimes expressions are wrapped in unnecessary parentheses, making them look like a function call. Example :\n<pre>\npublic class Foo {\n  boolean bar() {\n    return (true);\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessParenthesesCheck'>UselessParenthesesCheck</a> instead.\n</p>","debt":"5min"},{"summary":"Clone Method Must Implement Cloneable (With Type Resolution)","type":"Code Smell","defaultSeverity":"Major","description":"The method clone() should only be implemented if the class implements the Cloneable interface with the exception \nof a final method that only throws CloneNotSupportedException. This version uses PMD's type resolution facilities, \nand can detect if the class implements or extends a Cloneable class. Example: \n<pre>\npublic class MyClass {\n  public Object clone() throws CloneNotSupportedException {\n    return foo;\n  }\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> instead.\n</p>","debt":"20min"},{"summary":"Excessive Parameter List","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nLong parameter lists can indicate that a new object should be created to wrap the numerous parameters. Basically, try to group the parameters together.\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00107'>S00107</a> instead.\n</p>","debt":"1h"},{"summary":"Coupling between objects","type":"Code Smell","defaultSeverity":"Major","description":"This rule counts unique attributes, local variables and return types within an object. A number higher than specified threshold can indicate a high degree of coupling.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1200'>S1200</a> instead.\n</p>","debt":"2h"},{"summary":"Non Case Label In Switch Statement","type":"Code Smell","defaultSeverity":"Major","description":"A non-case label (e.g. a named break/continue label) was present in a switch statement. This legal, but confusing. It is easy to mix up the case labels and the non-case labels.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1219'>S1219</a> instead.\n</p>","debt":"10min"},{"summary":"Duplicate Imports","type":"Code Smell","defaultSeverity":"Minor","description":"Avoid duplicate import statements.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessImportCheck'>UselessImportCheck</a> instead.\n</p>","debt":"5min"},{"summary":"Android - Do Not Hard Code SD Card","type":"Code Smell","defaultSeverity":"Major","description":"Use Environment.getExternalStorageDirectory() instead of \"/sdcard\".","debt":"10min"},{"summary":"Use Varargs","type":"Code Smell","defaultSeverity":"Major","description":"Java 5 introduced the varargs parameter declaration for methods and constructors.  This syntactic \nsugar provides flexibility for users of these methods and constructors, allowing them to avoid \nhaving to deal with the creation of an array. Example: \n<pre>\npublic class Foo {\n   public void foo(String s, Object[] args) {\n      // Do something here...\n   }\n\n   public void bar(String s, Object... args) {\n      // Ahh, varargs tastes much better...\n   }\n}\n</pre>","debt":"10min"},{"summary":"Assignment In Operand","type":"Code Smell","defaultSeverity":"Major","description":"Avoid assignments in operands; this can make code more complicated and harder to read.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AAssignmentInSubExpressionCheck'>AssignmentInSubExpressionCheck</a> instead.\n</p>","debt":"10min"},{"summary":"Ternary operator with a boolean literal can be simplified with a boolean expression","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  Look for ternary operators with the form condition ? literalBoolean : foo or condition ? foo : literalBoolean.\n</p>\n\n<p>Examples:</p>\n<pre>\npublic class Foo {\n  public boolean test() {\n    return condition ? true : something(); // can be as simple as return condition || something();\n  }\n\n  public void test2() {\n    final boolean value = condition ? false : something(); // can be as simple as value = !condition && something();\n  }\n\n  public boolean test3() {\n    return condition ? something() : true; // can be as simple as return !condition || something();\n  }\n\n  public void test4() {\n    final boolean otherValue = condition ? something() : false; // can be as simple as condition && something();\n  }\n}\n</pre>","debt":"5min"},{"summary":"Avoid Using Volatile","type":"Code Smell","defaultSeverity":"Major","description":"Use of the keyword \"volatile\" is general used to fine tune a Java application, and therefore, requires a good expertise of the Java Memory Model. Morover, its range of action is somewhat misknown. Therefore, the volatile keyword should not be used for maintenance purpose and portability.","debt":"20min"},{"summary":"Avoid Throwing Null Pointer Exception","type":"Code Smell","defaultSeverity":"Major","description":"Avoid throwing a NullPointerException - it's confusing because most people will assume that the virtual machine threw it. Consider using an IllegalArgumentException instead; this will be clearly seen as a programmer-initiated exception.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1695'>S1695</a> instead.\n</p>","debt":"20min"},{"summary":"Avoid Prefixing Method Parameters","type":"Code Smell","defaultSeverity":"Major","description":"Prefixing parameters by 'in' or 'out' pollutes the name of the parameters and reduces code readability.\nTo indicate whether or not a parameter will be modify in a method, its better to document method\nbehavior with Javadoc. Example: \n<pre>\n// Not really clear\npublic class Foo {\n  public void bar(\n      int inLeftOperand,\n      Result outRightOperand) {\n      outRightOperand.setValue(inLeftOperand * outRightOperand.getValue());\n  }\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00117'>S00117</a> instead.\n</p>","debt":"5min"},{"summary":"While Loops Must Use Braces","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nAvoid using 'while' statements without using curly braces.\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00121'>S00121</a> instead.\n</p>","debt":"10min"},{"summary":"Default Package","type":"Code Smell","defaultSeverity":"Minor","description":"Use explicit scoping instead of the default package private level.","debt":"15min"},{"summary":"Too many methods","type":"Code Smell","defaultSeverity":"Major","description":"A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1448'>S1448</a> instead.\n</p>","debt":"3h"},{"summary":"If Else Stmts Must Use Braces","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nAvoid using if..else statements without using curly braces.\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00121'>S00121</a> instead.\n</p>","debt":"5min"},{"summary":"Avoid Decimal Literals In Big Decimal Constructor","type":"Code Smell","defaultSeverity":"Major","description":"One might assume that new BigDecimal(.1) is exactly equal to .1, but it is actually equal to .1000000000000000055511151231257827021181583404541015625. This is so because .1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length). Thus, the long value that is being passed in to the constructor is not exactly equal to .1, appearances notwithstanding. The (String) constructor, on the other hand, is perfectly predictable: 'new BigDecimal(.1)' is exactly equal to .1, as one would expect. Therefore, it is generally recommended that the (String) constructor be used in preference to this one.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2111'>S2111</a> instead.\n</p>","debt":"5min"},{"summary":"Finalize Should Be Protected","type":"Code Smell","defaultSeverity":"Major","description":"If you override finalize(), make it protected. If you make it public, other classes may call it.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1174'>S1174</a> instead.\n</p>","debt":"5min"},{"summary":"Security - Method returns internal array","type":"Vulnerability","defaultSeverity":"Critical","description":"Exposing internal arrays directly allows the user to modify some code that could be critical. It is safer to return a copy of the array.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2384'>S2384</a> instead.\n</p>","debt":"20min"},{"summary":"Use Collection Is Empty","type":"Code Smell","defaultSeverity":"Minor","description":"The isEmpty() method on java.util.Collection is provided to see if a collection has any elements. Comparing the value of size() to 0 merely duplicates existing behavior.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1155'>S1155</a> instead.\n</p>","debt":"5min"},{"summary":"Use Index Of Char","type":"Code Smell","defaultSeverity":"Major","description":"Use String.indexOf(char) when checking for the index of a single character; it executes faster.","debt":"5min"},{"summary":"Avoid Print Stack Trace","type":"Code Smell","defaultSeverity":"Major","description":"Avoid printStackTrace(); use a logger call instead.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1148'>S1148</a> instead.\n</p>","debt":"30min"},{"summary":"Singular Field","type":"Code Smell","defaultSeverity":"Minor","description":"A field that's only used by one method could perhaps be replaced by a local variable.","debt":"10min"},{"summary":"Default label not last in switch statement","type":"Code Smell","defaultSeverity":"Major","description":"Switch statements should have a default label. Example :\n  <pre>\npublic class Foo {\n void bar(int a) {\n  switch (a) {\n   case 1:  // do something\n      break;\n   default:  // the default case should be last, by convention\n      break;\n   case 2:\n      break;\n  }\n }\n}\n  </pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3ASwitchLastCaseIsDefaultCheck'>SwitchLastCaseIsDefaultCheck</a> instead.\n</p>","debt":"5min"},{"summary":"Local variable could be final","type":"Code Smell","defaultSeverity":"Minor","description":"A local variable assigned only once can be declared final. Example :\n  <pre>\npublic class Bar {\n public void foo () {\n  String a = \"a\"; //if a will not be assigned again it is better to do this:\n  final String b = \"b\";\n }\n}\n  </pre>","debt":"5min"},{"summary":"Simple Date Format Needs Locale","type":"Code Smell","defaultSeverity":"Major","description":"Be sure to specify a Locale when creating a new instance of SimpleDateFormat.","debt":"15min"},{"summary":"Return From Finally Block","type":"Code Smell","defaultSeverity":"Major","description":"Avoid returning from a finally block - this can discard exceptions.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1143'>S1143</a> instead.\n</p>","debt":"20min"},{"summary":"Position Literals First In Comparisons","type":"Code Smell","defaultSeverity":"Major","description":"Position literals first in String comparisons - that way if the String is null you won't get a NullPointerException, it'll just return false.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1132'>S1132</a> instead.\n</p>","debt":"2min"},{"summary":"Unnecessary Conversion Temporary","type":"Code Smell","defaultSeverity":"Major","description":"Avoid unnecessary temporaries when converting primitives to Strings\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1158'>S1158</a> instead.\n</p>","debt":"5min"},{"summary":"Unconditional If Statement","type":"Code Smell","defaultSeverity":"Critical","description":"Do not use if statements that are always true or always false.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2583'>S2583</a> instead.\n</p>","debt":"10min"},{"summary":"Import From Same Package","type":"Code Smell","defaultSeverity":"Minor","description":"No need to import a type that lives in the same package.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessImportCheck'>UselessImportCheck</a> instead.\n</p>","debt":"5min"},{"summary":"Naming - Class naming conventions","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nClass names should always begin with an upper case character.\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00101'>S00101</a> and <a href='/coding_rules#rule_key=squid%3AS00114'>S00114</a> instead.\n</p>","debt":"10min"},{"summary":"Avoid Accessibility Alteration","type":"Code Smell","defaultSeverity":"Major","description":"Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(), as the interface PrivilegedAction, allow to alter, at runtime, the visilibilty of variable, classes, or methods, even if they are private. Obviously, no one should do so, as such behavior is against everything encapsulation principal stands for.","debt":"1h"},{"summary":"Do Not Use Threads","type":"Code Smell","defaultSeverity":"Major","description":"The J2EE specification explicitly forbid use of threads.","debt":"1h"},{"summary":"Unnecessary constructor","type":"Code Smell","defaultSeverity":"Major","description":"This rule detects when a constructor is not necessary; i.e., when there's only one constructor, it's public, has an empty body, and takes no arguments.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1186'>S1186</a> instead.\n</p>","debt":"5min"},{"summary":"Misplaced Null Check","type":"Code Smell","defaultSeverity":"Critical","description":"The null check here is misplaced. if the variable is null you'll get a NullPointerException. \nEither the check is useless (the variable will never be null) or it's incorrect.\n<br>Example :\n<pre>\nif (object1!=null && object2.equals(object1)) { \n  ...\n}      \n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1697'>S1697</a> or <a href='/coding_rules#rule_key=squid%3AS2259'>S2259</a> instead.\n</p>","debt":"5min"},{"summary":"Avoid Using Short Type","type":"Code Smell","defaultSeverity":"Major","description":"Java uses the short type to reduce memory usage, not to optimize calculation. On the contrary, the jvm does not has an arithmetic capabilities with the type short. So, the P-code must convert the short into int, then do the proper caculation and then again, convert int to short. So, use of the \"short\" type may have a great effect on memory usage.","debt":"5min"},{"summary":"Field Declarations Should Be At Start Of Class","type":"Code Smell","defaultSeverity":"Minor","description":"Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes. Example: \n<pre>\npublic class HelloWorldBean {\n\n  // Field declared before methods / inner classes - OK\n  private String _thing;\n\n  public String getMessage() {\n    return \"Hello World!\";\n  }\n\n  // Field declared after methods / inner classes - avoid this\n  private String _fieldInWrongLocation;\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1213'>S1213</a> instead.\n</p>","debt":"10min"},{"summary":"Position Literals First In Case Insensitive Comparisons","type":"Code Smell","defaultSeverity":"Major","description":"Position literals first in comparisons, if the second argument is null then NullPointerExceptions \ncan be avoided, they will just return false. Example: \n<pre>\nclass Foo {\n  boolean bar(String x) {\n    return x.equalsIgnoreCase(\"2\"); // should be \"2\".equalsIgnoreCase(x)\n  }\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1132'>S1132</a> instead.\n</p>","debt":"2min"},{"summary":"Finalize Overloaded","type":"Code Smell","defaultSeverity":"Major","description":"Methods named finalize() should not have parameters. It is confusing and probably a bug to overload finalize(). It will not be called by the VM.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1175'>S1175</a> instead.\n</p>","debt":"30min"},{"summary":"Loose Package Coupling","type":"Code Smell","defaultSeverity":"Major","description":"Avoid using classes from the configured package hierarchy outside of the package hierarchy, \nexcept when using one of the configured allowed classes. Example: \n<pre>\npackage some.package;\n\nimport some.other.package.subpackage.subsubpackage.DontUseThisClass;\n\npublic class Bar {\n   DontUseThisClass boo = new DontUseThisClass();\n}\n</pre>\n\n<p>\n   This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AArchitecturalConstraint'>ArchitecturalConstraint</a> instead.\n</p>","debt":"15min"},{"summary":"Empty Finally Block","type":"Code Smell","defaultSeverity":"Critical","description":"<p>\nAvoid empty finally blocks - these can be deleted.\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.\n</p>","debt":"15min"},{"summary":"Null Assignment","type":"Code Smell","defaultSeverity":"Major","description":"Assigning a null to a variable (outside of its declaration) is usually bad form. Some times, the assignment is an indication that the programmer doesn't completely understand what is going on in the code. NOTE: This sort of assignment may in rare cases be useful to encourage garbage collection. If that's what you're using it for, by all means, disregard this rule :-)","debt":"15min"},{"summary":"Naming - Short method name","type":"Code Smell","defaultSeverity":"Major","description":"Detects when very short method names are used. Example :\n<pre>\npublic class ShortMethod {\n  public void a( int i ) { // Violation\n  }\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00100'>S00100</a> instead.\n</p>","debt":"10min"},{"summary":"Avoid Catching Throwable","type":"Code Smell","defaultSeverity":"Critical","description":"This is dangerous because it casts too wide a net; it can catch things like OutOfMemoryError.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1181'>S1181</a> instead.\n</p>","debt":"15min"},{"summary":"At Least One Constructor","type":"Code Smell","defaultSeverity":"Major","description":"Each class should declare at least one constructor.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1118'>S1118</a> or <a href='/coding_rules#rule_key=squid%3AS1258'>S1258</a> instead.\n</p>","debt":"15min"},{"summary":"Short Class Name","type":"Code Smell","defaultSeverity":"Minor","description":"Classnames with fewer than five characters are not recommended. Example: \n<pre>\npublic class Foo {\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00101'>S00101</a> instead.\n</p>","debt":"5min"},{"summary":"Proper clone implementation","type":"Code Smell","defaultSeverity":"Critical","description":"Object clone() should be implemented with super.clone(). Example :\n  <pre>\nclass Foo{\n    public Object clone(){\n        return new Foo(); // This is bad\n    }\n}\n  </pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> instead.\n</p>","debt":"20min"},{"summary":"Comment Content","type":"Code Smell","defaultSeverity":"Minor","description":"A rule for the politically correct... we don't want to offend anyone. Example: \n<pre>\n// OMG, this is horrible, Bob is an idiot !!!\n</pre>","debt":"2min"},{"summary":"Useless String Value Of","type":"Code Smell","defaultSeverity":"Minor","description":"No need to call String.valueOf to append to a string; just use the valueOf() argument directly.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1153'>S1153</a> instead.\n</p>","debt":"5min"},{"summary":"Avoid StringBuffer field","type":"Code Smell","defaultSeverity":"Major","description":"StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time). Example :\n<pre>\nclass Foo {\n  private StringBuffer memoryLeak;\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1149'>S1149</a> instead.\n</p>","debt":"20min"},{"summary":"Abstract naming","type":"Code Smell","defaultSeverity":"Major","description":"Abstract classes should be named 'AbstractXXX'. Example :\n  <pre>\npublic abstract class Foo { // should be AbstractFoo\n}\n  </pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00118'>S00118</a> instead.\n</p>","debt":"5min"},{"summary":"Signature Declare Throws Exception (With Type Resolution)","type":"Code Smell","defaultSeverity":"Major","description":"It is unclear which exceptions that can be thrown from the methods.\nIt might be difficult to document and understand the vague interfaces.\nUse either a class derived from RuntimeException or a checked exception.\n\nJUnit classes are excluded. Example: \n<pre>\npublic void methodThrowingException() throws Exception {\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00112'>S00112</a> instead.\n</p>","debt":"20min"},{"summary":"Security - Array is stored directly","type":"Vulnerability","defaultSeverity":"Critical","description":"Constructors and methods receiving arrays should clone objects and store the copy. This prevents that future changes from the user affect the internal functionality.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2384'>S2384</a> instead.\n</p>","debt":"20min"},{"summary":"Missing Break In Switch","type":"Code Smell","defaultSeverity":"Critical","description":"A switch statement without an enclosed break statement may be a bug.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS128'>S128</a> instead.\n</p>","debt":"5min"},{"summary":"Guard Log Statement Java Util","type":"Code Smell","defaultSeverity":"Major","description":"Whenever using a log level, one should check if the loglevel is actually enabled, or\notherwise skip the associate String creation and manipulation. Example: \n<pre>\n// Add this for performance\nif (log.isLoggable(Level.FINE)) { ...\n  log.fine(\"This happens\");\n</pre>","debt":"5min"},{"summary":"Logic Inversion","type":"Code Smell","defaultSeverity":"Minor","description":"Use opposite operator instead of negating the whole expression with a logic complement operator. Example: \n<pre>\npublic boolean bar(int a, int b) {\n\n  if (!(a == b)) // use !=\n    return false;\n\n  if (!(a < b)) // use >=\n    return false;\n\n  return true;\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1940'>S1940</a> instead.\n</p>","debt":"2min"},{"summary":"Loose Coupling (With Type Resolution)","type":"Code Smell","defaultSeverity":"Major","description":"Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead Example: \n<pre>\nimport java.util.ArrayList;\nimport java.util.HashSet;\n\npublic class Bar {\n\n  // Use List instead\n  private ArrayList list = new ArrayList();\n\n  // Use Set instead\n  public HashSet getFoo() {\n    return new HashSet();\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1319'>S1319</a> instead.\n</p>","debt":"10min"},{"summary":"Empty Statement Not In Loop","type":"Code Smell","defaultSeverity":"Major","description":"An empty statement (aka a semicolon by itself) that is not used as the sole body of a for loop or while loop is probably a bug. It could also be a double semicolon, which is useless and should be removed.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AEmptyStatementUsageCheck'>EmptyStatementUsageCheck</a> instead.\n</p>","debt":"10min"},{"summary":"Only one getInstance method is allowed","type":"Code Smell","defaultSeverity":"Critical","description":"<p>\n  Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.\n</p>\n\n<p>Examples:</p>\n<pre>\npublic class Singleton {\n  private static Singleton singleton = new Singleton( );\n\n  private Singleton() { }\n\n  public static Singleton getInstance( ) {\n    return singleton;\n  }\n\n  public static Singleton getInstance(Object obj) {\n    Singleton singleton = (Singleton) obj;\n    return singleton; //violation\n  }\n}\n</pre>","debt":"2min"},{"summary":"Simplify boolean returns","type":"Code Smell","defaultSeverity":"Minor","description":"Avoid unnecessary if..then..else statements when returning a boolean. Example :\n<pre>\npublic class Foo {\n  private int bar =2;\n  public boolean isBarEqualsTo(int x) {\n    // this bit of code\n    if (bar == x) {\n     return true;\n    } else {\n     return false;\n    }\n    // can be replaced with a simple\n    // return bar == x;\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1126'>S1126</a> instead.\n</p>","debt":"10min"},{"summary":"Naming - Method with same name as enclosing class","type":"Code Smell","defaultSeverity":"Major","description":"Non-constructor methods should not have the same name as the enclosing class. Example :\n<pre>\npublic class MyClass {\n  // this is bad because it is a method\n  public void MyClass() {}\n  // this is OK because it is a constructor\n  public MyClass() {}\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1223'>S1223</a> instead.\n</p>","debt":"10min"},{"summary":"Generics Naming","type":"Code Smell","defaultSeverity":"Major","description":"Generics names should be a one letter long and upper case.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00119'>S00119</a> instead.\n</p>","debt":"20min"},{"summary":"getInstance should cache the instance","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.\n</p>\n\n<p>Examples:</p>\n<pre>\nclass Singleton {\n  private static Singleton instance = null;\n\n  public static Singleton getInstance() {\n    synchronized(Singleton.class) {\n      return new Singleton();\n    }\n  }\n}\n</pre>","debt":"10min"},{"summary":"Idempotent Operations","type":"Code Smell","defaultSeverity":"Major","description":"Avoid idempotent operations - they are have no effect. Example : <br/><code>int x = 2;<br/> x = x;</code>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> instead.\n</p>","debt":"3min"},{"summary":"Consecutive Literal Appends","type":"Code Smell","defaultSeverity":"Minor","description":"Consecutively calling StringBuffer.append with String literals","debt":"5min"},{"summary":"Use Notify All Instead Of Notify","type":"Code Smell","defaultSeverity":"Major","description":"Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only one is chosen. The thread chosen is arbitrary; thus it's usually safer to call notifyAll() instead.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2446'>S2446</a> instead.\n</p>","debt":"30min"},{"summary":"Excessive Method Length","type":"Code Smell","defaultSeverity":"Major","description":"Violations of this rule usually indicate that the method is doing too much. Try to reduce the method size by creating helper methods and removing any copy/pasted code.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS138'>S138</a> instead.\n</p>","debt":"1h"},{"summary":"Do not call garbage collection explicitly","type":"Code Smell","defaultSeverity":"Critical","description":"Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not. Moreover, \"modern\" jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself. Example :\n<pre>\n public class GCCall\n{\n  public GCCall()\n  {\n  // Explicit gc call !\n    System.gc();\n  }\n  public void doSomething()\n  {\n    // Explicit gc call !\n    Runtime.getRuntime().gc();\n  }\n\n  public explicitGCcall() { // Explicit gc call ! System.gc(); }\n\n  public void doSomething() { // Explicit gc call ! Runtime.getRuntime().gc(); }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1215'>S1215</a> instead.\n</p>","debt":"30min"},{"summary":"Avoid Array Loops","type":"Code Smell","defaultSeverity":"Major","description":"Instead of copying data between two arrays, use System.arrayCopy method","debt":"10min"},{"summary":"Avoid Using Native Code","type":"Code Smell","defaultSeverity":"Major","description":"As JVM and Java language offer already many help in creating application, it should be very rare to have to rely on non-java code. Even though, it is rare to actually have to use Java Native Interface (JNI). As the use of JNI make application less portable, and harder to maintain, it is not recommended.","debt":"3h"},{"summary":"Non Thread Safe Singleton","type":"Code Smell","defaultSeverity":"Major","description":"Non-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly. Static singletons are usually not needed as only a single instance exists anyway. Other possible fixes are to synchronize the entire method or to use an initialize-on-demand holder class (do not use the double-check idiom). See Effective Java, item 48.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2444'>S2444</a> instead.\n</p>","debt":"1h"},{"summary":"Boolean Instantiation","type":"Code Smell","defaultSeverity":"Major","description":"Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead.","debt":"5min"},{"summary":"Return empty array rather than null","type":"Code Smell","defaultSeverity":"Minor","description":"For any method that returns an array, it's a better behavior to return an empty array rather than a null reference. Example :\n<pre>\npublic class Example\n{\n  // Not a good idea...\n  public int []badBehavior()\n  {\n    // ...\n    return null;\n  }\n\n  // Good behavior\n  public String[] bonnePratique()\n  {\n    //...\n    return new String[0];\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1168'>S1168</a> instead.\n</p>","debt":"15min"},{"summary":"Unused Imports (With Type Resolution)","type":"Code Smell","defaultSeverity":"Info","description":"Avoid unused import statements. This rule will find unused on demand imports, i.e. import com.foo.*. Example: \n<pre>\nimport java.io.*; // not referenced or required\n\npublic class Foo {}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessImportCheck'>UselessImportCheck</a> instead.\n</p>","debt":"2min"},{"summary":"Logger Is Not Static Final","type":"Code Smell","defaultSeverity":"Major","description":"In most cases, the Logger can be declared static and final.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1312'>S1312</a> instead.\n</p>","debt":"5min"},{"summary":"Dont Import Sun","type":"Code Smell","defaultSeverity":"Minor","description":"Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1191'>S1191</a> instead.\n</p>","debt":"1h"},{"summary":"Strict Exception - Avoid throwing new instance of same exception","type":"Code Smell","defaultSeverity":"Major","description":"Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to code size and runtime complexity. Example :\n<pre>\npublic class Foo {\n  void bar() {\n    try {\n      // do something\n    }  catch (SomeException se) {\n      // harmless comment\n      throw new SomeException(se);\n    }\n  }\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1166'>S1166</a> instead.\n</p>","debt":"10min"},{"summary":"Switch statements should have default","type":"Code Smell","defaultSeverity":"Major","description":"Switch statements should have a default label. Example :\n<pre>\npublic class Foo {\n public void bar() {\n  int x = 2;\n  switch (x) {\n   case 2: int j = 8;\n  }\n }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3ASwitchLastCaseIsDefaultCheck'>SwitchLastCaseIsDefaultCheck</a> instead.\n</p>","debt":"15min"},{"summary":"Preserve Stack Trace","type":"Code Smell","defaultSeverity":"Major","description":"Throwing a new exception from a catch block without passing the original exception into the new Exception will cause the true stack trace to be lost, and can make it difficult to debug effectively.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1166'>S1166</a> instead.\n</p>","debt":"10min"},{"summary":"Unused imports","type":"Code Smell","defaultSeverity":"Info","description":"Avoid unused import statements. Example :\n  <pre>\n// this is bad\nimport java.io.File;\npublic class Foo {}\n  </pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessImportCheck'>UselessImportCheck</a> instead.\n</p>"},{"summary":"Guard Log Statement","type":"Code Smell","defaultSeverity":"Major","description":"Whenever using a log level, one should check if the loglevel is actually enabled, or\notherwise skip the associate String creation and manipulation. Example: \n<pre>\n// Add this for performance\nif (log.isDebugEnabled() { ...\n  log.debug(\"This happens\");\n</pre>","debt":"5min"},{"summary":"Naming - Suspicious Hashcode method name","type":"Code Smell","defaultSeverity":"Major","description":"The method name and return type are suspiciously close to hashCode(), which may mean you are intending to override the hashCode() method. Example :\n<pre>\npublic class Foo {\n  public int hashcode() {\n  // oops, this probably was supposed to be hashCode\n  }\n}</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1221'>S1221</a> instead.\n</p>","debt":"10min"},{"summary":"Missing Serial Version UID","type":"Code Smell","defaultSeverity":"Major","description":"Classes that are serializable should provide a serialVersionUID field.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2057'>S2057</a> instead.\n</p>","debt":"5min"},{"summary":"Simplify Conditional","type":"Code Smell","defaultSeverity":"Major","description":"No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.","debt":"5min"},{"summary":"Final Field Could Be Static","type":"Code Smell","defaultSeverity":"Minor","description":"If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1170'>S1170</a> instead.\n</p>","debt":"10min"},{"summary":"Loose coupling","type":"Code Smell","defaultSeverity":"Major","description":"Avoid using implementation types (i.e., HashSet); use the interface (i.e, Set) instead\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1319'>S1319</a> instead.\n</p>","debt":"10min"},{"summary":"Useless Operation On Immutable","type":"Code Smell","defaultSeverity":"Critical","description":"An operation on an Immutable object (BigDecimal or BigInteger) won't change the object itself. The result of the operation is a new object. Therefore, ignoring the operation result is an error.","debt":"10min"},{"summary":"Unused local variable","type":"Code Smell","defaultSeverity":"Major","description":"Detects when a local variable is declared and/or assigned, but not used.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1481'>S1481</a> instead.\n</p>","debt":"5min"},{"summary":"Avoid Deeply Nested If Stmts","type":"Code Smell","defaultSeverity":"Major","description":"Deeply nested if..then statements are hard to read.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS134'>S134</a> instead.\n</p>","debt":"20min"},{"summary":"Collapsible If Statements","type":"Code Smell","defaultSeverity":"Minor","description":"Sometimes two 'if' statements can be consolidated by separating their conditions with a boolean short-circuit operator.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1066'>S1066</a> instead.\n</p>","debt":"5min"},{"summary":"Avoid Final Local Variable","type":"Code Smell","defaultSeverity":"Major","description":"Avoid using final local variables, turn them into fields. Example :\n<pre>\npublic class MyClass {\n    public void foo() {\n        final String finalLocalVariable;\n    }\n}\n  </pre>","debt":"5min"},{"summary":"Avoid Calling Finalize","type":"Code Smell","defaultSeverity":"Major","description":"Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AObjectFinalizeCheck'>ObjectFinalizeCheck</a> instead.\n</p>","debt":"10min"},{"summary":"Avoid Catching NPE","type":"Code Smell","defaultSeverity":"Major","description":"Code should never throw NPE under normal circumstances. A catch block may hide the original error, causing other more subtle errors in its wake.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1696'>S1696</a> instead.\n</p>","debt":"15min"},{"summary":"Ncss Type Count","type":"Code Smell","defaultSeverity":"Major","description":"This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=common-java%3AInsufficientCommentDensity'>InsufficientCommentDensity</a> instead.\n</p>","debt":"1h"},{"summary":"Java5 migration - Long instantiation","type":"Code Smell","defaultSeverity":"Major","description":"In JDK 1.5, calling new Long() causes memory allocation. Long.valueOf() is more memory friendly. Example :\n  <pre>\npublic class Foo {\nprivate Long i = new Long(0); // change to Long i =\nLong.valueOf(0);\n}\n  </pre>","debt":"5min"},{"summary":"Append Character With Char","type":"Code Smell","defaultSeverity":"Minor","description":"Avoid concatenating characters as strings in StringBuffer.append.","debt":"5min"},{"summary":"Avoid Thread Group","type":"Code Smell","defaultSeverity":"Critical","description":"Avoid using ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread safe.","debt":"1h"},{"summary":"Inefficient Empty String Check","type":"Code Smell","defaultSeverity":"Major","description":"String.trim().length() is an inefficient way to check if a String is really empty, as it creates a new String object just to check its size. Consider creating a static function that loops through a string, checking Character.isWhitespace() on each character and returning false if a non-whitespace character is found.","debt":"30min"},{"summary":"Do Not Extend Java Lang Error","type":"Code Smell","defaultSeverity":"Major","description":"Errors are system exceptions. Do not extend them.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1194'>S1194</a> instead.\n</p>","debt":"10min"},{"summary":"Use Equals To Compare Strings","type":"Code Smell","defaultSeverity":"Major","description":"Using \"==\" or \"!=\" to compare strings only works if intern version is used on both sides.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AStringEqualityComparisonCheck'>StringEqualityComparisonCheck</a> or <a href='/coding_rules#rule_key=squid%3AS1698'>S1698</a> instead.\n</p>","debt":"5min"},{"summary":"Use Utility Class","type":"Code Smell","defaultSeverity":"Major","description":"For classes that only have static methods, consider making them utility classes. \nNote that this doesn't apply to abstract classes, since their subclasses may well include non-static methods. \nAlso, if you want this class to be a utility class, remember to add a private constructor to prevent instantiation. \n(Note, that this use was known before PMD 5.1.0 as UseSingleton).\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1118'>S1118</a> instead.\n</p>"},{"summary":"Empty Catch Block","type":"Code Smell","defaultSeverity":"Critical","description":"<p>\nEmpty Catch Block finds instances where an exception is caught, but nothing is done. In most circumstances, this swallows an exception which should either be acted on or reported.\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.\n</p>","debt":"10min"},{"summary":"Std Cyclomatic Complexity","type":"Code Smell","defaultSeverity":"Major","description":"Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry. The decision points include 'if', 'while', 'for', and 'case labels' calls. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote high complexity, and 11+ is very high complexity.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AMethodCyclomaticComplexity'>MethodCyclomaticComplexity</a> or <a href='/coding_rules#rule_key=squid%3AClassCyclomaticComplexity'>ClassCyclomaticComplexity</a> instead.\n</p>","debt":"1h"},{"summary":"Simplify Starts With","type":"Code Smell","defaultSeverity":"Minor","description":"Since it passes in a literal of length 1, this call to String.startsWith can be rewritten using String.charAt(0) to save some time.","debt":"10min"},{"summary":"Immutable Field","type":"Code Smell","defaultSeverity":"Major","description":"Identifies private fields whose values never change once they are initialized either in the declaration of the field or by a constructor. This aids in converting existing classes to immutable classes.","debt":"10min"},{"summary":"Empty Method In Abstract Class Should Be Abstract","type":"Code Smell","defaultSeverity":"Major","description":"An empty method in an abstract class should be abstract instead, as developer may rely on this empty implementation rather than code the appropriate one.\n  <pre>\npublic abstract class ShouldBeAbstract\n{\n  public Object couldBeAbstract()\n  {\n  // Should be abstract method ?\n    return null;\n  }\n\n  public void couldBeAbstract()\n  {\n  }\n}\n</pre>","debt":"15min"},{"summary":"Unnecessary Case Change","type":"Code Smell","defaultSeverity":"Minor","description":"Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1157'>S1157</a> instead.\n</p>","debt":"5min"},{"summary":"Only One Return","type":"Code Smell","defaultSeverity":"Minor","description":"A method should have only one exit point, and that should be the last statement in the method.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1142'>S1142</a> instead.\n</p>","debt":"1h"},{"summary":"Class Cast Exception With To Array","type":"Code Smell","defaultSeverity":"Major","description":"if you need to get an array of a class from your Collection, you should pass an array of the desidered class as the parameter of the toArray method. Otherwise you will get a ClassCastException.","debt":"10min"},{"summary":"Use ConcurrentHashMap","type":"Code Smell","defaultSeverity":"Major","description":"Since Java5 brought a new implementation of the Map interface, specially designed for concurrent application.","debt":"30min"},{"summary":"Uncommented Empty Method","type":"Code Smell","defaultSeverity":"Major","description":"<p>Uncommented Empty Method finds instances where a method does not contain statements, but there is no comment. By explicitly commenting empty methods it is easier to distinguish between intentional (commented) and unintentional empty methods.</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1186'>S1186</a> instead.\n</p>","debt":"15min"},{"summary":"Method Argument Could Be Final","type":"Code Smell","defaultSeverity":"Minor","description":"A method argument that is never assigned can be declared final.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1226'>S1226</a> instead.\n</p>","debt":"10min"},{"summary":"Unused Null Check In Equals","type":"Code Smell","defaultSeverity":"Major","description":"After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object's equals() method.","debt":"10min"},{"summary":"Optimizable To Array Call","type":"Code Smell","defaultSeverity":"Major","description":"A call to Collection.toArray can use the Collection's size vs an empty Array of the desired type.","debt":"10min"},{"summary":"Abstract class without any methods","type":"Code Smell","defaultSeverity":"Major","description":"If the abstract class does not provides any methods, it may be just a data container that is not to be instantiated. In this case, it's probably better to use a private or a protected constructor in order to prevent instantiation than make the class misleadingly abstract. Example :\n<pre>\npublic class abstract Example {\n  String field;\n  int otherField;\n}\n</pre>\n\n<p>\n This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1694'>S1694</a> instead.\n</p>","debt":"10min"},{"summary":"Dataflow Anomaly Analysis","type":"Code Smell","defaultSeverity":"Major","description":"The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow. From those informations there can be found various problems. 1. UR - Anomaly: There is a reference to a variable that was not defined before. This is a bug and leads to an error. 2. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text. 3. DD - Anomaly: A recently defined variable is redefined. This is ominous but don't have to be a bug.","debt":"20min"},{"summary":"Premature Declaration","type":"Code Smell","defaultSeverity":"Major","description":"Checks for variables that are defined before they might be used. A reference is deemed to be premature if it is created right before a block of code that doesn't use it that also has the ability to return or throw an exception. Example: \n<pre>\npublic int getLength(String[] strings) {\n\n  int length = 0; // declared prematurely\n\n  if (strings == null || strings.length == 0) return 0;\n\n  for (String str : strings) {\n    length += str.length();\n  }\n\n  return length;\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1941'>S1941</a> instead.\n</p>","debt":"2min"},{"summary":"Comment the default access modifier","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  To avoid mistakes if we want that a Method, Field or Nested class have a default access modifier\n  we must add a comment at the beginning of the Method, Field or Nested class.\n  By default the comment must be /* default */, if you want another, you have to provide a regex.\n</p>\n\n<pre>\npublic class Foo {\n    final String stringValue = \"some string\";\n    String getString() {\n       return stringValue;\n    }\n\n    class NestedFoo {\n    }\n}\n\n// should be\npublic class Foo {\n  /* default */ final String stringValue = \"some string\";\n  /* default */ String getString() {\n     return stringValue;\n  }\n\n  /* default */ class NestedFoo {\n  }\n}\n</pre>","debt":"5min"},{"summary":"Avoid Instanceof Checks In Catch Clause","type":"Code Smell","defaultSeverity":"Minor","description":"Each caught exception type should be handled in its own catch clause.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1193'>S1193</a> instead.\n</p>","debt":"10min"},{"summary":"Android - call super last","type":"Code Smell","defaultSeverity":"Major","description":"Super should be called at the end of the method. Example :\n<pre>\npublic class DummyActivity extends Activity {\n  public void onPause() {\n    foo();\n    // missing call to super.onPause()\n  }\n}\n</pre>","debt":"10min"},{"summary":"Flags unnecessary qualified usages of this","type":"Code Smell","defaultSeverity":"Major","description":"<p>Look for qualified this usages in the same class.</p>\n\n<p>Examples:</p>\n\n<pre>\npublic class Foo {\n  final Foo otherFoo = Foo.this;  // use \"this\" directly\n\n  public void doSomething() {\n    final Foo anotherFoo = Foo.this;  // use \"this\" directly\n  }\n\n  private ActionListener returnListener() {\n    return new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        doSomethingWithQualifiedThis(Foo.this);  // This is fine\n      }\n    };\n  }\n\n  private class Foo3 {\n    final Foo myFoo = Foo.this;  // This is fine\n  }\n\n  private class Foo2 {\n    final Foo2 myFoo2 = Foo2.this;  // Use \"this\" direclty\n  }\n}\n</pre>","debt":"2min"},{"summary":"Coupling - excessive imports","type":"Code Smell","defaultSeverity":"Major","description":"A high number of imports can indicate a high degree of coupling within an object. Rule counts the number of unique imports and reports a violation if the count is above the user defined threshold.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1200'>S1200</a> instead.\n</p>","debt":"2h"},{"summary":"Replace Vector With List","type":"Code Smell","defaultSeverity":"Major","description":"Consider replacing Vector usages with the newer java.util.ArrayList if expensive threadsafe operation is not required.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1149'>S1149</a> instead.\n</p>","debt":"20min"},{"summary":"Assignment To Non Final Static","type":"Code Smell","defaultSeverity":"Major","description":"Identifies a possible unsafe usage of a static field.","debt":"10min"},{"summary":"Broken Null Check","type":"Code Smell","defaultSeverity":"Critical","description":"The null check is broken since it will throw a Nullpointer itself. The reason is that a method is called on the object when it is null. It is likely that you used || instead of && or vice versa.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1697'>S1697</a> instead.\n</p>","debt":"5min"},{"summary":"Naming - Variable naming conventions","type":"Code Smell","defaultSeverity":"Major","description":"A variable naming conventions rule - customize this to your liking. Currently, it checks for final variables that should be fully capitalized and non-final variables that should not include underscores.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00115'>S00115</a> and <a href='/coding_rules#rule_key=squid%3AS00116'>S00116</a> instead.\n</p>","debt":"10min"},{"summary":"Avoid Catching Generic Exception","type":"Code Smell","defaultSeverity":"Major","description":"Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2221'>S2221</a> instead.\n</p>","debt":"15min"},{"summary":"Signature Declare Throws Exception","type":"Code Smell","defaultSeverity":"Major","description":"It is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand the vague interfaces. Use either a class derived from RuntimeException or a checked exception.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00112'>S00112</a> instead.\n</p>","debt":"20min"},{"summary":"System Println","type":"Code Smell","defaultSeverity":"Major","description":"System.(out|err).print is used, consider using a logger.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS106'>S106</a> instead.\n</p>","debt":"10min"},{"summary":"Local Home Naming Convention","type":"Code Smell","defaultSeverity":"Major","description":"The Local Home interface of a Session EJB should be suffixed by \"LocalHome\".","debt":"5min"},{"summary":"Unnecessary Wrapper Object Creation","type":"Code Smell","defaultSeverity":"Major","description":"Parsing method should be called directy instead.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1158'>S1158</a> instead.\n</p>","debt":"15min"},{"summary":"Call Super In Constructor","type":"Code Smell","defaultSeverity":"Minor","description":"It is a good practice to call super() in a constructor. If super() is not called but another constructor (such as an overloaded constructor) is called, this rule will not report it.","debt":"5min"},{"summary":"Strict Exception - Do not throw exception in finally","type":"Code Smell","defaultSeverity":"Major","description":"Throwing exception in a finally block is confusing. It may mask exception or a defect of the code, it also render code cleanup uninstable. Example :\n<pre>\npublic class Foo\n{\n  public void bar()\n  {\n    try {\n    // Here do some stuff\n    }\n    catch( Exception e) {\n    // Handling the issue\n    }\n    finally\n    {\n      // is this really a good idea ?\n      throw new Exception();\n    }\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1163'>S1163</a> instead.\n</p>","debt":"30min"},{"summary":"Basic - Empty Initializer","type":"Code Smell","defaultSeverity":"Major","description":"An empty initializer was found. Example :\n<pre>\npublic class Foo {\n\n   static {} // Why ?\n\n   {} // Again, why ?\n\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.\n</p>","debt":"20min"},{"summary":"Suspicious Octal Escape","type":"Code Smell","defaultSeverity":"Major","description":"A suspicious octal escape sequence was found inside a String literal. The Java language specification (section 3.10.6) says an octal escape sequence inside a literal String shall consist of a backslash followed by: OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit Any octal escape sequence followed by non-octal digits can be confusing, e.g. \"\\038\" is interpreted as the octal escape sequence \"\\03\" followed by the literal character 8.","debt":"15min"},{"summary":"Java5 migration - Short instantiation","type":"Code Smell","defaultSeverity":"Major","description":"In JDK 1.5, calling new Short() causes memory allocation. Short.valueOf() is more memory friendly.  Example :\n  <pre>\npublic class Foo {\nprivate Short i = new Short(0); // change to Short i =\nShort.valueOf(0);\n}\n  </pre>","debt":"5min"},{"summary":"Override both equals and hashcode","type":"Bug","defaultSeverity":"Blocker","description":"Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass. Example :\n<pre>\n// this is bad\npublic class Bar {\n  public boolean equals(Object o) {\n      // do some comparison\n  }\n}\n\n// and so is this\npublic class Baz {\n  public int hashCode() {\n      // return some hash value\n  }\n}\n\n// this is OK\npublic class Foo {\n  public boolean equals(Object other) {\n      // do some comparison\n  }\n  public int hashCode() {\n      // return some hash value\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1206'>S1206</a> instead.\n</p>","debt":"30min"},{"summary":"For Loops Must Use Braces","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nAvoid using 'for' statements without using curly braces, like <code>for (int i=0; i<42;i++) foo();</code>\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00121'>S00121</a> instead.\n</p>","debt":"2min"},{"summary":"Use String Buffer For String Appends","type":"Code Smell","defaultSeverity":"Major","description":"Finds usages of += for appending strings.","debt":"30min"},{"summary":"Law Of Demeter","type":"Code Smell","defaultSeverity":"Major","description":"The Law of Demeter is a simple rule, that says \"only talk to friends\". It helps to reduce coupling between classes or objects. \nSee also the references:\nAndrew Hunt, David Thomas, and Ward Cunningham. The Pragmatic Programmer. From Journeyman to Master. Addison-Wesley Longman, Amsterdam, October 1999.;\nK.J. Lieberherr and I.M. Holland. Assuring good style for object-oriented programs. Software, IEEE, 6(5):38–48, 1989.;\nhttp://www.ccs.neu.edu/home/lieber/LoD.html;\nhttp://en.wikipedia.org/wiki/Law_of_Demeter \n<p>Example:</p> \n<pre>\npublic class Foo {\n    /**\n     * This example will result in two violations.\n     */\n    public void example(Bar b) {\n        // this method call is ok, as b is a parameter of \"example\"\n        C c = b.getC();\n        \n        // this method call is a violation, as we are using c, which we got from B.\n        // We should ask b directly instead, e.g. \"b.doItOnC();\"\n        c.doIt();\n        \n        // this is also a violation, just expressed differently as a method chain without temporary variables.\n        b.getC().doIt();\n        \n        // a constructor call, not a method call.\n        D d = new D();\n        // this method call is ok, because we have create the new instance of D locally.\n        d.doSomethingElse(); \n    }\n}\n</pre>","debt":"30min"},{"summary":"Ncss Constructor Count","type":"Code Smell","defaultSeverity":"Major","description":"This rule uses the NCSS (Non Commenting Source Statements) algorithm to determine the number of lines of code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS138'>S138</a> instead.\n</p>","debt":"1h"},{"summary":"Proper Logger","type":"Code Smell","defaultSeverity":"Major","description":"Logger should normally be defined private static final and have the correct class. Private final Log log; is also allowed for rare cases when loggers need to be passed around, but the logger needs to be passed into the constructor.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1312'>S1312</a> instead.\n</p>","debt":"5min"},{"summary":"Finalize Only Calls Super Finalize","type":"Code Smell","defaultSeverity":"Major","description":"If the finalize() is implemented, it should do something besides just calling super.finalize().\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1185'>S1185</a> instead.\n</p>","debt":"5min"},{"summary":"String Instantiation","type":"Code Smell","defaultSeverity":"Major","description":"Avoid instantiating String objects; this is usually unnecessary.","debt":"10min"},{"summary":"Avoid Branching Statement As Last In Loop","type":"Code Smell","defaultSeverity":"Major","description":"Using a branching statement as the last part of a loop may be a bug, and/or is confusing.\nEnsure that the usage is not a bug, or consider using another approach. Example: \n<pre>\n// unusual use of branching statement in a loop\nfor (int i = 0; i < 10; i++) {\n  if (i*i <= 25) {\n    continue;\n  }\n  break;\n}\n\n// this makes more sense...\nfor (int i = 0; i < 10; i++) {\n  if (i*i > 25) {\n    break;\n  }\n}\n</pre>","debt":"5min"},{"summary":"Instantiation To Get Class","type":"Code Smell","defaultSeverity":"Major","description":"Avoid instantiating an object just to call getClass() on it; use the .class public member instead. Example : replace <code>Class c = new String().getClass();</code> with <code>Class c = String.class;</code>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2133'>S2133</a> instead.\n</p>","debt":"15min"},{"summary":"Avoid Assert As Identifier","type":"Code Smell","defaultSeverity":"Major","description":"Finds all places 'assert' is used as an identifier is used.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1190'>S1190</a> instead.\n</p>","debt":"5min"},{"summary":"Use Correct Exception Logging","type":"Code Smell","defaultSeverity":"Major","description":"To make sure the full stacktrace is printed out, use the logging statement with 2 arguments: a String and a Throwable.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1166'>S1166</a> instead.\n</p>","debt":"10min"},{"summary":"Guard Debug Logging","type":"Code Smell","defaultSeverity":"Major","description":"When log messages are composed by concatenating strings, the whole section should be guarded by a isDebugEnabled() check to avoid performance and memory issues.","debt":"10min"},{"summary":"Useless Parentheses","type":"Code Smell","defaultSeverity":"Info","description":"Useless parentheses should be removed. Example: \n<pre>\npublic class Foo {\n\n   private int _bar1;\n   private Integer _bar2;\n\n   public void setBar(int n) {\n      _bar1 = Integer.valueOf((n)); // here\n      _bar2 = (n); // and here\n   }\n\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessParenthesesCheck'>UselessParenthesesCheck</a> instead.\n</p>","debt":"2min"},{"summary":"Unused Modifier","type":"Code Smell","defaultSeverity":"Info","description":"Fields in interfaces are automatically public static final, and methods are public abstract. Classes or interfaces nested in an interface are automatically public and static (all nested interfaces are automatically static). For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.","debt":"5min"},{"summary":"Dont Import Java Lang","type":"Code Smell","defaultSeverity":"Minor","description":"Avoid importing anything from the package 'java.lang'. These classes are automatically imported (JLS 7.5.3).\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AUselessImportCheck'>UselessImportCheck</a> instead.\n</p>","debt":"10min"},{"summary":"Local Interface Session Naming Convention","type":"Code Smell","defaultSeverity":"Major","description":"The Local Interface of a Session EJB should be suffixed by \"Local\".","debt":"5min"},{"summary":"Constructor Calls Overridable Method","type":"Code Smell","defaultSeverity":"Major","description":"Calling overridable methods during construction poses a risk of invoking methods on an incompletely constructed object \n      and can be difficult to discern. It may leave the sub-class unable to construct its superclass or forced to replicate \n      the construction process completely within itself, losing the ability to call super(). \n      If the default constructor contains a call to an overridable method, the subclass may be completely uninstantiable. \n      Note that this includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls \n      a private method bar() that calls a public method buz(), this denotes a problem. \n      <br/>Example :\n<pre>\npublic class SeniorClass {\n  public SeniorClass(){\n      toString(); //may throw NullPointerException if overridden\n  }\n  public String toString(){\n    return \"IAmSeniorClass\";\n  }\n}\npublic class JuniorClass extends SeniorClass {\n  private String name;\n  public JuniorClass(){\n    super(); //Automatic call leads to NullPointerException\n    name = \"JuniorClass\";\n  }\n  public String toString(){\n    return name.toUpperCase();\n  }\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1699'>S1699</a> instead.\n</p>","debt":"15min"},{"summary":"Dont Use Float Type For Loop Indices","type":"Code Smell","defaultSeverity":"Major","description":"Don't use floating point for loop indices. If you must use floating point, use double\nunless you're certain that float provides enough precision and you have a compelling\nperformance need (space or time). Example: \n<pre>\npublic class Count {\n  public static void main(String[] args) {\n    final int START = 2000000000;\n    int count = 0;\n    for (float f = START; f < START + 50; f++)\n      count++;\n      //Prints 0 because (float) START == (float) (START + 50).\n      System.out.println(count);\n      //The termination test misbehaves due to floating point granularity.\n    }\n}\n</pre>","debt":"5min"},{"summary":"Avoid Using Hard Coded IP","type":"Code Smell","defaultSeverity":"Major","description":"An application with hard coded IP may become impossible to deploy in some case. It never hurts to externalize IP adresses.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1313'>S1313</a> instead.\n</p>","debt":"20min"},{"summary":"Class with only private constructors should be final","type":"Code Smell","defaultSeverity":"Major","description":"A class with only private constructors should be final, unless the private constructor is called by a inner class. Example :\n<pre>\npublic class Foo {  //Should be final\n    private Foo() { }\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2974'>S2974</a> instead.\n</p>","debt":"10min"},{"summary":"Avoid instantiating objects in loops","type":"Code Smell","defaultSeverity":"Minor","description":"Detects when a new object is created inside a loop","debt":"15min"},{"summary":"String Buffer Instantiation With Char","type":"Code Smell","defaultSeverity":"Major","description":"StringBuffer sb = new StringBuffer('c'); The char will be converted into int to intialize StringBuffer size.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1317'>S1317</a> instead.\n</p>","debt":"5min"},{"summary":"Integer Instantiation","type":"Code Smell","defaultSeverity":"Major","description":"In JDK 1.5, calling new Integer() causes memory allocation. Integer.valueOf() is more memory friendly.","debt":"5min"},{"summary":"Remote Interface Naming Convention","type":"Code Smell","defaultSeverity":"Major","description":"Remote Interface of a Session EJB should NOT be suffixed.","debt":"10min"},{"summary":"Jumbled Incrementer","type":"Code Smell","defaultSeverity":"Major","description":"Avoid jumbled loop incrementers - it's usually a mistake, and it's confusing even if it's what's intended.\n    <br>Example :\n    <pre>\npublic class JumbledIncrementerRule1 {\n  public void foo() {\n   for (int i = 0; i < 10; i++) {\n    for (int k = 0; k < 20; i++) {\n     System.out.println(\"Hello\");\n    }\n   }\n  }\n}</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AForLoopCounterChangedCheck'>ForLoopCounterChangedCheck</a> instead.\n</p>","debt":"30min"},{"summary":"Naming - Avoid field name matching type name","type":"Code Smell","defaultSeverity":"Major","description":"It is somewhat confusing to have a field name matching the declaring class name. This probably means that type and or field names could be more precise. Example :\n<pre>\npublic class Foo extends Bar {\n  // There's probably a better name for foo\n  int foo;\n}\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1700'>S1700</a> instead.\n</p>","debt":"10min"},{"summary":"NPath complexity","type":"Code Smell","defaultSeverity":"Major","description":"The NPath complexity of a method is the number of acyclic execution paths through that method. A threshold of 200 is generally considered the point where measures should be taken to reduce complexity. Example :\n<pre>\npublic class Foo {\n  void bar() {\n   // lots of complicated code\n  }\n }\n</pre>","debt":"1h"},{"summary":"Static EJB Field Should Be Final","type":"Code Smell","defaultSeverity":"Major","description":"According to the J2EE specification (p.494), an EJB should not have any static fields with write access. However, static read only fields are allowed. This ensures proper behavior especially when instances are distributed by the container on several JREs.","debt":"15min"},{"summary":"Use Locale With Case Conversions","type":"Code Smell","defaultSeverity":"Major","description":"When doing a String.toLowerCase()/toUpperCase() call, use a Locale. This avoids problems with certain locales, i.e. Turkish.","debt":"20min"},{"summary":"Android - call super first","type":"Code Smell","defaultSeverity":"Major","description":"Super should be called at the start of the method. Example :\n<pre>\npublic class DummyActivity extends Activity {\n  public void onCreate(Bundle bundle) {\n    // missing call to super.onCreate(bundle)\n    foo();\n  }\n}\n</pre>","debt":"10min"},{"summary":"Check Skip Result","type":"Code Smell","defaultSeverity":"Minor","description":"The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not. Example: \n<pre>\npublic class Foo {\n\n   private FileInputStream _s = new FileInputStream(\"file\");\n\n   public void skip(int n) throws IOException {\n      _s.skip(n); // You are not sure that exactly n bytes are skipped\n   }\n\n   public void skipExactly(int n) throws IOException {\n      while (n != 0) {\n         long skipped = _s.skip(n);\n         if (skipped == 0)\n            throw new EOFException();\n         n -= skipped;\n      }\n   }\n</pre>\n\n<p>\n   This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2674'>S2674</a> instead.\n</p>","debt":"5min"},{"summary":"Empty Finalizer","type":"Code Smell","defaultSeverity":"Major","description":"<p>If the finalize() method is empty, then it does not need to exist.</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1186'>S1186</a> instead.\n</p>","debt":"30min"},{"summary":"Switch Density","type":"Code Smell","defaultSeverity":"Major","description":"A high ratio of statements to labels in a switch statement implies that the switch statement is doing too much work. Consider moving the statements into new methods, or creating subclasses based on the switch variable.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1151'>S1151</a> instead.\n</p>","debt":"10min"},{"summary":"Comment Size","type":"Code Smell","defaultSeverity":"Minor","description":"Determines whether the dimensions of non-header comments found are within the specified limits. Example: \n<pre>\n/**\n*\n* too many lines!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n</pre>","debt":"5min"},{"summary":"Unused Private Field","type":"Code Smell","defaultSeverity":"Major","description":"Detects when a private field is declared and/or assigned a value, but not used.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1068'>S1068</a> instead.\n</p>","debt":"10min"},{"summary":"Avoid Multiple Unary Operators","type":"Code Smell","defaultSeverity":"Major","description":"Using multiple unary operators may be a bug, and/or is confusing. Check the usage is not a bug, or consider simplifying the expression. Example :\n<pre>\n// These are typo bugs, or at best needlessly complex and confusing:\nint i = - -1;\nint j = + - +1;\nint z = ~~2;\nboolean b = !!true;\nboolean c = !!!true;\n\n// These are better:\nint i = 1;\nint j = -1;\nint z = 2;\nboolean b = true;\nboolean c = false;\n\n// And these just make your brain hurt:\nint i = ~-2;\nint j = -~7;\n</pre>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS881'>S881</a> instead.\n</p>","debt":"15min"},{"summary":"Bad Comparison","type":"Code Smell","defaultSeverity":"Major","description":"Avoid equality comparisons with Double.NaN - these are likely to be logic errors.","debt":"15min"},{"summary":"Use String Buffer Length","type":"Code Smell","defaultSeverity":"Minor","description":"Use StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals() or StringBuffer.toString().length() ==.","debt":"10min"},{"summary":"Avoid Literals In If Condition","type":"Code Smell","defaultSeverity":"Major","description":"Avoid using hard coded literals in conditional statements, declare those as static variables or private members.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS109'>S109</a> instead.\n</p>","debt":"5min"},{"summary":"Empty While Stmt","type":"Code Smell","defaultSeverity":"Critical","description":"Empty While Statement finds all instances where a while statement does nothing. If it is a timing loop, then you should use Thread.sleep() for it; if it's a while loop that does a lot in the exit expression, rewrite it to make it clearer.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.\n</p>","debt":"20min"},{"summary":"More Than One Logger","type":"Code Smell","defaultSeverity":"Major","description":"Normally only one logger is used in each class.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1312'>S1312</a> instead.\n</p>","debt":"5min"},{"summary":"Java5 migration - Byte instantiation","type":"Code Smell","defaultSeverity":"Major","description":"In JDK 1.5, calling new Byte() causes memory allocation. Byte.valueOf() is more memory friendly. Example :\n<pre>\npublic class Foo {\nprivate Byte i = new Byte(0); // change to Byte i =\nByte.valueOf(0);\n}\n</pre>","debt":"5min"},{"summary":"Short Variable","type":"Code Smell","defaultSeverity":"Major","description":"Detects when a field, local, or parameter has a very short name.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00117'>S00117</a> instead.\n</p>","debt":"10min"},{"summary":"Excessive Class Length","type":"Code Smell","defaultSeverity":"Major","description":"Long Class files are indications that the class may be trying to do too much. Try to break it down, and reduce the size to something manageable.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1448'>S1448</a> instead.\n</p>","debt":"1h"},{"summary":"Replace Hashtable With Map","type":"Code Smell","defaultSeverity":"Major","description":"Consider replacing this Hashtable with the newer java.util.Map\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1149'>S1149</a> instead.\n</p>","debt":"20min"},{"summary":"Missing Static Method In Non Instantiatable Class","type":"Code Smell","defaultSeverity":"Major","description":"A class that has private constructors and does not have any static methods or fields cannot be used.","debt":"15min"},{"summary":"Do Not Call System Exit","type":"Code Smell","defaultSeverity":"Major","description":"Web applications should not call System.exit(), since only the web container or the application server should stop the JVM.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1147'>S1147</a> instead.\n</p>","debt":"20min"},{"summary":"Useless Overriding Method","type":"Code Smell","defaultSeverity":"Major","description":"The overriding method merely calls the same method defined in a superclass\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1185'>S1185</a> instead.\n</p>","debt":"10min"},{"summary":"Empty If Stmt","type":"Code Smell","defaultSeverity":"Critical","description":"<p>\nEmpty If Statement finds instances where a condition is checked but nothing is done about it.\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00108'>S00108</a> instead.\n</p>","debt":"10min"},{"summary":"Naming - Avoid dollar signs","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\nAvoid using dollar signs in variable/method/class/interface names.\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00114'>S00114</a>, <a href='/coding_rules#rule_key=squid%3AS00115'>S00115</a>, <a href='/coding_rules#rule_key=squid%3AS00116'>S00116</a> and <a href='/coding_rules#rule_key=squid%3AS00117'>S00117</a> instead.\n</p>","debt":"10min"},{"summary":"Bean Members Should Serialize","type":"Code Smell","defaultSeverity":"Major","description":"If a class is a bean, or is referenced by a bean directly or indirectly it needs to be serializable. Member variables need to be marked as transient, static, or have accessor methods in the class. Marking variables as transient is the safest and easiest modification. Accessor methods should follow the Java naming conventions, i.e.if you have a variable foo, you should provide getFoo and setFoo methods.","debt":"30min"},{"summary":"Avoid Throwing Raw Exception Types","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nAvoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.\n</p>\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00112'>S00112</a> instead.\n</p>","debt":"20min"},{"summary":"For Loop Should Be While Loop","type":"Code Smell","defaultSeverity":"Minor","description":"Some for loops can be simplified to while loops - this makes them more concise.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1264'>S1264</a> instead.\n</p>","debt":"5min"},{"summary":"Use Object For Clearer API","type":"Code Smell","defaultSeverity":"Minor","description":"When you write a public method, you should be thinking in terms of an API. If your method is public, it means other class\nwill use it, therefore, you want (or need) to offer a comprehensive and evolutive API. If you pass a lot of information\nas a simple series of Strings, you may think of using an Object to represent all those information. You'll get a simplier\nAPI (such as doWork(Workload workload), rather than a tedious series of Strings) and more importantly, if you need at some\npoint to pass extra data, you'll be able to do so by simply modifying or extending Workload without any modification to\nyour API. Example: \n<pre>\npublic class MyClass {\n  public void connect(String username,\n    String pssd,\n    String databaseName,\n    String databaseAdress)\n    // Instead of those parameters object\n    // would ensure a cleaner API and permit\n    // to add extra data transparently (no code change):\n    // void connect(UserData data);\n    {\n\n  }\n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS00107'>S00107</a> instead.\n</p>","debt":"10min"},{"summary":"Avoid Protected Method In Final Class Not Extending","type":"Code Smell","defaultSeverity":"Major","description":"Do not use protected methods in most final classes since they cannot be subclassed. This should \nonly be allowed in final classes that extend other classes with protected methods (whose\nvisibility cannot be reduced). Clarify your intent by using private or package access modifiers instead. Example: \n<pre>\npublic final class Foo {\n  private int bar() {}\n  protected int baz() {} // Foo cannot be subclassed, and doesn't extend anything, so is baz() really private or package visible? \n}\n</pre>\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2156'>S2156</a> instead.\n</p>","debt":"5min"},{"summary":"Remote Session Interface Naming Convention","type":"Code Smell","defaultSeverity":"Major","description":"Remote Home interface of a Session EJB should be suffixed by \"Home\".","debt":"10min"},{"summary":"Double checked locking","type":"Code Smell","defaultSeverity":"Major","description":"Partially created objects can be returned by the Double Checked Locking pattern when used in Java. An optimizing JRE may assign a reference to the baz variable before it creates the object the reference is intended to point to. <a href=\"http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html\">More details</a>. Example :\n<pre>\npublic class Foo {\n  Object baz;\n  Object bar() {\n    if(baz == null) { //baz may be non-null yet not fully created\n      synchronized(this){\n        if(baz == null){\n          baz = new Object();\n        }\n      }\n    }\n    return baz;\n  }\n}\n</pre>","debt":"1h"},{"summary":"Message Driven Bean And Session Bean Naming Convention","type":"Code Smell","defaultSeverity":"Major","description":"The EJB Specification state that any MessageDrivenBean or SessionBean should be suffixed by Bean.","debt":"10min"},{"summary":"Unsynchronized Static Date Formatter","type":"Code Smell","defaultSeverity":"Major","description":"SimpleDateFormat is not synchronized. Sun recomends separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized either on method or block level.\n\n<p>\n  This rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS2156'>S2156</a> instead.\n</p>","debt":"30min"},{"summary":"Avoid Losing Exception Information","type":"Code Smell","defaultSeverity":"Major","description":"Statements in a catch block that invoke accessors on the exception without using the information only add to code size.  Either remove the invocation, or use the return result.\n\n<p>\nThis rule is deprecated, use <a href='/coding_rules#rule_key=squid%3AS1166'>S1166</a> instead.\n</p>","debt":"10min"},{"summary":"Files should contain an empty newline at the end","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>","debt":"1min"},{"summary":"Local variable and method parameter names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic void doSomething(int my_param) {\n  int LOCAL;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int myParam) {\n  int local;\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor (int i_1 = 0; i_1 &lt; limit; i_1++) {  // Compliant\n  // ...\n}\n</pre>\n<p>as well as one-character <code>catch</code> variables: </p>\n<pre>\ntry {\n//...\n} catch (Exception e) { // Compliant\n}\n</pre>","debt":"2min"},{"summary":"Exit methods should not be called","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n<h2>Exceptions</h2>\n<p>These methods are ignored inside <code>main</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/382.html\">MITRE, CWE-382</a> - Use of System.exit() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PoYbAQ\">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>\n</ul>","debt":"30min"},{"summary":"\"BigDecimal(double)\" should not be used","type":"Bug","defaultSeverity":"Major","description":"<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)\">the JavaDocs</a>:</p>\n<blockquote>\n  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which\n  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to\n  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\n  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances\n  notwithstanding.\n</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the\nconstructor that takes a <code>String</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = new BigDecimal(\"1.1\"); // using String constructor will result in precise value\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQAVAg\">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point\n  literals </li>\n</ul>","debt":"5min"},{"summary":"Blocks should be synchronized on \"private final\" fields","type":"Bug","defaultSeverity":"Major","description":"<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code>\nfield makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread,\nsynchronized on the new value, to enter the block at the same time.</p>\n<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object\ninstances in to the method as parameters, completely undermining the synchronization.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate String color = \"red\";\n\nprivate void doSomething(){\n  synchronized(color) {  // Noncompliant; lock is actually on object instance \"red\" referred to by the color variable\n    //...\n    color = \"green\"; // other threads now allowed into this block\n    // ...\n  }\n  synchronized(new Object()) { // Noncompliant this is a no-op.\n     // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate String color = \"red\";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = \"green\";\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/412.html\">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/413\">MITRE, CWE-413</a> - Improper Resource Locking </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/6IEzAg\">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that\n  may interact with untrusted code </li>\n</ul>","debt":"15min"},{"summary":"Return values from functions without side effects should not be ignored","type":"Bug","defaultSeverity":"Major","description":"<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on the following predefined list of immutable classes in the Java API\n:</p>\n<ul>\n  <li> <code>java.lang.String</code> </li>\n  <li> <code>java.lang.Boolean</code> </li>\n  <li> <code>java.lang.Integer</code> </li>\n  <li> <code>java.lang.Double</code> </li>\n  <li> <code>java.lang.Float</code> </li>\n  <li> <code>java.lang.Byte</code> </li>\n  <li> <code>java.lang.Character</code> </li>\n  <li> <code>java.lang.Short</code> </li>\n  <li> <code>java.lang.StackTraceElement</code> </li>\n  <li> <code>java.time.DayOfWeek</code> </li>\n  <li> <code>java.time.Duration</code> </li>\n  <li> <code>java.time.Instant</code> </li>\n  <li> <code>java.time.LocalDate</code> </li>\n  <li> <code>java.time.LocalDateTime</code> </li>\n  <li> <code>java.time.LocalTime</code> </li>\n  <li> <code>java.time.Month</code> </li>\n  <li> <code>java.time.MonthDay</code> </li>\n  <li> <code>java.time.OffsetDateTime</code> </li>\n  <li> <code>java.time.OffsetTime</code> </li>\n  <li> <code>java.time.Period</code> </li>\n  <li> <code>java.time.Year</code> </li>\n  <li> <code>java.time.YearMonth</code> </li>\n  <li> <code>java.time.ZonedDateTime</code> </li>\n  <li> <code>java.math.BigInteger</code> </li>\n  <li> <code>java.math.BigDecimal</code> </li>\n  <li> <code>java.util.Optional</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>","debt":"10min"},{"summary":"Multiline blocks should be enclosed in curly braces","type":"Code Smell","defaultSeverity":"Major","description":"<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>","debt":"5min"},{"summary":"Assertion arguments should be passed in the correct order","type":"Code Smell","defaultSeverity":"Major","description":"<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the\nfirst argument to be the expected value and the second argument to be the actual value. Swap them, and your test will still have the same outcome\n(succeed/fail when it should) but the error messages will be confusing. </p>\n<p>This rule raises an issue when the second argument to an assertions library method is a hard-coded value and the first argument is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\norg.junit.Assert.assertEquals(runner.exitCode(), 0, \"Unexpected exit code\");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\norg.junit.Assert.assertEquals(0, runner.exitCode(), \"Unexpected exit code\");\n</pre>","debt":"2min"},{"summary":"Boolean literals should not be redundant","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>","debt":"5min"},{"summary":"Security constraints should be defined","type":"Vulnerability","defaultSeverity":"Blocker","description":"<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes,\nbut it's a start, and should be used at least as a base.</p>\n<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-constraint&gt;</code> elements.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284.html\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\">OWASP Top Ten 2013 Category A7</a> - Missing\n  Function Level Access Control </li>\n</ul>","debt":"3h"},{"summary":"Method parameters should be declared with base types","type":"Code Smell","defaultSeverity":"Minor","description":"<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.</p>","debt":"5min"},{"summary":"Class names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>","debt":"5min"},{"summary":"An open curly brace should be located at the end of a line","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>","debt":"1min"},{"summary":"Track uses of \"@SuppressWarnings\" annotations","type":"Code Smell","defaultSeverity":"Info","description":"<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter value of \"unused\" :</p>\n<pre>\n@SuppressWarnings(\"unused\")\n@SuppressWarnings(\"unchecked\")  // Noncompliant\n</pre>","debt":"10min"},{"summary":"\"Map.get\" and value test should be replaced with single method call","type":"Code Smell","defaultSeverity":"Major","description":"<p>It's a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> before proceeding with adding or changing\nthe value in the map. However the <code>java.util.Map</code> API offers a significantly better alternative in the form of the\n<code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these instead leads to cleaner and more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nV value = map.get(key);\nif (value == null) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nreturn value;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn map.computeIfAbsent(key, k -&gt; V.createFor(k));\n</pre>","debt":"10min"},{"summary":"Methods returns should not be invariant","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint foo(int a) {\n  int b = 12;\n  if (a == 1) {\n    return b;\n  }\n  return b;  // Noncompliant\n}\n</pre>"},{"summary":"Method parameters, caught exceptions and foreach variables' initial values should not be ignored","type":"Bug","defaultSeverity":"Minor","description":"<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read\nbefore reassignment.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doTheThing(String str, int i, List&lt;String&gt; strings) {\n  str = Integer.toString(i);  // Noncompliant\n\n  for (String s : strings) {\n    s = \"hello world\";  // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>","debt":"5min"},{"summary":"The Object.finalize() method should not be overriden","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to\nthe object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be\nfew microseconds to few minutes later. So when system resources need to be disposed by an object, it's better to not rely on this asynchronous\nmechanism to dispose them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    // Noncompliant\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>","debt":"20min"},{"summary":"Conditionals should start on new lines","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding\n<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>","debt":"10min"},{"summary":"Collection sizes and array length comparisons should make sense","type":"Bug","defaultSeverity":"Major","description":"<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myList.size() &gt;= 0) { ... }\n\nif (myList.size() &lt; 0) { ... }\n\nboolean result = myArray.length &gt;= 0;\n\nif (0 &gt; myArray.length) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (!myList.isEmpty()) { ... }\n\nif (myArray.length &gt;= 42) { ... }\n</pre>","debt":"2min"},{"summary":"\"close()\" calls should not be redundant","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Java 7's try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit\n<code>close()</code> call is redundant and potentially confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n  writer.close();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n}\n</pre>","debt":"2min"},{"summary":"Tests should not be ignored","type":"Code Smell","defaultSeverity":"Major","description":"<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each ignored test that does not have a notation about why it is being skipped.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Ignore  // Noncompliant\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<h2>Exceptions</h2>\n<p>The rule doesn't raise an issue if there is a comment in the @Ignore annotation</p>","debt":"10min"},{"summary":"Assignments should not be redundant","type":"Bug","defaultSeverity":"Major","description":"<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in\nassigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>\n<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b;\nc = a;\nb = c; // Noncompliant: c and b are already the same\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = b;\nc = a;\n</pre>","debt":"5min"},{"summary":"Local constants should follow naming conventions for constants","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all local, <code>final</code>, initialized, primitive\nvariables, have names that match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic void doSomething() {\n  final int local = 42;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  final int LOCAL = 42;\n  ...\n}\n</pre>","debt":"5min"},{"summary":"Methods should not have identical implementations","type":"Code Smell","defaultSeverity":"Major","description":"<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate final static String CODE = \"bounteous\";\n\npublic String getCode() {\n  return CODE;\n}\n\npublic String getName() {  // Noncompliant\n  return CODE;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate final static String CODE = \"bounteous\";\n\npublic String getCode() {\n  return CODE;\n}\n\npublic String getName() {\n  return getCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>","debt":"15min"},{"summary":"Map values should not be replaced unconditionally","type":"Bug","defaultSeverity":"Major","description":"<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nletters.put(\"a\", \"Apple\");\nletters.put(\"a\", \"Boy\");  // Noncompliant\n\ntowns[i] = \"London\";\ntowns[i] = \"Chicago\";  // Noncompliant\n</pre>","debt":"5min"},{"summary":"Duplicate values should not be passed as arguments","type":"Code Smell","defaultSeverity":"Major","description":"<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was\nintended for one of the arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (compare(myPoint.x, myPoint.x) != 0) { // Noncompliant\n&nbsp;&nbsp;//...\n}\n\nif (compare(getNextValue(), getNextValue()) != 0) { // Noncompliant\n&nbsp;&nbsp;// ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (compare(myPoint.x, myPoint.y) != 0) {\n&nbsp;&nbsp;//...\n}\n\nObject v1 = getNextValue();\nObject v2 = getNextValue();\nif (compare(v1, v2) != 0) {\n&nbsp;&nbsp;// ...\n}\n</pre>","debt":"5min"},{"summary":"\"Stream\" call chains should be simplified when possible","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The Stream API provides the <code>boolean anyMatch(Predicate&lt;? super T&gt; predicate)</code> method, which is a very convenient and efficient\nway to check whether any elements of a stream match the provided predicate.</p>\n<p>This rule raises an issue when a <code>Stream</code> chain could be replaced by this method call. Specifically:</p>\n<ul>\n  <li> <code>filter(Predicate&lt;? super T&gt; predicate).findFirst().isPresent()</code> </li>\n  <li> <code>filter(Predicate&lt;? super T&gt; predicate).findAny().isPresent()</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean hasRed = widgets.stream().filter(w -&gt; w.getColor() == RED).findFirst().isPresent(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean hasRed = widgets.stream().anyMatch(w -&gt; w.getColor() == RED);\n</pre>","debt":"2min"},{"summary":"Resources should be closed","type":"Bug","defaultSeverity":"Blocker","description":"<p>Connections, streams, files, and other classes that implement the <code>Closeable</code> interface or its super-interface,\n<code>AutoCloseable</code>, needs to be closed after use. Further, that <code>close</code> call must be made in a <code>finally</code> block otherwise\nan exception could keep the call from being made. Preferably, when class implements <code>AutoCloseable</code>, resource should be created using\n\"try-with-resources\" pattern and will be closed automatically.</p>\n<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it's on to\ntheir knees.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void readTheFile() throws IOException {\n  Path path = Paths.get(this.fileName);\n  BufferedReader reader = Files.newBufferedReader(path, this.charset);\n  // ...\n  reader.close();  // Noncompliant\n  // ...\n  Files.lines(\"input.txt\").forEach(System.out::println); // Noncompliant: The stream needs to be closed\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    for (String property : propertyList) {\n      stream = new FileOutputStream(\"myfile.txt\");  // Noncompliant\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();  // Multiple streams were opened. Only the last is closed.\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readTheFile(String fileName) throws IOException {\n    Path path = Paths.get(fileName);\n    try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {\n      reader.readLine();\n      // ...\n    }\n    // ..\n    try (Stream&lt;String&gt; input = Files.lines(\"input.txt\"))  {\n      input.forEach(System.out::println);\n    }\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    stream = new FileOutputStream(\"myfile.txt\");\n    for (String property : propertyList) {\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources\nstatement are ignored by this rule. </p>\n<pre>\ntry (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n  //...\n}\ncatch ( ... ) {\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gFqAQ\">CERT, FIO04-J.</a> - Release resources when they are no longer needed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/GAGQBw\">CERT, FIO42-C.</a> - Close files when they are no longer needed </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\">Try With Resources</a> </li>\n</ul>","debt":"5min"},{"summary":"Security - WebView with geolocation activated (Android)","type":"Vulnerability","defaultSeverity":"Info","description":"<p>\n    It is suggested to ask the user for a confirmation about obtaining its geolocation.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n<pre>\nwebView.setWebChromeClient(new WebChromeClient() {\n    @Override\n    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {\n        callback.invoke(origin, true, false);\n    }\n});\n</pre>\n</p>\n<p>\n    <b>Suggested code:</b><br/>\n\n    Limit the sampling of geolocation and ask the user for confirmation.\n<pre>\nwebView.setWebChromeClient(new WebChromeClient() {\n    @Override\n    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {\n        callback.invoke(origin, true, false);\n\n        //Ask the user for confirmation\n    }\n});\n</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://www.securecoding.cert.org/confluence/display/java/DRD15-J.+Consider+privacy+concerns+when+using+Geolocation+API\">CERT: DRD15-J. Consider privacy concerns when using Geolocation API</a><br/>\n    <a href=\"http://en.wikipedia.org/wiki/W3C_Geolocation_API\">Wikipedia: W3C Geolocation API</a><br/>\n    <a href=\"http://dev.w3.org/geo/api/spec-source.html\">W3C: Geolocation Specification</a><br/>\n</p>"},{"summary":"Security - SHA-1 is a weak hash function","type":"Vulnerability","defaultSeverity":"Major","description":"<p>The algorithms SHA-1 is not a recommended algorithm for hash password, for signature verification and other\nuses. <b>PBKDF2</b> should be use to hash password for example.</p>\n\n<blockquote>\n    \"<b>SHA-1 for digital signature generation:</b><br/>\n    SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance.\n    For all other applications, <u>SHA-1 shall not be used for digital signature generation</u>.<br/>\n    <b>SHA-1 for digital signature verification:</b><br/>\n    For digital signature verification, <u>SHA-1 is allowed for legacy-use</u>.<br/>\n    [...]<br/>\n    <b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>\n    The use of these hash functions is acceptable for all hash function applications.\"<br/>\n    - <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>\n</blockquote>\n<blockquote>\n    \"The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time\n    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known\n    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,\n    it becomes harder to apply the dictionary or brute force attacks.\"<br/>\n- <a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST: Recommendation for Password-Based Key Derivation  p.12</a>\n\n</blockquote>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>MessageDigest sha1Digest = MessageDigest.getInstance(\"SHA1\");\n    sha1Digest.update(password.getBytes());\n    byte[] hashValue = sha1Digest.digest();</pre>\n    <br/>\n    <pre>byte[] hashValue = DigestUtils.getSha1Digest().digest(password.getBytes());</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (Using bouncy castle):</b><br/>\n    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());\n    gen.init(password.getBytes(\"UTF-8\"), salt.getBytes(), 4096);\n    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();\n}</pre>\n    <br/>\n    <b>Solution (Java 8 and later):</b><br/>\n    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);\n    SecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n    return f.generateSecret(spec).getEncoded();\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://community.qualys.com/blogs/securitylabs/2014/09/09/sha1-deprecation-what-you-need-to-know\">Qualys blog: SHA1 Deprecation: What You Need to Know</a><br/>\n<a href=\"https://googleonlinesecurity.blogspot.ca/2014/09/gradually-sunsetting-sha-1.html\">Google Online Security Blog: Gradually sunsetting SHA-1</a><br/>\n<a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>\n<a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST: Recommendation for Password-Based Key Derivation</a><br/>\n<a href=\"http://stackoverflow.com/questions/22580853/reliable-implementation-of-pbkdf2-hmac-sha256-for-java\">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>\n</p>"},{"summary":"Security - Potential Command Injection","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.</p>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>import java.lang.Runtime;\n\nRuntime r = Runtime.getRuntime();\nr.exec(\"/bin/sh -c some_tool\" + input);</pre>\n</p>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Command_Injection\">OWASP: Command Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/78.html\">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</a>\n</p>"},{"summary":"Security - Struts Form without input validation","type":"Vulnerability","defaultSeverity":"Info","description":"<p>\nForm inputs should have minimal input validation. Preventive validation helps provide defense in depth against a variety of risks.\n</p>\n<p>\nValidation can be introduce by implementing a <code>validate</code> method.\n<pre>\npublic class RegistrationForm extends ValidatorForm {\n\n    private String name;\n    private String email;\n\n    [...]\n\n    public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {\n        //Validation code for name and email parameters passed in via the HttpRequest goes here\n    }\n}\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/106.html\">CWE-106: Struts: Plug-in Framework not in Use</a>\n</p>"},{"summary":"Security - Found Spring endpoint","type":"Vulnerability","defaultSeverity":"Info","description":"<p>This class is a Spring Controller. All methods annotated with <code>RequestMapping</code> (as well as its shortcut annotations <code>GetMapping</code>, <code>PostMapping</code>, <code>PutMapping</code>, <code>DeleteMapping</code>, and <code>PatchMapping</code>) are reachable remotely.\nThis class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.</p>"},{"summary":"Security - XSSRequestWrapper is a weak XSS protection","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\nAn implementation of <code>HttpServletRequestWrapper</code> called <code>XSSRequestWrapper</code> was published through\nvarious blog sites. <sup><a href=\"http://java.dzone.com/articles/stronger-anti-cross-site\">[1]</a></sup>\n<sup><a href=\"http://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html\">[2]</a></sup>\n</p>\n<p>\nThe filtering is weak for a few reasons:\n<ul>\n<li>It covers only parameters not headers and side-channel inputs</li>\n<li>The replace chain can be bypassed easily (see example below)</li>\n<li>It's a black list of very specific bad patterns (rather than a white list of good/valid input)</li>\n</ul>\n</p>\n<p>\n<b>Example of bypass:</b><br/>\n</p>\n<pre>&lt;scrivbscript:pt&gt;alert(1)&lt;/scrivbscript:pt&gt;</pre>\n<p>\nThe previous input will be transformed into <b><code>\"&lt;script&gt;alert(1)&lt;/script&gt;\"</code></b>.\nThe removal of <code>\"vbscript:\"</code> is after the replacement of <code>\"&lt;script&gt;.*&lt;/script&gt;\"</code>.\n</p>\n<p>\nFor stronger protection, choose a solution that encodes characters automatically in the <b><u>view</u></b> (template, jsp, ...) following\nthe XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n<a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a>\n</p>"},{"summary":"Security - XML parsing vulnerable to XXE (XMLReader)","type":"Vulnerability","defaultSeverity":"Critical","description":"<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nXMLReader reader = XMLReaderFactory.createXMLReader();\nreader.setContentHandler(customHandler);\nreader.parse(new InputSource(inputStream));</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one property or both.\n</p>\n\n<p><b>Solution using \"Secure processing\" mode:</b></p>\n<p>\nThis setting will protect you against Denial of Service attack and remote file access.\n<pre>\nXMLReader reader = XMLReaderFactory.createXMLReader();\nreader.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\nreader.setContentHandler(customHandler);\n\nreader.parse(new InputSource(inputStream));</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\nBy disabling DTD, almost all XXE attacks will be prevented.\n<pre>\nXMLReader reader = XMLReaderFactory.createXMLReader();\nreader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\nreader.setContentHandler(customHandler);\n\nreader.parse(new InputSource(inputStream));</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n<a href=\"http://xerces.apache.org/xerces-j/features.html\">Xerces complete features list</a>\n</p>"},{"summary":"Security - ECB mode is insecure","type":"Vulnerability","defaultSeverity":"Major","description":"<p>An authentication cipher mode which provides better confidentiality of the encrypted data should be used instead of Electronic Codebook (ECB) mode, \nwhich does not provide good confidentiality. Specifically, ECB mode produces the same output for the same input each time. So, \nfor example, if a user is sending a password, the encrypted value is the same each time. This allows an attacker to intercept \nand replay the data.</p>\n<p>\nTo fix this, something like Galois/Counter Mode (GCM) should be used instead.\n</p>\n<p>\n<b>Code at risk:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/ECB/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://en.wikipedia.org/wiki/Authenticated_encryption\">Wikipedia: Authenticated encryption</a><br/>\n<a href=\"http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01\">NIST: Authenticated Encryption Modes</a><br/>\n<a href=\"http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29\">Wikipedia: Block cipher modes of operation</a><br/>\n<a href=\"http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\">NIST: Recommendation for Block Cipher Modes of Operation</a>\n</p>"},{"summary":"Security - World writable file (Android)","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\n    The file written in this context is using the creation mode <code>MODE_WORLD_READABLE</code>. It might not be the\n    expected behavior to exposed the content being written.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n<pre>\nfos = openFileOutput(filename, MODE_WORLD_READABLE);\nfos.write(userInfo.getBytes());\n</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (using MODE_PRIVATE):</b><br/>\n<pre>\nfos = openFileOutput(filename, MODE_PRIVATE);\n</pre>\n</p>\n<p>\n    <b>Solution (using local SQLite Database):</b><br/>\n\nUsing a local SQLite database is probably the best solution to store structured data. Make sure the database file is not\ncreate on external storage. See references below for implementation guidelines.\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://www.securecoding.cert.org/confluence/display/java/DRD11-J.+Ensure+that+sensitive+data+is+kept+secure\">CERT: DRD11-J. Ensure that sensitive data is kept secure</a><br/>\n    <a href=\"http://developer.android.com/training/articles/security-tips.html#InternalStorage\">Android Official Doc: Security Tips</a><br/>\n    <a href=\"http://developer.android.com/reference/android/content/Context.html#MODE_PRIVATE\">Android Official Doc: Context.MODE_PRIVATE</a><br/>\n    <a href=\"http://www.vogella.com/tutorials/AndroidSQLite/article.html#databasetutorial_database\">vogella.com: Android SQLite database and content provider - Tutorial</a><br/>\n    <a href=\"https://www.owasp.org/index.php/Mobile_Top_10_2014-M2\">OWASP Mobile Top 10 2014-M2: Insecure Data Storage</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/312.html\">CWE-312: Cleartext Storage of Sensitive Information</a>\n</p>"},{"summary":"Security - Hard Coded Password","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\nPasswords should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is\ncertainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.\n(Hard coded keys are reported separately by <i>Hard Coded Key</i> pattern)\n</p>\n<p>\n<p><b>Vulnerable Code:</b><br/>\n\n<pre>private String SECRET_PASSWORD = \"letMeIn!\";\n\nProperties props = new Properties();\nprops.put(Context.SECURITY_CREDENTIALS, \"p@ssw0rd\");</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/259.html\">CWE-259: Use of Hard-coded Password</a>\n</p>"},{"summary":"Security - Predictable pseudorandom number generator","type":"Vulnerability","defaultSeverity":"Major","description":"<p>The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:</p>\n<ul>\n<li>a CSRF token: a predictable token can lead to a CSRF attack as an attacker will know the value of the token</li>\n<li>a password reset token (sent by email): a predictable password token can lead to an account takeover, since an attacker will guess the URL of the change password form</li>\n<li>any other secret value</li>\n</ul>\n<p>\nA quick fix could be to replace the use of <b>java.util.Random</b> with something stronger, such as <b>java.security.SecureRandom</b>.\n</p>\n<p>\n<b>Vulnerable Code:</b><br/>\n<pre>String generateSecretToken() {\n    Random r = new Random();\n    return Long.toHexString(r.nextLong());\n}</pre>\n</p>\n<p>\n<b>Solution:</b>\n<pre>import org.apache.commons.codec.binary.Hex;\n\nString generateSecretToken() {\n    SecureRandom secRandom = new SecureRandom();\n\n    byte[] result = new byte[32];\n    secRandom.nextBytes(result);\n    return Hex.encodeHexString(result);\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://jazzy.id.au/default/2010/09/20/cracking_random_number_generators_part_1.html\">Cracking Random Number Generators - Part 1 (http://jazzy.id.au)</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers\">CERT: MSC02-J. Generate strong random numbers</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/330.html\">CWE-330: Use of Insufficiently Random Values</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html\">Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)</a>\n</p>"},{"summary":"Security - Unvalidated Redirect","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\n    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied\n    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.\n</p>\n<p>\n    <b>Scenario</b><br/>\n    1. A user is tricked into visiting the malicious URL: <code>http://website.com/login?redirect=http://evil.vvebsite.com/fake/login</code><br/>\n    2. The user is redirected to a fake login page that looks like a site they trust. (<code>http://evil.vvebsite.com/fake/login</code>)<br/>\n    3. The user enters his credentials.<br/>\n    4. The evil site steals the user's credentials and redirects him to the original website.<br/>\n    <br/>\n    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to\n    an authentication page is very common.\n</p>\n<p>\n    <b>Vulnerable Code:</b></br/>\n    <pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    [...]\n    resp.sendRedirect(req.getParameter(\"redirectUrl\"));\n    [...]\n}</pre>\n</p>\n<p>\n    <b>Solution/Countermeasures:</b><br/>\n    <ul>\n        <li>Don't accept redirection destinations from users</li>\n        <li>Accept a destination key, and use it to look up the target (legal) destination</li>\n        <li>Accept only relative paths</li>\n        <li>White list URLs (if possible)</li>\n        <li>Validate that the beginning of the URL is part of a white list</li>\n    </ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse\">WASC-38: URL Redirector Abuse</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards\">OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards</a><br/>\n<a href=\"https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/601.html\">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a>\n</p>"},{"summary":"Security - Potential XPath Injection","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\nXPath injection risks are similar to SQL injection. If the XPath query contains untrusted user input, the complete datasource\ncould be exposed. This could allow an attacker to access unauthorized data or maliciously modify the target XML.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-39: XPath Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/643.html\">CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61407250\">CERT: IDS09-J. Prevent XPath Injection (archive)</a><br/>\n<a href=\"http://media.blackhat.com/bh-eu-12/Siddharth/bh-eu-12-Siddharth-Xpath-WP.pdf\">Black Hat Europe 2012: Hacking XPath 2.0</a><br/>\n<a href=\"http://www.balisage.net/Proceedings/vol7/html/Vlist02/BalisageVol7-Vlist02.html\">Balisage: XQuery Injection</a>\n</p>"},{"summary":"Security - NullCipher is insecure","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\nThe NullCipher is rarely used intentionally in production applications. It implements the Cipher interface by returning ciphertext \nidentical to the supplied plaintext. In a few contexts, such as testing, a NullCipher may be appropriate.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>Cipher doNothingCihper = new NullCipher();\n[...]\n//The ciphertext produced will be identical to the plaintext.\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    Avoid using the NullCipher. Its accidental use can introduce a significant confidentiality risk.\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>\n</p>"},{"summary":"Security - Message digest is custom","type":"Vulnerability","defaultSeverity":"Major","description":"<p>Implementing a custom MessageDigest is error-prone.</p>\n<p><a href=\"http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html\">NIST</a> recommends the use of SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, or SHA-512/256.</p>\n<blockquote>\n    \"<b>SHA-1 for digital signature generation:</b><br/>\n    SHA-1 may only be used for digital signature generation where specifically allowed by NIST protocol-specific guidance.\n    For all other applications, <u>SHA-1 shall not be used for digital signature generation</u>.<br/>\n    <b>SHA-1 for digital signature verification:</b><br/>\n    For digital signature verification, <u>SHA-1 is allowed for legacy-use</u>.<br/>\n    [...]<br/>\n    <b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>\n    The use of these hash functions is acceptable for all hash function applications.\"<br/>\n    - <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>\n</blockquote>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>MyProprietaryMessageDigest extends MessageDigest {\n    @Override\n    protected byte[] engineDigest() {\n        [...]\n        //Creativity is a bad idea\n        return [...];\n    }\n}</pre>\n</p>\n<p>\n<p>Upgrade your implementation to use one of the approved algorithms. Use an algorithm that is sufficiently strong for your specific security needs.</p>\n<p>\n    <b>Example Solution:</b><br/>\n<pre>MessageDigest sha256Digest = MessageDigest.getInstance(\"SHA256\");\nsha256Digest.update(password.getBytes());</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html\">NIST Approved Hashing Algorithms</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>\n</p>"},{"summary":"Security - Found JAX-RS REST endpoint","type":"Vulnerability","defaultSeverity":"Info","description":"<p>This method is part of a REST Web Service (JSR311).</p>\n<p>\n<b>The security of this web service should be analyzed. For example:</b>\n<ul>\n<li>Authentication, if enforced, should be tested.</li>\n<li>Access control, if enforced, should be tested.</li>\n<li>The inputs should be tracked for potential vulnerabilities.</li>\n<li>The communication should ideally be over SSL.</li>\n<li>If the service supports writes (e.g., via POST), its vulnerability to CSRF should be investigated.<sup>[1]</sup></li>\n</ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/REST_Assessment_Cheat_Sheet\">OWASP: REST Assessment Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/REST_Security_Cheat_Sheet\">OWASP: REST Security Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Web_Service_Security_Cheat_Sheet\">OWASP: Web Service Security Cheat Sheet</a><br/>\n1. <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\">OWASP: Cross-Site Request Forgery</a><br/>\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet\">OWASP: CSRF Prevention Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>"},{"summary":"Security - FilenameUtils not filtering null bytes","type":"Vulnerability","defaultSeverity":"Info","description":"<p>Some FilenameUtils' methods don't filter NULL bytes (<code>0x00</code>).</p>\n<p>If a null byte is injected into a filename, if this filename is passed to the underlying OS, the file retrieved will be the\nname of the file that is specified prior to the NULL byte, since at the OS level, all strings are terminated by a null byte even\nthough Java itself doesn't care about null bytes or treat them special. This OS behavior can be used to bypass filename validation \nthat looks at the end of the filename (e.g., endswith \".log\") to make sure its a safe file to access.</p>\n<p>To fix this, two things are recommended:\n<ul>\n<li>Upgrade to Java 7 update 40 or later, or Java 8+ since  \n<a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8014846\">NULL byte injection in filenames is fixed in those versions</a>.</li>\n<li>Strongly validate any filenames provided by untrusted users to make sure they are valid (i.e., don't contain null, don't include path characters, etc.)</li>\n</ul>\n<p>If you know you are using a modern version of Java immune to NULL byte injection, you can probably disable this rule.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246949/Null%20Byte%20Injection\">WASC-28: Null Byte Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/158.html\">CWE-158: Improper Neutralization of Null Byte or NUL Character</a>\n</p>"},{"summary":"Security - Use of ESAPI Encryptor","type":"Vulnerability","defaultSeverity":"Info","description":"<p>\n    The ESAPI has a small history of vulnerabilities within the cryptography component. Here is a quick validation list to\n    make sure the Authenticated Encryption is working as expected.\n</p>\n<p><b>1. Library Version</b></p>\n<p>\n    This issue is corrected in ESAPI version 2.1.0. Versions <= 2.0.1 are vulnerable to a MAC bypass (CVE-2013-5679).<br/>\n</p>\n<p>\n    For Maven users, the plugin <a href=\"http://mojo.codehaus.org/versions-maven-plugin/\">versions</a> can be called using the\n    following command. The effective version of ESAPI will be available in the output.<br/>\n    <pre>$ mvn versions:display-dependency-updates</pre>\n    <br/>Output:<br/>\n    <pre>\n[...]\n[INFO] The following dependencies in Dependencies have newer versions:\n[INFO]   org.slf4j:slf4j-api ................................... 1.6.4 -> 1.7.7\n[INFO]   org.owasp.esapi:esapi ................................. 2.0.1 -> 2.1.0\n[...]\n    </pre>\n</p>\n<p>\n    or by looking at the configuration directly.<br/>\n    <pre>\n&lt;dependency&gt;\n    &lt;groupId&gt;org.owasp.esapi&lt;/groupId&gt;\n    &lt;artifactId&gt;esapi&lt;/artifactId&gt;\n    &lt;version&gt;2.1.0&lt;/version&gt;\n&lt;/dependency&gt;</pre>\n</p>\n<p>\n    For Ant users, the jar used should be <a href=\"http://repo1.maven.org/maven2/org/owasp/esapi/esapi/2.1.0/esapi-2.1.0.jar\">esapi-2.1.0.jar</a>.\n</p>\n<p><b>2. Configuration:</b></p>\n    <p>\n    The library version 2.1.0 is still vulnerable to key size being changed in the ciphertext definition (CVE-2013-5960). Some precautions need to be taken.<br/>\n    <br/>\n    <div><b>The cryptographic configuration of ESAPI can also be vulnerable if any of these elements are present:</b><br/>\n    <b>Insecure configuration:</b><br/>\n    <pre>\nEncryptor.CipherText.useMAC=false\n\nEncryptor.EncryptionAlgorithm=AES\nEncryptor.CipherTransformation=AES/CBC/PKCS5Padding\n\nEncryptor.cipher_modes.additional_allowed=CBC</pre>\n    </div>\n</p>\n<p>\n    <div>\n    <b>Secure configuration:</b><br/>\n    <pre>\n#Needed\nEncryptor.CipherText.useMAC=true\n\n#Needed to have a solid auth. encryption\nEncryptor.EncryptionAlgorithm=AES\nEncryptor.CipherTransformation=AES/GCM/NoPadding\n\n#CBC mode should be removed to avoid padding oracle\nEncryptor.cipher_modes.additional_allowed=</pre>\n    </div>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://owasp-esapi-java.googlecode.com/svn/trunk/documentation/ESAPI-security-bulletin1.pdf\">ESAPI Security bulletin 1 (CVE-2013-5679)</a><br/>\n    <a href=\"http://nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-5679\">Vulnerability Summary for CVE-2013-5679</a><br/>\n    <a href=\"http://www.synacktiv.com/ressources/synacktiv_owasp_esapi_hmac_bypass.pdf\">Synactiv: Bypassing HMAC validation in OWASP ESAPI symmetric encryption</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/310.html\">CWE-310: Cryptographic Issues</a><br/>\n    <a href=\"http://lists.owasp.org/pipermail/esapi-dev/2015-March/002533.html\">ESAPI-dev mailing list: Status of CVE-2013-5960</a><br/>\n</p>"},{"summary":"Security - Untrusted query string","type":"Vulnerability","defaultSeverity":"Info","description":"<p>The query string is the concatenation of the GET parameter names and values. Parameters other than those intended can\nbe passed in.</p>\n<p>For the URL request <code>/app/servlet.htm?a=1&b=2</code>, the query string extract will be <code>a=1&b=2</code></p>\n<p>Just as is true for individual parameter values retrieved via methods like <code>HttpServletRequest.getParameter()</code>, \nthe value obtained from <code>HttpServletRequest.getQueryString()</code> should be considered unsafe.\nYou may need to validate or sanitize anything pulled from the query string before passing it to sensitive APIs. \n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>"},{"summary":"Security - Untrusted Referer header","type":"Vulnerability","defaultSeverity":"Info","description":"<p>\nBehavior:\n<ul>\n<li>Any value can be assigned to this header if the request is coming from a malicious user.</li>\n<li>The \"Referer\" will not be present if the request was initiated from another origin that is secure (https).</li>\n</ul>\n</p>\n<p>\nRecommendations:\n<ul>\n<li>No access control should be based on the value of this header.</li>\n<li>No CSRF protection should be based only on this value (<a href=\"http://www.w3.org/Protocols/HTTP/HTRQ_Headers.html#z14\">because it is optional</a>).</li>\n</ul>\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>"},{"summary":"Security - Potential JDBC Injection","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n</p>\n\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>Connection conn = [...];\nStatement stmt = con.createStatement();\nResultSet rs = stmt.executeQuery(\"update COFFEES set SALES = \"+nbSales+\" where COF_NAME = '\"+coffeeName+\"'\");</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>Connection conn = [...];\nconn.prepareStatement(\"update COFFEES set SALES = ? where COF_NAME = ?\");\nupdateSales.setInt(1, nbSales);\nupdateSales.setString(2, coffeeName);</pre>\n</p>\n<br/>\n\n<b>References (JDBC)</b><br/>\n<a href=\"http://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html\">Oracle Documentation: The Java Tutorials &gt; Prepared Statements</a><br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>"},{"summary":"Security - Potential code injection when using Script Engine","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\n    Dymanic code is being evaluate. A careful analysis of the code construction should be made. Malicious code execution\n    could lead to data leakage or operating system compromised.\n</p>\n<p>\n    If the evaluation of user code is intended, a proper sandboxing should be applied (see references).\n</p>\n\n<p><b>Code at risk:</b></p>\n<p>\n<pre>\npublic void runCustomTrigger(String script) {\n    ScriptEngineManager factory = new ScriptEngineManager();\n    ScriptEngine engine = factory.getEngineByName(\"JavaScript\");\n\n    engine.eval(script); //Bad things can happen here.\n}</pre>\n</p>\n\n<p><b>Solution:</b></p>\n<p>\nSafe evaluation of Javascript code using \"Cloudbees Rhino Sandbox\" library.<br/>\n<pre>\npublic void runCustomTrigger(String script) {\n    SandboxContextFactory contextFactory = new SandboxContextFactory();\n    Context context = contextFactory.makeContext();\n    contextFactory.enterContext(context);\n    try {\n        ScriptableObject prototype = context.initStandardObjects();\n        prototype.setParentScope(null);\n        Scriptable scope = context.newObject(prototype);\n        scope.setPrototype(prototype);\n\n        context.evaluateString(scope,script, null, -1, null);\n    } finally {\n        context.exit();\n    }\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://github.com/cloudbees/rhino-sandbox\">Cloudbees Rhino Sandbox</a>: Utility to create sandbox with Rhino (block access to all classes)<br/>\n<a href=\"http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java/\">CodeUtopia.net: Sandboxing Rhino in Java</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html\">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>\n<a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>\n</p>"},{"summary":"Security - WebView with JavaScript enabled (Android)","type":"Vulnerability","defaultSeverity":"Info","description":"<p>\n    Enabling JavaScript for the WebView means that it is now susceptible to XSS. The page render should be inspected\n    for potential reflected XSS, stored XSS and DOM XSS.<br/>\n<pre>\nWebView myWebView = (WebView) findViewById(R.id.webView);\nWebSettings webSettings = myWebView.getSettings();\nwebSettings.setJavaScriptEnabled(true);\n</pre>\n</p>\n\n<p>\n    <b>Code at risk:</b><br/>\nEnabling JavaScript is not a bad practice. It just means that the backend code need to be audited for potential XSS.\nThe XSS can also be introduce client-side with DOM XSS.\n<pre>\nfunction updateDescription(newDescription) {\n    $(\"#userDescription\").html(\"&lt;p&gt;\"+newDescription+\"&lt;/p&gt;\");\n}\n</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://www.technotalkative.com/issue-using-setjavascriptenabled-can-introduce-xss-vulnerabilities-application-review-carefully/\">Issue: Using setJavaScriptEnabled can introduce XSS vulnerabilities</a><br/>\n    <a href=\"http://developer.android.com/guide/webapps/webview.html#UsingJavaScript\">Android Official Doc: WebView</a><br/>\n    <a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n    <a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n    <a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a>\n</p>"},{"summary":"Security - Hard Coded Key","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\nCryptographic keys should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is\ncertainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.\n(Hard coded passwords are reported separately by <i>Hard Coded Password</i> pattern)\n</p>\n<p>\n<p><b>Vulnerable Code:</b><br/>\n\n<pre>byte[] key = {1, 2, 3, 4, 5, 6, 7, 8};\nSecretKeySpec spec = new SecretKeySpec(key, \"AES\");\nCipher aes = Cipher.getInstance(\"AES\");\naes.init(Cipher.ENCRYPT_MODE, spec);\nreturn aesCipher.doFinal(secretData);</pre> \n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/321.html\">CWE-321: Use of Hard-coded Cryptographic Key</a><br/>\n</p>"},{"summary":"Security - Potential code injection when using Spring Expression","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\n    A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid\n    that unfiltered values fall into this risky code evaluation.\n</p>\n<p><b>Code at risk:</b></p>\n<p>\n<pre>\npublic void parseExpressionInterface(Person personObj,String property) {\n\n        ExpressionParser parser = new SpelExpressionParser();\n\n        //Unsafe if the input is control by the user..\n        Expression exp = parser.parseExpression(property+\" == 'Albert'\");\n\n        StandardEvaluationContext testContext = new StandardEvaluationContext(personObj);\n        boolean result = exp.getValue(testContext, Boolean.class);\n[...]</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>\n    <a href=\"http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html\">Spring Expression Language (SpEL) - Official Documentation</a><br/>\n    <a href=\"https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf\">Minded Security: Expression Language Injection</a><br/>\n    <a href=\"http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html\">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>\n</p>"},{"summary":"Security - MD2, MD4 and MD5 are weak hash functions","type":"Vulnerability","defaultSeverity":"Major","description":"<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be use to hash password for example.</p>\n\n<blockquote>\n    \"The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions\n    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a\n    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using\n    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]\"<br/>\n    - <a href=\"https://en.wikipedia.org/wiki/MD5#Security\">Wikipedia: MD5 - Security</a>\n</blockquote>\n\n<blockquote>\n    \"<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>\n    The use of these hash functions is acceptable for all hash function applications.\"<br/>\n    - <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>\n</blockquote>\n<blockquote>\n    \"The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time\n    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known\n    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,\n    it becomes harder to apply the dictionary or brute force attacks.\"<br/>\n- <a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST: Recommendation for Password-Based Key Derivation  p.12</a>\n</blockquote>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>MessageDigest md5Digest = MessageDigest.getInstance(\"MD5\");\n    md5Digest.update(password.getBytes());\n    byte[] hashValue = md5Digest.digest();</pre>\n    <br/>\n    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (Using bouncy castle):</b><br/>\n    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());\n    gen.init(password.getBytes(\"UTF-8\"), salt.getBytes(), 4096);\n    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();\n}</pre>\n    <br/>\n    <b>Solution (Java 8 and later):</b><br/>\n    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);\n    SecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n    return f.generateSecret(spec).getEncoded();\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n[1] <a href=\"http://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf\">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>\n[2] <a href=\"http://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf\">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>\n<a href=\"https://en.wikipedia.org/wiki/MD5\">Wikipedia: MD5</a><br/>\n<a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>\n<a href=\"http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf\">NIST: Recommendation for Password-Based Key Derivation</a><br/>\n<a href=\"http://stackoverflow.com/questions/22580853/reliable-implementation-of-pbkdf2-hmac-sha256-for-java\">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>\n</p>"},{"summary":"Security - Potential code injection when using Expression Language (EL)","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\n    A expression is built with a dynamic value. The source of the value(s) should be verified to avoid\n    that unfiltered values fall into this risky code evaluation.\n</p>\n<p><b>Code at risk:</b></p>\n<p>\n<pre>public void evaluateExpression(String expression) {\n    FacesContext context = FacesContext.getCurrentInstance();\n    ExpressionFactory expressionFactory = context.getApplication().getExpressionFactory();\n    ELContext elContext = context.getELContext();\n    ValueExpression vex = expressionFactory.createValueExpression(elContext, expression, String.class);\n    return (String) vex.getValue(elContext);\n}</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://blog.mindedsecurity.com/2015/11/reliable-os-shell-with-el-expression.html\">Minded Security: Abusing EL for executing OS commands</a><br/>\n    <a href=\"https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html\">The Java EE 6 Tutorial: Expression Language</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>\n    <a href=\"https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf\">Minded Security: Expression Language Injection</a><br/>\n    <a href=\"http://danamodio.com/appsec/research/spring-remote-code-with-expression-language-injection/\">Dan Amodio's blog: Remote Code with Expression Language Injection</a><br/>\n    <a href=\"http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html\">Remote Code Execution .. by design</a>: Example of malicious payload. The samples given could be used to test sandboxing rules.<br/>\n</p>"},{"summary":"Security - Potential Path Traversal (file read)","type":"Vulnerability","defaultSeverity":"Major","description":"<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter. \nIf an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>\n<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled\nby the user. If that is the case, the reported instance is a false positive.</p>\n<br/>\n\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>@GET\n@Path(\"/images/{image}\")\n@Produces(\"images/*\")\npublic Response getImage(@javax.ws.rs.PathParam(\"image\") String image) {\n    File file = new File(\"resources/images/\", image); //Weak point\n\n    if (!file.exists()) {\n        return Response.status(Status.NOT_FOUND).build();\n    }\n\n    return Response.ok().entity(new FileInputStream(file)).build();\n}</pre>\n</p>\n<br/>\n\n<p>\n    <b>Solution:</b><br/>\n<pre>import org.apache.commons.io.FilenameUtils;\n\n@GET\n@Path(\"/images/{image}\")\n@Produces(\"images/*\")\npublic Response getImage(@javax.ws.rs.PathParam(\"image\") String image) {\n    File file = new File(\"resources/images/\", FilenameUtils.getName(image)); //Fix\n\n    if (!file.exists()) {\n        return Response.status(Status.NOT_FOUND).build();\n    }\n\n    return Response.ok().entity(new FileInputStream(file)).build();\n}</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC: Path Traversal</a><br/>\n<a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>\n</p>"},{"summary":"Security - Found Struts 2 endpoint","type":"Vulnerability","defaultSeverity":"Info","description":"<p>In Struts 2, the endpoints are Plain Old Java Objects (POJOs) which means no Interface/Class needs to be implemented/extended.</p>\n<p>When a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for\nthe class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn't include those values. \nAn attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has\nsuch a setter. The use of these parameters should be reviewed to make sure they are used safely.</p>"},{"summary":"Security - Found Tapestry page","type":"Vulnerability","defaultSeverity":"Info","description":"<p>A Tapestry endpoint was discovered at application startup. Tapestry apps are structured with a backing Java class and a corresponding \nTapestry Markup Language page (a .tml file) for each page. When a request is received, the GET/POST parameters are mapped to specific \ninputs in the backing Java class. The mapping is either done with fieldName:</p>\n<pre><code>\n    [...]\n    protected String input;\n    [...]\n</code></pre>\n<p>or the definition of an explicit annotation:\n</p>\n<pre><code>\n    [...]\n    @org.apache.tapestry5.annotations.Parameter\n    protected String parameter1;\n\n    @org.apache.tapestry5.annotations.Component(id = \"password\")\n    private PasswordField passwordField;\n    [...]\n</code></pre>\n<p>The page is mapped to the view <code>[/resources/package/PageName].tml.</code></p>\n<p>Each Tapestry page in this application should be researched to make sure all inputs that are automatically \nmapped in this way are properly validated before they are used.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://tapestry.apache.org/\">Apache Tapestry Home Page</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>"},{"summary":"Security - A malicious XSLT could be provided","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\n    \"XSLT (Extensible Stylesheet Language Transformations) is a language for transforming XML documents into other XML documents\".<sup>[1]</sup><br/>\n    It is possible to attach malicious behavior to those stylesheets. Therefore, if an attacker can control the content or the source of the\n    stylesheet, he might be able to trigger remote code execution.<sup>[2]</sup>\n</p>\n<p>\n<b>Code at risk:</b><br/>\n<pre>\nSource xslt = new StreamSource(new FileInputStream(inputUserFile)); //Dangerous source to validate\n\nTransformer transformer = TransformerFactory.newInstance().newTransformer(xslt);\n\nSource text = new StreamSource(new FileInputStream(\"/data_2_process.xml\"));\ntransformer.transform(text, new StreamResult(...));\n</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\n<p>\nThe solution would be to make sure the stylesheet is loaded from a safe sources and make sure that vulnerabilities such as\nPath traversal <sup>[3][4]</sup> are not possible.\n</p>\n<p>\n<b>References</b><br/>\n[1] <a href=\"https://en.wikipedia.org/wiki/XSLT\">Wikipedia: XSLT (Extensible Stylesheet Language Transformations)</a><br/>\n<a href=\"https://prezi.com/y_fuybfudgnd/offensive-xslt/\">Offensive XSLT</a> by Nicolas Gregoire<br/>\n[2] <a href=\"http://www.agarri.fr/kom/archives/2012/07/02/from_xslt_code_execution_to_meterpreter_shells/index.html\">From XSLT code execution to Meterpreter shells</a> by Nicolas Gregoire<br/>\n<a href=\"http://xhe.myxwiki.org/xwiki/bin/view/Main/\">XSLT Hacking Encyclopedia</a> by Nicolas Gregoire<br/>\n<a href=\"http://www.acunetix.com/blog/articles/the-hidden-dangers-of-xsltprocessor-remote-xsl-injection/\">Acunetix.com : The hidden dangers of XSLTProcessor - Remote XSL injection</a><br/>\n<a href=\"https://www.w3.org/TR/xslt\">w3.org XSL Transformations (XSLT) Version 1.0</a> : w3c specification<br/>\n[3] <a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC: Path Traversal</a><br/>\n[4] <a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n</p>"},{"summary":"Security - Untrusted User-Agent header","type":"Vulnerability","defaultSeverity":"Info","description":"<p>The header \"User-Agent\" can easily be spoofed by the client. Adopting different behaviors based on the User-Agent (for\ncrawler UA) is not recommended.</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>"},{"summary":"Security - XML parsing vulnerable to XXE (SAXParser)","type":"Vulnerability","defaultSeverity":"Critical","description":"<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nSAXParser parser = SAXParserFactory.newInstance().newSAXParser();\n\nparser.parse(inputStream, customHandler);</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one feature or both.\n</p>\n\n<p><b>Solution using \"Secure processing\" mode:</b></p>\n<p>\nThis setting will protect you against Denial of Service attack and remote file access.\n<pre>\nSAXParserFactory spf = SAXParserFactory.newInstance();\nspf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\nSAXParser parser = spf.newSAXParser();\n\nparser.parse(inputStream, customHandler);</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\nBy disabling DTD, almost all XXE attacks will be prevented.\n<pre>\nSAXParserFactory spf = SAXParserFactory.newInstance();\nspf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\nSAXParser parser = spf.newSAXParser();\n\nparser.parse(inputStream, customHandler);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n<a href=\"http://xerces.apache.org/xerces-j/features.html\">Xerces complete features list</a>\n</p>"},{"summary":"Security - Potential code injection in Seam logging call","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\n    Seam Logging API support an expression language to introduce bean property to log messages. The expression language can\n    also be the source to unwanted code execution.\n</p>\n<p>\n    In this context, an expression is built with a dynamic value. The source of the value(s) should be verified to avoid\n    that unfiltered values fall into this risky code evaluation.\n</p>\n<p><b>Code at risk:</b></p>\n<p>\n<pre>public void logUser(User user) {\n    log.info(\"Current logged in user : \" + user.getUsername());\n    //...\n}</pre>\n</p>\n<p><b>Solution:</b></p>\n<p>\n<pre>public void logUser(User user) {\n    log.info(\"Current logged in user : #0\", user.getUsername());\n    //...\n}</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://issues.jboss.org/browse/JBSEAM-5130\">JBSEAM-5130: Issue documenting the risk</a><br/>\n    <a href=\"https://docs.jboss.org/seam/2.3.1.Final/reference/html_single/#d0e4185\">JBoss Seam: Logging (Official documentation)</a><br/>\n    <a href=\"https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html\">The Java EE 6 Tutorial: Expression Language</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>\n\n</p>"},{"summary":"Security - Potential SQL/HQL Injection (Hibernate)","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\nAlternatively to prepare statements, Hibernate Criteria can be used.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>\nSession session = sessionFactory.openSession();\nQuery q = session.createQuery(\"select t from UserEntity t where id = \" + input);\nq.execute();</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>\nSession session = sessionFactory.openSession();\nQuery q = session.createQuery(\"select t from UserEntity t where id = :userId\");\nq.setString(\"userId\",input);\nq.execute();</pre>\n</p>\n<p>\n    <b>Solution for dynamic queries (with Hibernate Criteria):</b><br/>\n    <pre>\nSession session = sessionFactory.openSession();\nQuery q = session.createCriteria(UserEntity.class)\n    .add( Restrictions.like(\"id\", input) )\n    .list();\nq.execute();</pre>\n</p>\n<br/>\n<p>\n<b>References (Hibernate)</b><br/>\n<a href=\"https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/querycriteria.html\">Hibernate Documentation: Query Criteria</a><br/>\n<a href=\"https://docs.jboss.org/hibernate/orm/3.2/api/org/hibernate/Query.html\">Hibernate Javadoc: Query Object</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/02/hql-for-pentesters.html\">HQL for pentesters</a>: Guideline to test if the suspected code is exploitable.<br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>"},{"summary":"Security - Potential HTTP Response Splitting","type":"Vulnerability","defaultSeverity":"Info","description":"<p>\n    When an HTTP request contains unexpected CR and LF characters, the server may respond with an output stream\n    that is interpreted as two different HTTP responses (instead of one).\n    An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks.\n    According to OWASP, the issue has been fixed in virtually all modern Java EE application servers, but it is still better to validate the input.\n    If you are concerned about this risk, you should test on the platform of concern to see\n    if the underlying platform allows for CR or LF characters to be injected into headers.\n    This weakness is reported with lower priority than SQL injection etc.,\n    if you are using a vulnerable platform, please check low-priority warnings too.\n</p>\n<br/>\n<p>\n<b>Code at risk:</b><br/>\n<pre>String author = request.getParameter(AUTHOR_PARAMETER);\n// ...\nCookie cookie = new Cookie(\"author\", author);\nresponse.addCookie(cookie);</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://www.owasp.org/index.php/HTTP_Response_Splitting\">OWASP: HTTP Response Splitting</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/113.html\">CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')</a>\n    <a href=\"http://cwe.mitre.org/data/definitions/93.html\">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>\n</p>"},{"summary":"Security - Potential Path Traversal (file write)","type":"Vulnerability","defaultSeverity":"Major","description":"<p>A file is opened to write to its contents. The filename comes from an <b>input</b> parameter. \nIf an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.</p>\n<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled\nby the user. If that is the case, the reported instance is a false positive.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC-33: Path Traversal</a><br/>\n<a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>\n</p>"},{"summary":"Security - TrustManager that accept any certificates","type":"Vulnerability","defaultSeverity":"Major","description":"<p>Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root\n<a href=\"http://en.wikipedia.org/wiki/Certificate_authority\">certificate authority</a>. As a consequence, this is vulnerable to\n<a href=\"http://en.wikipedia.org/wiki/Man-in-the-middle_attack\">Man-in-the-middle attacks</a>\nsince the client will trust any certificate.\n</p>\n<p>\nA TrustManager allowing specific certificates (based on a truststore for example) should be built.\nDetailed information for a proper implementation is available at:\n<a href=\"http://stackoverflow.com/a/6378872/89769\">[1]</a> \n<a href=\"http://stackoverflow.com/a/5493452/89769\">[2]</a>\n</p>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>class TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (TrustMangager based on a keystore):</b><br/>\n<pre>KeyStore ks = //Load keystore containing the certificates trusted\n\nSSLContext sc = SSLContext.getInstance(\"TLS\");\n\nTrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\ntmf.init(ks);\n\nsc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/295.html\">CWE-295: Improper Certificate Validation</a>\n</p>"},{"summary":"Security - Untrusted Content-Type header","type":"Vulnerability","defaultSeverity":"Info","description":"<p>\nThe HTTP header Content-Type can be controlled by the client. As such, its value should not be used in any security critical decisions.\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>"},{"summary":"Security - Untrusted Hostname header","type":"Vulnerability","defaultSeverity":"Info","description":"<p>The hostname header can be controlled by the client. As such, its value should not be used in any security critical decisions. \nBoth <code>ServletRequest.getServerName()</code> and <code>HttpServletRequest.getHeader(\"Host\")</code> have the same \nbehavior which is to extract the <code>Host</code> header.</p>\n<pre>\nGET /testpage HTTP/1.1\nHost: www.example.com\n[...]</pre>\n<p>\nThe web container serving your application may redirect requests to your application by default. This would allow\na malicious user to place any value in the Host header. It is recommended that you do not trust this value in any security\ndecisions you make with respect to a request.\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>"},{"summary":"Security - RSA with no padding is insecure","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\nThe software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.\n</p>\n<p>\n<b>Vulnerable Code:</b><br/>\n<pre>Cipher.getInstance(\"RSA/NONE/NoPadding\")</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\nThe code should be replaced with:<br/>\n<pre>Cipher.getInstance(\"RSA/ECB/OAEPWithMD5AndMGF1Padding\")</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/780.html\">CWE-780: Use of RSA Algorithm without OAEP</a><br/>\n<a href=\"http://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/\">Root Labs: Why RSA encryption padding is critical</a>\n</p>"},{"summary":"Security - Hazelcast symmetric encryption","type":"Vulnerability","defaultSeverity":"Major","description":"<p>The network communications for Hazelcast is configured to use a symmetric cipher (probably DES or blowfish).</p>\n<p>Those ciphers alone do not provide integrity or secure authentication. The use of asymmetric encryption is preferred.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://docs.hazelcast.org/docs/3.5/manual/html/encryption.html\">Hazelcast Documentation: Encryption</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a>\n</p>"},{"summary":"Security - Found JAX-WS SOAP endpoint","type":"Vulnerability","defaultSeverity":"Info","description":"<p>This method is part of a SOAP Web Service (JSR224).</p>\n<p>\n<b>The security of this web service should be analyzed. For example:</b>\n<ul>\n<li>Authentication, if enforced, should be tested.</li>\n<li>Access control, if enforced, should be tested.</li>\n<li>The inputs should be tracked for potential vulnerabilities.</li>\n<li>The communication should ideally be over SSL.</li>\n</ul>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Web_Service_Security_Cheat_Sheet\">OWASP: Web Service Security Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>"},{"summary":"Security - Cipher with no integrity","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\n    The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the \n    data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection.\n</p>\n<p>\n    The solution is to used a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. Combining a HMAC function to the \n    existing cipher is prone to error <sup><a href=\"http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/\">[1]</a></sup>. Specifically,\n    it is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic\n    functions on the data.\n</p>\n<p>The following modes are vulnerable because they don't provide a HMAC:<br/>\n    - CBC<br/>\n    - OFB<br/>\n    - CTR<br/>\n    - ECB<br/><br/>\n    The following snippets code are some examples of vulnerable code.<br/><br/>\n    <b>Code at risk:</b><br/>\n    <i>AES in CBC mode</i><br/>\n\n    <pre>Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n    <br/>\n    <i>Triple DES with ECB mode</i><br/>\n\n<pre>Cipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\nIn the example solution above, the GCM mode introduces an HMAC into the resulting encrypted data, providing integrity of the result.\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://en.wikipedia.org/wiki/Authenticated_encryption\">Wikipedia: Authenticated encryption</a><br/>\n    <a href=\"http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01\">NIST: Authenticated Encryption Modes</a><br/>\n    <a href=\"http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/\">Moxie Marlinspike's blog: The Cryptographic Doom Principle</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/353.html\">CWE-353: Missing Support for Integrity Check</a>\n</p>"},{"summary":"Security - Cookie without the secure flag","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\nA new cookie is created without the <code>Secure</code> flag set.\nThe <code>Secure</code> flag is a directive to the browser to make sure that the cookie is not sent for insecure\ncommunication (<code>http://</code>).\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\nCookie cookie = new Cookie(\"userName\",userName);\nresponse.addCookie(cookie);\n</pre>\n</p>\n\n<p>\n<b>Solution (Specific configuration):</b><br/>\n<pre>\nCookie cookie = new Cookie(\"userName\",userName);\ncookie.setSecure(true); // Secure flag\ncookie.setHttpOnly(true);\n</pre>\n</p>\n\n<p>\n<b>Solution (Servlet 3.0 configuration):</b><br/>\n<pre>\n&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" version=\"3.0\"&gt;\n[...]\n&lt;session-config&gt;\n &lt;cookie-config&gt;\n  &lt;http-only&gt;true&lt;/http-only&gt;\n  &lt;secure&gt;true&lt;/secure&gt;\n &lt;/cookie-config&gt;\n&lt;/session-config&gt;\n&lt;/web-app&gt;\n</pre>\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/614.html\">CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/315.html\">CWE-315: Cleartext Storage of Sensitive Information in a Cookie</a><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/311.html\">CWE-311: Missing Encryption of Sensitive Data</a><br/>\n<a href=\"https://www.owasp.org/index.php/SecureFlag\">OWASP: Secure Flag</a><br/>\n<a href=\"https://www.rapid7.com/db/vulnerabilities/http-cookie-secure-flag\">Rapid7: Missing Secure Flag From SSL Cookie</a>\n</p>"},{"summary":"Security - WebView with JavaScript interface (Android)","type":"Vulnerability","defaultSeverity":"Info","description":"<p>\n    The use of JavaScript Interface could expose the WebView to risky API. If an XSS is triggered in the WebView, the class\n    could be called by the malicious JavaScript code.\n</p>\n\n<p>\n    <b>Code at risk:</b><br/>\n    <pre>\nWebView myWebView = (WebView) findViewById(R.id.webView);\n\nmyWebView.addJavascriptInterface(new FileWriteUtil(this), \"fileWriteUtil\");\n\nWebSettings webSettings = myWebView.getSettings();\nwebSettings.setJavaScriptEnabled(true);\n\n[...]\nclass FileWriteUtil {\n    Context mContext;\n\n    FileOpenUtil(Context c) {\n        mContext = c;\n    }\n\n    public void writeToFile(String data, String filename, String tag) {\n        [...]\n    }\n}\n    </pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface%28java.lang.Object,%20java.lang.String%29\">Android Official Doc: WebView.addJavascriptInterface()</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/749.html\">CWE-749: Exposed Dangerous Method or Function</a>\n</p>"},{"summary":"Security - Untrusted servlet parameter","type":"Vulnerability","defaultSeverity":"Info","description":"<p>The Servlet can read GET and POST parameters from various methods. The value obtained should be considered unsafe.\nYou may need to validate or sanitize those values before passing them to sensitive APIs such as:</p>\n<ul>\n<li>SQL query (May lead to SQL injection)</li>\n<li>File opening (May lead to path traversal)</li>\n<li>Command execution (Potential Command injection)</li>\n<li>HTML construction (Potential XSS)</li>\n<li>etc...</li>\n</ul>\n\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>"},{"summary":"Security - Regex DOS (ReDOS)","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\n    Regular expressions (regexs) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines \n    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.\n<p>\n    For example, for the regex: <b>^(a+)+$</b>, the input \"<code>aaaaaaaaaaaaaaaaX</code>\" will cause the regex engine to analyze 65536 \ndifferent paths.<sup>[1] Example taken from OWASP references</sup></p>\n<p>\nTherefore, it is possible that a single request may cause a large amount of computation on the server side. \nThe problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the \nRegex due to the + (or a *) inside the parenthesis, and the + (or a *) outside the parenthesis. The way this is written, either + could \nconsume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be \nrewritten as: <b>^a+$</b>, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original \nregex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://www.jroller.com/sebastianKuebeck/entry/detecting_and_preventing_redos_vulnerabilities\">Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities</a><br/>\n<sup>[1]</sup> <a href=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">OWASP: Regular expression Denial of Service</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/400.html\">CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</a>\n</p>"},{"summary":"Security - Potential SQL/JDOQL Injection (JDO)","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>\nPersistenceManager pm = getPM();\n\nQuery q = pm.newQuery(\"select * from Users where name = \" + input);\nq.execute();</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>\nPersistenceManager pm = getPM();\n\nQuery q = pm.newQuery(\"select * from Users where name = nameParam\");\nq.declareParameters(\"String nameParam\");\nq.execute(input);</pre>\n</p>\n<br/>\n<p>\n<b>References (JDO)</b><br/>\n<a href=\"https://db.apache.org/jdo/object_retrieval.html\">JDO: Object Retrieval</a><br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>"},{"summary":"Security - XML parsing vulnerable to XXE (DocumentBuilder)","type":"Vulnerability","defaultSeverity":"Critical","description":"<!--XXE_GENERIC_START-->\n<h3>Attack</h3>\n<p>XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received\nfrom an untrusted source.</p>\n<p><b>Risk 1: Expose local file content (XXE: <u>X</u>ML e<u>X</u>ternal <u>E</u>ntity)</b></p>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt; ]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</pre>\n</p>\n<b>Risk 2: Denial of service (XEE: <u>X</u>ml <u>E</u>ntity <u>E</u>xpansion)</b>\n<p>\n<pre>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;!DOCTYPE lolz [\n &lt;!ENTITY lol &quot;lol&quot;&gt;\n &lt;!ELEMENT lolz (#PCDATA)&gt;\n &lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;\n &lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;\n &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;\n[...]\n &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</pre>\n</p>\n\n<h3>Solution</h3>\n<p>\nIn order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.\n</p>\n<!--XXE_GENERIC_END-->\n\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nDocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\nDocument doc = db.parse(input);</pre>\n</p>\n<br/>\n<p>\nThe following snippets show two available solutions. You can set one feature or both.\n</p>\n\n<p><b>Solution using \"Secure processing\" mode:</b></p>\n<p>\nThis setting will protect you against Denial of Service attack and remote file access.\n<pre>\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ndbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\nDocumentBuilder db = dbf.newDocumentBuilder();\n\nDocument doc = db.parse(input);</pre>\n</p>\n\n<p><b>Solution disabling DTD:</b></p>\n<p>\nBy disabling DTD, almost all XXE attacks will be prevented.\n<pre>\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ndbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\nDocumentBuilder db = dbf.newDocumentBuilder();\n\nDocument doc = db.parse(input);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<!--XXE_GENERIC_START-->\n<a href=\"http://cwe.mitre.org/data/definitions/611.html\">CWE-611: Improper Restriction of XML External Entity Reference ('XXE')</a><br/>\n<a href=\"https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260\">CERT: IDS10-J. Prevent XML external entity attacks</a><br/>\n<a href=\"https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\">OWASP.org: XML External Entity (XXE) Processing</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Expansion\">WS-Attacks.org: XML Entity Expansion</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_External_Entity_DOS\">WS-Attacks.org: XML External Entity DOS</a><br/>\n<a href=\"http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack\">WS-Attacks.org: XML Entity Reference Attack</a><br/>\n<a href=\"http://blog.h3xstream.com/2014/06/identifying-xml-external-entity.html\">Identifying Xml eXternal Entity vulnerability (XXE)</a><br/>\n<!--XXE_GENERIC_END-->\n<a href=\"http://xerces.apache.org/xerces2-j/features.html\">Xerces2 complete features list</a>\n</p>"},{"summary":"Security - Blowfish usage with short key","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\nThe Blowfish cipher supports keysizes from 32 bits to 448 bits. A small key size makes the ciphertext vulnerable to brute force attacks.\nAt least 128 bits of entropy should be used when generating the key if the usage of Blowfish must be retained.\n</p>\n<p>\nIf the algorithm can be changed, the AES block cipher should be used instead.\n</p>\n\n<p><b>Vulnerable Code:</b><br/>\n<pre>KeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\nkeyGen.init(64);</pre>\n</p>\n\n<p><b>Solution:</b><br/>\n<pre>KeyGenerator keyGen = KeyGenerator.getInstance(\"Blowfish\");\nkeyGen.init(128);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://en.wikipedia.org/wiki/Blowfish_(cipher)\">Blowfish (cipher)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a>\n</p>"},{"summary":"Security - Cipher is susceptible to Padding Oracle","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\n    This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An adversary could potentially decrypt the\n    message if the system exposed the difference between plaintext with invalid padding or valid padding. The distinction between\n    valid and invalid padding is usually revealed through distinct error messages being returned for each condition.\n</p>\n<p>\n    <b>Code at risk:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://www.infobytesec.com/down/paddingoracle_openjam.pdf\">Padding Oracles for the masses (by Matias Soler)</a><br/>\n    <a href=\"http://en.wikipedia.org/wiki/Authenticated_encryption\">Wikipedia: Authenticated encryption</a><br/>\n    <a href=\"http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01\">NIST: Authenticated Encryption Modes</a><br/>\n    <a href=\"http://capec.mitre.org/data/definitions/463.html\">CAPEC: Padding Oracle Crypto Attack</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/696.html\">CWE-696: Incorrect Behavior Order</a>\n</p>"},{"summary":"Security - Object deserialization is used in {1}","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\n    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows\n    the trigger of malicious operation.\n</p>\n<p>\n    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are\n    known to trigger Denial of Service<sup>[1]</sup>.\n</p>\n<p>\n    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might\n    become vulnerable has soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\npublic UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {\n\n    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {\n        return (UserData) in.readObject();\n    }\n}\n</pre>\n</p>\n\n<p>\n<b>Solutions:</b><br/>\n<p>\nAvoid deserializing object provided by remote users.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE-502: Deserialization of Untrusted Data</a><br/>\n<a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">Deserialization of untrusted data</a><br/>\n<a href=\"http://www.oracle.com/technetwork/java/seccodeguide-139067.html#8\">Serialization and Deserialization </a><br/>\n<a href=\"https://github.com/frohoff/ysoserial\">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>\n[1] <a href=\"https://gist.github.com/coekie/a27cc406fc9f3dc7a70d\">Example of Denial of Service using the class java.util.HashSet</a><br/>\n[2] <a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590\">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>\n[3] <a href=\"https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize\">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>\n</p>"},{"summary":"Security - HTTP headers untrusted","type":"Vulnerability","defaultSeverity":"Info","description":"<p>Request headers can easily be altered by the requesting user. In general, no assumption should be made that \nthe request came from a regular browser without modification by an attacker. As such, it is recommended that you \nnot trust this value in any security decisions you make with respect to a request.</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/807.html\">CWE-807: Untrusted Inputs in a Security Decision</a>\n</p>"},{"summary":"Security - Potential SQL/JPQL Injection (JPA)","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n</p>\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>\nEntityManager pm = getEM();\n\nTypedQuery&lt;UserEntity&gt; q = em.createQuery(\n    String.format(\"select * from Users where name = %s\", username),\n    UserEntity.class);\n\nUserEntity res = q.getSingleResult();</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>\nTypedQuery&lt;UserEntity&gt; q = em.createQuery(\n    \"select * from Users where name = usernameParam\",UserEntity.class)\n    .setParameter(\"usernameParam\", username);\n\nUserEntity res = q.getSingleResult();</pre>\n</p>\n<br/>\n<p>\n<b>References (JPA)</b><br/>\n<a href=\"http://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html\">The Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query Language</a><br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>"},{"summary":"Security - Broadcast (Android)","type":"Vulnerability","defaultSeverity":"Info","description":"<p>\n    Broadcast intents can be listen by any application with the appropriate permission. It is suggested to avoid transmitting\n    sensitive information when possible.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n<pre>\nIntent i = new Intent();\ni.setAction(\"com.insecure.action.UserConnected\");\ni.putExtra(\"username\", user);\ni.putExtra(\"email\", email);\ni.putExtra(\"session\", newSessionId);\n\nthis.sendBroadcast(v1);\n</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (if possible):</b><br/>\n<pre>\nIntent i = new Intent();\ni.setAction(\"com.secure.action.UserConnected\");\n\nsendBroadcast(v1);\n</pre>\n</p>\n<br/>\n<p>\n    <b>Configuration (receiver)<sup>[1] Source: StackOverflow</sup>:</b><br/>\n<pre>\n&lt;manifest ...&gt;\n\n    &lt;!-- Permission declaration --&gt;\n    &lt;permission android:name=\"my.app.PERMISSION\" /&gt;\n\n    &lt;receiver\n        android:name=\"my.app.BroadcastReceiver\"\n        android:permission=\"my.app.PERMISSION\"&gt; &lt;!-- Permission enforcement --&gt;\n        &lt;intent-filter>\n            &lt;action android:name=\"com.secure.action.UserConnected\" /&gt;\n        &lt;/intent-filter&gt;\n    &lt;/receiver&gt;\n\n    ...\n&lt;/manifest>\n</pre>\n</p>\n<p>\n    <b>Configuration (sender)<sup>[1] Source: StackOverflow</sup>:</b><br/>\n<pre>\n&lt;manifest&gt;\n    &lt;!-- We declare we own the permission to send broadcast to the above receiver --&gt;\n    &lt;uses-permission android:name=\"my.app.PERMISSION\"/&gt;\n\n    &lt;!-- With the following configuration, both the sender and the receiver apps need to be signed by the same developer certificate. --&gt;\n    &lt;permission android:name=\"my.app.PERMISSION\" android:protectionLevel=\"signature\"/&gt;\n&lt;/manifest&gt;\n</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"https://www.securecoding.cert.org/confluence/display/java/DRD03-J.+Do+not+broadcast+sensitive+information+using+an+implicit+intent\">CERT: DRD03-J. Do not broadcast sensitive information using an implicit intent</a><br/>\n    <a href=\"http://developer.android.com/reference/android/content/BroadcastReceiver.html#Security\">Android Official Doc: BroadcastReceiver (Security)</a><br/>\n    <a href=\"http://developer.android.com/guide/topics/manifest/receiver-element.html\">Android Official Doc: Receiver configuration (see <code>android:permission</code>)</a><br/>\n    <sup>[1]</sup> <a href=\"http://stackoverflow.com/a/21513368/89769\">StackOverflow: How to set permissions in broadcast sender and receiver in android</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/925.html\">CWE-925: Improper Verification of Intent by Broadcast Receiver</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/927.html\">CWE-927: Use of Implicit Intent for Sensitive Communication</a>\n</p>"},{"summary":"Security - Potential LDAP Injection","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\nJust like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately, LDAP doesn't have prepared statement interfaces like SQL.\nTherefore, the primary defense against LDAP injection is strong input validation of any untrusted data before including it in an LDAP query.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n    <pre>NamingEnumeration&lt;SearchResult&gt; answers = context.search(\"dc=People,dc=example,dc=com\",\n        \"(uid=\" + username + \")\", ctrls);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246947/LDAP%20Injection\">WASC-29: LDAP Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/90.html\">CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</a><br/>\n<a href=\"http://www.veracode.com/security/ldap-injection\">LDAP Injection Guide: Learn How to Detect LDAP Injections and Improve LDAP Security</a>\n</p>"},{"summary":"Security - Potential XSS in Servlet","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\nA potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    String input1 = req.getParameter(\"input1\");\n    [...]\n    resp.getWriter().write(input1);\n}</pre>\n</p>\n<p>\n    <b>Solution:</b>\n<pre>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    String input1 = req.getParameter(\"input1\");\n    [...]\n    resp.getWriter().write(Encode.forHtml(input1));\n}</pre>\n</p>\n<p>\nThe best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider: \nHTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,\nwhich explains these defenses in significant detail.\n</p>\n<p>Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing \n'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n<a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>\n<a href=\"https://code.google.com/p/owasp-java-encoder/\">OWASP Java Encoder</a><br/>\n</p>"},{"summary":"Security - RSA usage with short key","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\n    NIST recommend the use of <u>2048 bits and higher</u> keys for the RSA algorithm.\n</p>\n<blockquote>\n    \"Digital Signature Verification | RSA: 1024 &le; len(n) &lt; 2048 | Legacy-use\"<br/>\n    \"Digital Signature Verification | RSA: len(n) &ge; 2048 | Acceptable\"<br/>\n    - <a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.7</a>\n</blockquote>\n\n<p><b>Vulnerable Code:</b><br/>\n<pre>\nKeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\nkeyGen.initialize(512);\n</pre>\n</p>\n\n<p><b>Solution:</b><br/>\nThe KeyPairGenerator creation should be as follows with at least 2048 bit key size.<br/>\n<pre>\nKeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\nkeyGen.initialize(2048);\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://csrc.nist.gov/groups/ST/toolkit/key_management.html\">NIST: Latest publication on key management</a><br/>\n<a href=\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths p.7</a><br/>\n<a href=\"http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/how-large-a-key-should-be-used.htm\">RSA Laboratories: 3.1.5 How large a key should be used in the RSA cryptosystem?</a><br/>\n<a href=\"http://en.wikipedia.org/wiki/Key_size#Asymmetric%5Falgorithm%5Fkey%5Flengths\">Wikipedia: Asymmetric algorithm key lengths</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a><br/>\n<a href=\"http://www.keylength.com/en/compare/\">Keylength.com (BlueKrypt): Aggregate key length recommendations.</a>\n</p>"},{"summary":"Security - Found Struts 1 endpoint","type":"Vulnerability","defaultSeverity":"Info","description":"<p>This class is a Struts 1 Action.</p>\n<p>Once a request is routed to this controller, a Form object will automatically be instantiated that contains the HTTP parameters. \nThe use of these parameters should be reviewed to make sure they are used safely.</p>"},{"summary":"Security - Bad hexadecimal concatenation","type":"Vulnerability","defaultSeverity":"Major","description":"<p>When converting a byte array containing a hash signature to a human readable string, a conversion mistake can be made if \nthe array is read byte by byte. The following sample illustrates the use of Integer.toHexString() which will trim any leading zeroes\nfrom each byte of the computed hash value.\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] resultBytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder stringBuilder = new StringBuilder();\nfor(byte b :resultBytes) {\n    stringBuilder.append( Integer.toHexString( b & 0xFF ) );\n}\n\nreturn stringBuilder.toString();</pre>\n</p>\n<p>\nThis mistake weakens the hash value computed since it introduces more collisions. \nFor example, the hash values \"0x0679\" and \"0x6709\" would both output as \"679\" for the above function.\n</p>\n\n<p>\nIn this situation, the use of toHexString() should be replaced with String.format() as follows:\n<pre>stringBuilder.append( String.format( \"%02X\", b ) );</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/704.html\">CWE-704: Incorrect Type Conversion or Cast</a>\n</p>"},{"summary":"Security - Potential external control of configuration","type":"Vulnerability","defaultSeverity":"Info","description":"<p>\n    Allowing external control of system settings can disrupt service or cause an application\n    to behave in unexpected, and potentially malicious ways. \n    An attacker could cause an error by providing a nonexistent catalog name\n    or connect to an unauthorized portion of the database.\n</p>\n<br/>\n<p>\n<b>Code at risk:</b><br/>\n<pre>conn.setCatalog(request.getParameter(\"catalog\"));</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/15.html\">CWE-15: External Control of System or Configuration Setting</a><br/>\n</p>"},{"summary":"Security - Found Wicket WebPage","type":"Vulnerability","defaultSeverity":"Info","description":"<p>This class represents a Wicket WebPage. Input is automatically read from a PageParameters instance passed to the constructor. \nThe current page is mapped to the view [/package/WebPageName].html.</p>\n<p>Each Wicket page in this application should be researched to make sure all inputs that are automatically \nmapped in this way are properly validated before they are used.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://wicket.apache.org/\">Apache Wicket Home Page</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>"},{"summary":"Security - Static IV","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\n    Initialization vector must be regenerated for each message to be encrypted.\n</p>\n<p><b>Vulnerable Code:</b></p>\n<p>\n<pre>\nprivate static byte[] IV = new byte[16] {(byte)0,(byte)1,(byte)2,[...]};\n\npublic void encrypt(String message) throws Exception {\n\n    IvParameterSpec ivSpec = new IvParameterSpec(IV);\n[...]\n</pre>\n<p><b>Solution:</b></p>\n<p>\n<pre>\npublic void encrypt(String message) throws Exception {\n\n    byte[] iv = new byte[16];\n    new SecureRandom().nextBytes(iv);\n\n    IvParameterSpec ivSpec = new IvParameterSpec(iv);\n[...]\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://en.wikipedia.org/wiki/Initialization_vector\">Wikipedia: Initialization vector</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/329.html\">CWE-329: Not Using a Random IV with CBC Mode</a><br/>\n<a href=\"https://defuse.ca/cbcmodeiv.htm\">Encryption - CBC Mode IV: Secret or Not?</a>\n</p>"},{"summary":"Security - Trust Boundary Violation","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\n    \"A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted.\n    On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data\n    to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a\n    program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the\n    same data structure, it becomes easier for programmers to mistakenly trust unvalidated data.\" <sup>[1]</sup>\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\npublic void doSomething(HttpServletRequest req, String activateProperty) {\n    //..\n\n    req.getSession().setAttribute(activateProperty,\"true\");\n\n}\n</pre>\n<br/>\n<pre>\npublic void loginEvent(HttpServletRequest req, String userSubmitted) {\n    //..\n\n    req.getSession().setAttribute(\"user\",userSubmitted);\n}\n</pre>\n</p>\n\n<p>\n<b>Solution:</b><br/>\n<p>\nThe solution would be to add validation prior setting a new session attribute. When possible, prefer data from\nsafe location rather than using direct user input.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n[1] <a href=\"https://cwe.mitre.org/data/definitions/501.html\">CWE-501: Trust Boundary Violation</a><br/>\n<a href=\"https://www.owasp.org/index.php/Trust_Boundary_Violation\">OWASP : Trust Boundary Violation</a>\n</p>"},{"summary":"Security - Potentially sensitive data in a cookie","type":"Vulnerability","defaultSeverity":"Info","description":"<p>The information stored in a custom cookie should not be sensitive or related to the session. In most cases, sensitive data should only be stored in session\nand referenced by the user's session cookie. See HttpSession (HttpServletRequest.getSession())</p>\n<p>Custom cookies can be used for information that needs to live longer than and is independent of a specific session.</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/315.html\">CWE-315: Cleartext Storage of Sensitive Information in a Cookie</a>\n</p>"},{"summary":"Security - HostnameVerifier that accept any signed certificates","type":"Vulnerability","defaultSeverity":"Major","description":"<p>A <code>HostnameVerifier</code> that accept any host are often use because of certificate reuse on many hosts.\nAs a consequence, this is vulnerable to\n<a href=\"http://en.wikipedia.org/wiki/Man-in-the-middle_attack\">Man-in-the-middle attacks</a>\nsince the client will trust any certificate.\n</p>\n<p>\nA TrustManager allowing specific certificates (based on a truststore for example) should be built.\nWildcard certificates should be created for reused on multiples subdomains.\nDetailed information for a proper implementation is available at:\n<a href=\"http://stackoverflow.com/a/6378872/89769\">[1]</a>\n<a href=\"http://stackoverflow.com/a/5493452/89769\">[2]</a>\n</p>\n<br/>\n<p>\n    <b>Vulnerable Code:</b><br/>\n<pre>public class AllHosts implements HostnameVerifier {\n    public boolean verify(final String hostname, final SSLSession session) {\n        return true;\n    }\n}</pre>\n</p>\n<br/>\n<p>\n    <b>Solution (TrustMangager based on a keystore):</b><br/>\n<pre>KeyStore ks = //Load keystore containing the certificates trusted\n\nSSLContext sc = SSLContext.getInstance(\"TLS\");\n\nTrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\ntmf.init(ks);\n\nsc.init(kmf.getKeyManagers(), tmf.getTrustManagers(),null);\n</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/295.html\">CWE-295: Improper Certificate Validation</a>\n</p>"},{"summary":"Security - External file access (Android)","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\n    The application write data to external storage (potentially SD card). There are multiple security implication to this\n    action. First, file store on SD card will be accessible to the application having the\n    <a href=\"http://developer.android.com/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE\"><code>READ_EXTERNAL_STORAGE</code></a> permission.\n    Also, if the data persisted contains confidential information about the user, encryption would be needed.\n</p>\n<p>\n    <b>Code at risk:</b><br/>\n<pre>\nfile file = new File(getExternalFilesDir(TARGET_TYPE), filename);\nfos = new FileOutputStream(file);\nfos.write(confidentialData.getBytes());\nfos.flush();\n</pre>\n</p>\n<p>\n    <b>Better alternative:</b><br/>\n<pre>\nfos = openFileOutput(filename, Context.MODE_PRIVATE);\nfos.write(string.getBytes());\n</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://developer.android.com/training/articles/security-tips.html#ExternalStorage\">Android Official Doc: Security Tips</a><br/>\n    <a href=\"https://www.securecoding.cert.org/confluence/display/java/DRD00-J.+Do+not+store+sensitive+information+on+external+storage+%28SD+card%29+unless+encrypted+first\">CERT: DRD00-J: Do not store sensitive information on external storage [...]</a><br/>\n    <a href=\"http://developer.android.com/guide/topics/data/data-storage.html#filesExternal\">Android Official Doc: Using the External Storage</a><br/>\n    <a href=\"https://www.owasp.org/index.php/Mobile_Top_10_2014-M2\">OWASP Mobile Top 10 2014-M2: Insecure Data Storage</a><br/>\n    <a href=\"https://cwe.mitre.org/data/definitions/312.html\">CWE-312: Cleartext Storage of Sensitive Information</a>\n</p>"},{"summary":"Security - Untrusted session cookie value","type":"Vulnerability","defaultSeverity":"Info","description":"<p>\nThe method <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getRequestedSessionId()\"><code>HttpServletRequest.getRequestedSessionId()</code></a>\ntypically returns the value of the cookie <code>JSESSIONID</code>. This value is normally only accessed by the session management logic and not normal developer code.\n</p>\n<p>\nThe value passed to the client is generally an alphanumeric value (e.g., <code>JSESSIONID=jp6q31lq2myn</code>). However, the value can be altered by the client. \nThe following HTTP request illustrates the potential modification.\n<pre>\nGET /somePage HTTP/1.1\nHost: yourwebsite.com\nUser-Agent: Mozilla/5.0\nCookie: JSESSIONID=Any value of the user&#39;s choice!!??'''&quot;&gt;\n</pre>\n</p>\n<p>As such, the JSESSIONID should only be used to see if its value matches an existing session ID. If it does not, the user should be \nconsidered an unauthenticated user. In addition, the session ID value should never be logged. If it is, then the log file could contain \nvalid active session IDs, allowing an insider to hijack any sessions whose IDs have been logged and are still active.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet\">OWASP: Session Management Cheat Sheet</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n\n</p>"},{"summary":"Security - Potential CRLF Injection for logs","type":"Vulnerability","defaultSeverity":"Info","description":"<p>\n    When data from untusted source are put into a logger and not neutralized correctly,\n    an attacker could forge log entries or include malicious content.\n    Inserted false entries could be used to skew statistics, distract the administrator\n    or even to implicate another party in the commission of a malicious act.\n    If the log file is processed automatically, the attacker can render the file unusable\n    by corrupting the format of the file or injecting unexpected characters.\n    An attacker may also inject code or other commands into the log file and take advantage\n    of a vulnerability in the log processing utility (e.g. command injection or XSS).\n</p>\n<br/>\n<p>\n<b>Code at risk:</b><br/>\n<pre>String val = request.getParameter(\"val\");\ntry {\n    number = Integer.parseInt(val);\n} catch (NumberFormatException) {\n    log.info(\"Failed to parse val = \" + val);\n}</pre>\n</p>\n<br/>\n<p>\n    <b>References</b><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/117.html\">CWE-117: Improper Output Neutralization for Logs</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/93.html\">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>\n</p>"},{"summary":"Security - XMLDecoder usage","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\n    XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution.\n    This is possible because XMLDecoder supports arbitrary method invocation. This capability is intended to call setter methods,\n    but in practice, any method can be called.\n</p>\n<p>\n    <b>Malicious XML example:</b>\n</p>\n<pre>\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;java version=\"1.4.0\" class=\"java.beans.XMLDecoder\"&gt;\n  &lt;object class=\"java.io.PrintWriter\"&gt;\n    &lt;string>/tmp/Hacked.txt&lt;/string&gt;\n    &lt;void method=\"println\"&gt;\n      &lt;string>Hello World!&lt;/string&gt;\n    &lt;/void&gt;\n    &lt;void method=\"close\"/&gt;\n  &lt;/object&gt;\n&lt;/java&gt;\n</pre>\n<p>\nThe XML code above will cause the creation of a file with the content \"Hello World!\".\n</p>\n<p>\n    <b>Vulnerable Code:</b></br/>\n    <pre>XMLDecoder d = new XMLDecoder(in);\ntry {\n    Object result = d.readObject();\n}\n[...]</pre>\n</p>\n<p>\n<b>Solution:</b></br/>\nThe solution is to avoid using XMLDecoder to parse content from an untrusted source.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://blog.diniscruz.com/2013/08/using-xmldecoder-to-execute-server-side.html\">Dinis Cruz Blog: Using XMLDecoder to execute server-side Java Code on an Restlet application</a><br/>\n<a href=\"https://securityblog.redhat.com/2014/01/23/java-deserialization-flaws-part-2-xml-deserialization/\">RedHat blog : Java deserialization flaws: Part 2, XML deserialization</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a>\n</p>"},{"summary":"Security - Potential JDBC Injection (Spring JDBC)","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\nThe input values included in SQL queries need to be passed in safely.\nBind variables in prepared statements can be used to easily mitigate the risk of SQL injection.\n</p>\n\n<p>\n    <b>Vulnerable Code:</b><br/>\n    <pre>JdbcTemplate jdbc = new JdbcTemplate();\nint count = jdbc.queryForObject(\"select count(*) from Users where name = '\"+paramName+\"'\", Integer.class);\n</pre>\n</p>\n<p>\n    <b>Solution:</b><br/>\n    <pre>JdbcTemplate jdbc = new JdbcTemplate();\nint count = jdbc.queryForObject(\"select count(*) from Users where name = ?\", Integer.class, paramName);</pre>\n</p>\n<br/>\n\n<b>References (Spring JDBC)</b><br/>\n<a href=\"http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/jdbc.html\">Spring Official Documentation: Data access with JDBC</a><br/>\n<b>References (SQL injection)</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246963/SQL%20Injection\">WASC-19: SQL Injection</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/66.html\">CAPEC-66: SQL Injection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/89.html\">CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP: Top 10 2013-A1-Injection</a><br/>\n<a href=\"https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet\">OWASP: SQL Injection Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\">OWASP: Query Parameterization Cheat Sheet</a><br/>\n</p>"},{"summary":"Security - Unencrypted Socket","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\nThe communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.\n</p>\n<p>\n<b>Vulnerable Code:</b><br/>\nPlain socket (Cleartext communication):\n<pre>Socket soc = new Socket(\"www.google.com\",80);</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\nSSL Socket (Secure communication):\n<pre>Socket soc = SSLSocketFactory.getDefault().createSocket(\"www.google.com\", 443);</pre>\n</p>\n<p>Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory does all the appropriate certificate validation checks to\nmake sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how\nto do this correctly.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2010-A9\">OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP: Top 10 2013-A6-Sensitive Data Exposure</a><br/>\n<a href=\"https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet\">OWASP: Transport Layer Protection Cheat Sheet</a><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection\">WASC-04: Insufficient Transport Layer Protection</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/319.html\">CWE-319: Cleartext Transmission of Sensitive Information</a>\n</p>"},{"summary":"Security - Cookie without the HttpOnly flag","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\nA new cookie is created without the <code>HttpOnly</code> flag set.\nThe <code>HttpOnly</code> flag is a directive to the browser to make sure that the cookie can not be red by\nmalicious script. When a user is the target of a \"Cross-Site Scripting\", the attacker would benefit greatly from getting\nthe session id for example.\n</p>\n\n<p>\n<b>Code at risk:</b><br/>\n<pre>\nCookie cookie = new Cookie(\"email\",userName);\nresponse.addCookie(cookie);\n</pre>\n</p>\n\n<p>\n<b>Solution (Specific configuration):</b><br/>\n<pre>\nCookie cookie = new Cookie(\"email\",userName);\ncookie.setSecure(true);\ncookie.setHttpOnly(true); //HttpOnly flag\n</pre>\n</p>\n\n<p>\n<b>Solution (Servlet 3.0 configuration):</b><br/>\n<pre>\n&lt;web-app xmlns=\"http://java.sun.com/xml/ns/javaee\" version=\"3.0\"&gt;\n[...]\n&lt;session-config&gt;\n &lt;cookie-config&gt;\n  &lt;http-only&gt;true&lt;/http-only&gt;\n  &lt;secure&gt;true&lt;/secure&gt;\n &lt;/cookie-config&gt;\n&lt;/session-config&gt;\n&lt;/web-app&gt;\n</pre>\n</p>\n<br/>\n<p>\n<b>Reference</b><br/>\n<a href=\"http://blog.codinghorror.com/protecting-your-cookies-httponly/\">Coding Horror blog: Protecting Your Cookies: HttpOnly</a><br/>\n<a href=\"https://www.owasp.org/index.php/HttpOnly\">OWASP: HttpOnly</a><br/>\n<a href=\"https://www.rapid7.com/db/vulnerabilities/http-cookie-http-only-flag\">Rapid7: Missing HttpOnly Flag From Cookie</a>\n</p>"},{"summary":"Security - Tainted filename read","type":"Vulnerability","defaultSeverity":"Info","description":"<p>The filename provided by the FileUpload API can be tampered with by the client to reference unauthorized files.</p>\n<p>For example:</p>\n<ul>\n<li><code>\"../../../config/overide_file\"</code></li>\n<li><code>\"shell.jsp\\u0000expected.gif\"</code></li>\n</ul>\n<p>Therefore, such values should not be passed directly to the filesystem API. If acceptable, the application should generate its \nown file names and use those. Otherwise, the provided filename should be properly validated to ensure it's properly structured, \ncontains no unauthorized path characters (e.g., / \\), and refers to an authorized file.</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://blogs.securiteam.com/index.php/archives/1268\">Securiteam: File upload security recommendations</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC-33: Path Traversal</a><br/>\n<a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n<a href=\"http://capec.mitre.org/data/definitions/126.html\">CAPEC-126: Path Traversal</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/22.html\">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>\n</p>"},{"summary":"Security - DES/DESede is insecure","type":"Vulnerability","defaultSeverity":"Major","description":"<p>\nDES and DESede (3DES) are not considered strong ciphers for modern applications. Currently, NIST recommends the \nusage of AES block ciphers instead of DES/3DES.\n</p>\n<p>\n    <b>Example weak code:</b>\n<pre>Cipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<p>\n    <b>Example solution:</b>\n    <pre>Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\nc.init(Cipher.ENCRYPT_MODE, k, iv);\nbyte[] cipherText = c.doFinal(plainText);</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://www.nist.gov/itl/fips/060205_des.cfm\">NIST Withdraws Outdated Data Encryption Standard</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a>\n</p>"},{"summary":"Style - Useless non-empty void method","type":"Code Smell","defaultSeverity":"Info","description":"<p>Our analysis shows that this non-empty void method does not actually perform any useful work.\nPlease check it: probably there's a mistake in its code or its body can be fully removed.\n</p>\n<p>We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong.\nCommon false-positive cases include:</p>\n<p>- The method is intended to trigger loading of some class which may have a side effect.</p>\n<p>- The method is intended to implicitly throw some obscure exception.</p>","debt":"30min"},{"summary":"Correctness - Creation of ScheduledThreadPoolExecutor with zero core threads","type":"Bug","defaultSeverity":"Major","description":"<p>(<a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor%28int%29\">Javadoc</a>)\nA ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.\n</p>","debt":"1h"},{"summary":"Correctness - Class defines hashcode(); should it be hashCode()?","type":"Bug","defaultSeverity":"Major","description":"<p> This class defines a method called <code>hashcode()</code>.&nbsp; This method\n  does not override the <code>hashCode()</code> method in <code>java.lang.Object</code>,\n  which is probably what was intended.</p>","debt":"1h"},{"summary":"Correctness - Integer multiply of result of integer remainder","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe code multiplies the result of an integer remaining by an integer constant.\nBe sure you don't have your operator precedence confused. For example\ni % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).\n</p>","debt":"1h"},{"summary":"Malicious code - Field is a mutable collection which should be package protected","type":"Code Smell","defaultSeverity":"Info","description":"<p>A mutable collection instance is assigned to a final static field, \n   thus can be changed by malicious code or by accident from another package.\n   The field could be made package protected to avoid this vulnerability. \n   Alternatively you may wrap this field into Collections.unmodifiableSet/List/Map/etc.\n   to avoid this vulnerability.</p>","debt":"15min"},{"summary":"Bad practice - Method may fail to close database resource on exception","type":"Code Smell","defaultSeverity":"Major","description":"<p> The method creates a database resource (such as a database connection\nor row set), does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nthe object on all exception paths out of the method.&nbsp; Failure to\nclose database resources on all paths out of a method may\nresult in poor performance, and could cause the application to\nhave problems communicating with the database.</p>","debt":"1h"},{"summary":"Multi-threading - Synchronization on getClass rather than class literal","type":"Bug","defaultSeverity":"Major","description":"<p>\n     This instance method synchronizes on <code>this.getClass()</code>. If this class is subclassed,\n     subclasses will synchronize on the class object for the subclass, which isn't likely what was intended.\n     For example, consider this code from java.awt.Label:</p>\n     <pre>\n     private static final String base = \"label\";\n     private static int nameCounter = 0;\n     String constructComponentName() {\n        synchronized (getClass()) {\n            return base + nameCounter++;\n        }\n     }\n     </pre>\n     <p>Subclasses of <code>Label</code> won't synchronize on the same subclass, giving rise to a datarace.\n     Instead, this code should be synchronizing on <code>Label.class</code></p>\n      <pre>\n     private static final String base = \"label\";\n     private static int nameCounter = 0;\n     String constructComponentName() {\n        synchronized (Label.class) {\n            return base + nameCounter++;\n        }\n     }\n     </pre>\n      <p>Bug pattern contributed by Jason Mehrens</p>","debt":"1h"},{"summary":"Multi-threading - Incorrect lazy initialization and update of static field","type":"Bug","defaultSeverity":"Major","description":"<p> This method contains an unsynchronized lazy initialization of a static field.\nAfter the field is set, the object stored into that location is further updated or accessed.\nThe setting of the field is visible to other threads as soon as it is set. If the\nfurther accesses in the method that set the field serve to initialize the object, then\nyou have a <em>very serious</em> multithreading bug, unless something else prevents\nany other thread from accessing the stored object until it is fully initialized.\n</p>\n<p>Even if you feel confident that the method is never called by multiple\nthreads, it might be better to not set the static field until the value\nyou are setting it to is fully populated/initialized.","debt":"1h"},{"summary":"Correctness - Futile attempt to change max pool size of ScheduledThreadPoolExecutor","type":"Bug","defaultSeverity":"Major","description":"<p>(<a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html\">Javadoc</a>)\nWhile ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.\n    </p>","debt":"1h"},{"summary":"Correctness - TestCase declares a bad suite method","type":"Bug","defaultSeverity":"Major","description":"<p> Class is a JUnit TestCase and defines a suite() method.\nHowever, the suite method needs to be declared as either</p>\n<pre>public static junit.framework.Test suite()</pre>\nor\n<pre>public static junit.framework.TestSuite suite()</pre>","debt":"30min"},{"summary":"Style - Potentially dangerous use of non-short-circuit logic","type":"Code Smell","defaultSeverity":"Info","description":"<p> This code seems to be using non-short-circuit logic (e.g., &amp;\nor |)\nrather than short-circuit logic (&amp;&amp; or ||). In addition,\nit seem possible that, depending on the value of the left hand side, you might not\nwant to evaluate the right hand side (because it would have side effects, could cause an exception\nor could be expensive.</p>\n<p>\nNon-short-circuit logic causes both sides of the expression\nto be evaluated even when the result can be inferred from\nknowing the left-hand side. This can be less efficient and\ncan result in errors if the left-hand side guards cases\nwhen evaluating the right-hand side can generate an error.\n</p>\n\n<p>See <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2\">the Java\nLanguage Specification</a> for details.\n\n</p>","debt":"1h"},{"summary":"Style - Method discards result of readLine after checking if it is non-null","type":"Code Smell","defaultSeverity":"Info","description":"<p> The value returned by readLine is discarded after checking to see if the return\nvalue is non-null. In almost all situations, if the result is non-null, you will want\nto use that non-null value. Calling readLine again will give you a different line.</p>","debt":"1h"},{"summary":"Correctness - Covariant equals() method defined, Object.equals(Object) inherited","type":"Bug","defaultSeverity":"Major","description":"<p> This class defines a covariant version of the <code>equals()</code>\n  method, but inherits the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp;\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>","debt":"1h"},{"summary":"Style - Self assignment of local variable","type":"Code Smell","defaultSeverity":"Info","description":"<p> This method contains a self assignment of a local variable; e.g.</p>\n<pre>\n  public void foo() {\n    int x = 3;\n    x = x;\n  }\n</pre>\n<p>\nSuch assignments are useless, and may indicate a logic error or typo.\n</p>","debt":"30min"},{"summary":"Correctness - Possible null pointer dereference","type":"Bug","defaultSeverity":"Major","description":"<p> There is a branch of statement that, <em>if executed,</em>  guarantees that\na null value will be dereferenced, which\nwould generate a <code>NullPointerException</code> when the code is executed.\nOf course, the problem might be that the branch or statement is infeasible and that\nthe null pointer exception can't ever be executed; deciding that is beyond the ability of FindBugs.\n</p>","debt":"1h"},{"summary":"Correctness - Incompatible bit masks","type":"Bug","defaultSeverity":"Major","description":"<p> This method compares an expression of the form (e &amp; C) to D,\nwhich will always compare unequal\ndue to the specific values of constants C and D.\nThis may indicate a logic error or typo.</p>","debt":"1h"},{"summary":"Performance - Method invokes inefficient Number constructor; use static valueOf instead","type":"Bug","defaultSeverity":"Major","description":"<p>\n      Using <code>new Integer(int)</code> is guaranteed to always result in a new object whereas\n      <code>Integer.valueOf(int)</code> allows caching of values to be done by the compiler, class library, or JVM.\n      Using of cached values avoids object allocation and the code will be faster.\n      </p>\n      <p>\n      Values between -128 and 127 are guaranteed to have corresponding cached instances\n      and using <code>valueOf</code> is approximately 3.5 times faster than using constructor.\n      For values outside the constant range the performance of both styles is the same.\n      </p>\n      <p>\n      Unless the class must be compatible with JVMs predating Java 1.5,\n      use either autoboxing or the <code>valueOf()</code> method when creating instances of\n      <code>Long</code>, <code>Integer</code>, <code>Short</code>, <code>Character</code>, and <code>Byte</code>.\n      </p>","debt":"30min"},{"summary":"Correctness - File.separator used for regular expression","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe code here uses <code>File.separator</code>\nwhere a regular expression is required. This will fail on Windows\nplatforms, where the <code>File.separator</code> is a backslash, which is interpreted in a\nregular expression as an escape character. Among other options, you can just use\n<code>File.separatorChar=='\\\\' ? \"\\\\\\\\\" : File.separator</code> instead of\n<code>File.separator</code>\n\n</p>","debt":"1h"},{"summary":"Malicious code - Field should be moved out of an interface and made package protected","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n A final static field that is\ndefined in an interface references a mutable\n   object such as an array or hashtable.\n   This mutable object could\n   be changed by malicious code or\n        by accident from another package.\n   To solve this, the field needs to be moved to a class\n   and made package protected\n   to avoid\n        this vulnerability.</p>","debt":"1h"},{"summary":"Multi-threading - Static Calendar field","type":"Bug","defaultSeverity":"Major","description":"<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use.\nSharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the\napplication. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see\nrandom ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a>\nand <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>","debt":"1h"},{"summary":"Bad practice - Finalizer nulls fields","type":"Code Smell","defaultSeverity":"Major","description":"<p> This finalizer nulls out fields.  This is usually an error, as it does not aid garbage collection,\n  and the object is going to be garbage collected anyway.</p>","debt":"30min"},{"summary":"Style - Redundant comparison of two null values","type":"Code Smell","defaultSeverity":"Info","description":"<p> This method contains a redundant comparison of two references known to\nboth be definitely null.</p>","debt":"30min"},{"summary":"Style - Unchecked/unconfirmed cast","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis cast is unchecked, and not all instances of the type casted from can be cast to\nthe type it is being cast to. Check that your program logic ensures that this\ncast will not fail.\n</p>","debt":"30min"},{"summary":"Style - Redundant nullcheck of value known to be null","type":"Code Smell","defaultSeverity":"Info","description":"<p> This method contains a redundant check of a known null value against\nthe constant null.</p>","debt":"30min"},{"summary":"Correctness - Comparing values with incompatible type qualifiers","type":"Bug","defaultSeverity":"Major","description":"<p>\n        A value specified as carrying a type qualifier annotation is\n        compared with a value that doesn't ever carry that qualifier.\n        </p>\n\n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=ALWAYS\n        is compared with a value that where the same type qualifier specifies when=NEVER.\n        </p>\n\n        <p>\n        For example, say that @NonNegative is a nickname for\n        the type qualifier annotation @Negative(when=When.NEVER).\n        The following code will generate this warning because\n        the return statement requires a @NonNegative value,\n        but receives one that is marked as @Negative.\n        </p>\n        <blockquote>\n<pre>\npublic boolean example(@Negative Integer value1, @NonNegative Integer value2) {\n    return value1.equals(value2);\n}\n</pre>\n        </blockquote>","debt":"30min"},{"summary":"Correctness - Method call passes null for non-null parameter","type":"Bug","defaultSeverity":"Major","description":"<p>\n      A possibly-null value is passed at a call site where all known\n      target methods require the parameter to be non-null.\n    Either the parameter is annotated as a parameter that should\n    always be non-null, or analysis has shown that it will always be\n    dereferenced.\n      </p>","debt":"30min"},{"summary":"Bad practice - Confusing method names","type":"Code Smell","defaultSeverity":"Major","description":"<p> The referenced methods have names that differ only by capitalization.</p>","debt":"30min"},{"summary":"Style - Call to unsupported method","type":"Code Smell","defaultSeverity":"Info","description":"<p>All targets of this method invocation throw an UnsupportedOperationException.\n</p>","debt":"1h"},{"summary":"Bad practice - Enum field is public and mutable","type":"Code Smell","defaultSeverity":"Major","description":"<p>A mutable public field is defined inside a public enum, thus can be changed by malicious code or by accident from another package.\n  Though mutable enum fields may be used for lazy initialization, it's a bad practice to expose them to the outer world.\n  Consider declaring this field final and/or package-private.</p>","debt":"20min"},{"summary":"Style - Parameter must be non-null but is marked as nullable","type":"Code Smell","defaultSeverity":"Info","description":"<p> This parameter is always used in a way that requires it to be non-null,\nbut the parameter is explicitly annotated as being Nullable. Either the use\nof the parameter or the annotation is wrong.\n</p>","debt":"1h"},{"summary":"Correctness - Method defines a variable that obscures a field","type":"Bug","defaultSeverity":"Major","description":"<p> This method defines a local variable with the same name as a field\nin this class or a superclass.  This may cause the method to\nread an uninitialized value from the field, leave the field uninitialized,\nor both.</p>","debt":"30min"},{"summary":"Performance - Explicit garbage collection; extremely dubious except in benchmarking code","type":"Bug","defaultSeverity":"Major","description":"<p> Code explicitly invokes garbage collection.\n  Except for specific use in benchmarking, this is very dubious.</p>\n  <p>In the past, situations where people have explicitly invoked\n  the garbage collector in routines such as close or finalize methods\n  has led to huge performance black holes. Garbage collection\n   can be expensive. Any situation that forces hundreds or thousands\n   of garbage collections will bring the machine to a crawl.</p>","debt":"30min"},{"summary":"Correctness - Unneeded use of currentThread() call, to call interrupted()","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a\nstatic method, is more simple and clear to use Thread.interrupted().\n</p>","debt":"30min"},{"summary":"Correctness - Method doesn't override method in superclass due to wrong package for parameter","type":"Bug","defaultSeverity":"Major","description":"<p> The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match\nthe type of the corresponding parameter in the superclass. For example, if you have:</p>\n\n<blockquote>\n<pre>\nimport alpha.Foo;\npublic class A {\n  public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\npublic class B extends A {\n  public int f(Foo x) { return 42; }\n}\n</pre>\n</blockquote>\n\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn't\noverride the\n<code>f(Foo)</code> method defined in class <code>A</code>, because the argument\ntypes are <code>Foo</code>'s from different packages.\n</p>","debt":"1h"},{"summary":"Style - Method superfluously delegates to parent class method","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n      This derived method merely calls the same superclass method passing in the exact parameters\n      received. This method can be removed, as it provides no additional value.\n      </p>","debt":"1h"},{"summary":"Multi-threading - Notify with two locks held","type":"Bug","defaultSeverity":"Major","description":"<p> The code calls notify() or notifyAll() while two locks\n  are held. If this notification is intended to wake up a wait()\n  that is holding the same locks, it may deadlock, since the wait\n  will only give up one lock and the notify will be unable to get both locks,\n  and thus the notify will not succeed.\n   &nbsp; If there is also a warning about a two lock wait, the\n   probably of a bug is quite high.\n</p>"},{"summary":"Style - Unused public or protected field","type":"Code Smell","defaultSeverity":"Info","description":"<p> This field is never used.&nbsp;\nThe field is public or protected, so perhaps\n    it is intended to be used with classes not seen as part of the analysis. If not,\nconsider removing it from the class.</p>","debt":"30min"},{"summary":"Performance - Huge string constants is duplicated across multiple class files","type":"Bug","defaultSeverity":"Major","description":"<p>\n    A large String constant is duplicated across multiple class files.\n    This is likely because a final field is initialized to a String constant, and the Java language\n    mandates that all references to a final field from other classes be inlined into\nthat classfile. See <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6447475\">JDK bug 6447475</a>\n    for a description of an occurrence of this bug in the JDK and how resolving it reduced\n    the size of the JDK by 1 megabyte.\n</p>","debt":"1h"},{"summary":"Performance - Method compiles the regular expression in a loop","type":"Bug","defaultSeverity":"Major","description":"<p> The method creates the same regular expression inside the loop, so it will be compiled every iteration.\nIt would be more optimal to precompile this regular expression using Pattern.compile outside of the loop.</p>"},{"summary":"Correctness - Dead store due to switch statement fall through","type":"Bug","defaultSeverity":"Major","description":"<p> A value stored in the previous switch case is overwritten here due to a switch fall through. It is likely that\n    you forgot to put a break or return at the end of the previous case.\n</p>","debt":"1h"},{"summary":"Bad practice - Explicit invocation of finalizer","type":"Code Smell","defaultSeverity":"Major","description":"<p> This method contains an explicit invocation of the <code>finalize()</code>\n  method on an object.&nbsp; Because finalizer methods are supposed to be\n  executed once, and only by the VM, this is a bad idea.</p>\n<p>If a connected set of objects beings finalizable, then the VM will invoke the\nfinalize method on all the finalizable object, possibly at the same time in different threads.\nThus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize\non objects referenced by X, because they may already be getting finalized in a separate thread.</p>","debt":"1h"},{"summary":"Correctness - Uninitialized read of field method called from constructor of superclass","type":"Bug","defaultSeverity":"Major","description":"<p> This method is invoked in the constructor of the superclass. At this point,\n    the fields of the class have not yet initialized.</p>\n<p>To make this more concrete, consider the following classes:</p>\n<pre>abstract class A {\n  int hashCode;\n  abstract Object getValue();\n  A() {\n    hashCode = getValue().hashCode();\n    }\n  }\nclass B extends A {\n  Object value;\n  B(Object v) {\n    this.value = v;\n    }\n  Object getValue() {\n    return value;\n  }\n  }</pre>\n<p>When a <code>B</code> is constructed,\nthe constructor for the <code>A</code> class is invoked\n<em>before</em> the constructor for <code>B</code> sets <code>value</code>.\nThus, when the constructor for <code>A</code> invokes <code>getValue</code>,\nan uninitialized value is read for <code>value</code>.\n</p>","debt":"30min"},{"summary":"Correctness - Method performs math using floating point precision","type":"Bug","defaultSeverity":"Major","description":"<p>\n   The method performs math operations using floating point precision.\n   Floating point precision is very imprecise. For example,\n   16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.</p>","debt":"1h"},{"summary":"Correctness - int value converted to long and used as absolute time","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis code converts a 32-bit int value to a 64-bit long value, and then\npasses that value for a method parameter that requires an absolute time value.\nAn absolute time value is the number\nof milliseconds since the standard base time known as \"the epoch\", namely January 1, 1970, 00:00:00 GMT.\nFor example, the following method, intended to convert seconds since the epoch into a Date, is badly\nbroken:</p>\n<pre>\nDate getDate(int seconds) { return new Date(seconds * 1000); }\n</pre>\n<p>The multiplication is done using 32-bit arithmetic, and then converted to a 64-bit value.\nWhen a 32-bit value is converted to 64-bits and used to express an absolute time\nvalue, only dates in December 1969 and January 1970 can be represented.</p>\n\n<p>Correct implementations for the above method are:</p>\n\n<pre>\n// Fails for dates after 2037\nDate getDate(int seconds) { return new Date(seconds * 1000L); }\n\n// better, works for all dates\nDate getDate(long seconds) { return new Date(seconds * 1000); }\n</pre>","debt":"30min"},{"summary":"Correctness - Nullcheck of value previously dereferenced","type":"Bug","defaultSeverity":"Major","description":"<p> A value is checked here to see whether it is null, but this value can't\nbe null because it was previously dereferenced and if it were null a null pointer\nexception would have occurred at the earlier dereference.\nEssentially, this code and the previous dereference\ndisagree as to whether this value is allowed to be null. Either the check is redundant\nor the previous dereference is erroneous.</p>","debt":"1h"},{"summary":"Correctness - Missing expected or desired warning from FindBugs","type":"Bug","defaultSeverity":"Major","description":"<p>FindBugs didn't generate generated a warning that, according to a @ExpectedWarning annotated,\n            is expected or desired.</p>","debt":"10min"},{"summary":"Performance - Unread field","type":"Bug","defaultSeverity":"Major","description":"<p> This field is never read.&nbsp; Consider removing it from the class.</p>","debt":"30min"},{"summary":"Bad practice - Method invokes dangerous method runFinalizersOnExit","type":"Code Smell","defaultSeverity":"Major","description":"<p> <em>Never call System.runFinalizersOnExit\nor Runtime.runFinalizersOnExit for any reason: they are among the most\ndangerous methods in the Java libraries.</em> -- Joshua Bloch</p>","debt":"1h"},{"summary":"Correctness - JUnit assertion in run method will not be noticed by JUnit","type":"Bug","defaultSeverity":"Major","description":"<p> A JUnit assertion is performed in a run method. Failed JUnit assertions\njust result in exceptions being thrown.\nThus, if this exception occurs in a thread other than the thread that invokes\nthe test method, the exception will terminate the thread but not result\nin the test failing.\n</p>","debt":"30min"},{"summary":"Correctness - Bad comparison of signed byte","type":"Bug","defaultSeverity":"Major","description":"<p> Signed bytes can only have a value in the range -128 to 127. Comparing\na signed byte with a value outside that range is vacuous and likely to be incorrect.\nTo convert a signed byte <code>b</code> to an unsigned value in the range 0..255,\nuse <code>0xff &amp; b</code>.\n</p>","debt":"1h"},{"summary":"Bad practice - Method might ignore exception","type":"Code Smell","defaultSeverity":"Major","description":"<p> This method might ignore an exception.&nbsp; In general, exceptions\n  should be handled or reported in some way, or they should be thrown\n  out of the method.</p>","debt":"1h"},{"summary":"Correctness - Null pointer dereference in method on exception path","type":"Bug","defaultSeverity":"Major","description":"<p> A pointer which is null on an exception path is dereferenced here.&nbsp;\nThis will lead to a <code>NullPointerException</code> when the code is executed.&nbsp;\nNote that because FindBugs currently does not prune infeasible exception paths,\nthis may be a false warning.</p>\n\n<p> Also note that FindBugs considers the default case of a switch statement to\nbe an exception path, since the default case is often infeasible.</p>","debt":"1h"},{"summary":"Style - Covariant array assignment to a field","type":"Code Smell","defaultSeverity":"Info","description":"<p>Array of covariant type is assigned to a field. This is confusing and may lead to ArrayStoreException at runtime\nif the reference of some other type will be stored in this array later like in the following code:\n</p>\n<p><code>Number[] arr = new Integer[10];\narr[0] = 1.0;\n</code></p>\n<p>Consider changing the type of created array or the field type.</p>"},{"summary":"Style - Double assignment of field","type":"Code Smell","defaultSeverity":"Info","description":"<p> This method contains a double assignment of a field; e.g.\n</p>\n<pre>\n  int x,y;\n  public void foo() {\n    x = x = 17;\n  }\n</pre>\n<p>Assigning to a field twice is useless, and may indicate a logic error or typo.</p>","debt":"30min"},{"summary":"Multi-threading - Method calls Thread.sleep() with a lock held","type":"Bug","defaultSeverity":"Major","description":"<p>\n      This method calls Thread.sleep() with a lock held.  This may result\n      in very poor performance and scalability, or a deadlock, since other threads may\n      be waiting to acquire the lock.  It is a much better idea to call\n      wait() on the lock, which releases the lock and allows other threads\n      to run.\n      </p>","debt":"1h"},{"summary":"Style - Useless assignment in return statement","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis statement assigns to a local variable in a return statement. This assignment\nhas effect. Please verify that this statement does the right thing.\n</p>","debt":"30min"},{"summary":"Correctness - Invocation of toString on an array","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe code invokes toString on an array, which will generate a fairly useless result\nsuch as [C@16f0472. Consider using Arrays.toString to convert the array into a readable\nString that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n</p>","debt":"30min"},{"summary":"Performance - Private method is never called","type":"Bug","defaultSeverity":"Major","description":"<p> This private method is never called. Although it is\npossible that the method will be invoked through reflection,\nit is more likely that the method is never used, and should be\nremoved.\n</p>","debt":"30min"},{"summary":"Bad practice - Unchecked type in generic call","type":"Code Smell","defaultSeverity":"Major","description":"<p> This call to a generic collection method passes an argument\n    while compile type Object where a specific type from\n    the generic type parameters is expected.\n    Thus, neither the standard Java type system nor static analysis\n    can provide useful information on whether the\n    object being passed as a parameter is of an appropriate type.\n    </p>","debt":"1h"},{"summary":"Correctness - Doomed attempt to append to an object output stream","type":"Bug","defaultSeverity":"Major","description":"<p>\n     This code opens a file in append mode and then wraps the result in an object output stream.\n     This won't allow you to append to an existing object output stream stored in a file. If you want to be\n     able to append to an object output stream, you need to keep the object output stream open.\n      </p>\n      <p>The only situation in which opening a file in append mode and the writing an object output stream\n      could work is if on reading the file you plan to open it in random access mode and seek to the byte offset\n      where the append started.\n      </p>\n\n      <p>\n      TODO: example.\n      </p>","debt":"1h"},{"summary":"Correctness - Impossible downcast","type":"Bug","defaultSeverity":"Critical","description":"<p>\nThis cast will always throw a ClassCastException.\nThe analysis believes it knows\nthe precise type of the value being cast, and the attempt to\ndowncast it to a subtype will always fail by throwing a ClassCastException.\n</p>","debt":"30min"},{"summary":"Bad practice - serialVersionUID isn't final","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class defines a <code>serialVersionUID</code> field that is not final.&nbsp;\n  The field should be made final\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>","debt":"30min"},{"summary":"Malicious code - Field isn't final and can't be protected from malicious code","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n A mutable static field could be changed by malicious code or\n        by accident from another package.\n   Unfortunately, the way the field is used doesn't allow\n   any easy fix to this problem.</p>","debt":"30min"},{"summary":"Correctness - Method does not check for null argument","type":"Bug","defaultSeverity":"Major","description":"<p>\n    A parameter to this method has been identified as a value that should\n    always be checked to see whether or not it is null, but it is being dereferenced\n    without a preceding null check.\n      </p>","debt":"1h"},{"summary":"Style - Complicated, subtle or wrong increment in for-loop","type":"Code Smell","defaultSeverity":"Info","description":"<p>Are you sure this for loop is incrementing the correct variable?\n   It appears that another variable is being initialized and checked\n   by the for loop.\n</p>","debt":"1h"},{"summary":"Correctness - Covariant equals() method defined for enum","type":"Bug","defaultSeverity":"Major","description":"<p> This class defines an enumeration, and equality on enumerations are defined\nusing object identity. Defining a covariant equals method for an enumeration\nvalue is exceptionally bad practice, since it would likely result\nin having two different enumeration values that compare as equals using\nthe covariant enum method, and as not equal when compared normally.\nDon't do it.\n</p>","debt":"1h"},{"summary":"Bad practice - Class defines compareTo(...) and uses Object.equals()","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class defines a <code>compareTo(...)</code> method but inherits its\n  <code>equals()</code> method from <code>java.lang.Object</code>.\n    Generally, the value of compareTo should return zero if and only if\n    equals returns true. If this is violated, weird and unpredictable\n    failures will occur in classes such as PriorityQueue.\n    In Java 5 the PriorityQueue.remove method uses the compareTo method,\n    while in Java 6 it uses the equals method.</p>\n\n<p>From the JavaDoc for the compareTo method in the Comparable interface:\n<blockquote>\nIt is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.\nGenerally speaking, any class that implements the Comparable interface and violates this condition\nshould clearly indicate this fact. The recommended language\nis \"Note: this class has a natural ordering that is inconsistent with equals.\"\n</blockquote></p>","debt":"1h"},{"summary":"Multi-threading - Synchronization on boxed primitive","type":"Bug","defaultSeverity":"Major","description":"<p> The code synchronizes on a boxed primitive constant, such as an Integer.</p>\n<pre>\nprivate static Integer count = 0;\n...\n  synchronized(count) {\n     count++;\n     }\n...\n</pre>\n<p>Since Integer objects can be cached and shared,\nthis code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness\nand possible deadlock.</p>\n<p>See CERT <a href=\"https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused\">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>","debt":"1h"},{"summary":"Performance - Method invokes toString() method on a String","type":"Bug","defaultSeverity":"Major","description":"<p> Calling <code>String.toString()</code> is just a redundant operation.\n  Just use the String.</p>","debt":"30min"},{"summary":"Correctness - Suspicious reference comparison","type":"Bug","defaultSeverity":"Major","description":"<p> This method compares two reference values using the == or != operator,\nwhere the correct way to compare instances of this type is generally\nwith the equals() method.\nIt is possible to create distinct instances that are equal but do not compare as == since\nthey are different objects.\nExamples of classes which should generally\nnot be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>","debt":"1h"},{"summary":"Correctness - Check to see if ((...) & 0) == 0","type":"Bug","defaultSeverity":"Major","description":"<p> This method compares an expression of the form <code>(e &amp; 0)</code> to 0,\nwhich will always compare equal.\nThis may indicate a logic error or typo.</p>","debt":"1h"},{"summary":"Performance - Could be refactored into a static inner class","type":"Bug","defaultSeverity":"Major","description":"<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it except during construction of the\ninner object.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n  made into a <em>static</em> inner class. Since the reference to the\n   outer object is required during construction of the inner instance,\n   the inner class will need to be refactored so as to\n   pass a reference to the outer instance to the constructor\n   for the inner class.</p>","debt":"1h"},{"summary":"Performance - Method allocates a boxed primitive just to call toString","type":"Bug","defaultSeverity":"Major","description":"<p>A boxed primitive is allocated just to call toString(). It is more effective to just use the static\n  form of toString which takes the primitive value. So,</p>\n  <table>\n     <tr><th>Replace...</th><th>With this...</th></tr>\n     <tr><td>new Integer(1).toString()</td><td>Integer.toString(1)</td></tr>\n     <tr><td>new Long(1).toString()</td><td>Long.toString(1)</td></tr>\n     <tr><td>new Float(1.0).toString()</td><td>Float.toString(1.0)</td></tr>\n     <tr><td>new Double(1.0).toString()</td><td>Double.toString(1.0)</td></tr>\n     <tr><td>new Byte(1).toString()</td><td>Byte.toString(1)</td></tr>\n     <tr><td>new Short(1).toString()</td><td>Short.toString(1)</td></tr>\n     <tr><td>new Boolean(true).toString()</td><td>Boolean.toString(true)</td></tr>\n  </table>","debt":"30min"},{"summary":"Bad practice - toString method may return null","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n    This toString method seems to return null in some circumstances. A liberal reading of the\n    spec could be interpreted as allowing this, but it is probably a bad idea and could cause\n    other code to break. Return the empty string or some other appropriate string rather than null.\n      </p>","debt":"1h"},{"summary":"Correctness - Method may return null, but is declared @Nonnull","type":"Bug","defaultSeverity":"Major","description":"<p>\n      This method may return a null value, but the method (or a superclass method\n      which it overrides) is declared to return @Nonnull.\n      </p>","debt":"1h"},{"summary":"Bad practice - equals method fails for subtypes","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class has an equals method that will be broken if it is inherited by subclasses.\nIt compares a class literal with the class of the argument (e.g., in class <code>Foo</code>\nit might check if <code>Foo.class == o.getClass()</code>).\nIt is better to check if <code>this.getClass() == o.getClass()</code>.\n</p>","debt":"1h"},{"summary":"Style - Return value of method without side effect is ignored","type":"Code Smell","defaultSeverity":"Info","description":"<p>This code calls a method and ignores the return value. However our analysis shows that\nthe method (including its implementations in subclasses if any) does not produce any effect \nother than return value. Thus this call can be removed.\n</p>\n<p>We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong.\nCommon false-positive cases include:</p>\n<p>- The method is designed to be overridden and produce a side effect in other projects which are out of the scope of the analysis.</p>\n<p>- The method is called to trigger the class loading which may have a side effect.</p>\n<p>- The method is called just to get some exception.</p>\n<p>If you feel that our assumption is incorrect, you can use a @CheckReturnValue annotation\nto instruct FindBugs that ignoring the return value of this method is acceptable.\n</p>","debt":"10min"},{"summary":"Bad practice - Class names shouldn't shadow simple name of implemented interface","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class/interface has a simple name that is identical to that of an implemented/extended interface, except\nthat the interface is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>).\nThis can be exceptionally confusing, create lots of situations in which you have to look at import statements\nto resolve references and creates many\nopportunities to accidentally define methods that do not override methods in their superclasses.\n</p>","debt":"30min"},{"summary":"Style - Integral division result cast to double or float","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis code casts the result of an integral division (e.g., int or long division)\noperation to double or\nfloat.\nDoing division on integers truncates the result\nto the integer value closest to zero.  The fact that the result\nwas cast to double suggests that this precision should have been retained.\nWhat was probably meant was to cast one or both of the operands to\ndouble <em>before</em> performing the division.  Here is an example:\n</p>\n<blockquote>\n<pre>\nint x = 2;\nint y = 5;\n// Wrong: yields result 0.0\ndouble value1 =  x / y;\n\n// Right: yields result 0.4\ndouble value2 =  x / (double) y;\n</pre>\n</blockquote>","debt":"1h"},{"summary":"Bad practice - Non-serializable value stored into instance field of a serializable class","type":"Code Smell","defaultSeverity":"Major","description":"<p> A non-serializable value is stored into a non-transient field\nof a serializable class.</p>","debt":"1h"},{"summary":"Style - Potentially ambiguous invocation of either an inherited or outer method","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nAn inner class is invoking a method that could be resolved to either a inherited method or a method defined in an outer class.\nFor example, you invoke <code>foo(17)</code>, which is defined in both a superclass and in an outer method.\nBy the Java semantics,\nit will be resolved to invoke the inherited method, but this may not be what\nyou intend.\n</p>\n<p>If you really intend to invoke the inherited method,\ninvoke it by invoking the method on super (e.g., invoke super.foo(17)), and\nthus it will be clear to other readers of your code and to FindBugs\nthat you want to invoke the inherited method, not the method in the outer class.\n</p>\n<p>If you call <code>this.foo(17)</code>, then the inherited method will be invoked. However, since FindBugs only looks at\nclassfiles, it\ncan't tell the difference between an invocation of <code>this.foo(17)</code> and <code>foo(17)</code>, it will still\ncomplain about a potential ambiguous invocation.\n</p>","debt":"1h"},{"summary":"Style - Value required to not have type qualifier, but marked as unknown","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n      A value is used in a way that requires it to be never be a value denoted by a type qualifier, but\n    there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier.\n    Either the usage or the annotation is incorrect.\n      </p>","debt":"1h"},{"summary":"Correctness - equals(...) used to compare incompatible arrays","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis method invokes the .equals(Object o) to compare two arrays, but the arrays of\nof incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]).\nThey will never be equal. In addition, when equals(...) is used to compare arrays it\nonly checks to see if they are the same array, and ignores the contents of the arrays.\n</p>","debt":"1h"},{"summary":"Bad practice - Method may fail to close stream on exception","type":"Code Smell","defaultSeverity":"Major","description":"<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nit on all possible exception paths out of the method.&nbsp;\nThis may result in a file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>","debt":"1h"},{"summary":"Correctness - A known null value is checked to see if it is an instance of a type","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis instanceof test will always return false, since the value being checked is guaranteed to be null.\nAlthough this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\n</p>","debt":"30min"},{"summary":"Correctness - Non-null field is not initialized","type":"Bug","defaultSeverity":"Major","description":"<p> The field is marked as non-null, but isn't written to by the constructor.\n    The field might be initialized elsewhere during constructor, or might always\n    be initialized before use.\n       </p>","debt":"20min"},{"summary":"Correctness - equals method always returns true","type":"Bug","defaultSeverity":"Major","description":"<p> This class defines an equals method that always returns true. This is imaginative, but not very smart.\nPlus, it means that the equals method is not symmetric.\n</p>","debt":"1h"},{"summary":"Correctness - Overwritten increment","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe code performs an increment operation (e.g., <code>i++</code>) and then\nimmediately overwrites it. For example, <code>i = i++</code> immediately\noverwrites the incremented value with the original value.\n</p>","debt":"1h"},{"summary":"Multi-threading - A thread was created using the default empty run method","type":"Bug","defaultSeverity":"Major","description":"<p>This method creates a thread without specifying a run method either by deriving from the Thread class, or\n  by passing a Runnable object. This thread, then, does nothing but waste time.\n</p>","debt":"1h"},{"summary":"Correctness - Call to equals() comparing unrelated class and interface","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis method calls equals(Object) on two references,  one of which is a class\nand the other an interface, where neither the class nor any of its\nnon-abstract subclasses implement the interface.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>","debt":"1h"},{"summary":"Bad practice - Finalizer does not call superclass finalizer","type":"Code Smell","defaultSeverity":"Major","description":"<p> This <code>finalize()</code> method does not make a call to its\n  superclass's <code>finalize()</code> method.&nbsp; So, any finalizer\n  actions defined for the superclass will not be performed.&nbsp;\n  Add a call to <code>super.finalize()</code>.</p>","debt":"30min"},{"summary":"Bad practice - Class defines equals() but not hashCode()","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class overrides <code>equals(Object)</code>, but does not\n  override <code>hashCode()</code>.&nbsp; Therefore, the class may violate the\n  invariant that equal objects must have equal hashcodes.</p>","debt":"1h"},{"summary":"Correctness - Invocation of equals() on an array, which is equivalent to ==","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis method invokes the .equals(Object o) method on an array. Since arrays do not override the equals\nmethod of Object, calling equals on an array is the same as comparing their addresses. To compare the\ncontents of the arrays, use <code>java.util.Arrays.equals(Object[], Object[])</code>.\nTo compare the addresses of the arrays, it would be\nless confusing to explicitly check pointer equality using <code>==</code>.\n</p>","debt":"1h"},{"summary":"Bad practice - Abstract class defines covariant compareTo() method","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;\n  To correctly override the <code>compareTo()</code> method in the\n  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>\n  must have type <code>java.lang.Object</code>.</p>","debt":"1h"},{"summary":"Bad practice - Class inherits equals() and uses Object.hashCode()","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class inherits <code>equals(Object)</code> from an abstract\n  superclass, and <code>hashCode()</code> from\n<code>java.lang.Object</code> (which returns\n  the identity hash code, an arbitrary value assigned to the object\n  by the VM).&nbsp; Therefore, the class is very likely to violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n  <p>If you don't want to define a hashCode method, and/or don't\n   believe the object will ever be put into a HashMap/Hashtable,\n   define the <code>hashCode()</code> method\n   to throw <code>UnsupportedOperationException</code>.</p>","debt":"1h"},{"summary":"Correctness - equals() used to compare array and nonarray","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis method invokes the .equals(Object o) to compare an array and a reference that doesn't seem\nto be an array. If things being compared are of different types, they are guaranteed to be unequal\nand the comparison is almost certainly an error. Even if they are both arrays, the equals method\non arrays only determines of the two arrays are the same object.\nTo compare the\ncontents of the arrays, use java.util.Arrays.equals(Object[], Object[]).\n</p>","debt":"1h"},{"summary":"Correctness - Method attempts to access a result set field with index 0","type":"Bug","defaultSeverity":"Major","description":"<p> A call to getXXX or updateXXX methods of a result set was made where the\nfield index is 0. As ResultSet fields start at index 1, this is always a mistake.</p>","debt":"30min"},{"summary":"Bad practice - serialVersionUID isn't long","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class defines a <code>serialVersionUID</code> field that is not long.&nbsp;\n  The field should be made long\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>","debt":"30min"},{"summary":"Bad practice - Clone method may return null","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n    This clone method seems to return null in some circumstances, but clone is never\n    allowed to return a null value.  If you are convinced this path is unreachable, throw an AssertionError\n    instead.\n      </p>","debt":"1h"},{"summary":"Multi-threading - Naked notify","type":"Bug","defaultSeverity":"Major","description":"<p> A call to <code>notify()</code> or <code>notifyAll()</code>\n  was made without any (apparent) accompanying\n  modification to mutable object state.&nbsp; In general, calling a notify\n  method on a monitor is done because some condition another thread is\n  waiting for has become true.&nbsp; However, for the condition to be meaningful,\n  it must involve a heap object that is visible to both threads.</p>\n\n  <p> This bug does not necessarily indicate an error, since the change to\n  mutable object state may have taken place in a method which then called\n  the method containing the notification.</p>","debt":"1h"},{"summary":"Bad practice - Comparator doesn't implement Serializable","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class implements the <code>Comparator</code> interface. You\nshould consider whether or not it should also implement the <code>Serializable</code>\ninterface. If a comparator is used to construct an ordered collection\nsuch as a <code>TreeMap</code>, then the <code>TreeMap</code>\nwill be serializable only if the comparator is also serializable.\nAs most comparators have little or no state, making them serializable\nis generally easy and good defensive programming.\n</p>","debt":"1h"},{"summary":"Style - Useless control flow","type":"Code Smell","defaultSeverity":"Info","description":"<p> This method contains a useless control flow statement, where\ncontrol flow continues onto the same place regardless of whether or not\nthe branch is taken. For example,\nthis is caused by having an empty statement\nblock for an <code>if</code> statement:</p>\n<pre>\n    if (argv.length == 0) {\n    // TODO: handle this case\n    }\n</pre>","debt":"5h"},{"summary":"Correctness - Self assignment of local rather than assignment to field","type":"Bug","defaultSeverity":"Major","description":"<p> This method contains a self assignment of a local variable, and there\nis a field with an identical name.\nassignment appears to have been ; e.g.</p>\n<pre>\n  int foo;\n  public void setFoo(int foo) {\n    foo = foo;\n  }\n</pre>\n<p>The assignment is useless. Did you mean to assign to the field instead?</p>","debt":"30min"},{"summary":"Performance - Maps and sets of URLs can be performance hogs","type":"Bug","defaultSeverity":"Major","description":"<p> This method or field is or uses a Map or Set of URLs. Since both the equals and hashCode\nmethod of URL perform domain name resolution, this can result in a big performance hit.\nSee <a href=\"http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html\">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.\nConsider using <code>java.net.URI</code> instead.\n   </p>","debt":"1h"},{"summary":"Correctness - Primitive array passed to function expecting a variable number of object arguments","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis code passes a primitive array to a function that takes a variable number of object arguments.\nThis creates an array of length one to hold the primitive array and passes it to the function.\n</p>","debt":"5h"},{"summary":"Performance - Method calls prepareStatement in a loop","type":"Bug","defaultSeverity":"Major","description":"<p> The method calls Connection.prepareStatement inside the loop passing the constant arguments.\nIf the PreparedStatement should be executed several times there's no reason to recreate it for each loop iteration.\nMove this call outside of the loop.</p>"},{"summary":"Bad practice - Certain swing methods needs to be invoked in Swing thread","type":"Code Smell","defaultSeverity":"Major","description":"<p>(<a href=\"http://web.archive.org/web/20090526170426/http://java.sun.com/developer/JDCTechTips/2003/tt1208.html\">From JDC Tech Tip</a>): The Swing methods\nshow(), setVisible(), and pack() will create the associated peer for the frame.\nWith the creation of the peer, the system creates the event dispatch thread.\nThis makes things problematic because the event dispatch thread could be notifying\nlisteners while pack and validate are still processing. This situation could result in\ntwo threads going through the Swing component-based GUI -- it's a serious flaw that\ncould result in deadlocks or other related threading issues. A pack call causes\ncomponents to be realized. As they are being realized (that is, not necessarily\nvisible), they could trigger listener notification on the event dispatch thread.</p>","debt":"1h"},{"summary":"Correctness - A known null value is checked to see if it is an instance of a type","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis instanceof test will always return false, since the value being checked is guaranteed to be null.\nAlthough this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\n</p>"},{"summary":"Correctness - Array index is out of bounds","type":"Bug","defaultSeverity":"Critical","description":"<p> Array operation is performed, but array index is out of bounds, which will result in ArrayIndexOutOfBoundsException at runtime.</p>","debt":"15min"},{"summary":"Correctness - TestCase implements a non-static suite method","type":"Bug","defaultSeverity":"Major","description":"<p> Class is a JUnit TestCase and implements the suite() method.\n The suite method should be declared as being static, but isn't.</p>","debt":"30min"},{"summary":"Multi-threading - Call to static Calendar","type":"Bug","defaultSeverity":"Major","description":"<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use.\nThe detector has found a call to an instance of Calendar that has been obtained via a static\nfield. This looks suspicious.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a>\nand <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>","debt":"1h"},{"summary":"Bad practice - Class defines hashCode() and uses Object.equals()","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class defines a <code>hashCode()</code> method but inherits its\n  <code>equals()</code> method from <code>java.lang.Object</code>\n  (which defines equality by comparing object references).&nbsp; Although\n  this will probably satisfy the contract that equal objects must have\n  equal hashcodes, it is probably not what was intended by overriding\n  the <code>hashCode()</code> method.&nbsp; (Overriding <code>hashCode()</code>\n  implies that the object's identity is based on criteria more complicated\n  than simple reference equality.)</p>\n<p>If you don't think instances of this class will ever be inserted into a HashMap/HashTable,\nthe recommended <code>hashCode</code> implementation to use is:</p>\n<pre>public int hashCode() {\n  assert false : \"hashCode not designed\";\n  return 42; // any arbitrary constant will do\n  }</pre>","debt":"1h"},{"summary":"Bad practice - Class defines clone() but doesn't implement Cloneable","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class defines a clone() method but the class doesn't implement Cloneable.\nThere are some situations in which this is OK (e.g., you want to control how subclasses\ncan clone themselves), but just make sure that this is what you intended.\n</p>","debt":"1h"},{"summary":"Bad practice - Method invokes System.exit(...)","type":"Code Smell","defaultSeverity":"Major","description":"<p> Invoking System.exit shuts down the entire Java virtual machine. This\n   should only been done when it is appropriate. Such calls make it\n   hard or impossible for your code to be invoked by other code.\n   Consider throwing a RuntimeException instead.</p>","debt":"1h"},{"summary":"Correctness - Check for sign of bitwise operation involving negative number","type":"Bug","defaultSeverity":"Major","description":"<p> This method compares a bitwise expression such as\n<code>((val &amp; CONSTANT) &gt; 0)</code> where CONSTANT is the negative number.\nUsing bit arithmetic and then comparing with the greater than operator can\nlead to unexpected results. This comparison is unlikely to work as expected. The good practice is\nto use '!= 0' instead of '&gt; 0'.\n</p>","debt":"1h"},{"summary":"Style - Integer remainder modulo 1","type":"Code Smell","defaultSeverity":"Info","description":"<p> Any expression (exp % 1) is guaranteed to always return zero.\nDid you mean (exp &amp; 1) or (exp % 2) instead?\n</p>","debt":"1h"},{"summary":"Correctness - Repeated conditional tests","type":"Bug","defaultSeverity":"Major","description":"<p>The code contains a conditional test is performed twice, one right after the other\n(e.g., <code>x == 0 || x == 0</code>). Perhaps the second occurrence is intended to be something else\n(e.g., <code>x == 0 || y == 0</code>).\n</p>","debt":"1h"},{"summary":"Performance - Primitive value is boxed then unboxed to perform primitive coercion","type":"Bug","defaultSeverity":"Major","description":"<p>A primitive boxed value constructed and then immediately converted into a different primitive type\n(e.g., <code>new Double(d).intValue()</code>). Just perform direct primitive coercion (e.g., <code>(int) d</code>).</p>","debt":"30min"},{"summary":"Correctness - BigDecimal constructed from double that isn't represented precisely","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis code creates a BigDecimal from a double value that doesn't translate well to a\ndecimal number.\nFor example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625.\nYou probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation\nof the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).\n</p>","debt":"1h"},{"summary":"Malicious code - Method invoked that should be only be invoked inside a doPrivileged block","type":"Code Smell","defaultSeverity":"Info","description":"<p> This code invokes a method that requires a security permission check.\n  If this code will be granted security permissions, but might be invoked by code that does not\n  have security permissions, then the invocation needs to occur inside a doPrivileged block.</p>","debt":"1h"},{"summary":"Multi-threading - Synchronization performed on Lock","type":"Bug","defaultSeverity":"Major","description":"<p> This method performs synchronization an object that implements\njava.util.concurrent.locks.Lock. Such an object is locked/unlocked\nusing\n<code>acquire()</code>/<code>release()</code> rather\nthan using the <code>synchronized (...)</code> construct.\n</p>","debt":"1h"},{"summary":"Multi-threading - Invokes run on a thread (did you mean to start it instead?)","type":"Bug","defaultSeverity":"Major","description":"<p> This method explicitly invokes <code>run()</code> on an object.&nbsp;\n  In general, classes implement the <code>Runnable</code> interface because\n  they are going to have their <code>run()</code> method invoked in a new thread,\n  in which case <code>Thread.start()</code> is the right method to call.</p>","debt":"1h"},{"summary":"Multi-threading - Wait with two locks held","type":"Bug","defaultSeverity":"Major","description":"<p> Waiting on a monitor while two locks are held may cause\n  deadlock.\n   &nbsp;\n   Performing a wait only releases the lock on the object\n   being waited on, not any other locks.\n   &nbsp;\nThis not necessarily a bug, but is worth examining\n  closely.</p>","debt":"1h"},{"summary":"Security - Relative path traversal in servlet","type":"Vulnerability","defaultSeverity":"Major","description":"<p>The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.\n\nSee <a href=\"http://cwe.mitre.org/data/definitions/23.html\">http://cwe.mitre.org/data/definitions/23.html</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of relative path traversal.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that FindBugs doesn't report. If you are concerned about relative path traversal, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>","debt":"1h"},{"summary":"Bad practice - Non-transient non-serializable instance field in serializable class","type":"Code Smell","defaultSeverity":"Major","description":"<p> This Serializable class defines a non-primitive instance field which is neither transient,\nSerializable, or <code>java.lang.Object</code>, and does not appear to implement\nthe <code>Externalizable</code> interface or the\n<code>readObject()</code> and <code>writeObject()</code> methods.&nbsp;\nObjects of this class will not be deserialized correctly if a non-Serializable\nobject is stored in this field.</p>","debt":"1h"},{"summary":"Multi-threading - Field not guarded against concurrent access","type":"Bug","defaultSeverity":"Major","description":"<p> This field is annotated with net.jcip.annotations.GuardedBy or javax.annotation.concurrent.GuardedBy,\nbut can be accessed in a way that seems to violate those annotations.</p>","debt":"1h"},{"summary":"Malicious code - Field should be both final and package protected","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n   A mutable static field could be changed by malicious code or\n        by accident from another package.\n        The field could be made package protected and/or made final\n   to avoid\n        this vulnerability.</p>","debt":"30min"},{"summary":"Style - Unchecked/unconfirmed cast of return value from method","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis code performs an unchecked cast of the return value of a method.\nThe code might be calling the method in such a way that the cast is guaranteed to be\nsafe, but FindBugs is unable to verify that the cast is safe.  Check that your program logic ensures that this\ncast will not fail.\n</p>","debt":"10min"},{"summary":"Bad practice - Static initializer creates instance before all static final fields assigned","type":"Code Smell","defaultSeverity":"Major","description":"<p> The class's static initializer creates an instance of the class\nbefore all of the static final fields are assigned.</p>","debt":"1h"},{"summary":"Experimental - Class too big for analysis","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class is bigger than can be effectively handled, and was not fully analyzed for errors.\n</p>","debt":"3h"},{"summary":"Correctness - Vacuous call to collections","type":"Bug","defaultSeverity":"Major","description":"<p> This call doesn't make sense. For any collection <code>c</code>, calling <code>c.containsAll(c)</code> should\nalways be true, and <code>c.retainAll(c)</code> should have no effect.\n    </p>","debt":"1h"},{"summary":"Bad practice - Usage of GetResource may be unsafe if class is extended","type":"Code Smell","defaultSeverity":"Major","description":"<p>Calling <code>this.getClass().getResource(...)</code> could give\nresults other than expected if this class is extended by a class in\nanother package.</p>","debt":"1h"},{"summary":"Correctness - Class overrides a method implemented in super class Adapter wrongly","type":"Bug","defaultSeverity":"Major","description":"<p> This method overrides a method found in a parent class, where that class is an Adapter that implements\na listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not\nget called when the event occurs.</p>","debt":"1h"},{"summary":"Performance - Primitive value is boxed and then immediately unboxed","type":"Bug","defaultSeverity":"Major","description":"<p>A primitive is boxed, and then immediately unboxed. This probably is due to a manual\n    boxing in a place where an unboxed value is required, thus forcing the compiler\nto immediately undo the work of the boxing.\n</p>","debt":"30min"},{"summary":"Correctness - Non-virtual method call passes null for non-null parameter","type":"Bug","defaultSeverity":"Major","description":"<p>\n      A possibly-null value is passed to a non-null method parameter.\n    Either the parameter is annotated as a parameter that should\n    always be non-null, or analysis has shown that it will always be\n    dereferenced.\n      </p>","debt":"1h"},{"summary":"Correctness - Code checks for specific values returned by compareTo","type":"Bug","defaultSeverity":"Major","description":"<p> This code invoked a compareTo or compare method, and checks to see if the return value is a specific value,\nsuch as 1 or -1. When invoking these methods, you should only check the sign of the result, not for any specific\nnon-zero value. While many or most compareTo and compare methods only return -1, 0 or 1, some of them\nwill return other values.","debt":"30min"},{"summary":"Multi-threading - Synchronization on boxed primitive values","type":"Bug","defaultSeverity":"Major","description":"<p> The code synchronizes on an apparently unshared boxed primitive,\nsuch as an Integer.</p>\n<pre>\nprivate static final Integer fileLock = new Integer(1);\n...\n  synchronized(fileLock) {\n     .. do something ..\n     }\n...\n</pre>\n<p>It would be much better, in this code, to redeclare fileLock as</p>\n<pre>\nprivate static final Object fileLock = new Object();\n</pre>\n<p>\nThe existing code might be OK, but it is confusing and a\nfuture refactoring, such as the \"Remove Boxing\" refactoring in IntelliJ,\nmight replace this with the use of an interned Integer object shared\nthroughout the JVM, leading to very confusing behavior and potential deadlock.\n</p>","debt":"1h"},{"summary":"Correctness - equals method compares class names rather than class objects","type":"Bug","defaultSeverity":"Major","description":"<p> This method checks to see if two objects are the same class by checking to see if the names\nof their classes are equal. You can have different classes with the same name if they are loaded by\ndifferent class loaders. Just check to see if the class objects are the same.\n</p>","debt":"1h"},{"summary":"Correctness - Double.longBitsToDouble invoked on an int","type":"Bug","defaultSeverity":"Major","description":"<p> The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed\n    as an argument. This almost certainly is not intended and is unlikely\n    to give the intended result.\n</p>","debt":"1h"},{"summary":"Correctness - close() invoked on a value that is always null","type":"Bug","defaultSeverity":"Major","description":"<p> close() is being invoked on a value that is always null. If this statement is executed,\na null pointer exception will occur. But the big risk here you never close\nsomething that should be closed.","debt":"1h"},{"summary":"Experimental - Redundant comparison to null of previously checked value","type":"Code Smell","defaultSeverity":"Info","description":"<p> This method contains a redundant comparison of a reference value\nto null. Two types of redundant comparison are reported:\n</p>\n<ul>\n<li> Both values compared are definitely null</li>\n<li> One value is definitely null and the other is definitely not null</li>\n</ul>\n\n<p> This particular warning generally indicates that a\nvalue known not to be null was checked against null.\nWhile the check is not necessary, it may simply be a case\nof defensive programming.</p>"},{"summary":"Correctness - Value that might not carry a type qualifier is always used in a way requires that type qualifier","type":"Bug","defaultSeverity":"Major","description":"<p>\n      A value that is annotated as possibility not being an instance of\n    the values denoted by the type qualifier, and the value is guaranteed to be used\n    in a way that requires values denoted by that type qualifier.\n      </p>","debt":"5h"},{"summary":"Correctness - Invocation of toString on an unnamed array","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe code invokes toString on an (anonymous) array.  Calling toString on an array generates a fairly useless result\nsuch as [C@16f0472. Consider using Arrays.toString to convert the array into a readable\nString that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n</p>","debt":"30min"},{"summary":"Malicious code - May expose internal static state by storing a mutable object into a static field","type":"Code Smell","defaultSeverity":"Info","description":"<p> This code stores a reference to an externally mutable object into a static\n   field.\n   If unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.</p>","debt":"30min"},{"summary":"Correctness - Call to equals(null)","type":"Bug","defaultSeverity":"Major","description":"<p> This method calls equals(Object), passing a null value as\nthe argument. According to the contract of the equals() method,\nthis call should always return <code>false</code>.</p>","debt":"1h"},{"summary":"Style - Class exposes synchronization and semaphores in its public interface","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n    This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this\n    reference). Client classes that use this class, may, in addition, use an instance of this class\n    as a synchronizing object. Because two classes are using the same object for synchronization,\n    Multithread correctness is suspect. You should not synchronize nor call semaphore methods on\n    a public reference. Consider using a internal private member variable to control synchronization.\n    </p>","debt":"1h"},{"summary":"Style - Switch statement found where default case is missing","type":"Code Smell","defaultSeverity":"Info","description":"<p> This method contains a switch statement where default case is missing.\n  Usually you need to provide a default case.</p>\n  <p>Because the analysis only looks at the generated bytecode, this warning can be incorrect triggered if\nthe default case is at the end of the switch statement and the switch statement doesn't contain break statements for other\ncases.","debt":"1h"},{"summary":"Correctness - Impossible cast","type":"Bug","defaultSeverity":"Critical","description":"<p>\nThis cast will always throw a ClassCastException.\nFindBugs tracks type information from instanceof checks,\nand also uses more precise information about the types\nof values returned from methods and loaded from fields.\nThus, it may have more precise information that just\nthe declared type of a variable, and can use this to determine\nthat a cast will always throw an exception at runtime.\n\n</p>","debt":"30min"},{"summary":"Bad practice - Abstract class defines covariant equals() method","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class defines a covariant version of <code>equals()</code>.&nbsp;\n  To correctly override the <code>equals()</code> method in\n  <code>java.lang.Object</code>, the parameter of <code>equals()</code>\n  must have type <code>java.lang.Object</code>.</p>","debt":"1h"},{"summary":"Performance - Inefficient use of String.lastIndexOf(String)","type":"Bug","defaultSeverity":"Major","description":"<p> This code passes a constant string of length 1 to String.lastIndexOf().\nIt is more efficient to use the integer implementations of String.lastIndexOf().\nf. e. call <code>myString.lastIndexOf('.')</code> instead of <code>myString.lastIndexOf(\".\")</code></p>","debt":"5min"},{"summary":"Performance - Unused field","type":"Bug","defaultSeverity":"Major","description":"<p> This field is never used.&nbsp; Consider removing it from the class.</p>","debt":"30min"},{"summary":"Style - Write to static field from instance method","type":"Code Smell","defaultSeverity":"Info","description":"<p> This instance method writes to a static field. This is tricky to get\ncorrect if multiple instances are being manipulated,\nand generally bad practice.\n</p>","debt":"5h"},{"summary":"Multi-threading - Method synchronizes on an updated field","type":"Bug","defaultSeverity":"Major","description":"<p> This method synchronizes on an object\n   referenced from a mutable field.\n   This is unlikely to have useful semantics, since different\nthreads may be synchronizing on different objects.</p>","debt":"1h"},{"summary":"Malicious code - Public static method may expose internal representation by returning array","type":"Code Smell","defaultSeverity":"Info","description":"<p> A public static method returns a reference to\n   an array that is part of the static state of the class.\n   Any code that calls this method can freely modify\n   the underlying array.\n   One fix is to return a copy of the array.</p>","debt":"30min"},{"summary":"Bad practice - Suspicious reference comparison of Boolean values","type":"Code Smell","defaultSeverity":"Major","description":"<p> This method compares two Boolean values using the == or != operator.\nNormally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE),\nbut it is possible to create other Boolean objects using the <code>new Boolean(b)</code>\nconstructor. It is best to avoid such objects, but if they do exist,\nthen checking Boolean objects for equality using == or != will give results\nthan are different than you would get using <code>.equals(...)</code>.\n</p>","debt":"1h"},{"summary":"Style - Possible null pointer dereference due to return value of called method","type":"Code Smell","defaultSeverity":"Info","description":"<p> The return value from a method is dereferenced without a null check,\nand the return value of that method is one that should generally be checked\nfor null.  This may lead to a <code>NullPointerException</code> when the code is executed.\n</p>","debt":"20min"},{"summary":"Correctness - Class defines equal(Object); should it be equals(Object)?","type":"Bug","defaultSeverity":"Major","description":"<p> This class defines a method <code>equal(Object)</code>.&nbsp; This method does\nnot override the <code>equals(Object)</code> method in <code>java.lang.Object</code>,\nwhich is probably what was intended.</p>","debt":"1h"},{"summary":"Performance - Method accesses a private member variable of owning class","type":"Bug","defaultSeverity":"Major","description":"<p>\n      This method of an inner class reads from or writes to a private member variable of the owning class,\n      or calls a private method of the owning class. The compiler must generate a special method to access this\n      private member, causing this to be less efficient. Relaxing the protection of the member variable or method\n      will allow the compiler to treat this as a normal access.\n      </p>","debt":"1h"},{"summary":"Security - Servlet reflected cross site scripting vulnerability in error page","type":"Vulnerability","defaultSeverity":"Major","description":"<p>This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows\nfor a reflected cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>","debt":"3h"},{"summary":"Style - Remainder of 32-bit signed random integer","type":"Code Smell","defaultSeverity":"Info","description":"<p> This code generates a random signed integer and then computes\nthe remainder of that value modulo another value. Since the random\nnumber can be negative, the result of the remainder operation\ncan also be negative. Be sure this is intended, and strongly\nconsider using the Random.nextInt(int) method instead.\n</p>","debt":"5h"},{"summary":"Style - Non serializable object written to ObjectOutput","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis code seems to be passing a non-serializable object to the ObjectOutput.writeObject method.\nIf the object is, indeed, non-serializable, an error will result.\n</p>","debt":"1h"},{"summary":"Correctness - Call to equals() comparing different interface types","type":"Bug","defaultSeverity":"Major","description":"<p> This method calls equals(Object) on two references of unrelated\ninterface types, where neither is a subtype of the other,\nand there are no known non-abstract classes which implement both interfaces.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>","debt":"1h"},{"summary":"Correctness - Apparent method/constructor confusion","type":"Bug","defaultSeverity":"Major","description":"<p> This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor.\n      If it was intended to be a constructor, remove the declaration of a void return value.\n    If you had accidentally defined this method, realized the mistake, defined a proper constructor\n    but can't get rid of this method due to backwards compatibility, deprecate the method.\n</p>","debt":"1h"},{"summary":"Style - Questionable use of non-short-circuit logic","type":"Code Smell","defaultSeverity":"Info","description":"<p> This code seems to be using non-short-circuit logic (e.g., &amp;\nor |)\nrather than short-circuit logic (&amp;&amp; or ||).\nNon-short-circuit logic causes both sides of the expression\nto be evaluated even when the result can be inferred from\nknowing the left-hand side. This can be less efficient and\ncan result in errors if the left-hand side guards cases\nwhen evaluating the right-hand side can generate an error.\n\n<p>See <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2\">the Java\nLanguage Specification</a> for details.\n\n</p>","debt":"1h"},{"summary":"Bad practice - Check for sign of bitwise operation","type":"Code Smell","defaultSeverity":"Major","description":"<p> This method compares an expression such as\n<code>((event.detail &amp; SWT.SELECTED) &gt; 0)</code>.\nUsing bit arithmetic and then comparing with the greater than operator can\nlead to unexpected results (of course depending on the value of\nSWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate\nfor a bug. Even when SWT.SELECTED is not negative, it seems good practice\nto use '!= 0' instead of '&gt; 0'.\n</p>","debt":"1h"},{"summary":"Bad practice - Creates an empty zip file entry","type":"Code Smell","defaultSeverity":"Major","description":"<p>The code calls <code>putNextEntry()</code>, immediately\nfollowed by a call to <code>closeEntry()</code>. This results\nin an empty ZipFile entry. The contents of the entry\nshould be written to the ZipFile between the calls to\n<code>putNextEntry()</code> and\n<code>closeEntry()</code>.</p>","debt":"1h"},{"summary":"Correctness - Impossible cast involving primitive array","type":"Bug","defaultSeverity":"Critical","description":"<p>\nThis cast will always throw a ClassCastException.\n</p>"},{"summary":"Style - Code contains a hard coded reference to an absolute pathname","type":"Code Smell","defaultSeverity":"Info","description":"<p>This code constructs a File object using a hard coded to an absolute pathname\n(e.g., <code>new File(\"/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment\");</code>\n</p>","debt":"1h"},{"summary":"Correctness - Unwritten field","type":"Bug","defaultSeverity":"Major","description":"<p> This field is never written.&nbsp; All reads of it will return the default\nvalue. Check for errors (should it have been initialized?), or remove it if it is useless.</p>","debt":"30min"},{"summary":"Style - Method uses the same code for two branches","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n      This method uses the same code to implement two branches of a conditional branch.\n    Check to ensure that this isn't a coding mistake.\n      </p>","debt":"1h"},{"summary":"Performance - Method allocates an object, only to get the class object","type":"Bug","defaultSeverity":"Major","description":"<p>This method allocates an object just to call getClass() on it, in order to\n  retrieve the Class object for it. It is simpler to just access the .class property of the class.</p>","debt":"30min"},{"summary":"Correctness - Array offset is out of bounds","type":"Bug","defaultSeverity":"Critical","description":"<p> Method is called with array parameter and offset parameter, but the offset is out of bounds. This will result in IndexOutOfBoundsException at runtime. </p>","debt":"15min"},{"summary":"Experimental - Potential lost logger changes due to weak reference in OpenJDK","type":"Code Smell","defaultSeverity":"Info","description":"<p>OpenJDK introduces a potential incompatibility.\n In particular, the java.util.logging.Logger behavior has\n  changed. Instead of using strong references, it now uses weak references\n  internally. That's a reasonable change, but unfortunately some code relies on\n  the old behavior - when changing logger configuration, it simply drops the\n  logger reference. That means that the garbage collector is free to reclaim\n  that memory, which means that the logger configuration is lost. For example,\nconsider:\n</p>\n\n<pre>public static void initLogging() throws Exception {\n Logger logger = Logger.getLogger(\"edu.umd.cs\");\n logger.addHandler(new FileHandler()); // call to change logger configuration\n logger.setUseParentHandlers(false); // another call to change logger configuration\n}</pre>\n\n<p>The logger reference is lost at the end of the method (it doesn't\nescape the method), so if you have a garbage collection cycle just\nafter the call to initLogging, the logger configuration is lost\n(because Logger only keeps weak references).</p>\n\n<pre>public static void main(String[] args) throws Exception {\n initLogging(); // adds a file handler to the logger\n System.gc(); // logger configuration lost\n Logger.getLogger(\"edu.umd.cs\").info(\"Some message\"); // this isn't logged to the file as expected\n}</pre>\n<p><em>Ulf Ochsenfahrt and Eric Fellheimer</em></p>","debt":"1h"},{"summary":"Correctness - Array formatted in useless way using format string","type":"Bug","defaultSeverity":"Major","description":"<p>\nOne of the arguments being formatted with a format string is an array. This will be formatted\nusing a fairly useless format, such as [I@304282, which doesn't actually show the contents\nof the array.\nConsider wrapping the array using <code>Arrays.asList(...)</code> before handling it off to a formatted.\n</p>","debt":"30min"},{"summary":"Correctness - The type of a supplied argument doesn't match format specifier","type":"Bug","defaultSeverity":"Major","description":"<p>\nOne of the arguments is incompatible with the corresponding format string specifier.\nAs a result, this will generate a runtime exception when executed.\nFor example, <code>String.format(\"%d\", \"1\")</code> will generate an exception, since\nthe String \"1\" is incompatible with the format specifier %d.\n</p>","debt":"1h"},{"summary":"Correctness - Call to equals() comparing different types","type":"Bug","defaultSeverity":"Major","description":"<p> This method calls equals(Object) on two references of different\nclass types and analysis suggests they will be to objects of different classes \nat runtime. Further, examination of the equals methods that would be invoked suggest that either\nthis call will always return false, or else the equals method is not be symmetric (which is \na property required by the contract\nfor equals in class Object). \n</p>","debt":"1h"},{"summary":"Correctness - Deadly embrace of non-static inner class and thread local","type":"Bug","defaultSeverity":"Major","description":"<p> This class is an inner class, but should probably be a static inner class.\n  As it is, there is a serious danger of a deadly embrace between the inner class\n  and the thread local in the outer class. Because the inner class isn't static,\n  it retains a reference to the outer class.\n  If the thread local contains a reference to an instance of the inner\n  class, the inner and outer instance will both be reachable\n  and not eligible for garbage collection.\n</p>","debt":"1h"},{"summary":"Style - Unread public/protected field","type":"Code Smell","defaultSeverity":"Info","description":"<p> This field is never read.&nbsp;\nThe field is public or protected, so perhaps\n    it is intended to be used with classes not seen as part of the analysis. If not,\nconsider removing it from the class.</p>","debt":"30min"},{"summary":"Multi-threading - Incorrect lazy initialization of instance field","type":"Bug","defaultSeverity":"Major","description":"<p> This method contains an unsynchronized lazy initialization of a non-volatile field.\nBecause the compiler or processor may reorder instructions,\nthreads are not guaranteed to see a completely initialized object,\n<em>if the method can be called by multiple threads</em>.\nYou can make the field volatile to correct the problem.\nFor more information, see the\n<a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/\">Java Memory Model web site</a>.\n</p>"},{"summary":"Correctness - Field only ever set to null","type":"Bug","defaultSeverity":"Major","description":"<p> All writes to this field are of the constant value null, and thus\nall reads of the field will return null.\nCheck for errors, or remove it if it is useless.</p>","debt":"1h"},{"summary":"I18n - Reliance on default encoding","type":"Code Smell","defaultSeverity":"Info","description":"<p> Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.  </p>","debt":"1h"},{"summary":"Style - Test for floating point equality","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n    This operation compares two floating point values for equality.\n    Because floating point calculations may involve rounding,\n   calculated float and double values may not be accurate.\n    For values that must be precise, such as monetary values,\n   consider using a fixed-precision type such as BigDecimal.\n    For values that need not be precise, consider comparing for equality\n    within some range, for example:\n    <code>if ( Math.abs(x - y) &lt; .0000001 )</code>.\n   See the Java Language Specification, section 4.2.4.\n    </p>","debt":"1h"},{"summary":"Style - Vacuous bit mask operation on integer value","type":"Code Smell","defaultSeverity":"Info","description":"<p> This is an integer bit operation (and, or, or exclusive or) that doesn't do any useful work\n(e.g., <code>v & 0xffffffff</code>).\n\n</p>","debt":"5h"},{"summary":"Multi-threading - Method does not release lock on all exception paths","type":"Bug","defaultSeverity":"Major","description":"<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,\nbut does not release it on all exception paths out of the method.  In general, the correct idiom\nfor using a JSR-166 lock is:\n</p>\n<pre>\n    Lock l = ...;\n    l.lock();\n    try {\n        // do something\n    } finally {\n        l.unlock();\n    }\n</pre>","debt":"1h"},{"summary":"Style - Possible null pointer dereference on branch that might be infeasible","type":"Code Smell","defaultSeverity":"Info","description":"<p> There is a branch of statement that, <em>if executed,</em>  guarantees that\na null value will be dereferenced, which\nwould generate a <code>NullPointerException</code> when the code is executed.\nOf course, the problem might be that the branch or statement is infeasible and that\nthe null pointer exception can't ever be executed; deciding that is beyond the ability of FindBugs.\nDue to the fact that this value had been previously tested for nullness,\nthis is a definite possibility.\n</p>","debt":"1h"},{"summary":"Bad practice - Method doesn't override method in superclass due to wrong package for parameter","type":"Code Smell","defaultSeverity":"Major","description":"<p> The method in the subclass doesn't override a similar method in a superclass because the type of a parameter doesn't exactly match\nthe type of the corresponding parameter in the superclass. For example, if you have:</p>\n\n<blockquote>\n<pre>\nimport alpha.Foo;\npublic class A {\n  public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\npublic class B extends A {\n  public int f(Foo x) { return 42; }\n  public int f(alpha.Foo x) { return 27; }\n}\n</pre>\n</blockquote>\n\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn't\noverride the\n<code>f(Foo)</code> method defined in class <code>A</code>, because the argument\ntypes are <code>Foo</code>'s from different packages.\n</p>\n\n<p>In this case, the subclass does define a method with a signature identical to the method in the superclass,\nso this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider\nremoving or deprecating the method with the similar but not identical signature.\n</p>","debt":"1h"},{"summary":"Multi-threading - Mutable servlet field","type":"Bug","defaultSeverity":"Major","description":"<p>A web server generally only creates one instance of servlet or JSP class (i.e., treats\nthe class as a Singleton),\nand will\nhave multiple threads invoke methods on that instance to service multiple\nsimultaneous requests.\nThus, having a mutable instance field generally creates race conditions.","debt":"1h"},{"summary":"Performance - Method calls Pattern.compile in a loop","type":"Bug","defaultSeverity":"Major","description":"<p> The method calls Pattern.compile inside the loop passing the constant arguments.\nIf the Pattern should be used several times there's no reason to compile it for each loop iteration.\nMove this call outside of the loop or even into static final field.</p>"},{"summary":"Style - Switch statement found where one case falls through to the next case","type":"Code Smell","defaultSeverity":"Info","description":"<p> This method contains a switch statement where one case branch will fall through to the next case.\n  Usually you need to end this case with a break or return.</p>","debt":"1h"},{"summary":"Bad practice - Class names shouldn't shadow simple name of superclass","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class has a simple name that is identical to that of its superclass, except\nthat its superclass is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>).\nThis can be exceptionally confusing, create lots of situations in which you have to look at import statements\nto resolve references and creates many\nopportunities to accidentally define methods that do not override methods in their superclasses.\n</p>","debt":"30min"},{"summary":"Security - HTTP cookie formed from untrusted input","type":"Vulnerability","defaultSeverity":"Major","description":"<p>This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow a HTTP response splitting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/HTTP_response_splitting\">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of HTTP response splitting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that FindBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>","debt":"1h"},{"summary":"Correctness - Value is null and guaranteed to be dereferenced on exception path","type":"Bug","defaultSeverity":"Major","description":"<p>\n              There is a statement or branch on an exception path\n                that if executed guarantees that\n              a value is null at this point, and that\n              value that is guaranteed to be dereferenced\n              (except on forward paths involving runtime exceptions).\n              </p>","debt":"1h"},{"summary":"Style - Non-Boolean argument formatted using %b format specifier","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nAn argument not of type Boolean is being formatted with a %b format specifier. This won't throw an\nexception; instead, it will print true for any non-null value, and false for null.\nThis feature of format strings is strange, and may not be what you intended.\n</p>","debt":"1h"},{"summary":"Multi-threading - Possible exposure of partially initialized object","type":"Bug","defaultSeverity":"Major","description":"<p>Looks like this method uses lazy field initialization with double-checked locking.\n  While the field is correctly declared as volatile, it's possible that the internal structure of\n  the object is changed after the field assignment, thus another thread may see the partially initialized object.</p>\n  <p>To fix this problem consider storing the object into the local variable first\n  and save it to the volatile field only after it's fully constructed.\n  </p>","debt":"5min"},{"summary":"Correctness - Method attempts to access a prepared statement parameter with index 0","type":"Bug","defaultSeverity":"Major","description":"<p> A call to a setXXX method of a prepared statement was made where the\nparameter index is 0. As parameter indexes start at index 1, this is always a mistake.</p>","debt":"30min"},{"summary":"Style - Consider returning a zero length array rather than null","type":"Code Smell","defaultSeverity":"Info","description":"<p> It is often a better design to\nreturn a length zero array rather than a null reference to indicate that there\nare no results (i.e., an empty list of results).\nThis way, no explicit check for null is needed by clients of the method.</p>\n\n<p>On the other hand, using null to indicate\n\"there is no answer to this question\" is probably appropriate.\nFor example, <code>File.listFiles()</code> returns an empty list\nif given a directory containing no files, and returns null if the file\nis not a directory.</p>","debt":"1h"},{"summary":"Correctness - Method ignores return value","type":"Bug","defaultSeverity":"Major","description":"<p> The return value of this method should be checked. One common\ncause of this warning is to invoke a method on an immutable object,\nthinking that it updates the object. For example, in the following code\nfragment,</p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString.trim();\n</pre>\n</blockquote>\n<p>the programmer seems to be thinking that the trim() method will update\nthe String referenced by dateString. But since Strings are immutable, the trim()\nfunction returns a new String value, which is being ignored here. The code\nshould be corrected to: </p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString = dateString.trim();\n</pre>\n</blockquote>","debt":"1h"},{"summary":"Correctness - Uncallable method defined in anonymous class","type":"Bug","defaultSeverity":"Major","description":"<p> This anonymous class defined a method that is not directly invoked and does not override\na method in a superclass. Since methods in other classes cannot directly invoke methods\ndeclared in an anonymous class, it seems that this method is uncallable. The method\nmight simply be dead code, but it is also possible that the method is intended to\noverride a method declared in a superclass, and due to an typo or other error the method does not,\nin fact, override the method it is intended to.\n</p>","debt":"1h"},{"summary":"Multi-threading - Class's readObject() method is synchronized","type":"Bug","defaultSeverity":"Major","description":"<p> This serializable class defines a <code>readObject()</code> which is\n  synchronized.&nbsp; By definition, an object created by deserialization\n  is only reachable by one thread, and thus there is no need for\n  <code>readObject()</code> to be synchronized.&nbsp; If the <code>readObject()</code>\n  method itself is causing the object to become visible to another thread,\n  that is an example of very dubious coding style.</p>","debt":"1h"},{"summary":"Bad practice - Method ignores results of InputStream.read()","type":"Code Smell","defaultSeverity":"Major","description":"<p> This method ignores the return value of one of the variants of\n  <code>java.io.InputStream.read()</code> which can return multiple bytes.&nbsp;\n  If the return value is not checked, the caller will not be able to correctly\n  handle the case where fewer bytes were read than the caller requested.&nbsp;\n  This is a particularly insidious kind of bug, because in many programs,\n  reads from input streams usually do read the full amount of data requested,\n  causing the program to fail only sporadically.</p>","debt":"1h"},{"summary":"Bad practice - Method ignores results of InputStream.skip()","type":"Code Smell","defaultSeverity":"Major","description":"<p> This method ignores the return value of\n  <code>java.io.InputStream.skip()</code> which can skip multiple bytes.&nbsp;\n  If the return value is not checked, the caller will not be able to correctly\n  handle the case where fewer bytes were skipped than the caller requested.&nbsp;\n  This is a particularly insidious kind of bug, because in many programs,\n  skips from input streams usually do skip the full amount of data requested,\n  causing the program to fail only sporadically. With Buffered streams, however,\n  skip() will only skip data in the buffer, and will routinely fail to skip the\n  requested number of bytes.</p>","debt":"1h"},{"summary":"Bad practice - Finalizer does nothing but call superclass finalizer","type":"Code Smell","defaultSeverity":"Major","description":"<p> The only thing this <code>finalize()</code> method does is call\n  the superclass's <code>finalize()</code> method, making it\n  redundant.&nbsp; Delete it.</p>","debt":"30min"},{"summary":"Correctness - Using pointer equality to compare different types","type":"Bug","defaultSeverity":"Major","description":"<p> This method uses using pointer equality to compare two references that seem to be of\ndifferent types.  The result of this comparison will always be false at runtime.\n</p>","debt":"1h"},{"summary":"Correctness - Read of unwritten field","type":"Bug","defaultSeverity":"Major","description":"<p> The program is dereferencing a field that does not seem to ever have a non-null value written to it.\nUnless the field is initialized via some mechanism not seen by the analysis,\ndereferencing this value will generate a null pointer exception.\n</p>","debt":"1h"},{"summary":"Bad practice - compareTo()/compare() returns Integer.MIN_VALUE","type":"Code Smell","defaultSeverity":"Major","description":"<p> In some situation, this compareTo or compare method returns\nthe  constant Integer.MIN_VALUE, which is an exceptionally bad practice.\n  The only thing that matters about the return value of compareTo is the sign of the result.\n    But people will sometimes negate the return value of compareTo, expecting that this will negate\n    the sign of the result. And it will, except in the case where the value returned is Integer.MIN_VALUE.\n    So just return -1 rather than Integer.MIN_VALUE.","debt":"30min"},{"summary":"Security - Hardcoded constant database password","type":"Vulnerability","defaultSeverity":"Major","description":"<p>This code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can\n    easily learn the password.\n</p>","debt":"1h"},{"summary":"Correctness - equals() method defined that doesn't override equals(Object)","type":"Bug","defaultSeverity":"Major","description":"<p> This class defines an <code>equals()</code>\n  method, that doesn't override the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp; Instead, it\n  inherits an <code>equals(Object)</code> method from a superclass.\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>","debt":"1h"},{"summary":"Correctness - Reversed method arguments","type":"Bug","defaultSeverity":"Major","description":"<p> The arguments to this method call seem to be in the wrong order.\nFor example, a call <code>Preconditions.checkNotNull(\"message\", message)</code>\nhas reserved arguments: the value to be checked is the first argument.\n</p>","debt":"10min"},{"summary":"Correctness - Bad Applet Constructor relies on uninitialized AppletStub","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis constructor calls methods in the parent Applet that rely on the AppletStub. Since the AppletStub\nisn't initialized until the init() method of this applet is called, these methods will not perform\ncorrectly.\n</p>","debt":"1h"},{"summary":"Security - HTTP Response splitting vulnerability","type":"Vulnerability","defaultSeverity":"Major","description":"<p>This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/HTTP_response_splitting\">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of HTTP response splitting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that FindBugs doesn't report. If you are concerned about HTTP response splitting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>","debt":"1h"},{"summary":"Performance - Method invokes inefficient new String() constructor","type":"Bug","defaultSeverity":"Major","description":"<p> Creating a new <code>java.lang.String</code> object using the\n  no-argument constructor wastes memory because the object so created will\n  be functionally indistinguishable from the empty string constant\n  <code>\"\"</code>.&nbsp; Java guarantees that identical string constants\n  will be represented by the same <code>String</code> object.&nbsp; Therefore,\n  you should just use the empty string constant directly.</p>","debt":"30min"},{"summary":"Performance - Could be refactored into a named static inner class","type":"Bug","defaultSeverity":"Major","description":"<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n  made into a <em>static</em> inner class. Since anonymous inner\nclasses cannot be marked as static, doing this will require refactoring\nthe inner class so that it is a named inner class.</p>","debt":"1h"},{"summary":"Bad practice - equals() method does not check for null argument","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n      This implementation of equals(Object) violates the contract defined\n      by java.lang.Object.equals() because it does not check for null\n      being passed as the argument.  All equals() methods should return\n      false if passed a null value.\n      </p>","debt":"1h"},{"summary":"Style - Method directly allocates a specific implementation of xml interfaces","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n      This method allocates a specific implementation of an xml interface. It is preferable to use\n      the supplied factory classes to create these objects so that the implementation can be\n      changed at runtime. See\n      </p>\n      <ul>\n         <li>javax.xml.parsers.DocumentBuilderFactory</li>\n         <li>javax.xml.parsers.SAXParserFactory</li>\n         <li>javax.xml.transform.TransformerFactory</li>\n         <li>org.w3c.dom.Document.create<i>XXXX</i></li>\n      </ul>\n      <p>for details.</p>","debt":"1h"},{"summary":"Style - Useless control flow to next line","type":"Code Smell","defaultSeverity":"Info","description":"<p> This method contains a useless control flow statement in which control\nflow follows to the same or following line regardless of whether or not\nthe branch is taken.\nOften, this is caused by inadvertently using an empty statement as the\nbody of an <code>if</code> statement, e.g.:</p>\n<pre>\n    if (argv.length == 1);\n        System.out.println(\"Hello, \" + argv[0]);\n</pre>","debt":"30min"},{"summary":"Correctness - String index is out of bounds","type":"Bug","defaultSeverity":"Critical","description":"<p> String method is called and specified string index is out of bounds. This will result in StringIndexOutOfBoundsException at runtime. </p>","debt":"15min"},{"summary":"Malicious code - Classloaders should only be created inside doPrivileged block","type":"Code Smell","defaultSeverity":"Info","description":"<p> This code creates a classloader,  which needs permission if a security manage is installed.\n  If this code might be invoked by code that does not\n  have security permissions, then the classloader creation needs to occur inside a doPrivileged block.</p>","debt":"1h"},{"summary":"Style - Redundant nullcheck of value known to be non-null","type":"Code Smell","defaultSeverity":"Info","description":"<p> This method contains a redundant check of a known non-null value against\nthe constant null.</p>","debt":"30min"},{"summary":"Style - Covariant array is returned from the method","type":"Code Smell","defaultSeverity":"Info","description":"<p>Array of covariant type is returned from the method. This is confusing and may lead to ArrayStoreException at runtime\nif the calling code will try to store the reference of some other type in the returned array.\n</p>\n<p>Consider changing the type of created array or the method return type.</p>"},{"summary":"Security - Absolute path traversal in servlet","type":"Vulnerability","defaultSeverity":"Major","description":"<p>The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory,\nbut it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory.\n\nSee <a href=\"http://cwe.mitre.org/data/definitions/36.html\">http://cwe.mitre.org/data/definitions/36.html</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of absolute path traversal.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that FindBugs doesn't report. If you are concerned about absolute path traversal, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>","debt":"1h"},{"summary":"Style - Exception is caught when Exception is not thrown","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n  This method uses a try-catch block that catches Exception objects, but Exception is not\n  thrown within the try block, and RuntimeException is not explicitly caught.  It is a common bug pattern to\n  say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception\n  each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well,\n  masking potential bugs.\n  </p>\n  <p>A better approach is to either explicitly catch the specific exceptions that are thrown,\n  or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:</p>\n  <pre>\n  try {\n    ...\n  } catch (RuntimeException e) {\n    throw e;\n  } catch (Exception e) {\n    ... deal with all non-runtime exceptions ...\n  }</pre>","debt":"1h"},{"summary":"Performance - NodeList.getLength() called in a loop","type":"Bug","defaultSeverity":"Major","description":"<p> The method calls NodeList.getLength() inside the loop and NodeList was produced by getElementsByTagName call.\nThis NodeList doesn't store its length, but computes it every time in not very optimal way.\nConsider storing the length to the variable before the loop.\n</p>"},{"summary":"Bad practice - Fields of immutable classes should be final","type":"Code Smell","defaultSeverity":"Major","description":"<p> The class is annotated with net.jcip.annotations.Immutable or javax.annotation.concurrent.Immutable,\n  and the rules for those annotations require that all fields are final.\n   .</p>","debt":"30min"},{"summary":"Correctness - Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required","type":"Bug","defaultSeverity":"Major","description":"<p>\n        A value specified as carrying a type qualifier annotation is\n        consumed in a location or locations requiring that the value not\n        carry that annotation.\n        </p>\n\n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=ALWAYS\n        is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.\n        </p>\n\n        <p>\n        For example, say that @NonNegative is a nickname for\n        the type qualifier annotation @Negative(when=When.NEVER).\n        The following code will generate this warning because\n        the return statement requires a @NonNegative value,\n        but receives one that is marked as @Negative.\n        </p>\n        <blockquote>\n<pre>\npublic @NonNegative Integer example(@Negative Integer value) {\n    return value;\n}\n</pre>\n        </blockquote>","debt":"1h"},{"summary":"Bad practice - Class is Serializable, but doesn't define serialVersionUID","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class implements the <code>Serializable</code> interface, but does\n  not define a <code>serialVersionUID</code> field.&nbsp;\n  A change as simple as adding a reference to a .class object\n    will add synthetic fields to the class,\n   which will unfortunately change the implicit\n   serialVersionUID (e.g., adding a reference to <code>String.class</code>\n   will generate a static field <code>class$java$lang$String</code>).\n   Also, different source code to bytecode compilers may use different\n   naming conventions for synthetic variables generated for\n   references to class objects or inner classes.\n   To ensure interoperability of Serializable across versions,\n   consider adding an explicit serialVersionUID.</p>","debt":"1h"},{"summary":"Multi-threading - Inconsistent synchronization","type":"Bug","defaultSeverity":"Major","description":"<p> The fields of this class appear to be accessed inconsistently with respect\n  to synchronization.&nbsp; This bug report indicates that the bug pattern detector\n  judged that\n  </p>\n  <ul>\n  <li> The class contains a mix of locked and unlocked accesses,</li>\n  <li> The class is <b>not</b> annotated as javax.annotation.concurrent.NotThreadSafe,</li>\n  <li> At least one locked access was performed by one of the class's own methods, and</li>\n  <li> The number of unsynchronized field accesses (reads and writes) was no more than\n       one third of all accesses, with writes being weighed twice as high as reads</li>\n  </ul>\n\n  <p> A typical bug matching this bug pattern is forgetting to synchronize\n  one of the methods in a class that is intended to be thread-safe.</p>\n\n  <p> You can select the nodes labeled \"Unsynchronized access\" to show the\n  code locations where the detector believed that a field was accessed\n  without synchronization.</p>\n\n  <p> Note that there are various sources of inaccuracy in this detector;\n  for example, the detector cannot statically detect all situations in which\n  a lock is held.&nbsp; Also, even when the detector is accurate in\n  distinguishing locked vs. unlocked accesses, the code in question may still\n  be correct.</p>","debt":"1h"},{"summary":"Correctness - Integral value cast to double and then passed to Math.ceil","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis code converts an integral value (e.g., int or long)\nto a double precision\nfloating point number and then\npassing the result to the Math.ceil() function, which rounds a double to\nthe next higher integer value. This operation should always be a no-op,\nsince the converting an integer to a double should give a number with no fractional part.\nIt is likely that the operation that generated the value to be passed\nto Math.ceil was intended to be performed using double precision\nfloating point arithmetic.\n</p>","debt":"1h"},{"summary":"Performance - Boxing/unboxing to parse a primitive","type":"Bug","defaultSeverity":"Major","description":"<p>A boxed primitive is created from a String, just to extract the unboxed primitive value.\n  It is more efficient to just call the static parseXXX method.</p>","debt":"5min"},{"summary":"Malicious code - Field is a mutable Hashtable","type":"Code Smell","defaultSeverity":"Info","description":"<p>A final static field references a Hashtable\n   and can be accessed by malicious code or\n        by accident from another package.\n   This code can freely modify the contents of the Hashtable.</p>","debt":"30min"},{"summary":"Bad practice - Empty finalizer should be deleted","type":"Code Smell","defaultSeverity":"Major","description":"<p> Empty <code>finalize()</code> methods are useless, so they should\n  be deleted.</p>","debt":"1h"},{"summary":"Correctness - Static Thread.interrupted() method invoked on thread instance","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is\nnot the current thread. As the interrupted() method is static, the interrupted method will be called on a different\nobject than the one the author intended.\n</p>","debt":"1h"},{"summary":"Correctness - Method must be private in order for serialization to work","type":"Bug","defaultSeverity":"Major","description":"<p> This class implements the <code>Serializable</code> interface, and defines a method\n  for custom serialization/deserialization. But since that method isn't declared private,\n  it will be silently ignored by the serialization/deserialization API.</p>","debt":"1h"},{"summary":"Bad practice - Use of identifier that is a keyword in later versions of Java","type":"Code Smell","defaultSeverity":"Major","description":"<p>This identifier is used as a keyword in later versions of Java. This code, and\nany code that references this API,\nwill need to be changed in order to compile it in later versions of Java.</p>","debt":"30min"},{"summary":"Multi-threading - Wait not in loop","type":"Bug","defaultSeverity":"Major","description":"<p> This method contains a call to <code>java.lang.Object.wait()</code>\n  which is not in a loop.&nbsp; If the monitor is used for multiple conditions,\n  the condition the caller intended to wait for might not be the one\n  that actually occurred.</p>","debt":"1h"},{"summary":"Correctness - Nonsensical self computation involving a variable (e.g., x & x)","type":"Bug","defaultSeverity":"Major","description":"<p> This method performs a nonsensical computation of a local variable with another\nreference to the same variable (e.g., x&x or x-x). Because of the nature\nof the computation, this operation doesn't seem to make sense,\nand may indicate a typo or\na logic error.  Double check the computation.\n</p>","debt":"1h"},{"summary":"Multi-threading - Unsynchronized get method, synchronized set method","type":"Bug","defaultSeverity":"Major","description":"<p> This class contains similarly-named get and set\n  methods where the set method is synchronized and the get method is not.&nbsp;\n  This may result in incorrect behavior at runtime, as callers of the get\n  method will not necessarily see a consistent state for the object.&nbsp;\n  The get method should be made synchronized.</p>","debt":"1h"},{"summary":"Correctness - A parameter is dead upon entry to a method but overwritten","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe initial value of this parameter is ignored, and the parameter\nis overwritten here. This often indicates a mistaken belief that\nthe write to the parameter will be conveyed back to\nthe caller.\n</p>","debt":"1h"},{"summary":"Correctness - Dead store due to switch statement fall through to throw","type":"Bug","defaultSeverity":"Major","description":"<p> A value stored in the previous switch case is ignored here due to a switch fall through to a place where\n    an exception is thrown. It is likely that\n    you forgot to put a break or return at the end of the previous case.\n</p>","debt":"1h"},{"summary":"Correctness - Useless/vacuous call to EasyMock method","type":"Bug","defaultSeverity":"Major","description":"<p>This call doesn't pass any objects to the EasyMock method, so the call doesn't do anything.\n</p>"},{"summary":"Bad practice - Finalizer only nulls fields","type":"Code Smell","defaultSeverity":"Major","description":"<p> This finalizer does nothing except null out fields. This is completely pointless, and requires that\nthe object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize\nmethod.</p>","debt":"30min"},{"summary":"Bad practice - Class is Externalizable but doesn't define a void constructor","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class implements the <code>Externalizable</code> interface, but does\n  not define a void constructor. When Externalizable objects are deserialized,\n   they first need to be constructed by invoking the void\n   constructor. Since this class does not have one,\n   serialization and deserialization will fail at runtime.</p>","debt":"1h"},{"summary":"Experimental - Method may fail to clean up stream or resource on checked exception","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n          This method may fail to clean up (close, dispose of) a stream,\n          database object, or other\n          resource requiring an explicit cleanup operation.\n          </p>\n\n          <p>\n          In general, if a method opens a stream or other resource,\n          the method should use a try/finally block to ensure that\n          the stream or resource is cleaned up before the method\n          returns.\n          </p>\n\n          <p>\n          This bug pattern is essentially the same as the\n          OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE\n          bug patterns, but is based on a different\n          (and hopefully better) static analysis technique.\n          We are interested is getting feedback about the\n          usefulness of this bug pattern.\n          To send feedback, either:\n          </p>\n          <ul>\n            <li>send email to findbugs@cs.umd.edu</li>\n            <li>file a bug report: <a href=\"http://findbugs.sourceforge.net/reportingBugs.html\">http://findbugs.sourceforge.net/reportingBugs.html</a></li>\n          </ul>\n\n          <p>\n          In particular,\n          the false-positive suppression heuristics for this\n          bug pattern have not been extensively tuned, so\n          reports about false positives are helpful to us.\n          </p>\n\n          <p>\n          See Weimer and Necula, <i>Finding and Preventing Run-Time Error Handling Mistakes</i>, for\n          a description of the analysis technique.\n          </p>","debt":"1h"},{"summary":"Style - Class is final but declares protected field","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n      This class is declared to be final, but declares fields to be protected. Since the class\n      is final, it can not be derived from, and the use of protected is confusing. The access\n      modifier for the field should be changed to private or public to represent the true\n      use for the field.\n      </p>","debt":"30min"},{"summary":"Bad practice - Very confusing method names (but perhaps intentional)","type":"Code Smell","defaultSeverity":"Major","description":"<p> The referenced methods have names that differ only by capitalization.\nThis is very confusing because if the capitalization were\nidentical then one of the methods would override the other. From the existence of other methods, it\nseems that the existence of both of these methods is intentional, but is sure is confusing.\nYou should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.\n</p>","debt":"1h"},{"summary":"Correctness - Class defines tostring(); should it be toString()?","type":"Bug","defaultSeverity":"Major","description":"<p> This class defines a method called <code>tostring()</code>.&nbsp; This method\n  does not override the <code>toString()</code> method in <code>java.lang.Object</code>,\n  which is probably what was intended.</p>","debt":"1h"},{"summary":"Correctness - \".\" or \"|\" used for regular expression","type":"Bug","defaultSeverity":"Major","description":"<p>\nA String function is being invoked and \".\" or \"|\" is being passed\nto a parameter that takes a regular expression as an argument. Is this what you intended?\nFor example\n<li>s.replaceAll(\".\", \"/\") will return a String in which <em>every</em> character has been replaced by a '/' character\n<li>s.split(\".\") <em>always</em> returns a zero length array of String\n<li>\"ab|cd\".replaceAll(\"|\", \"/\") will return \"/a/b/|/c/d/\"\n<li>\"ab|cd\".split(\"|\") will return array with six (!) elements: [, a, b, |, c, d]\n</p>","debt":"1h"},{"summary":"Correctness - Method call passes null for non-null parameter","type":"Bug","defaultSeverity":"Major","description":"<p>\n      This method call passes a null value for a non-null method parameter.\n    Either the parameter is annotated as a parameter that should\n    always be non-null, or analysis has shown that it will always be\n    dereferenced.\n      </p>","debt":"30min"},{"summary":"Style - Thread passed where Runnable expected","type":"Code Smell","defaultSeverity":"Info","description":"<p> A Thread object is passed as a parameter to a method where\na Runnable is expected. This is rather unusual, and may indicate a logic error\nor cause unexpected behavior.\n   </p>","debt":"1h"},{"summary":"Bad practice - Random object created and used only once","type":"Code Smell","defaultSeverity":"Major","description":"<p> This code creates a java.util.Random object, uses it to generate one random number, and then discards\nthe Random object. This produces mediocre quality random numbers and is inefficient.\nIf possible, rewrite the code so that the Random object is created once and saved, and each time a new random number\nis required invoke a method on the existing Random object to obtain it.\n</p>\n\n<p>If it is important that the generated Random numbers not be guessable, you <em>must</em> not create a new Random for each random\nnumber; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead\n(and avoid allocating a new SecureRandom for each random number needed).\n</p>","debt":"1h"},{"summary":"Malicious code - May expose internal representation by returning reference to mutable object","type":"Code Smell","defaultSeverity":"Info","description":"<p> Returning a reference to a mutable object value stored in one of the object's fields\n  exposes the internal representation of the object.&nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.</p>","debt":"30min"},{"summary":"Correctness - Bitwise OR of signed byte value","type":"Bug","defaultSeverity":"Major","description":"<p> Loads a byte value (e.g., a value loaded from a byte array or returned by a method\nwith return type byte)  and performs a bitwise OR with\nthat value. Byte values are sign extended to 32 bits\nbefore any bitwise operations are performed on the value.\nThus, if <code>b[0]</code> contains the value <code>0xff</code>, and\n<code>x</code> is initially 0, then the code\n<code>((x &lt;&lt; 8) | b[0])</code>  will sign extend <code>0xff</code>\nto get <code>0xffffffff</code>, and thus give the value\n<code>0xffffffff</code> as the result.\n</p>\n\n<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++)\n  result = ((result &lt;&lt; 8) | b[i]);\n</pre>\n\n<p>The following idiom will work instead: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++)\n  result = ((result &lt;&lt; 8) | (b[i] &amp; 0xff));\n</pre>","debt":"1h"},{"summary":"Correctness - equals method always returns false","type":"Bug","defaultSeverity":"Major","description":"<p> This class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means\nthat equals is not reflexive, one of the requirements of the equals method.</p>\n<p>The likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class <code>Object</code>. If you need to override an equals inherited from a different\nsuperclass, you can use use:</p>\n<pre>\npublic boolean equals(Object o) { return this == o; }\n</pre>","debt":"1h"},{"summary":"Multi-threading - Monitor wait() called on Condition","type":"Bug","defaultSeverity":"Major","description":"<p>\n      This method calls <code>wait()</code> on a\n      <code>java.util.concurrent.locks.Condition</code> object.&nbsp;\n      Waiting for a <code>Condition</code> should be done using one of the <code>await()</code>\n      methods defined by the <code>Condition</code> interface.\n      </p>","debt":"1h"},{"summary":"Style - Check for oddness that won't work for negative numbers","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThe code uses x % 2 == 1 to check to see if a value is odd, but this won't work\nfor negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check\nfor oddness, consider using x &amp; 1 == 1, or x % 2 != 0.\n</p>","debt":"1h"},{"summary":"Multi-threading - Possible double check of field","type":"Bug","defaultSeverity":"Major","description":"<p> This method may contain an instance of double-checked locking.&nbsp;\n  This idiom is not correct according to the semantics of the Java memory\n  model.&nbsp; For more information, see the web page\n  <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\"\n  >http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>.</p>","debt":"1h"},{"summary":"Correctness - Bad constant value for month","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis code passes a constant month\nvalue outside the expected range of 0..11 to a method.\n</p>","debt":"1h"},{"summary":"Bad practice - Adding elements of an entry set may fail due to reuse of Entry objects","type":"Code Smell","defaultSeverity":"Major","description":"<p> The entrySet() method is allowed to return a view of the\n     underlying Map in which a single Entry object is reused and returned\n     during the iteration.  As of Java 1.6, both IdentityHashMap\n     and EnumMap did so. When iterating through such a Map,\n     the Entry value is only valid until you advance to the next iteration.\n     If, for example, you try to pass such an entrySet to an addAll method,\n     things will go badly wrong.\n    </p>","debt":"1h"},{"summary":"Style - Dead store to local variable that shadows field","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis instruction assigns a value to a local variable,\nbut the value is not read or used in any subsequent instruction.\nOften, this indicates an error, because the value computed is never\nused. There is a field with the same name as the local variable. Did you\nmean to assign to that variable instead?\n</p>","debt":"30min"},{"summary":"Correctness - An apparent infinite recursive loop","type":"Bug","defaultSeverity":"Major","description":"<p>This method unconditionally invokes itself. This would seem to indicate\nan infinite recursive loop that will result in a stack overflow.</p>","debt":"1h"},{"summary":"Style - Dereference of the result of readLine() without nullcheck","type":"Code Smell","defaultSeverity":"Info","description":"<p> The result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text\nto read, readLine() will return null and dereferencing that will generate a null pointer exception.\n</p>","debt":"1h"},{"summary":"Performance - Inefficient use of keySet iterator instead of entrySet iterator","type":"Bug","defaultSeverity":"Major","description":"<p> This method accesses the value of a Map entry, using a key that was retrieved from\na keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the\nMap.get(key) lookup.</p>","debt":"1h"},{"summary":"Multi-threading - Constructor invokes Thread.start()","type":"Bug","defaultSeverity":"Major","description":"<p> The constructor starts a thread. This is likely to be wrong if\n   the class is ever extended/subclassed, since the thread will be started\n   before the subclass constructor is started.</p>","debt":"1h"},{"summary":"Correctness - Possibly incompatible element is stored in covariant array","type":"Bug","defaultSeverity":"Major","description":"<p>Value is stored into the array and the value type doesn't match the array type.\nIt's known from the analysis that actual array type is narrower than the declared type of its variable or field\nand this assignment doesn't satisfy the original array type. This assignment may cause ArrayStoreException\nat runtime.\n</p>"},{"summary":"Multi-threading - A volatile reference to an array doesn't treat the array elements as volatile","type":"Bug","defaultSeverity":"Major","description":"<p>This declares a volatile reference to an array, which might not be what\nyou want. With a volatile reference to an array, reads and writes of\nthe reference to the array are treated as volatile, but the array elements\nare non-volatile. To get volatile array elements, you will need to use\none of the atomic array classes in java.util.concurrent (provided\nin Java 5.0).</p>","debt":"1h"},{"summary":"Style - Dead store to local variable","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis instruction assigns a value to a local variable,\nbut the value is not read or used in any subsequent instruction.\nOften, this indicates an error, because the value computed is never\nused.\n</p>\n<p>\nNote that Sun's javac compiler often generates dead stores for\nfinal local variables.  Because FindBugs is a bytecode-based tool,\nthere is no easy way to eliminate these false positives.\n</p>","debt":"1h"},{"summary":"Style - Method checks to see if result of String.indexOf is positive","type":"Code Smell","defaultSeverity":"Info","description":"<p> The method invokes String.indexOf and checks to see if the result is positive or non-positive.\n   It is much more typical to check to see if the result is negative or non-negative. It is\n   positive only if the substring checked for occurs at some place other than at the beginning of\n   the String.</p>","debt":"1h"},{"summary":"Malicious code - Field isn't final but should be refactored to be so","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis static field public but not final, and\ncould be changed by malicious code or\nby accident from another package.\nThe field could be made final to avoid\nthis vulnerability. However, the static initializer contains more than one write\nto the field, so doing so will require some refactoring.\n</p>","debt":"30min"},{"summary":"Multi-threading - Unconditional wait","type":"Bug","defaultSeverity":"Major","description":"<p> This method contains a call to <code>java.lang.Object.wait()</code> which\n  is not guarded by conditional control flow.&nbsp; The code should\n    verify that condition it intends to wait for is not already satisfied\n    before calling wait; any previous notifications will be ignored.\n  </p>","debt":"1h"},{"summary":"Bad practice - Creates an empty jar file entry","type":"Code Smell","defaultSeverity":"Major","description":"<p>The code calls <code>putNextEntry()</code>, immediately\nfollowed by a call to <code>closeEntry()</code>. This results\nin an empty JarFile entry. The contents of the entry\nshould be written to the JarFile between the calls to\n<code>putNextEntry()</code> and\n<code>closeEntry()</code>.</p>","debt":"1h"},{"summary":"Multi-threading - Mismatched notify()","type":"Bug","defaultSeverity":"Major","description":"<p> This method calls Object.notify() or Object.notifyAll() without obviously holding a lock\non the object.&nbsp;  Calling notify() or notifyAll() without a lock held will result in\nan <code>IllegalMonitorStateException</code> being thrown.</p>","debt":"1h"},{"summary":"Security - Nonconstant string passed to execute or addBatch method on an SQL statement","type":"Vulnerability","defaultSeverity":"Major","description":"<p>The method invokes the execute or addBatch method on an SQL statement with a String that seems\nto be dynamically generated. Consider using\na prepared statement instead. It is more efficient and less vulnerable to\nSQL injection attacks.\n</p>","debt":"1h"},{"summary":"Style - Questionable cast to concrete collection","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis code casts an abstract collection (such as a Collection, List, or Set)\nto a specific concrete implementation (such as an ArrayList or HashSet).\nThis might not be correct, and it may make your code fragile, since\nit makes it harder to switch to other concrete implementations at a future\npoint. Unless you have a particular reason to do so, just use the abstract\ncollection class.\n</p>","debt":"1h"},{"summary":"Bad practice - Format string should use %n rather than \\n","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nThis format string includes a newline character (\\n). In format strings, it is generally\n preferable to use %n, which will produce the platform-specific line separator.\n</p>","debt":"10min"},{"summary":"Correctness - The readResolve method must not be declared as a static method.","type":"Bug","defaultSeverity":"Major","description":"<p> In order for the readResolve method to be recognized by the serialization\nmechanism, it must not be declared as a static method.\n</p>","debt":"30min"},{"summary":"Multi-threading - An increment to a volatile field isn't atomic","type":"Bug","defaultSeverity":"Major","description":"<p>This code increments a volatile field. Increments of volatile fields aren't\natomic. If more than one thread is incrementing the field at the same time,\nincrements could be lost.\n</p>","debt":"1h"},{"summary":"Correctness - Self comparison of value with itself","type":"Bug","defaultSeverity":"Major","description":"<p> This method compares a local variable with itself, and may indicate a typo or\na logic error.  Make sure that you are comparing the right things.\n</p>","debt":"1h"},{"summary":"Correctness - Array length is out of bounds","type":"Bug","defaultSeverity":"Critical","description":"<p> Method is called with array parameter and length parameter, but the length is out of bounds. This will result in IndexOutOfBoundsException at runtime. </p>","debt":"15min"},{"summary":"Bad practice - Use of identifier that is a keyword in later versions of Java","type":"Code Smell","defaultSeverity":"Major","description":"<p>The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed\nin order to compile it in later versions of Java.</p>","debt":"30min"},{"summary":"Multi-threading - Using monitor style wait methods on util.concurrent abstraction","type":"Bug","defaultSeverity":"Major","description":"<p> This method calls\n<code>wait()</code>,\n<code>notify()</code> or\n<code>notifyAll()()</code>\non an object that also provides an\n<code>await()</code>,\n<code>signal()</code>,\n<code>signalAll()</code> method (such as util.concurrent Condition objects).\nThis probably isn't what you want, and even if you do want it, you should consider changing\nyour design, as other developers will find it exceptionally confusing.\n</p>","debt":"1h"},{"summary":"Correctness - Invocation of hashCode on an array","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe code invokes hashCode on an array. Calling hashCode on\nan array returns the same value as System.identityHashCode, and ignores\nthe contents and length of the array. If you need a hashCode that\ndepends on the contents of an array <code>a</code>,\nuse <code>java.util.Arrays.hashCode(a)</code>.\n\n</p>","debt":"30min"},{"summary":"Correctness - Can't use reflection to check for presence of annotation without runtime retention","type":"Bug","defaultSeverity":"Major","description":"<p> Unless an annotation has itself been annotated with  @Retention(RetentionPolicy.RUNTIME), the annotation can't be observed using reflection\n(e.g., by using the isAnnotationPresent method).\n   .</p>","debt":"1h"},{"summary":"Correctness - instanceof will always return false","type":"Bug","defaultSeverity":"Critical","description":"<p>\nThis instanceof test will always return false. Although this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\n</p>","debt":"1h"},{"summary":"Correctness - A collection is added to itself","type":"Bug","defaultSeverity":"Major","description":"<p>A collection is added to itself. As a result, computing the hashCode of this\nset will throw a StackOverflowException.\n</p>","debt":"1h"},{"summary":"Multi-threading - Synchronize and null check on the same field.","type":"Bug","defaultSeverity":"Major","description":"<p>Since the field is synchronized on, it seems not likely to be null.\nIf it is null and then synchronized on a NullPointerException will be\nthrown and the check would be pointless. Better to synchronize on\nanother field.</p>","debt":"1h"},{"summary":"Performance - Primitive value is unboxed and coerced for ternary operator","type":"Bug","defaultSeverity":"Major","description":"<p>A wrapped primitive value is unboxed and converted to another primitive type as part of the\nevaluation of a conditional ternary operator (the <code> b ? e1 : e2</code> operator). The\nsemantics of Java mandate that if <code>e1</code> and <code>e2</code> are wrapped\nnumeric values, the values are unboxed and converted/coerced to their common type (e.g,\nif <code>e1</code> is of type <code>Integer</code>\nand <code>e2</code> is of type <code>Float</code>, then <code>e1</code> is unboxed,\nconverted to a floating point value, and boxed. See JLS Section 15.25.\n</p>","debt":"5h"},{"summary":"Style - Method tightens nullness annotation on parameter","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n        A method should always implement the contract of a method it overrides. Thus, if a method takes a parameter\n    that is marked as @Nullable, you shouldn't override that method in a subclass with a method where that parameter is @Nonnull.\n    Doing so violates the contract that the method should handle a null parameter.\n        </p>"},{"summary":"Style - Initialization circularity","type":"Code Smell","defaultSeverity":"Info","description":"<p> A circularity was detected in the static initializers of the two\n  classes referenced by the bug instance.&nbsp; Many kinds of unexpected\n  behavior may arise from such circularity.</p>","debt":"1h"},{"summary":"Bad practice - Method with Boolean return type returns explicit null","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n    A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen.\n    This method can be invoked as though it returned a value of type boolean, and\n    the compiler will insert automatic unboxing of the Boolean value. If a null value is returned,\n    this will result in a NullPointerException.\n       </p>","debt":"1h"},{"summary":"Performance - Method invokes inefficient new String(String) constructor","type":"Bug","defaultSeverity":"Major","description":"<p> Using the <code>java.lang.String(String)</code> constructor wastes memory\n  because the object so constructed will be functionally indistinguishable\n  from the <code>String</code> passed as a parameter.&nbsp; Just use the\n  argument <code>String</code> directly.</p>","debt":"30min"},{"summary":"Correctness - TestCase defines tearDown that doesn't call super.tearDown()","type":"Bug","defaultSeverity":"Major","description":"<p> Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call\nsuper.tearDown(), but doesn't.</p>","debt":"30min"},{"summary":"Style - Test for circular dependencies among classes","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n    This class has a circular dependency with other classes. This makes building these classes\n    difficult, as each is dependent on the other to build correctly. Consider using interfaces\n    to break the hard dependency.\n    </p>","debt":"3h"},{"summary":"Style - Read of unwritten public or protected field","type":"Code Smell","defaultSeverity":"Info","description":"<p> The program is dereferencing a public or protected\nfield that does not seem to ever have a non-null value written to it.\nUnless the field is initialized via some mechanism not seen by the analysis,\ndereferencing this value will generate a null pointer exception.\n</p>","debt":"1h"},{"summary":"Style - Method uses the same code for two switch clauses","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n      This method uses the same code to implement two clauses of a switch statement.\n    This could be a case of duplicate code, but it might also indicate\n    a coding mistake.\n      </p>","debt":"1h"},{"summary":"Bad practice - Store of non serializable object into HttpSession","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nThis code seems to be storing a non-serializable object into an HttpSession.\nIf this session is passivated or migrated, an error will result.\n</p>","debt":"1h"},{"summary":"Correctness - D'oh! A nonsensical method invocation","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis partical method invocation doesn't make sense, for reasons that should be apparent from inspection.\n</p>","debt":"1h"},{"summary":"Multi-threading - Method does not release lock on all paths","type":"Bug","defaultSeverity":"Major","description":"<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,\nbut does not release it on all paths out of the method.  In general, the correct idiom\nfor using a JSR-166 lock is:\n</p>\n<pre>\n    Lock l = ...;\n    l.lock();\n    try {\n        // do something\n    } finally {\n        l.unlock();\n    }\n</pre>","debt":"1h"},{"summary":"Bad practice - Class defines hashCode() but not equals()","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class defines a <code>hashCode()</code> method but not an\n  <code>equals()</code> method.&nbsp; Therefore, the class may\n  violate the invariant that equal objects must have equal hashcodes.</p>","debt":"1h"},{"summary":"Performance - The equals and hashCode methods of URL are blocking","type":"Bug","defaultSeverity":"Major","description":"<p> The equals and hashCode\nmethod of URL perform domain name resolution, this can result in a big performance hit.\nSee <a href=\"http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html\">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.\nConsider using <code>java.net.URI</code> instead.\n   </p>","debt":"30min"},{"summary":"Correctness - Method assigns boolean literal in boolean expression","type":"Bug","defaultSeverity":"Major","description":"<p>\n      This method assigns a literal boolean value (true or false) to a boolean variable inside\n      an if or while expression. Most probably this was supposed to be a boolean comparison using\n      ==, not an assignment using =.\n      </p>","debt":"30min"},{"summary":"Correctness - Incorrect combination of Math.max and Math.min","type":"Bug","defaultSeverity":"Major","description":"<p>This code tries to limit the value bounds using the construct like Math.min(0, Math.max(100, value)). However the order of\n  the constants is incorrect: it should be Math.min(100, Math.max(0, value)). As the result this code always produces the same result\n  (or NaN if the value is NaN).</p>","debt":"10min"},{"summary":"Style - Computation of average could overflow","type":"Code Smell","defaultSeverity":"Info","description":"<p>The code computes the average of two integers using either division or signed right shift,\nand then uses the result as the index of an array.\nIf the values being averaged are very large, this can overflow (resulting in the computation\nof a negative average).  Assuming that the result is intended to be nonnegative, you\ncan use an unsigned right shift instead. In other words, rather that using <code>(low+high)/2</code>,\nuse <code>(low+high) &gt;&gt;&gt; 1</code>\n</p>\n<p>This bug exists in many earlier implementations of binary search and merge sort.\nMartin Buchholz <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6412541\">found and fixed it</a>\nin the JDK libraries, and Joshua Bloch\n<a href=\"http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\">widely\npublicized the bug pattern</a>.\n</p>","debt":"1h"},{"summary":"Bad practice - Method ignores exceptional return value","type":"Code Smell","defaultSeverity":"Major","description":"<p> This method returns a value that is not checked. The return value should be checked\nsince it can indicate an unusual or unexpected function execution. For\nexample, the <code>File.delete()</code> method returns false\nif the file could not be successfully deleted (rather than\nthrowing an Exception).\nIf you don't check the result, you won't notice if the method invocation\nsignals unexpected behavior by returning an atypical return value.\n</p>","debt":"1h"},{"summary":"Bad practice - Transient field that isn't set by deserialization.","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any\ndeserialized instance of the class.\n</p>","debt":"1h"},{"summary":"Bad practice - Comparison of String parameter using == or !=","type":"Code Smell","defaultSeverity":"Major","description":"<p>This code compares a <code>java.lang.String</code> parameter for reference\nequality using the == or != operators. Requiring callers to\npass only String constants or interned strings to a method is unnecessarily\nfragile, and rarely leads to measurable performance gains. Consider\nusing the <code>equals(Object)</code> method instead.</p>","debt":"1h"},{"summary":"Multi-threading - Sequence of calls to concurrent abstraction may not be atomic","type":"Bug","defaultSeverity":"Major","description":"<p>This code contains a sequence of calls to a concurrent  abstraction\n            (such as a concurrent hash map).\n            These calls will not be executed atomically.","debt":"30min"},{"summary":"Bad practice - Method may fail to close database resource","type":"Code Smell","defaultSeverity":"Major","description":"<p> The method creates a database resource (such as a database connection\nor row set), does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nthe object on all paths out of the method.&nbsp; Failure to\nclose database resources on all paths out of a method may\nresult in poor performance, and could cause the application to\nhave problems communicating with the database.\n</p>","debt":"1h"},{"summary":"Security - Servlet reflected cross site scripting vulnerability","type":"Vulnerability","defaultSeverity":"Major","description":"<p>This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>","debt":"3h"},{"summary":"Bad practice - Equals checks for incompatible operand","type":"Code Smell","defaultSeverity":"Major","description":"<p> This equals method is checking to see if the argument is some incompatible type\n(i.e., a class that is neither a supertype nor subtype of the class that defines\nthe equals method). For example, the Foo class might have an equals method\nthat looks like:\n</p>\n<pre>\npublic boolean equals(Object o) {\n  if (o instanceof Foo)\n    return name.equals(((Foo)o).name);\n  else if (o instanceof String)\n    return name.equals(o);\n  else return false;\n</pre>\n\n<p>This is considered bad practice, as it makes it very hard to implement an equals method that\nis symmetric and transitive. Without those properties, very unexpected behaviors are possible.\n</p>","debt":"1h"},{"summary":"Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead","type":"Bug","defaultSeverity":"Major","description":"<p> Creating new instances of <code>java.lang.Boolean</code> wastes\n  memory, since <code>Boolean</code> objects are immutable and there are\n  only two useful values of this type.&nbsp; Use the <code>Boolean.valueOf()</code>\n  method (or Java 1.5 autoboxing) to create <code>Boolean</code> objects instead.</p>","debt":"30min"},{"summary":"Correctness - Null pointer dereference","type":"Bug","defaultSeverity":"Major","description":"<p> A null pointer is dereferenced here.&nbsp; This will lead to a\n<code>NullPointerException</code> when the code is executed.</p>","debt":"1h"},{"summary":"Correctness - Class defines field that masks a superclass field","type":"Bug","defaultSeverity":"Major","description":"<p> This class defines a field with the same name as a visible\ninstance field in a superclass.  This is confusing, and\nmay indicate an error if methods update or access one of\nthe fields when they wanted the other.</p>","debt":"1h"},{"summary":"Bad practice - Comparison of String objects using == or !=","type":"Code Smell","defaultSeverity":"Major","description":"<p>This code compares <code>java.lang.String</code> objects for reference\nequality using the == or != operators.\nUnless both strings are either constants in a source file, or have been\ninterned using the <code>String.intern()</code> method, the same string\nvalue may be represented by two different String objects. Consider\nusing the <code>equals(Object)</code> method instead.</p>","debt":"1h"},{"summary":"Bad practice - Needless instantiation of class that only supplies static methods","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class allocates an object that is based on a class that only supplies static methods. This object\ndoes not need to be created, just access the static methods directly using the class name as a qualifier.</p>","debt":"30min"},{"summary":"Style - Useless object created on stack","type":"Code Smell","defaultSeverity":"Info","description":"<p>This object is created just to perform some modifications which don't have any side-effect.\nProbably something else was meant or the object can be removed.</p>","debt":"20min"},{"summary":"Correctness - An apparent infinite loop","type":"Bug","defaultSeverity":"Major","description":"<p>This loop doesn't seem to have a way to terminate (other than by perhaps\nthrowing an exception).</p>","debt":"1h"},{"summary":"Multi-threading - Call to static DateFormat","type":"Bug","defaultSeverity":"Major","description":"<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.\nThe detector has found a call to an instance of DateFormat that has been obtained via a static\nfield. This looks suspicious.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a>\nand <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>","debt":"1h"},{"summary":"Correctness - Collections should not contain themselves","type":"Bug","defaultSeverity":"Major","description":"<p> This call to a generic collection's method would only make sense if a collection contained\nitself (e.g., if <code>s.contains(s)</code> were true). This is unlikely to be true and would cause\nproblems if it were true (such as the computation of the hash code resulting in infinite recursion).\nIt is likely that the wrong value is being passed as a parameter.\n    </p>","debt":"1h"},{"summary":"Style - Class implements same interface as superclass","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n    This class declares that it implements an interface that is also implemented by a superclass.\n    This is redundant because once a superclass implements an interface, all subclasses by default also\n    implement this interface. It may point out that the inheritance hierarchy has changed since\n    this class was created, and consideration should be given to the ownership of\n    the interface's implementation.\n    </p>","debt":"30min"},{"summary":"Correctness - Bad attempt to compute absolute value of signed random integer","type":"Bug","defaultSeverity":"Major","description":"<p> This code generates a random signed integer and then computes\nthe absolute value of that random integer.  If the number returned by the random number\ngenerator is <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since\n<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>). (Same problem arises for long values as well).\n</p>","debt":"1h"},{"summary":"Style - Transient field of class that isn't Serializable.","type":"Code Smell","defaultSeverity":"Info","description":"<p> The field is marked as transient, but the class isn't Serializable, so marking it as transient\nhas absolutely no effect.\nThis may be leftover marking from a previous version of the code in which the class was transient, or\nit may indicate a misunderstanding of how serialization works.\n</p>","debt":"1h"},{"summary":"Bad practice - Serializable inner class","type":"Code Smell","defaultSeverity":"Major","description":"<p> This Serializable class is an inner class.  Any attempt to serialize\nit will also serialize the associated outer instance. The outer instance is serializable,\nso this won't fail, but it might serialize a lot more data than intended.\nIf possible, making the inner class a static inner class (also known as a nested class) should solve the\nproblem.","debt":"1h"},{"summary":"Performance - Inefficient use of String.indexOf(String)","type":"Bug","defaultSeverity":"Major","description":"<p> This code passes a constant string of length 1 to String.indexOf().\nIt is more efficient to use the integer implementations of String.indexOf().\nf. e. call <code>myString.indexOf('.')</code> instead of <code>myString.indexOf(\".\")</code></p>","debt":"5min"},{"summary":"Multi-threading - Class's writeObject() method is synchronized but nothing else is","type":"Bug","defaultSeverity":"Major","description":"<p> This class has a <code>writeObject()</code> method which is synchronized;\n  however, no other method of the class is synchronized.</p>","debt":"1h"},{"summary":"Security - Empty database password","type":"Vulnerability","defaultSeverity":"Major","description":"<p>This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password.\n</p>","debt":"1h"},{"summary":"Bad practice - The readResolve method must be declared with a return type of Object.","type":"Code Smell","defaultSeverity":"Major","description":"<p> In order for the readResolve method to be recognized by the serialization\nmechanism, it must be declared to have a return type of Object.\n</p>","debt":"1h"},{"summary":"Style - Class extends Struts Action class and uses instance variables","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n    This class extends from a Struts Action class, and uses an instance member variable. Since only\n    one instance of a struts Action class is created by the Struts framework, and used in a\n    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider\n    only using method local variables. Only instance fields that are written outside of a monitor\n    are reported.\n    </p>","debt":"1h"},{"summary":"Correctness - Possible bad parsing of shift operation","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe code performs an operation like (x &lt;&lt; 8 + y). Although this might be correct, probably it was meant \nto perform (x &lt;&lt; 8) + y, but shift operation has\na lower precedence, so it's actually parsed as x &lt;&lt; (8 + y).\n</p>","debt":"2min"},{"summary":"Bad practice - Covariant equals() method defined","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class defines a covariant version of <code>equals()</code>.&nbsp;\n  To correctly override the <code>equals()</code> method in\n  <code>java.lang.Object</code>, the parameter of <code>equals()</code>\n  must have type <code>java.lang.Object</code>.</p>","debt":"1h"},{"summary":"Style - Useless object created","type":"Code Smell","defaultSeverity":"Info","description":"<p>Our analysis shows that this object is useless. \nIt's created and modified, but its value never go outside of the method or produce any side-effect.\nEither there is a mistake and object was intended to be used or it can be removed.</p>\n<p>This analysis rarely produces false-positives. Common false-positive cases include:</p>\n<p>- This object used to implicitly throw some obscure exception.</p>\n<p>- This object used as a stub to generalize the code.</p>\n<p>- This object used to hold strong references to weak/soft-referenced objects.</p>","debt":"20min"},{"summary":"Security - A prepared statement is generated from a nonconstant String","type":"Vulnerability","defaultSeverity":"Major","description":"<p>The code creates an SQL prepared statement from a nonconstant String.\nIf unchecked, tainted data from a user is used in building this String, SQL injection could\nbe used to make the prepared statement do something unexpected and undesirable.\n</p>","debt":"1h"},{"summary":"Style - Class extends Servlet class and uses instance variables","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n    This class extends from a Servlet class, and uses an instance member variable. Since only\n    one instance of a Servlet class is created by the J2EE framework, and used in a\n    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider\n    only using method local variables.\n    </p>","debt":"1h"},{"summary":"Multi-threading - Empty synchronized block","type":"Bug","defaultSeverity":"Major","description":"<p> The code contains an empty synchronized block:</p>\n<pre>\nsynchronized() {}\n</pre>\n<p>Empty synchronized blocks are far more subtle and hard to use correctly\nthan most people recognize, and empty synchronized blocks\nare almost never a better solution\nthan less contrived solutions.\n</p>","debt":"1h"},{"summary":"Bad practice - Method might drop exception","type":"Code Smell","defaultSeverity":"Major","description":"<p> This method might drop an exception.&nbsp; In general, exceptions\n  should be handled or reported in some way, or they should be thrown\n  out of the method.</p>","debt":"1h"},{"summary":"Performance - Unread field: should this field be static?","type":"Bug","defaultSeverity":"Major","description":"<p> This class contains an instance final field that\n   is initialized to a compile-time static value.\n   Consider making the field static.</p>","debt":"30min"},{"summary":"Correctness - 32 bit int shifted by an amount not in the range -31..31","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe code performs shift of a 32 bit int by a constant amount outside\nthe range -31..31.\nThe effect of this is to use the lower 5 bits of the integer\nvalue to decide how much to shift by (e.g., shifting by 40 bits is the same as shifting by 8 bits,\nand shifting by 32 bits is the same as shifting by zero bits). This probably isn't what was expected,\nand it is at least confusing.\n</p>","debt":"1h"},{"summary":"Performance - Method invokes inefficient floating-point Number constructor; use static valueOf instead","type":"Bug","defaultSeverity":"Major","description":"<p>\n      Using <code>new Double(double)</code> is guaranteed to always result in a new object whereas\n      <code>Double.valueOf(double)</code> allows caching of values to be done by the compiler, class library, or JVM.\n      Using of cached values avoids object allocation and the code will be faster.\n      </p>\n      <p>\n      Unless the class must be compatible with JVMs predating Java 1.5,\n      use either autoboxing or the <code>valueOf()</code> method when creating instances of <code>Double</code> and <code>Float</code>.\n      </p>","debt":"30min"},{"summary":"Malicious code - Field is a mutable collection","type":"Code Smell","defaultSeverity":"Info","description":"<p>A mutable collection instance is assigned to a final static field, \n   thus can be changed by malicious code or by accident from another package.\n   Consider wrapping this field into Collections.unmodifiableSet/List/Map/etc.\n   to avoid this vulnerability.</p>","debt":"15min"},{"summary":"Style - Invocation of substring(0), which returns the original value","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis code invokes substring(0) on a String, which returns the original value.\n</p>","debt":"5h"},{"summary":"Malicious code - Field is a mutable array","type":"Code Smell","defaultSeverity":"Info","description":"<p> A final static field references an array\n   and can be accessed by malicious code or\n        by accident from another package.\n   This code can freely modify the contents of the array.</p>","debt":"30min"},{"summary":"Bad practice - Iterator next() method can't throw NoSuchElementException","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class implements the <code>java.util.Iterator</code> interface.&nbsp;\n  However, its <code>next()</code> method is not capable of throwing\n  <code>java.util.NoSuchElementException</code>.&nbsp; The <code>next()</code>\n  method should be changed so it throws <code>NoSuchElementException</code>\n  if is called when there are no more elements to return.</p>","debt":"1h"},{"summary":"Correctness - Illegal format string","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe format string is syntactically invalid,\nand a runtime exception will occur when\nthis statement is executed.\n</p>","debt":"1h"},{"summary":"Style - Abstract Method is already defined in implemented interface","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n      This abstract method is already defined in an interface that is implemented by this abstract\n      class. This method can be removed, as it provides no additional value.\n      </p>","debt":"1h"},{"summary":"Correctness - Very confusing method names","type":"Bug","defaultSeverity":"Major","description":"<p> The referenced methods have names that differ only by capitalization.\nThis is very confusing because if the capitalization were\nidentical then one of the methods would override the other.\n</p>","debt":"10min"},{"summary":"Correctness - equals() method defined that doesn't override Object.equals(Object)","type":"Bug","defaultSeverity":"Major","description":"<p> This class defines an <code>equals()</code>\n  method, that doesn't override the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp;\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>","debt":"1h"},{"summary":"Correctness - Incompatible bit masks","type":"Bug","defaultSeverity":"Major","description":"<p> This method compares an expression of the form <code>(e | C)</code> to D.\nwhich will always compare unequal\ndue to the specific values of constants C and D.\nThis may indicate a logic error or typo.</p>\n\n<p> Typically, this bug occurs because the code wants to perform\na membership test in a bit set, but uses the bitwise OR\noperator (\"|\") instead of bitwise AND (\"&amp;\").</p>\n\n<p>Also such bug may appear in expressions like <code>(e &amp; A | B) == C</code>\nwhich is parsed like <code>((e &amp; A) | B) == C</code> while <code>(e &amp; (A | B)) == C</code> was intended.</p>","debt":"1h"},{"summary":"Correctness - Bad attempt to compute absolute value of signed 32-bit hashcode","type":"Bug","defaultSeverity":"Major","description":"<p> This code generates a hashcode and then computes\nthe absolute value of that hashcode.  If the hashcode\nis <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since\n<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>).\n</p>\n<p>One out of 2^32 strings have a hashCode of Integer.MIN_VALUE,\nincluding \"polygenelubricants\" \"GydZG_\" and \"\"DESIGNING WORKHOUSES\".\n</p>","debt":"1h"},{"summary":"Style - Double assignment of local variable","type":"Code Smell","defaultSeverity":"Info","description":"<p> This method contains a double assignment of a local variable; e.g.\n</p>\n<pre>\n  public void foo() {\n    int x,y;\n    x = x = 17;\n  }\n</pre>\n<p>Assigning the same value to a variable twice is useless, and may indicate a logic error or typo.</p>","debt":"1h"},{"summary":"Correctness - Method attempts to access a result set field with index 0","type":"Bug","defaultSeverity":"Major","description":"<p> A call to getXXX or updateXXX methods of a result set was made where the\nfield index is 0. As ResultSet fields start at index 1, this is always a mistake.</p>"},{"summary":"Correctness - Dead store of class literal","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis instruction assigns a class literal to a variable and then never uses it.\n<a href=\"http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal\">The behavior of this differs in Java 1.4 and in Java 5.</a>\nIn Java 1.4 and earlier, a reference to <code>Foo.class</code> would force the static initializer\nfor <code>Foo</code> to be executed, if it has not been executed already.\nIn Java 5 and later, it does not.\n</p>\n<p>See Sun's <a href=\"http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal\">article on Java SE compatibility</a>\nfor more details and examples, and suggestions on how to force class initialization in Java 5.\n</p>","debt":"1h"},{"summary":"Correctness - Value annotated as never carrying a type qualifier used where value carrying that qualifier is required","type":"Bug","defaultSeverity":"Major","description":"<p>\n        A value specified as not carrying a type qualifier annotation is guaranteed\n        to be consumed in a location or locations requiring that the value does\n        carry that annotation.\n        </p>\n\n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=NEVER\n        is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.\n        </p>\n\n        <p>\n        TODO: example\n        </p>","debt":"1h"},{"summary":"Correctness - Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier","type":"Bug","defaultSeverity":"Major","description":"<p>\n      A value that is annotated as possibility being an instance of\n    the values denoted by the type qualifier, and the value is guaranteed to be used\n    in a way that prohibits values denoted by that type qualifier.\n      </p>","debt":"5h"},{"summary":"Correctness - More arguments are passed than are actually used in the format string","type":"Bug","defaultSeverity":"Major","description":"<p>\nA format-string method with a variable number of arguments is called,\nbut more arguments are passed than are actually used by the format string.\nThis won't cause a runtime exception, but the code may be silently omitting\ninformation that was intended to be included in the formatted string.\n</p>","debt":"1h"},{"summary":"Bad practice - Negating the result of compareTo()/compare()","type":"Code Smell","defaultSeverity":"Major","description":"<p> This code negatives the return value of a compareTo or compare method.\nThis is a questionable or bad programming practice, since if the return\nvalue is Integer.MIN_VALUE, negating the return value won't\nnegate the sign of the result. You can achieve the same intended result\nby reversing the order of the operands rather than by negating the results.\n</p>","debt":"30min"},{"summary":"Correctness - Doomed test for equality to NaN","type":"Bug","defaultSeverity":"Major","description":"<p>\n    This code checks to see if a floating point value is equal to the special\n    Not A Number value (e.g., <code>if (x == Double.NaN)</code>). However,\n    because of the special semantics of <code>NaN</code>, no value\n    is equal to <code>Nan</code>, including <code>NaN</code>. Thus,\n    <code>x == Double.NaN</code> always evaluates to false.\n\n    To check to see if a value contained in <code>x</code>\n    is the special Not A Number value, use\n    <code>Double.isNaN(x)</code> (or <code>Float.isNaN(x)</code> if\n    <code>x</code> is floating point precision).\n    </p>","debt":"1h"},{"summary":"Correctness - Value without a type qualifier used where a value is required to have that qualifier","type":"Bug","defaultSeverity":"Major","description":"<p>\n        A value is being used in a way that requires the value be annotation with a type qualifier.\n    The type qualifier is strict, so the tool rejects any values that do not have\n    the appropriate annotation.\n        </p>\n\n        <p>\n        To coerce a value to have a strict annotation, define an identity function where the return value is annotated\n    with the strict annotation.\n    This is the only way to turn a non-annotated value into a value with a strict type qualifier annotation.\n        </p>"},{"summary":"Style - Unwritten public or protected field","type":"Code Smell","defaultSeverity":"Info","description":"<p> No writes were seen to this public/protected field.&nbsp; All reads of it will return the default\nvalue. Check for errors (should it have been initialized?), or remove it if it is useless.</p>","debt":"30min"},{"summary":"Style - Unsigned right shift cast to short/byte","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThe code performs an unsigned right shift, whose result is then\ncast to a short or byte, which discards the upper bits of the result.\nSince the upper bits are discarded, there may be no difference between\na signed and unsigned right shift (depending upon the size of the shift).\n</p>","debt":"5h"},{"summary":"Correctness - Impossible downcast of toArray() result","type":"Bug","defaultSeverity":"Critical","description":"<p>\nThis code is casting the result of calling <code>toArray()</code> on a collection\nto a type more specific than <code>Object[]</code>, as in:</p>\n<pre>\nString[] getAsArray(Collection&lt;String&gt; c) {\n  return (String[]) c.toArray();\n  }\n</pre>\n<p>This will usually fail by throwing a ClassCastException. The <code>toArray()</code>\nof almost all collections return an <code>Object[]</code>. They can't really do anything else,\nsince the Collection object has no reference to the declared generic type of the collection.\n<p>The correct way to do get an array of a specific type from a collection is to use\n  <code>c.toArray(new String[]);</code>\n  or <code>c.toArray(new String[c.size()]);</code> (the latter is slightly more efficient).\n<p>There is one common/known exception to this. The <code>toArray()</code>\nmethod of lists returned by <code>Arrays.asList(...)</code> will return a covariantly\ntyped array. For example, <code>Arrays.asArray(new String[] { \"a\" }).toArray()</code>\nwill return a <code>String []</code>. FindBugs attempts to detect and suppress\nsuch cases, but may miss some.\n</p>","debt":"30min"},{"summary":"Bad practice - Class defines equals() and uses Object.hashCode()","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class overrides <code>equals(Object)</code>, but does not\n  override <code>hashCode()</code>, and inherits the implementation of\n  <code>hashCode()</code> from <code>java.lang.Object</code> (which returns\n  the identity hash code, an arbitrary value assigned to the object\n  by the VM).&nbsp; Therefore, the class is very likely to violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n<p>If you don't think instances of this class will ever be inserted into a HashMap/HashTable,\nthe recommended <code>hashCode</code> implementation to use is:</p>\n<pre>public int hashCode() {\n  assert false : \"hashCode not designed\";\n  return 42; // any arbitrary constant will do\n  }</pre>","debt":"1h"},{"summary":"Style - Method ignores return value, is this OK?","type":"Code Smell","defaultSeverity":"Info","description":"<p>This code calls a method and ignores the return value. The return value\nis the same type as the type the method is invoked on, and from our analysis it looks\nlike the return value might be important (e.g., like ignoring the\nreturn value of <code>String.toLowerCase()</code>).\n</p>\n<p>We are guessing that ignoring the return value might be a bad idea just from\na simple analysis of the body of the method. You can use a @CheckReturnValue annotation\nto instruct FindBugs as to whether ignoring the return value of this method\nis important or acceptable.\n</p>\n<p>Please investigate this closely to decide whether it is OK to ignore the return value.\n</p>","debt":"30min"},{"summary":"Correctness - Random value from 0 to 1 is coerced to the integer 0","type":"Bug","defaultSeverity":"Major","description":"<p>A random value from 0 to 1 is being coerced to the integer value 0. You probably\nwant to multiply the random value by something else before coercing it to an integer, or use the <code>Random.nextInt(n)</code> method.\n</p>","debt":"1h"},{"summary":"Bad practice - Public enum method unconditionally sets its field","type":"Code Smell","defaultSeverity":"Major","description":"<p>This public method declared in public enum unconditionally sets enum field, thus this field can be changed by malicious code \n  or by accident from another package. Though mutable enum fields may be used for lazy initialization, it's a bad practice to expose them to the outer world.\n  Consider removing this method or declaring it package-private.</p>","debt":"20min"},{"summary":"Correctness - Unnecessary type check done using instanceof operator","type":"Bug","defaultSeverity":"Major","description":"<p> Type check performed using the instanceof operator where it can be statically determined whether the object\nis of the type requested. </p>","debt":"30min"},{"summary":"Style - Questionable cast to abstract collection","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis code casts a Collection to an abstract collection\n(such as <code>List</code>, <code>Set</code>, or <code>Map</code>).\nEnsure that you are guaranteed that the object is of the type\nyou are casting to. If all you need is to be able\nto iterate through a collection, you don't need to cast it to a Set or List.\n</p>","debt":"1h"},{"summary":"Performance - Method uses toArray() with zero-length array argument","type":"Bug","defaultSeverity":"Major","description":"<p> This method uses the toArray() method of a collection derived class, and passes\nin a zero-length prototype array argument.  It is more efficient to use\n<code>myCollection.toArray(new Foo[myCollection.size()])</code>\nIf the array passed in is big enough to store all of the\nelements of the collection, then it is populated and returned\ndirectly. This avoids the need to create a second array\n(by reflection) to return as the result.</p>","debt":"30min"},{"summary":"Correctness - Invalid syntax for regular expression","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe code here uses a regular expression that is invalid according to the syntax\nfor regular expressions. This statement will throw a PatternSyntaxException when\nexecuted.\n</p>","debt":"1h"},{"summary":"Correctness - int value cast to float and then passed to Math.round","type":"Bug","defaultSeverity":"Major","description":"<p>\nThis code converts an int value to a float precision\nfloating point number and then\npassing the result to the Math.round() function, which returns the int/long closest\nto the argument. This operation should always be a no-op,\nsince the converting an integer to a float should give a number with no fractional part.\nIt is likely that the operation that generated the value to be passed\nto Math.round was intended to be performed using\nfloating point arithmetic.\n</p>","debt":"1h"},{"summary":"Correctness - MessageFormat supplied where printf style format expected","type":"Bug","defaultSeverity":"Major","description":"<p>\nA method is called that expects a Java printf format string and a list of arguments.\nHowever, the format string doesn't contain any format specifiers (e.g., %s) but\ndoes contain message format elements (e.g., {0}).  It is likely\nthat the code is supplying a MessageFormat string when a printf-style format string\nis required. At runtime, all of the arguments will be ignored\nand the format string will be returned exactly as provided without any formatting.\n</p>","debt":"30min"},{"summary":"Multi-threading - Mismatched wait()","type":"Bug","defaultSeverity":"Major","description":"<p> This method calls Object.wait() without obviously holding a lock\non the object.&nbsp;  Calling wait() without a lock held will result in\nan <code>IllegalMonitorStateException</code> being thrown.</p>","debt":"1h"},{"summary":"Multi-threading - Static DateFormat","type":"Bug","defaultSeverity":"Major","description":"<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use.\nSharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the\napplication.</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579\">JDK Bug #6231579</a>\nand <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997\">JDK Bug #6178997</a>.</p>","debt":"1h"},{"summary":"Style - Load of known null value","type":"Code Smell","defaultSeverity":"Info","description":"<p> The variable referenced at this point is known to be null due to an earlier\n   check against null. Although this is valid, it might be a mistake (perhaps you\nintended to refer to a different variable, or perhaps the earlier check to see if the\nvariable is null should have been a check to see if it was non-null).\n</p>","debt":"1h"},{"summary":"Experimental - Method invoked that should be only be invoked inside a doPrivileged block","type":"Code Smell","defaultSeverity":"Info","description":"<p> This code invokes a method that requires a security permission check.\n  If this code will be granted security permissions, but might be invoked by code that does not\n  have security permissions, then the invocation needs to occur inside a doPrivileged block.</p>"},{"summary":"Correctness - Method call passes null to a non-null parameter","type":"Bug","defaultSeverity":"Major","description":"<p>\n      This method passes a null value as the parameter of a method which\n    must be non-null. Either this parameter has been explicitly marked\n    as @Nonnull, or analysis has determined that this parameter is\n    always dereferenced.\n      </p>","debt":"30min"},{"summary":"Correctness - Bitwise add of signed byte value","type":"Bug","defaultSeverity":"Major","description":"<p> Adds a byte value and a value which is known to have the 8 lower bits clear.\nValues loaded from a byte array are sign extended to 32 bits\nbefore any bitwise operations are performed on the value.\nThus, if <code>b[0]</code> contains the value <code>0xff</code>, and\n<code>x</code> is initially 0, then the code\n<code>((x &lt;&lt; 8) + b[0])</code>  will sign extend <code>0xff</code>\nto get <code>0xffffffff</code>, and thus give the value\n<code>0xffffffff</code> as the result.\n</p>\n\n<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++)\n  result = ((result &lt;&lt; 8) + b[i]);\n</pre>\n\n<p>The following idiom will work instead: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++)\n  result = ((result &lt;&lt; 8) + (b[i] &amp; 0xff));\n</pre>","debt":"1h"},{"summary":"Malicious code - Finalizer should be protected, not public","type":"Code Smell","defaultSeverity":"Info","description":"<p> A class's <code>finalize()</code> method should have protected access,\n   not public.</p>","debt":"30min"},{"summary":"Correctness - Useless increment in return statement","type":"Bug","defaultSeverity":"Major","description":"<p>This statement has a return such as <code>return x++;</code>.\nA postfix increment/decrement does not impact the value of the expression,\nso this increment/decrement has no effect.\nPlease verify that this statement does the right thing.\n</p>","debt":"5min"},{"summary":"Bad practice - Non-serializable class has a serializable inner class","type":"Code Smell","defaultSeverity":"Major","description":"<p> This Serializable class is an inner class of a non-serializable class.\nThus, attempts to serialize it will also attempt to associate instance of the outer\nclass with which it is associated, leading to a runtime error.\n</p>\n<p>If possible, making the inner class a static inner class should solve the\nproblem. Making the outer class serializable might also work, but that would\nmean serializing an instance of the inner class would always also serialize the instance\nof the outer class, which it often not what you really want.","debt":"1h"},{"summary":"Correctness - No relationship between generic parameter and method argument","type":"Bug","defaultSeverity":"Major","description":"<p> This call to a generic collection method contains an argument\n     with an incompatible class from that of the collection's parameter\n    (i.e., the type of the argument is neither a supertype nor a subtype\n        of the corresponding generic type argument).\n     Therefore, it is unlikely that the collection contains any objects\n    that are equal to the method argument used here.\n    Most likely, the wrong value is being passed to the method.</p>\n    <p>In general, instances of two unrelated classes are not equal.\n    For example, if the <code>Foo</code> and <code>Bar</code> classes\n    are not related by subtyping, then an instance of <code>Foo</code>\n        should not be equal to an instance of <code>Bar</code>.\n    Among other issues, doing so will likely result in an equals method\n    that is not symmetrical. For example, if you define the <code>Foo</code> class\n    so that a <code>Foo</code> can be equal to a <code>String</code>,\n    your equals method isn't symmetrical since a <code>String</code> can only be equal\n    to a <code>String</code>.\n    </p>\n    <p>In rare cases, people do define nonsymmetrical equals methods and still manage to make\n    their code work. Although none of the APIs document or guarantee it, it is typically\n    the case that if you check if a <code>Collection&lt;String&gt;</code> contains\n    a <code>Foo</code>, the equals method of argument (e.g., the equals method of the\n    <code>Foo</code> class) used to perform the equality checks.\n    </p>","debt":"1h"},{"summary":"Multi-threading - Synchronization on interned String","type":"Bug","defaultSeverity":"Major","description":"<p> The code synchronizes on interned String.</p>\n<pre>\nprivate static String LOCK = \"LOCK\";\n...\n  synchronized(LOCK) { ...}\n...\n</pre>\n<p>Constant Strings are interned and shared across all other classes loaded by the JVM. Thus, this code\nis locking on something that other code might also be locking. This could result in very strange and hard to diagnose\nblocking and deadlock behavior. See <a href=\"http://www.javalobby.org/java/forums/t96352.html\">http://www.javalobby.org/java/forums/t96352.html</a> and <a href=\"http://jira.codehaus.org/browse/JETTY-352\">http://jira.codehaus.org/browse/JETTY-352</a>.\n</p>\n<p>See CERT <a href=\"https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused\">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>","debt":"1h"},{"summary":"Correctness - Unexpected/undesired warning from FindBugs","type":"Bug","defaultSeverity":"Major","description":"<p>FindBugs generated a warning that, according to a @NoWarning annotated,\n            is unexpected or undesired.</p>","debt":"10min"},{"summary":"Style - Condition has no effect due to the variable type","type":"Code Smell","defaultSeverity":"Info","description":"<p>This condition always produces the same result due to the type range of the involved variable. \nProbably something else was meant or the condition can be removed.</p>","debt":"15min"},{"summary":"Multi-threading - Incorrect lazy initialization of static field","type":"Bug","defaultSeverity":"Major","description":"<p> This method contains an unsynchronized lazy initialization of a non-volatile static field.\nBecause the compiler or processor may reorder instructions,\nthreads are not guaranteed to see a completely initialized object,\n<em>if the method can be called by multiple threads</em>.\nYou can make the field volatile to correct the problem.\nFor more information, see the\n<a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/\">Java Memory Model web site</a>.\n</p>","debt":"1h"},{"summary":"Malicious code - Field isn't final but should be","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis static field public but not final, and\ncould be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.</p>","debt":"30min"},{"summary":"Bad practice - Suspicious reference comparison to constant","type":"Code Smell","defaultSeverity":"Major","description":"<p> This method compares a reference value to a constant using the == or != operator,\nwhere the correct way to compare instances of this type is generally\nwith the equals() method.\nIt is possible to create distinct instances that are equal but do not compare as == since\nthey are different objects.\nExamples of classes which should generally\nnot be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>","debt":"1h"},{"summary":"Style - Remainder of hashCode could be negative","type":"Code Smell","defaultSeverity":"Info","description":"<p> This code computes a hashCode, and then computes\nthe remainder of that value modulo another value. Since the hashCode\ncan be negative, the result of the remainder operation\ncan also be negative. </p>\n<p> Assuming you want to ensure that the result of your computation is nonnegative,\nyou may need to change your code.\nIf you know the divisor is a power of 2,\nyou can use a bitwise and operator instead (i.e., instead of\nusing <code>x.hashCode()%n</code>, use <code>x.hashCode()&amp;(n-1)</code>).\nThis is probably faster than computing the remainder as well.\nIf you don't know that the divisor is a power of 2, take the absolute\nvalue of the result of the remainder operation (i.e., use\n<code>Math.abs(x.hashCode()%n)</code>).\n</p>","debt":"1h"},{"summary":"Style - Method relaxes nullness annotation on return value","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n        A method should always implement the contract of a method it overrides. Thus, if a method takes is annotated\n    as returning a @Nonnull value,\n    you shouldn't override that method in a subclass with a method annotated as returning a @Nullable or @CheckForNull value.\n    Doing so violates the contract that the method shouldn't return null.\n        </p>","debt":"15min"},{"summary":"Style - Field not initialized in constructor but dereferenced without null check","type":"Code Smell","defaultSeverity":"Info","description":"<p> This field is never initialized within any constructor, and is therefore could be null after\nthe object is constructed. Elsewhere, it is loaded and dereferenced without a null check.\nThis could be a either an error or a questionable design, since\nit means a null pointer exception will be generated if that field is dereferenced\nbefore being initialized.\n</p>","debt":"1h"},{"summary":"Style - Redundant comparison of non-null value to null","type":"Code Smell","defaultSeverity":"Info","description":"<p> This method contains a reference known to be non-null with another reference\nknown to be null.</p>","debt":"30min"},{"summary":"Style - Condition has no effect","type":"Code Smell","defaultSeverity":"Info","description":"<p>This condition always produces the same result as the value of the involved variable that was narrowed before.\nProbably something else was meant or the condition can be removed.</p>","debt":"15min"},{"summary":"Bad practice - Class is Serializable but its superclass doesn't define a void constructor","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class implements the <code>Serializable</code> interface\n   and its superclass does not. When such an object is deserialized,\n   the fields of the superclass need to be initialized by\n   invoking the void constructor of the superclass.\n   Since the superclass does not have one,\n   serialization and deserialization will fail at runtime.</p>","debt":"1h"},{"summary":"Bad practice - compareTo()/compare() incorrectly handles float or double value","type":"Code Smell","defaultSeverity":"Major","description":"<p>This method compares double or float values using pattern like this: val1 &gt; val2 ? 1 : val1 &lt; val2 ? -1 : 0.\nThis pattern works incorrectly for -0.0 and NaN values which may result in incorrect sorting result or broken collection \n(if compared values are used as keys). Consider using Double.compare or Float.compare static methods which handle all \nthe special cases correctly.</p>","debt":"5min"},{"summary":"Style - Dead store of null to local variable","type":"Code Smell","defaultSeverity":"Info","description":"<p>The code stores null into a local variable, and the stored value is not\nread. This store may have been introduced to assist the garbage collector, but\nas of Java SE 6.0, this is no longer needed or useful.\n</p>","debt":"1h"},{"summary":"Correctness - Use of class without a hashCode() method in a hashed data structure","type":"Bug","defaultSeverity":"Major","description":"<p> A class defines an equals(Object)  method but not a hashCode() method,\nand thus doesn't fulfill the requirement that equal objects have equal hashCodes.\nAn instance of this class is used in a hash data structure, making the need to\nfix this problem of highest importance.","debt":"1h"},{"summary":"Correctness - Nonsensical self computation involving a field (e.g., x & x)","type":"Bug","defaultSeverity":"Major","description":"<p> This method performs a nonsensical computation of a field with another\nreference to the same field (e.g., x&x or x-x). Because of the nature\nof the computation, this operation doesn't seem to make sense,\nand may indicate a typo or\na logic error.  Double check the computation.\n</p>","debt":"1h"},{"summary":"Correctness - Format string placeholder incompatible with passed argument","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe format string placeholder is incompatible with the corresponding\nargument. For example,\n<code>\n  System.out.println(\"%d\\n\", \"hello\");\n</code>\n<p>The %d placeholder requires a numeric argument, but a string value is\npassed instead.\nA runtime exception will occur when\nthis statement is executed.\n</p>","debt":"1h"},{"summary":"Performance - Method concatenates strings using + in a loop","type":"Bug","defaultSeverity":"Major","description":"<p> The method seems to be building a String using concatenation in a loop.\nIn each iteration, the String is converted to a StringBuffer/StringBuilder,\n   appended to, and converted back to a String.\n   This can lead to a cost quadratic in the number of iterations,\n   as the growing string is recopied in each iteration. </p>\n\n<p>Better performance can be obtained by using\na StringBuffer (or StringBuilder in Java 1.5) explicitly.</p>\n\n<p> For example:</p>\n<pre>\n  // This is bad\n  String s = \"\";\n  for (int i = 0; i &lt; field.length; ++i) {\n    s = s + field[i];\n  }\n\n  // This is better\n  StringBuffer buf = new StringBuffer();\n  for (int i = 0; i &lt; field.length; ++i) {\n    buf.append(field[i]);\n  }\n  String s = buf.toString();\n</pre>","debt":"30min"},{"summary":"Correctness - hasNext method invokes next","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe hasNext() method invokes the next() method. This is almost certainly wrong,\nsince the hasNext() method is not supposed to change the state of the iterator,\nand the next method is supposed to change the state of the iterator.\n</p>","debt":"1h"},{"summary":"Bad practice - Class names should start with an upper case letter","type":"Code Smell","defaultSeverity":"Major","description":"<p> Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).\n</p>","debt":"30min"},{"summary":"Bad practice - Field names should start with a lower case letter","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nNames of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized.\n</p>","debt":"30min"},{"summary":"Style - instanceof will always return true","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis instanceof test will always return true (unless the value being tested is null).\nAlthough this is safe, make sure it isn't\nan indication of some misunderstanding or some other logic error.\nIf you really want to test the value for being null, perhaps it would be clearer to do\nbetter to do a null test rather than an instanceof test.\n</p>","debt":"1h"},{"summary":"Correctness - TestCase has no tests","type":"Bug","defaultSeverity":"Major","description":"<p> Class is a JUnit TestCase but has not implemented any test methods.</p>","debt":"30min"},{"summary":"Correctness - TestCase defines setUp that doesn't call super.setUp()","type":"Bug","defaultSeverity":"Major","description":"<p> Class is a JUnit TestCase and implements the setUp method. The setUp method should call\nsuper.setUp(), but doesn't.</p>","debt":"30min"},{"summary":"Correctness - Bad comparison of nonnegative value with negative constant or zero","type":"Bug","defaultSeverity":"Major","description":"<p> This code compares a value that is guaranteed to be non-negative with a negative constant or zero.\n</p>","debt":"1h"},{"summary":"Style - Value required to have type qualifier, but marked as unknown","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n      A value is used in a way that requires it to be always be a value denoted by a type qualifier, but\n    there is an explicit annotation stating that it is not known where the value is required to have that type qualifier.\n    Either the usage or the annotation is incorrect.\n      </p>","debt":"1h"},{"summary":"Multi-threading - Method spins on field","type":"Bug","defaultSeverity":"Major","description":"<p> This method spins in a loop which reads a field.&nbsp; The compiler\n  may legally hoist the read out of the loop, turning the code into an\n  infinite loop.&nbsp; The class should be changed so it uses proper\n  synchronization (including wait and notify calls).</p>","debt":"1h"},{"summary":"Correctness - Format string references missing argument","type":"Bug","defaultSeverity":"Major","description":"<p>\nNot enough arguments are passed to satisfy a placeholder in the format string.\nA runtime exception will occur when\nthis statement is executed.\n</p>","debt":"1h"},{"summary":"Correctness - Method with Optional return type returns explicit null","type":"Bug","defaultSeverity":"Major","description":"<p>\n    The usage of Optional return type (java.util.Optional or com.google.common.base.Optional)\n    always means that explicit null returns were not desired by design.\n    Returning a null value in such case is a contract violation and will most likely break client code.\n       </p>","debt":"15min"},{"summary":"Correctness - Possible null pointer dereference in method on exception path","type":"Bug","defaultSeverity":"Major","description":"<p> A reference value which is null on some exception control path is\ndereferenced here.&nbsp; This may lead to a <code>NullPointerException</code>\nwhen the code is executed.&nbsp;\nNote that because FindBugs currently does not prune infeasible exception paths,\nthis may be a false warning.</p>\n\n<p> Also note that FindBugs considers the default case of a switch statement to\nbe an exception path, since the default case is often infeasible.</p>","debt":"1h"},{"summary":"Performance - Use the nextInt method of Random rather than nextDouble to generate a random integer","type":"Bug","defaultSeverity":"Major","description":"<p>If <code>r</code> is a <code>java.util.Random</code>, you can generate a random number from <code>0</code> to <code>n-1</code>\nusing <code>r.nextInt(n)</code>, rather than using <code>(int)(r.nextDouble() * n)</code>.\n</p>\n<p>The argument to nextInt must be positive. If, for example, you want to generate a random\nvalue from -99 to 0, use <code>-r.nextInt(100)</code>.\n</p>","debt":"30min"},{"summary":"Correctness - Self assignment of field","type":"Bug","defaultSeverity":"Major","description":"<p> This method contains a self assignment of a field; e.g.\n</p>\n<pre>\n  int x;\n  public void foo() {\n    x = x;\n  }\n</pre>\n<p>Such assignments are useless, and may indicate a logic error or typo.</p>","debt":"1h"},{"summary":"Performance - Boxed value is unboxed and then immediately reboxed","type":"Bug","defaultSeverity":"Major","description":"<p>A boxed value is unboxed and then immediately reboxed.\n</p>","debt":"10min"},{"summary":"Style - Result of integer multiplication cast to long","type":"Code Smell","defaultSeverity":"Info","description":"<p>\nThis code performs integer multiply and then converts the result to a long,\nas in:</p>\n<pre>\n    long convertDaysToMilliseconds(int days) { return 1000*3600*24*days; }\n</pre>\n<p>\nIf the multiplication is done using long arithmetic, you can avoid\nthe possibility that the result will overflow. For example, you\ncould fix the above code to:</p>\n<pre>\n    long convertDaysToMilliseconds(int days) { return 1000L*3600*24*days; }\n</pre>\nor\n<pre>\n    static final long MILLISECONDS_PER_DAY = 24L*3600*1000;\n    long convertDaysToMilliseconds(int days) { return days * MILLISECONDS_PER_DAY; }\n</pre>","debt":"1h"},{"summary":"Bad practice - Method names should start with a lower case letter","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nMethods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.\n</p>","debt":"30min"},{"summary":"Performance - Should be a static inner class","type":"Bug","defaultSeverity":"Major","description":"<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n   made static.\n</p>","debt":"30min"},{"summary":"Bad practice - Covariant compareTo() method defined","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;\n  To correctly override the <code>compareTo()</code> method in the\n  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>\n  must have type <code>java.lang.Object</code>.</p>","debt":"1h"},{"summary":"Bad practice - clone method does not call super.clone()","type":"Code Smell","defaultSeverity":"Major","description":"<p> This non-final class defines a clone() method that does not call super.clone().\nIf this class (\"<i>A</i>\") is extended by a subclass (\"<i>B</i>\"),\nand the subclass <i>B</i> calls super.clone(), then it is likely that\n<i>B</i>'s clone() method will return an object of type <i>A</i>,\nwhich violates the standard contract for clone().</p>\n\n<p> If all clone() methods call super.clone(), then they are guaranteed\nto use Object.clone(), which always returns an object of the correct type.</p>","debt":"1h"},{"summary":"Style - Covariant array assignment to a local variable","type":"Code Smell","defaultSeverity":"Info","description":"<p>Array of covariant type is assigned to a local variable. This is confusing and may lead to ArrayStoreException at runtime\nif the reference of some other type will be stored in this array later like in the following code:\n</p>\n<p><code>Number[] arr = new Integer[10];\narr[0] = 1.0;\n</code></p>\n<p>Consider changing the type of created array or the local variable type.</p>"},{"summary":"Bad practice - Method may fail to close stream","type":"Code Smell","defaultSeverity":"Major","description":"<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods that might close it,\nor return it, and does not appear to close\nthe stream on all paths out of the method.&nbsp; This may result in\na file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>","debt":"1h"},{"summary":"I18n - Consider using Locale parameterized version of invoked method","type":"Code Smell","defaultSeverity":"Info","description":"<p> A String is being converted to upper or lowercase, using the platform's default encoding. This may\n      result in improper conversions when used with international characters. Use the </p>\n      <ul>\n    <li>String.toUpperCase( Locale l )</li>\n    <li>String.toLowerCase( Locale l )</li>\n    </ul>\n      <p>versions instead.</p>","debt":"30min"},{"summary":"Bad practice - Rough value of known constant found","type":"Code Smell","defaultSeverity":"Major","description":"<p>It's recommended to use the predefined library constant for code clarity and better precision.</p>"},{"summary":"Correctness - Number of format-string arguments does not correspond to number of placeholders","type":"Bug","defaultSeverity":"Major","description":"<p>\nA format-string method with a variable number of arguments is called,\nbut the number of arguments passed does not match with the number of\n% placeholders in the format string.  This is probably not what the\nauthor intended.\n</p>","debt":"1h"},{"summary":"Bad practice - Don't reuse entry objects in iterators","type":"Code Smell","defaultSeverity":"Major","description":"<p> The entrySet() method is allowed to return a view of the\n     underlying Map in which an Iterator and Map.Entry. This clever\n     idea was used in several Map implementations, but introduces the possibility\n     of nasty coding mistakes. If a map <code>m</code> returns\n     such an iterator for an entrySet, then\n     <code>c.addAll(m.entrySet())</code> will go badly wrong. All of\n     the Map implementations in OpenJDK 1.7 have been rewritten to avoid this,\n     you should to.\n    </p>","debt":"1h"},{"summary":"Bad practice - Class is not derived from an Exception, even though it is named as such","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class is not derived from another exception, but ends with 'Exception'. This will\nbe confusing to users of this class.</p>","debt":"30min"},{"summary":"Bad practice - Don't use removeAll to clear a collection","type":"Code Smell","defaultSeverity":"Major","description":"<p> If you want to remove all elements from a collection <code>c</code>, use <code>c.clear</code>,\nnot <code>c.removeAll(c)</code>. Calling  <code>c.removeAll(c)</code> to clear a collection\nis less clear, susceptible to errors from typos, less efficient and\nfor some collections, might throw a <code>ConcurrentModificationException</code>.\n    </p>","debt":"1h"},{"summary":"Correctness - Store of null value into field annotated @Nonnull","type":"Bug","defaultSeverity":"Major","description":"<p> A value that could be null is stored into a field that has been annotated as @Nonnull. </p>","debt":"1h"},{"summary":"Multi-threading - Synchronization performed on util.concurrent instance","type":"Bug","defaultSeverity":"Major","description":"<p> This method performs synchronization an object that is an instance of\na class from the java.util.concurrent package (or its subclasses). Instances\nof these classes have their own concurrency control mechanisms that are orthogonal to\nthe synchronization provided by the Java keyword <code>synchronized</code>. For example,\nsynchronizing on an <code>AtomicBoolean</code> will not prevent other threads\nfrom modifying the  <code>AtomicBoolean</code>.</p>\n<p>Such code may be correct, but should be carefully reviewed and documented,\nand may confuse people who have to maintain the code at a later date.\n</p>"},{"summary":"Bad practice - Dubious catching of IllegalMonitorStateException","type":"Code Smell","defaultSeverity":"Major","description":"<p>IllegalMonitorStateException is generally only\n   thrown in case of a design flaw in your code (calling wait or\n   notify on an object you do not hold a lock on).</p>","debt":"1h"},{"summary":"Multi-threading - Synchronization on Boolean","type":"Bug","defaultSeverity":"Major","description":"<p> The code synchronizes on a boxed primitive constant, such as a Boolean.</p>\n<pre>\nprivate static Boolean inited = Boolean.FALSE;\n...\n  synchronized(inited) {\n    if (!inited) {\n       init();\n       inited = Boolean.TRUE;\n       }\n     }\n...\n</pre>\n<p>Since there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness\nand possible deadlock.</p>\n<p>See CERT <a href=\"https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused\">CON08-J. Do not synchronize on objects that may be reused</a> for more information.</p>","debt":"1h"},{"summary":"Multi-threading - Inconsistent synchronization","type":"Bug","defaultSeverity":"Major","description":"<p> The fields of this class appear to be accessed inconsistently with respect\n  to synchronization.&nbsp; This bug report indicates that the bug pattern detector\n  judged that\n  </p>\n  <ul>\n  <li> The class contains a mix of locked and unlocked accesses,</li>\n  <li> At least one locked access was performed by one of the class's own methods, and</li>\n  <li> The number of unsynchronized field accesses (reads and writes) was no more than\n       one third of all accesses, with writes being weighed twice as high as reads</li>\n  </ul>\n\n  <p> A typical bug matching this bug pattern is forgetting to synchronize\n  one of the methods in a class that is intended to be thread-safe.</p>\n\n  <p> Note that there are various sources of inaccuracy in this detector;\n  for example, the detector cannot statically detect all situations in which\n  a lock is held.&nbsp; Also, even when the detector is accurate in\n  distinguishing locked vs. unlocked accesses, the code in question may still\n  be correct.</p>","debt":"1h"},{"summary":"Style - Class doesn't override equals in superclass","type":"Code Smell","defaultSeverity":"Info","description":"<p> This class extends a class that defines an equals method and adds fields, but doesn't\ndefine an equals method itself. Thus, equality on instances of this class will\nignore the identity of the subclass and the added fields. Be sure this is what is intended,\nand that you don't need to override the equals method. Even if you don't need to override\nthe equals method, consider overriding it anyway to document the fact\nthat the equals method for the subclass just return the result of\ninvoking super.equals(o).\n  </p>","debt":"1h"},{"summary":"Bad practice - Superclass uses subclass during initialization","type":"Code Smell","defaultSeverity":"Major","description":"<p> During the initialization of a class, the class makes an active use of a subclass.\nThat subclass will not yet be initialized at the time of this use.\nFor example, in the following code, <code>foo</code> will be null.</p>\n\n<pre>\npublic class CircularClassInitialization {\n    static class InnerClassSingleton extends CircularClassInitialization {\n        static InnerClassSingleton singleton = new InnerClassSingleton();\n    }\n\n    static CircularClassInitialization foo = InnerClassSingleton.singleton;\n}\n</pre>","debt":"1h"},{"summary":"Style - Vacuous comparison of integer value","type":"Code Smell","defaultSeverity":"Info","description":"<p> There is an integer comparison that always returns\nthe same value (e.g., x &lt;= Integer.MAX_VALUE).\n</p>","debt":"5h"},{"summary":"Multi-threading - Return value of putIfAbsent ignored, value passed to putIfAbsent reused","type":"Bug","defaultSeverity":"Major","description":"The <code>putIfAbsent</code> method is typically used to ensure that a\n        single value is associated with a given key (the first value for which put\n        if absent succeeds).\n        If you ignore the return value and retain a reference to the value passed in,\n        you run the risk of retaining a value that is not the one that is associated with the key in the map.\n        If it matters which one you use and you use the one that isn't stored in the map,\n        your program will behave incorrectly.","debt":"1h"},{"summary":"Performance - Method calls static Math class method on a constant value","type":"Bug","defaultSeverity":"Major","description":"<p> This method uses a static method from java.lang.Math on a constant value. This method's\nresult in this case, can be determined statically, and is faster and sometimes more accurate to\njust use the constant. Methods detected are:\n</p>\n<table>\n<tr>\n   <th>Method</th> <th>Parameter</th>\n</tr>\n<tr>\n   <td>abs</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>acos</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>asin</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>atan</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>atan2</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>cbrt</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>ceil</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>cos</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>cosh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>exp</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>expm1</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>floor</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>log</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>log10</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>rint</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>round</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>sin</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>sinh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>sqrt</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>tan</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>tanh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>toDegrees</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>toRadians</td> <td>0.0</td>\n</tr>\n</table>","debt":"30min"},{"summary":"Bad practice - Class implements Cloneable but does not define or use clone method","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n   Class implements Cloneable but does not define or\n   use the clone method.</p>","debt":"1h"},{"summary":"Style - Method tightens nullness annotation on parameter","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n        A method should always implement the contract of a method it overrides. Thus, if a method takes a parameter\n    that is marked as @Nullable, you shouldn't override that method in a subclass with a method where that parameter is @Nonnull.\n    Doing so violates the contract that the method should handle a null parameter.\n        </p>","debt":"15min"},{"summary":"Bad practice - Equals method should not assume anything about the type of its argument","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nThe <code>equals(Object o)</code> method shouldn't make any assumptions\nabout the type of <code>o</code>. It should simply return\nfalse if <code>o</code> is not the same type as <code>this</code>.\n</p>","debt":"1h"},{"summary":"Style - Private readResolve method not inherited by subclasses","type":"Code Smell","defaultSeverity":"Info","description":"<p> This class defines a private readResolve method. Since it is private, it won't be inherited by subclasses.\nThis might be intentional and OK, but should be reviewed to ensure it is what is intended.\n</p>","debt":"5h"},{"summary":"Bad practice - Finalizer nullifies superclass finalizer","type":"Code Smell","defaultSeverity":"Major","description":"<p> This empty <code>finalize()</code> method explicitly negates the\n  effect of any finalizer defined by its superclass.&nbsp; Any finalizer\n  actions defined for the superclass will not be performed.&nbsp;\n  Unless this is intended, delete this method.</p>","debt":"30min"},{"summary":"Style - Immediate dereference of the result of readLine()","type":"Code Smell","defaultSeverity":"Info","description":"<p> The result of invoking readLine() is immediately dereferenced. If there are no more lines of text\nto read, readLine() will return null and dereferencing that will generate a null pointer exception.\n</p>","debt":"1h"},{"summary":"Correctness - Null value is guaranteed to be dereferenced","type":"Bug","defaultSeverity":"Major","description":"<p>\n              There is a statement or branch that if executed guarantees that\n              a value is null at this point, and that\n              value that is guaranteed to be dereferenced\n              (except on forward paths involving runtime exceptions).\n              </p>\n        <p>Note that a check such as\n            <code>if (x == null) throw new NullPointerException();</code>\n            is treated as a dereference of <code>x</code>.</p>","debt":"1h"},{"summary":"Correctness - Self comparison of field with itself","type":"Bug","defaultSeverity":"Major","description":"<p> This method compares a field with itself, and may indicate a typo or\na logic error.  Make sure that you are comparing the right things.\n</p>","debt":"1h"},{"summary":"Malicious code - May expose internal representation by incorporating reference to mutable object","type":"Code Smell","defaultSeverity":"Info","description":"<p> This code stores a reference to an externally mutable object into the\n  internal representation of the object.&nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.</p>","debt":"30min"},{"summary":"Multi-threading - Condition.await() not in loop","type":"Bug","defaultSeverity":"Major","description":"<p> This method contains a call to <code>java.util.concurrent.await()</code>\n   (or variants)\n  which is not in a loop.&nbsp; If the object is used for multiple conditions,\n  the condition the caller intended to wait for might not be the one\n  that actually occurred.</p>","debt":"1h"},{"summary":"Correctness - equals method overrides equals in superclass and may not be symmetric","type":"Bug","defaultSeverity":"Major","description":"<p> This class defines an equals method that overrides an equals method in a superclass. Both equals methods\nmethods use <code>instanceof</code> in the determination of whether two objects are equal. This is fraught with peril,\nsince it is important that the equals method is symmetrical (in other words, <code>a.equals(b) == b.equals(a)</code>).\nIf B is a subtype of A, and A's equals method checks that the argument is an instanceof A, and B's equals method\nchecks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these\nmethods is not symmetric.\n</p>","debt":"1h"},{"summary":"Correctness - Exception created and dropped rather than thrown","type":"Bug","defaultSeverity":"Major","description":"<p> This code creates an exception (or error) object, but doesn't do anything with it. For example,\nsomething like </p>\n<blockquote>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n</blockquote>\n<p>It was probably the intent of the programmer to throw the created exception:</p>\n<blockquote>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n</blockquote>","debt":"1h"},{"summary":"Bad practice - serialVersionUID isn't static","type":"Code Smell","defaultSeverity":"Major","description":"<p> This class defines a <code>serialVersionUID</code> field that is not static.&nbsp;\n  The field should be made static\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>","debt":"30min"},{"summary":"Style - Unusual equals method","type":"Code Smell","defaultSeverity":"Info","description":"<p> This class doesn't do any of the patterns we recognize for checking that the type of the argument\nis compatible with the type of the <code>this</code> object. There might not be anything wrong with\nthis code, but it is worth reviewing.\n</p>","debt":"5h"},{"summary":"Correctness - Signature declares use of unhashable class in hashed construct","type":"Bug","defaultSeverity":"Major","description":"<p> A method, field or class declares a generic signature where a non-hashable class\nis used in context where a hashable class is required.\nA class that declares an equals method but inherits a hashCode() method\nfrom Object is unhashable, since it doesn't fulfill the requirement that\nequal objects have equal hashCodes.\n</p>","debt":"1h"},{"summary":"Correctness - No previous argument for format string","type":"Bug","defaultSeverity":"Major","description":"<p>\nThe format string specifies a relative index to request that the argument for the previous format specifier\nbe reused. However, there is no previous argument.\nFor example,\n</p>\n<p><code>formatter.format(\"%&lt;s %s\", \"a\", \"b\")</code>\n</p>\n<p>would throw a MissingFormatArgumentException when executed.\n</p>","debt":"1h"},{"summary":"Correctness - Bad comparison of int value with long constant","type":"Bug","defaultSeverity":"Major","description":"<p> This code compares an int value with a long constant that is outside\nthe range of values that can be represented as an int value.\nThis comparison is vacuous and possibly to be incorrect.\n</p>","debt":"30min"},{"summary":"Correctness - Uninitialized read of field in constructor","type":"Bug","defaultSeverity":"Major","description":"<p> This constructor reads a field which has not yet been assigned a value.&nbsp;\n  This is often caused when the programmer mistakenly uses the field instead\n  of one of the constructor's parameters.</p>","debt":"30min"},{"summary":"Performance - Boxing a primitive to compare","type":"Bug","defaultSeverity":"Major","description":"<p>A boxed primitive is created just to call compareTo method. It's more efficient to use static compare method \n  (for double and float since Java 1.4, for other primitive types since Java 1.7) which works on primitives directly.\n  </p>","debt":"5min"},{"summary":"Correctness - Class makes reference to unresolvable class or method","type":"Bug","defaultSeverity":"Major","description":"<p>\n      This class makes a reference to a class or method that can not be\n    resolved using against the libraries it is being analyzed with.\n      </p>"},{"summary":"Malicious code - Field should be package protected","type":"Code Smell","defaultSeverity":"Info","description":"<p> A mutable static field could be changed by malicious code or\n   by accident.\n   The field could be made package protected to avoid\n   this vulnerability.</p>","debt":"30min"},{"summary":"Experimental - Method may fail to clean up stream or resource","type":"Code Smell","defaultSeverity":"Info","description":"<p>\n          This method may fail to clean up (close, dispose of) a stream,\n          database object, or other\n          resource requiring an explicit cleanup operation.\n          </p>\n\n          <p>\n          In general, if a method opens a stream or other resource,\n          the method should use a try/finally block to ensure that\n          the stream or resource is cleaned up before the method\n          returns.\n          </p>\n\n          <p>\n          This bug pattern is essentially the same as the\n          OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE\n          bug patterns, but is based on a different\n          (and hopefully better) static analysis technique.\n          We are interested is getting feedback about the\n          usefulness of this bug pattern.\n          To send feedback:\n          </p>\n          <ul>\n            <li>file an issue: <a href=\"https://github.com/spotbugs/spotbugs/issues\">https://github.com/spotbugs/spotbugs/issues</a></li>\n          </ul>\n\n          <p>\n          In particular,\n          the false-positive suppression heuristics for this\n          bug pattern have not been extensively tuned, so\n          reports about false positives are helpful to us.\n          </p>\n\n          <p>\n          See Weimer and Necula, <i>Finding and Preventing Run-Time Error Handling Mistakes</i>, for\n          a description of the analysis technique.\n          </p>","debt":"3h"},{"summary":"Multi-threading - Using notify() rather than notifyAll()","type":"Bug","defaultSeverity":"Major","description":"<p> This method calls <code>notify()</code> rather than <code>notifyAll()</code>.&nbsp;\n  Java monitors are often used for multiple conditions.&nbsp; Calling <code>notify()</code>\n  only wakes up one thread, meaning that the thread woken up might not be the\n  one waiting for the condition that the caller just satisfied.</p>","debt":"1h"},{"summary":"Multi-threading - Synchronization on field in futile attempt to guard that field","type":"Bug","defaultSeverity":"Major","description":"<p> This method synchronizes on a field in what appears to be an attempt\nto guard against simultaneous updates to that field. But guarding a field\ngets a lock on the referenced object, not on the field. This may not\nprovide the mutual exclusion you need, and other threads might\nbe obtaining locks on the referenced objects (for other purposes). An example\nof this pattern would be:</p>\n<pre>\nprivate Long myNtfSeqNbrCounter = new Long(0);\nprivate Long getNotificationSequenceNumber() {\n     Long result = null;\n     synchronized(myNtfSeqNbrCounter) {\n         result = new Long(myNtfSeqNbrCounter.longValue() + 1);\n         myNtfSeqNbrCounter = new Long(result.longValue());\n     }\n     return result;\n }\n</pre>","debt":"1h"},{"summary":"Correctness - Method passes appended string to title/label of component","type":"Bug","defaultSeverity":"Major","description":"<p>This method creates a component and passes a string that was built up from a number of\n\t\t\tstrings through appending multiple strings together. As foreign languages may order phrases\n\t\t\tdifferently, this will make translations difficult.</p>"},{"summary":"Performance - Method uses backported libraries that are now built in","type":"Bug","defaultSeverity":"Major","description":"<p>This class uses either Backport Utils concurrent classes from Emory, or Time classes from ThreeTen Backport. \n\t\t\tUpdated/Efficient version of these classes are available in the version of the JDK that this code is compiled against; \n\t\t\tJDK 1.5 for the concurrent classes, and JDK 1.8 for the time classes, and these\n\t\t\tclasses should only be used if you are targeting a JDK lower than this.</p>"},{"summary":"Correctness - Serializable class defines a final transient field","type":"Bug","defaultSeverity":"Major","description":"<p>This serializable class defines a field as both transient and final. As transient fields\n\t\t\tare not serialized across the stream, it is required that some piece of code reinitialize that field\n\t\t\twhen it is deserialized. But since constructors aren't called when deserializing, the field is not initialized.\n\t\t\tAnd since the field is final, no other method can initialize it as well.</p>"},{"summary":"Style - Class does not implement a toString method","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class, which has instance fields, has no toString() method which will make debugging with this\n    \t\tclass more difficult than it could be. Consider adding a toString() method. Using libraries like commons-lang3 \n    \t\tToStringBuilder makes this process easy.\n    \t\t</p>"},{"summary":"Multi-threading - Method tests if a lock is locked","type":"Bug","defaultSeverity":"Major","description":"<p>Calling <code>ReentrantLock.isLocked()</code> or <code>ReentrantLock.isHeldByCurrentThread()</code> might indicate race conditions or incorrect locking. These methods are designed for use in debug code or monitoring of the system state, not for synchronization control.</p>"},{"summary":"Correctness - Method calls wait when await was probably intended","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls wait() on a on mutex defined in the java.util.concurrent package.\n\t\t\tThese classes, define await, instead of wait, and it is most likely that await\n\t\t\twas intended.</p>"},{"summary":"Style - Method throws exception with static message string","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method creates and throws an exception using a static string as the exceptions message.\n\t\t\tWithout any specific context of this particular exception invocation, such as the value of parameters,\n\t\t\tkey member variables, or local variables, it may be difficult to infer how this exception occurred. Consider\n\t\t\tadding context to the exception message.</p>"},{"summary":"Style - Method calls keySet() just to call contains, use containsKey instead","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method calls mySet.keySet().contains(\"foo\") when mySet.containsKey(\"foo\") is simpler.</p>"},{"summary":"Style - Method uses instanceof on multiple types to arbitrate logic","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method uses the instanceof operator in a series of if/else statements to\n\t\t\tdifferentiate blocks of code based on type. If these types are related by inheritance,\n\t\t\tit is cleaner to just define a method in the base class, and use overridden methods\n\t\t\tin these classes.</p>"},{"summary":"Multi-threading - Method uses suspicious thread priorities","type":"Bug","defaultSeverity":"Major","description":"<p>Getting or setting thread priorities is not portable and could cause or mask race conditions.</p>"},{"summary":"Style - Method checks the size of a collection against zero rather than using isEmpty()","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method calls the size() method on a collection and compares the result to zero to see if the collection\n\t\t\tis empty. For better code clarity, it is better to just use col.isEmpty() or !col.isEmpty().</p>"},{"summary":"Correctness - Method passes constant string to title/label of component","type":"Bug","defaultSeverity":"Major","description":"<p>This method creates a component and passes a string literal to the title or label\n\t\t\tof the component. As this string will be shown to users, it should be internationalizable\n\t\t\tthrough the use of a resource bundle.</p>"},{"summary":"Performance - Method converts StringBuffer or Builder to String just to get its length","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls the toString method on a StringBuffer or StringBuilder only to call length() on the resulting\n\t\t\tstring. It is faster, and less memory intensive to just call the length method directly on the StringBuffer or StringBuilder\n\t\t\titself.</p>"},{"summary":"Correctness - Method calls InetAddress.getLocalHost()","type":"Bug","defaultSeverity":"Major","description":"<p>Do not call <code>InetAddress.getLocalHost()</code> on multihomed servers. On a multihomed server, \n\t\t\t<code>InetAddress.getLocalHost()</code> simply returns the IP address associated with the server's internal hostname. \n\t\t\tThis could be any of the network interfaces, which could expose the machine to security risks. Server applications \n\t\t\tthat need to listen on sockets should add configurable properties to define which network interfaces the server should bind.</p>"},{"summary":"Correctness - Method throws alternative exception from catch block without history","type":"Bug","defaultSeverity":"Major","description":"<p>This method catches an exception, and throws a different exception, without incorporating the\n\t\t\toriginal exception. Doing so hides the original source of the exception making debugging and fixing\n\t\t\tthese problems difficult. It is better to use the constructor of this new exception that takes an\n\t\t\toriginal exception so that this detail can be passed along to the user. If this exception has no constructor\n\t\t\tthat takes an initial cause parameter, use the initCause method to initialize it instead.</p>\n\t\t\t<p>\n<pre><code>\ncatch (IOException e) {\n    throw new MySpecialException(\"Failed to open configuration\", e);\n}\n</code></pre>\n\t\t\t</p>"},{"summary":"Style - Method stacks similar try/catch blocks","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method declares two try catch blocks one after another, where each\n\t\t\tcatch block catches the same type of exception. They also throw uniformly the\n\t\t\tsame type of exception. These two catch blocks can be combined into one to\n\t\t\tsimplify the method.</p>"},{"summary":"Performance - Class uses an ordinary set or map with an enum class as the key","type":"Bug","defaultSeverity":"Major","description":"<p>This class uses an ordinary set or map collection and uses an enum class as the key type.\n\t\t\tIt is more performant to use the JDK 1.5 EnumSet or EnumMap classes.</p>"},{"summary":"Correctness - Equals method compares this object against other types in a non symmetric way","type":"Bug","defaultSeverity":"Major","description":"<p>This class implements an equals method that compares this object against another type of object.\n\t\t\tThis is almost always a bad thing to do, but if it is to be done, you must make sure that the basic\n\t\t\tsymmetry rule of equivalence is maintained, that being if a equals b, then b equals a. It does not\n\t\t\tappear that the class that is being compared to this class knows about this class, and doesn't compare itself\n\t\t\tto this.</p>\n\t\t\t<p>\n\t\t\tHere's an example of a BAD equals method, do NOT do this:\n<pre><code>\nclass Person {\n    public boolean equals(Object o) {\n        if (o instanceof Person) {\n            return name.equals(((Person) o).name);\n        } else if (o instanceof String) {\n            return name.equals(o);\n        }\n        return false;\n    }\n}\n</code></pre>\n\t\t\t</p>"},{"summary":"Correctness - Method creates insecure Random object","type":"Bug","defaultSeverity":"Major","description":"<p><code>Random()</code> constructor without a seed is insecure because it defaults to an easily guessable seed: \n\t\t\t<code>System.currentTimeMillis()</code>. Initialize a seed like <code>new Random(SecureRandom.getInstance(\"SHA1PRNG\").nextLong())</code> \n\t\t\tor replace <code>Random()</code> with <code>SecureRandom.getInstance(\"SHA1PRNG\")</code> instead.\n\t\t\t\"SHA1PRNG\" is the random algorithm supported on all platforms.\n\t\t</p>\n\n\t\t\t<p>\n\t\t\t\tAs of Java 6, you may use <code>new Random(new SecureRandom().nextLong())</code> or <code>new SecureRandom()</code> instead.\n\t\t\t</p>"},{"summary":"Correctness - Method declares handling a transactional exception that won't be thrown","type":"Bug","defaultSeverity":"Major","description":"<p>This method declares that it either rolls back or does not rollback a transaction based on an\n    \t\texpected exception being thrown. However, neither this exception, nor any derived exceptions can be thrown\n    \t\tfrom this method, and so the annotation is useless.</p>"},{"summary":"Style - Simple field is used like an enum","type":"Code Smell","defaultSeverity":"Info","description":"<p>This field, although defined as a simple variable (int, String, etc) only has a set of constant values\n\t       assigned to it. Thus it appears to be used like an enum value, and should probably be defined as such.\n\t       </p>"},{"summary":"Performance - Method passes simple concatenating string in StringBuffer or StringBuilder append","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses <code>StringBuffer</code> or <code>StringBuilder</code>'s append method to concatenate strings. However, it passes the result\n\t\t\tof doing a simple String concatenation to one of these append calls, thus removing any performance gains\n\t\t\tof using the <code>StringBuffer</code> or <code>StringBuilder</code> class.</p>\n\t\t\t\n\t\t\t<p>\n\t\t\tJava will implicitly use StringBuilders, which can make this hard to detect or fix.  For example, <br/>\n<pre><code>\nStringBuilder sb = new StringBuilder();\nfor (Map.Entry<Integer, String> e : map.entrySet()) {\n    sb.append(e.getKey() + e.getValue());\t\t//bug detected here\n}\n</code></pre><br/>\n\t\t\t\n\t\t\tgets automatically turned into something like: <br/>\n<pre><code>\nStringBuilder sb = new StringBuilder();\nfor (Map.Entry<Integer, String> e : map.entrySet()) {\n    StringBuilder tempBuilder = new StringBuilder();\n    tempBuilder.append(e.getKey());\n    tempBuilder.append(e.getValue());\n    <b>sb.append(tempBuilder.toString());</b>\t\t//this isn't too efficient\n}\n</code></pre><br/>\n\t\t\t\n\t\t\twhich involves a temporary <code>StringBuilder</code>, which is completely unnecessary.  To prevent this from happening, simply do:<br/>\n\t\t\t\n<pre><code>\nStringBuilder sb = new StringBuilder();\nfor (Map.Entry<Integer, String> e : map.entrySet()) {\n    sb.append(e.getKey());\n    sb.append(e.getValue());\n}\n</code></pre>\n\t\t\t</p>"},{"summary":"Correctness - Method checks whether the keySet(), entrySet() or values() collection of a Map is null","type":"Bug","defaultSeverity":"Major","description":"This method checks to see if the return value from a keySet(), entrySet() or values() method call on a Map is null.\n\t\t\tFor any valid functioning Map these collections will always be non-null, and so the call is superfluous. Maybe you intended\n\t\t\tto check whether those sets where empty() instead."},{"summary":"Style - Method uses old non collections interface methods","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method makes calls to collection classes where the method is not defined by the Collections\n\t\t\tinterface, and an equivalent method exists in the interface. By using the new methods,\n\t\t\tyou can define this object by the Collections interface and allow better decoupling.</p>"},{"summary":"Style - This method uses an excessively complex conditional that can be replaced with Set.contains","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method uses an overly complex if expression made up of multiple conditions joined by OR, where the same\n    \t\tlocal variable is compared to a static value. When the number of conditions grows, it is much cleaner\n    \t\tto build a static set of the possible values, and use the contains method on that set. This will\n    \t\tshorten the code, and make it more self documenting.</p>"},{"summary":"Style - This method is declared more permissively than is used in the code base","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method is declared more permissively than the code is using. Having this method be more\n\t\t\tpermissive than is needed limits your ability to make observations about this method, like\n    \t\tparameter usage, refactorability, and derivability. It is possible that this detector will report \n    \t\terroneously if:\n    \t\t<ul>\n    \t\t\t<li>The method is called from code not being scanned, such as unit tests</li>\n\t\t\t\t<li>The method is an API method, expected to be used by unknown client code</li>\n    \t\t\t<li>The method is called through reflection\n    \t\t</ul>\t\n    \t\t</p>"},{"summary":"Correctness - JUnit test method passes null Assert.assertEquals","type":"Bug","defaultSeverity":"Major","description":"<p>This method compares an object's equality to null. It is better to use the Assert.assertNull\n\t\t\tmethod so that the JUnit failure method is more meaningful of the intended test.</p>"},{"summary":"Style - Class is defined in the default package","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class has been created in the default package. Classes should be defined in a \n    \t\tproper package structure, typically defined by the reverse of the domain name of the \n    \t\towner of the code base. Putting code in the default (no) package limits its usefulness, including:\n    \t\t<ol>\n    \t\t<li>Not being able to import this class into classes with packages</li>\n    \t\t<li>Leaving it open to name collisions with other packages.</li>\n    \t\t</ol>\n    \t\t</p>"},{"summary":"Multi-threading - Method ignores Lock's fairness settings by calling tryLock()","type":"Bug","defaultSeverity":"Major","description":"<p>Calling <code>Lock.tryLock()</code> or <code>ReentrantLock.tryLock()</code> without a timeout does not honor the lock's fairness setting. If you want to honor the fairness setting for this lock, then use <code>tryLock(0, TimeUnit.SECONDS)</code> which is almost equivalent (it also detects interruption).</p>"},{"summary":"Correctness - Method modifies an http session attribute without calling setAttribute","type":"Bug","defaultSeverity":"Major","description":"<p>This method fetches a complex object from an HttpSession object, modifies this object, but does\n\t\t\tnot call setAttribute, to inform the application server that this attribute has been changed. This will\n\t\t\tcause this attribute not to be updated in other servers in a clustered environment, as only changes marked\n\t\t\tby a call to setAttribute are replicated.</p>"},{"summary":"Correctness - Class defines fields that are used only as locals","type":"Bug","defaultSeverity":"Major","description":"<p>This class defines fields that are used in a locals only fashion,\n\t\t\tspecifically private fields or protected fields in final classes that are accessed\n\t\t\tfirst in each method with a store vs. a load. This field could be replaced by one\n\t\t\tor more local variables.</p>"},{"summary":"Correctness - This method attempts to modify collection that appears to possibly be immutable","type":"Bug","defaultSeverity":"Major","description":"<p>This method attempts to modify a collection that it got from a source that could potentially have created an\n            immutable collection, through Arrays.asList, Collections.unmodifiableXXX, or one of Guava's methods. Doing so will cause\n            an exception, as these collections are not mutable.</p>"},{"summary":"Performance - Method converts String to boxed primitive using excessive boxing","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes a String to a wrapped primitive object's parse method, which in turn calls\n\t\t\tthe valueOf() method to convert to a boxed primitive. When it is desired to convert from a String\n\t\t\tto a boxed primitive object, it is simpler to use the BoxedPrimitive.valueOf(String) method.</p>\n\t\t\t\n\t\t\t<p>Instead of something like:<br/>\n<pre><code>\nBoolean bo = Boolean.valueOf(Boolean.parseBoolean(\"true\"));\nFloat f = Float.valueOf(Float.parseFloat(\"1.234\"));\n</code></pre>\n\t\t\tSimply do: <br/>\n<pre><code>\nBoolean bo = Boolean.valueOf(\"true\");\nFloat f = Float.valueOf(\"1.234\");\n</code></pre>\n\t\t\t</p>"},{"summary":"Style - Method trims a String temporarily","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method calls trim() on a String without assigning the new string to another variable.\n\t\t\tIt then calls length() or equals() on this trimmed string. If trimming the string was important\n\t\t\tfor determining its length or its equality, it should be trimmed when you actually go to use it.\n\t\t\tIt would make more sense to first trim the String, store the trimmed value in a variable, and then\n\t\t\tcontinue to test and use that trimmed string.</p>"},{"summary":"Correctness - Method does not pass an object to commons-lang's ToStringBuilder","type":"Bug","defaultSeverity":"Major","description":"This method uses commons-lang, or commons-lang3's ToStringBuilder to attempt to output a representation of an object.\n\t\t\tHowever, no object was passed, just the style specifier, and so the output will be of the ToStringStyle object itself.\n\t\t\tDon't forget to include the object you wish to output as the first parameter, such as\n\t\t\t<pre>\n\t\t\tToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);\n\t\t\t</pre>"},{"summary":"Correctness - Method creates iterators on synchronized collections","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses a synchronized collection, built from Collections.synchronizedXXXX, but accesses it\n\t\t\tthrough an iterator. Since an iterator is, by definition, multithreaded unsafe, this is a conflict in\n\t\t\tconcept. When using iterators, you should do the synchronization manually.</p>"},{"summary":"Correctness - TestNG test method asserts that an autoboxed value is not null","type":"Bug","defaultSeverity":"Critical","description":"<p>This method asserts that a primitive value that was autoboxed into a boxed primitive was not\n\t\t\tnull. This will never happen, as primitives are never null, and thus the autoboxed value isn't\n\t\t\teither.</p>"},{"summary":"Correctness - Method calls equals on an enum instance","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls the equals(Object) method on an enum instance. Since enums values are singletons,\n\t\t\tyou can use == to safely compare two enum values. In fact, the implementation for Enum.equals does just\n\t\t\tthat.</p>"},{"summary":"Multi-threading - Method calls wait, notify or notifyAll on a Thread instance","type":"Bug","defaultSeverity":"Major","description":"<p>This method invokes the methods wait, notify or notifyAll on a Thread instance.\n\t\t\tDoing so will confuse the internal thread state behavior causing spurious thread\n\t\t\twakeups/sleeps because the internal mechanism also uses the thread instance for its\n\t\t\tnotifications.</p>"},{"summary":"Style - Class defines a serialVersionUID as non private","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class defines a static field 'serialVersionUID' to define the serialization\n\t\t\tversion for this class. This field is marked as non private. As the serialVersionUID only\n\t\t\tcontrols the current class, and doesn't affect any derived classes, defining it as non\n\t\t\tprivate is confusing. It is suggested you change this variable to be private.</p>"},{"summary":"Style - Method buries logic to the right (indented) more than it needs to be","type":"Code Smell","defaultSeverity":"Info","description":"<p>Looks for relatively large if blocks of code, where you unconditionally return from them, and then follow that with an unconditional \n    \t\treturn of a small block. This places the bulk of the logic to the right indentation-wise, making it more difficult to read than needed. \n    \t\tIt would be better to invert the logic of the if block, and immediately return, allowing the bulk of the logic to be move to the left \n    \t\tfor easier reading.</p>"},{"summary":"Style - Class uses non owned variables to synchronize on","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method uses a synchronize block where the object that is being synchronized on,\n\t\t\tis not owned by this current instance. This means that other instances may use this same\n\t\t\tobject for synchronization for their own purposes, causing synchronization confusion. It is\n\t\t\talways cleaner and safer to only synchronize on private fields of this class. Note that 'this'\n\t\t\tis not owned by the current instance, but is owned by whomever assigns it to a field of its\n\t\t\tclass. Synchronizing on 'this' is also not a good idea.</p>"},{"summary":"Correctness - Method calls BigDecimal.equals()","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls <code>equals()</code> to compare two <code>java.math.BigDecimal</code> numbers. \n\t\t\tThis is normally a mistake, as two <code>BigDecimal</code> objects are only equal if they are \n\t\t\tequal in both value and scale, so that <i>2.0</i> is not equal to <i>2.00</i>. \n\t\t\tTo compare <code>BigDecimal</code> objects for mathematical equality, use <code>compareTo()</code> instead.</p>"},{"summary":"Performance - Method performs bulk stream copy with a java.io.Reader derived input","type":"Bug","defaultSeverity":"Major","description":"<p>This method copies data from a java.io.Reader derived class to an output class, using a bulk copy method\n    \t\tsupplied by java.nio, commons-io, springframework, guava or poi. Since you are copying the entire stream, you\n    \t\tdon't care about its contents, and thus using a Reader is wasteful as a reader has to do the hard work of\n    \t\tconverting byte data to characters, when there is no need to do this. Use stream based inputs for better performance.</p>"},{"summary":"Style - Method calls getProperties just to get one property, use getProperty instead","type":"Code Smell","defaultSeverity":"Info","description":"<table>\n\t\t\t\t<tr><td>This method uses</td></tr>\n\t\t\t\t<tr><td>String prop = System.getProperties().getProperty(\"foo\");</td></tr>\n\t\t\t\t<tr><td>instead of simply using</td></tr>\n\t\t\t\t<tr><td>String prop = System.getProperty(\"foo\");</td></tr>\n\t\t\t</table>"},{"summary":"Correctness - Unreleased HttpRequest network resources (local)","type":"Bug","defaultSeverity":"Major","description":"<p>FindBugs has detected an <code>org.apache.http.HttpRequest</code> (e.g. <code>HttpGet</code>, <code>HttpPost</code>, etc)\n\t\t\t\tthat didn't release its associated resources.  Code like the following: <br/>\n<pre><code>\npublic String requestInfo(URI u) {\n    HttpGet httpGet = new HttpGet(u);\n    try(CloseableHttpResponse response = client.execute(httpGet);) {\n        return getResponseAsString(response);\n    }\n    catch (IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n</code></pre>\n\t\t\t\twill freeze after a few requests, usually with no indication as to why. </p>\n\t\t\t\t\n\t\t\t<p>\n\t\t\t\tThe reason this code freezes is because <code>org.apache.http.HttpRequest</code>s need to explicitly release their connection\n\t\t\t\twith a call to either <code>reset()</code> or <code>releaseConnection()</code>, <b>even if the request is a local</b>. \n\t\t\t\tThe garbage collector will not release these resources, leading to the frustrating freezing scenario described above.\n\t\t\t\t\n\t\t\t\t<br/>The above example can be easily fixed:<br/>\n<pre><code>\npublic String requestInfo(URI u) {\n    HttpGet httpGet = new HttpGet(u);\n    try(CloseableHttpResponse response = client.execute(httpGet);) {\n        return getResponseAsString(response);\n    }\n    catch (IOException e) {\n        e.printStackTrace();\n    }\n    <b>finally {\n        httpGet.reset();\n    }</b>\n    return null;\n}\n</code></pre>\n\t\t\t</p>"},{"summary":"Correctness - Method appears to pass character to StringBuffer or StringBuilder integer constructor","type":"Bug","defaultSeverity":"Major","description":"<p>This method constructs a StringBuffer or a StringBuilder using the constructor that takes an integer, but\n\t\t\tappears to pass a character instead. It is probable that the author assumed that character would be appended to the\n\t\t\tStringBuffer/Builder, but instead the integer value of the character is used as an initial size for the buffer.</p>"},{"summary":"Correctness - Method uses same bean's getter value for setter","type":"Bug","defaultSeverity":"Major","description":"<p>This method retrieves the property of a Java bean, only to use it in the setter\n\t\t\tfor the same property of the same bean. This is usually a copy/paste typo.</p>"},{"summary":"Style - Class does not implement a hashCode method","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class which has instance fields has no hashCode() method. It is possible that this\n    \t\tclass is never used in a context where this is required; it is often assumed, however, from clients \n    \t\tof this class that it is, so it is good to add such methods when you create them.\n    \t\t</p>"},{"summary":"Style - Method manually handles closing an auto-closeable resource","type":"Code Smell","defaultSeverity":"Info","description":"[\n    \t\t<p>This method allocates and uses an auto closeable resources. However it manually closes the resource in a finally block.\n    \t\tWhile this is correct management, it doesn't rely on the Idiomatic way available to JDK 7 and above, and allows for possible\n    \t\tsubtle problems, and complicates the reading of code by developers expecting the use of try-with-resources. \n    \t\t</p>\n    \t\t<p>Switch to using try with resources, as:\n    \t\t<pre>\n    \t\t    try (InputStream is = getAStream()) {\n    \t\t        useTheStream(is);\n    \t\t    }\n    \t\t</pre>"},{"summary":"Style - Method returns null for Boolean type","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method declares that it returns a Boolean value. However, the code\n\t\t\tcan return a null value. As this is now three values that can be returned;\n\t\t\tBoolean.TRUE, Boolean.FALSE, null; you have changed what a Boolean means.\n\t\t\tIt would be clearer to just create a new Enum that has the three values\n\t\t\tyou want, and define that the method returns that type.</p>"},{"summary":"Correctness - Method creates exception with logger parameter markers in message","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes a standard exception as a logger parameter, and expects this exception to be substituted in\n\t        an SLF4J style parameter marker '{}'. This marker will not be translated as SLF4J doesn't process the Exception\n\t        class for markers.\n\t       </p>"},{"summary":"Correctness - Clone method stores a new value to member field of source object","type":"Bug","defaultSeverity":"Major","description":"<p>The clone method stores a value to a member field of the source object. Normally, all\n\t\t\tchanges are made to the cloned object, and given that cloning is almost always considered\n\t\t\ta read-only operation, this seems incorrect.</p>"},{"summary":"Style - Method accesses statically bound class with Class.forName","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method accesses the class object of a class that is already statically bound\n\t\t\tin this context, with Class.forName. Using Class.forName makes reflection more fragile\n\t\t\tin regards to code transformations such as obfuscation, and is unneeded here, since\n\t\t\tthe class in question is already 'linked' to this class.</p>"},{"summary":"Performance - Method orders expressions in a conditional in a sub optimal way","type":"Bug","defaultSeverity":"Major","description":"<p>This method builds a conditional expression, for example, in an if or while statement where the expressions contain both simple\n\t\t\tlocal variable comparisons, as well as comparisons on method calls. The expression orders these so that the method calls\n\t\t\tcome before the simple local variable comparisons. This causes method calls to be executed in conditions when they\n\t\t\tdo not need to be, and thus potentially causes a lot of code to be executed for nothing. By ordering the expressions so that\n\t\t\tthe simple conditions containing local variable conditions are first, you eliminate this waste. This assumes that the method\n\t\t\tcalls do not have side effects. If the method do have side effects, it is probably a better idea to pull these calls out of\n\t\t\tthe condition and execute them first, assigning a value to a local variable. In this way you give a hint that the call may have\n\t\t\tside effects.</p>\n\t\t\t<p>Example:\n<pre><code>\nif ((calculateHaltingProbability() &gt; 0) && shouldCalcHalting) { }\n</code></pre>\n\t\t\twould be better as\n<pre><code>\nif (shouldCalcHalting && (calculateHaltingProbability() &gt; 0) { }\n</code></pre>\n\t\t\t</p>"},{"summary":"Style - Method manually creates array from collection","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method manually loops over a collection, pulling each element out and storing\n\t\t\tit in an array to build an array from the collection. It is easier, and clearer to use\n\t\t\tthe built in collections method toArray. Given a collection 'mycollection' of type T, use\n\t\t\t<code>mycollection.toArray(new T[mycollection.size()]);</code></p>"},{"summary":"Correctness - Class extends JComponent but does not implement Accessible interface","type":"Bug","defaultSeverity":"Major","description":"<p>This class extends the JComponent GUI control but does not implement the Accessibility interface.\n\t\t\tThis makes this control unable to be processed by screen readers, etc, for people with reading/vision\n\t\t\tdifficulties.</p>"},{"summary":"Correctness - Method has abnormal exit from finally block","type":"Bug","defaultSeverity":"Major","description":"<p>This method returns or throws exceptions from a finally block. This will\n\t\t\tmask real program logic in the try block, and short-circuit normal method termination.</p>"},{"summary":"Correctness - Method defines parameters more abstractly than needed to function properly","type":"Bug","defaultSeverity":"Major","description":"<p>This method defines parameters at a more abstract level than is actually needed to function correctly,\n\t\t\tas the code casts these parameters to more concrete types. Since this method is not derivable, you should\n\t\t\tjust define the parameters with the type that is needed.</p>"},{"summary":"Correctness - Method uses reflection to call a method available on java.lang.Object","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses reflection to call a method that is defined in java.lang.Object.\n\t\t\tAs these methods are always available, it is not necessary to call these methods with\n\t\t\treflection.</p>"},{"summary":"Style - Empty method could be declared abstract","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method is empty or merely throws an exception. Since the class it is defined in is\n\t\t\tabstract, it may be more correct to define this method as abstract instead, so that proper\n\t\t\tsubclass behavior is enforced.</p>"},{"summary":"Performance - This method is too long to be compiled by the JIT","type":"Bug","defaultSeverity":"Major","description":"<p>This method is longer than 8000 bytes. By default the JIT will not attempt to compile this method no matter\n    \t\thow hot it is, and so this method will always be interpreted. If performance is important, you should consider\n    \t\tbreaking this method up into smaller chunks. (And probably a good idea for readability too!)</p>"},{"summary":"Multi-threading - Method attempts to manually schedule threads","type":"Bug","defaultSeverity":"Major","description":"<p>Manual thread scheduling with <code>Thread.sleep()</code> or <code>Thread.yield()</code> has no guaranteed semantics and is often used to mask race conditions.\n\t\t\tThese methods exist for supporting early processors when java was first released, and are not advised for modern processors. The operating system will take care\n\t\t\tof yielding threads for you.</p>"},{"summary":"Correctness - Window sets size manually, and doesn't use pack","type":"Bug","defaultSeverity":"Major","description":"<p>This class creates a window, and sizes the window using setSize. It is better,\n\t\t\tfor handling font size changes, to use the pack method.</p>"},{"summary":"Correctness - Method uses invalid C++ style null check on Boolean","type":"Bug","defaultSeverity":"Major","description":"<p>This method attempts to check for null by just referring to the variable name\n\t\t\tas would be done in C++. This ordinarily would be considered a compile error, except the\n\t\t\tvariable in question is a Boolean, which does an auto unbox to boolean.\n<pre><code>\nif (b && b.booleanValue())\n</code></pre>\n\t\t\tshould be<br/>\n<pre><code>\nif ((b != null) && b.booleanValue())\n</code></pre>\n\t\t\t</p>"},{"summary":"Performance - Class defines List based fields but uses them like Sets","type":"Bug","defaultSeverity":"Major","description":"<p>This class defines a field based on java.util.List, but uses it to some extent like a Set. Since\n\t\t\tlookup type operations are performed using a linear search for Lists, the performance for large\n\t\t\tLists will be poor. If the list is known to only contain a small number of items, (3, 4, etc) then it\n\t\t\tdoesn't matter. Otherwise, consider changing this field's implementation to a set-based one. If order of\n\t\t\titeration is important to maintain insert order, perhaps consider a LinkedHashSet.</p>"},{"summary":"Performance - Method copies arrays manually","type":"Bug","defaultSeverity":"Major","description":"<p>This method copies data from one array to another manually using a loop.\n\t\t\tIt is much better performing to use System.arraycopy as this method is native.</p>"},{"summary":"Style - Method uses IDE generated parameter names","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method appears to have been generated from an interface or superclass using an IDE.\n    \t\tAs such the IDE generated generic names (arg0, arg1, arg2) for parameters for this method,\n    \t\tand the author of this method did not change them to be meaningful. For better understandability\n    \t\tit is recommended that you name these parameters with regard to their function.</p>"},{"summary":"Correctness - Method passes a non calendar object to Calendar.before or Calendar.after","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes a non calendar object to the java.util.Calendar.after or java.util.Calendar.before methods.\n\t\t\tEven though these methods take an Object as a parameter type, only Calendar type objects are supported, otherwise\n\t\t\tfalse is returned.</p>"},{"summary":"Performance - Method executes SQL queries inside of loops","type":"Bug","defaultSeverity":"Major","description":"<p>This method executes SQL queries inside of a loop. This pattern is often inefficient\n\t\t\tas the number of queries may mushroom in fencepost cases. It is probably more performant\n\t\t\tto loop over the input and collect the key data needed for the query for all items, and\n\t\t\tissue one query using an in clause, or similar construct, and then loop over this result\n\t\t\tset, and fetch all the data at once.</p>"},{"summary":"Multi-threading - Method calls Locale.setDefault()","type":"Bug","defaultSeverity":"Major","description":"<p>Do not use the <code>Locale.setDefault()</code> method to change the default locale. It changes the JVM's default locale for all threads and makes your applications unsafe to threads. It does not affect the host locale. Since changing the JVM's default locale may affect many different areas of functionality, this method should only be used if the caller is prepared to reinitialize locale-sensitive code running within the same Java Virtual Machine, such as the user interface.</p>"},{"summary":"Correctness - JUnit test method appears to have no assertions","type":"Bug","defaultSeverity":"Major","description":"<p>This JUnit test method has no assertions. While a unit test could still be valid if it relies on whether\n\t\t\tor not an exception is thrown, it is usually a sign of a weak test if there are no assertions. It is also\n\t\t\tpossible that assertions occur in a called method that is not seen by this detector, but this makes the logic of \n\t\t\tthis test more difficult to reason about.</p>"},{"summary":"Correctness - JUnit test method passes null Assert.assertNotEquals","type":"Bug","defaultSeverity":"Major","description":"<p>This method compares an object's inequality to null. It is better to use the Assert.assertNotNull\n\t\t\tmethod so that the JUnit failure method is more meaningful of the intended test.</p>"},{"summary":"Correctness - Method uses non standard math constant","type":"Bug","defaultSeverity":"Major","description":"<p>This method defines its own version of <em>PI</em> or <em>e</em> and the value is not as precise as the\n\t\t\tone defined in the constants Math.PI or Math.E. Use these constants instead.</p>"},{"summary":"Performance - Method appears to call the same method on the same object redundantly","type":"Bug","defaultSeverity":"Major","description":"<p>This method makes two consecutive calls to the same method using the same constant\n\t\t\tparameters, on the same instance without any intervening changes to the objects. If this\n\t\t\tmethod does not make changes to the object, which it appears it doesn't, then making\n\t\t\ttwo calls is just a waste. These method calls could be combined by assigning the\n\t\t\tresult into a temporary variable, and using the variable the second time.</p>"},{"summary":"Correctness - This method accesses URL resources using the File API","type":"Bug","defaultSeverity":"Major","description":"<p>This method fetches a resource from a URL, and uses the File API to manipulate it. If this resource is a\n    \t\tclasspath resource, it will work if the resource is a file in a directory. If, however, the file is inside a JAR file\n    \t\tthis will fail. To avoid this confusing inconsistency, use the URL.openStream API instead to access the data of the classpath resource.\n    \t\t</p>"},{"summary":"Style - Method throws a java.lang.Exception that wraps a more useful exception","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method catches an exception and generates a new exception of type java.lang.Exception,\n\t\t\tpassing the original exception as the new Exception's cause.  If the original Exception was actually\n\t\t\ta java.lang.Error, this is dubious as you should not be handling errors. If the original exception\n\t\t\tis a more specific exception, there is no reason to wrap it in a java.lang.Exception;\n\t\t\tthis just obfuscates the type of error that is occurring.\n\t\t\t</p>"},{"summary":"Correctness - Method checks the result of a new allocation","type":"Bug","defaultSeverity":"Major","description":"<p>This method allocations an object with new, and then checks that the object is null\n\t\t\tor non null. As the new operator is guaranteed to either succeed or throw an exception,\n\t\t\tthis null check is unnecessary and can be removed.</p>"},{"summary":"Correctness - JUnit test method uses Java asserts rather than a JUnit assertion","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses a Java assert to assure that a certain state is in effect. As this is\n\t\t\ta JUnit test it makes more sense to either check this condition with a JUnit assert, or allow\n\t\t\ta following exception to occur.</p>"},{"summary":"Correctness - JAX-RS Method defines a parameter that has no @*Param or @Context annotation, or @Consumes method annotation","type":"Bug","defaultSeverity":"Major","description":"<p>This JAX-RS endpoint declares parameters without specifying where the value of this parameter comes from.\n    \t\tYou can specify this by using one of several 'Param' annotations (@PathParam, @CookieParam, @FormParam @HeaderParam @MatrixParam @QueryParam),\n    \t\tby adding a @Context parameter annotation, or you can declare that the method @Consumes an XML or JSON stream.</p>"},{"summary":"Style - Method uses simple loop to copy contents of one collection to another","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method uses a simple for loop to copy the contents of a set, list, map key/value, array or other collection\n\t\t\tto another collection. It is simpler and more straight forward to just call the addAll method of the destination collection\n\t\t\tpassing in the source collection. In the case that the source is an array, you can use Array.asList method to massage the array\n\t\t\tinto a collection.</p>"},{"summary":"Correctness - Method assigns a value to a local twice in a row","type":"Bug","defaultSeverity":"Major","description":"<p>This method assigns a value twice in a row in a stuttered way such as\n\t\t\t<code>a = a = 5;</code> This is most probably a cut and paste error where the duplicate\n\t\t\tassignment can be removed.</p>"},{"summary":"Performance - Method assigns a variable in a larger scope than is needed","type":"Bug","defaultSeverity":"Major","description":"<p><em>THIS DETECTOR IS HIGHLY EXPERIMENTAL AND IS LIKELY TO CREATE A LOT OF FUD</em></p>\n\t\t\t<p>This method assigns a value to a variable in an outer scope compared to where the variable is actually used.\n\t\t\tAssuming this evaluation does not have side effects, the assignment can be moved into the inner scope (if block)\n\t\t\tso that its execution time isn't taken up if the if guard is false. Care should be\n\t\t\ttaken, however, that the right hand side of the assignment does not contain side\n\t\t\teffects that are required to happen, and that changes are not made further down that\n\t\t\twill affect the execution of the assignment when done later on.</p>"},{"summary":"Correctness - Method attempts to log using String.format notation","type":"Bug","defaultSeverity":"Major","description":"<p>This method attempts to use an SLF4J logger to log a parameterized expression using String.format notation.\n\t\t\tHowever, SLF4J uses simple non numbered anchors such as {}, rather than anchors with percent signs in them as the\n\t\t\tcode uses. Thus no parameter replacement will occur.</p>\n\t\t\t<p>This pattern is invalid:\n\t\t\t<code>LOGGER.error(\"%s is broken\", theThing);</code>\n\t\t\tUse instead\n\t\t\t<code>LOGGER.error(\"{} is broken\", theThing);</code>\n\t\t\t</p>"},{"summary":"Style - JUnit test method asserts that two doubles are exactly equal","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method calls assert with two doubles or Doubles. Due to the imprecision of doubles, you\n\t\t\tshould be using the assert method that takes a range parameter that gives a range of error.</p>"},{"summary":"Style - JUnit test method passes constant to second (actual) assertion parameter","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method calls assert passing a constant value as the second of the two values. The assert\n\t\t\tmethod assumes that the expected value is the first parameter, and so it appears that the order\n\t\t\tof values has been swapped here.</p>"},{"summary":"Performance - Method converts String to primitive using excessive boxing","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes a String to a wrapped primitive object's valueOf method, which in turn calls\n\t\t\tthe boxedValue() method to convert to a primitive. When it is desired to convert from a String\n\t\t\tto a primitive value, it is simpler to use the BoxedPrimitive.parseBoxedPrimitive(String)\n\t\t\tmethod. </p>\n\t\t\t\n\t\t\t<p>Instead of something like:<br/>\n<pre><code>\npublic int someMethod(String data) {\nlong l = Long.valueOf(data).longValue();\nfloat f = Float.valueOf(data).floatValue();\nreturn Integer.valueOf(data); // There is an implicit .intValue() call\n}\n</code></pre>\n\t\t\tSimply do: <br/>\n<pre><code>\npublic int someMethod(String data) {\n\tlong l = Long.parseLong(data);\n\tfloat f = Float.parseFloat(data);\n\treturn Integer.parseInt(data);\n}\n</code></pre>\n\t\t\t</p>"},{"summary":"Correctness - Method performs a contravariant array assignment","type":"Bug","defaultSeverity":"Major","description":"<p>This method contains a contravariant array assignment. Since arrays are mutable data structures, their use\n\t\t\tmust be restricted to covariant or invariant usage.</p>\n\n<pre><code>\nclass A {}\nclass B extends A {}\n\nB[] b = new B[2];\nA[] a = b;\n</code></pre>"},{"summary":"Correctness - Method calls String.format on a static (non parameterized) format string","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls String.format passing a static string as the format string that has no replacement markers\n\t\t\t(starting with %). Thus no replacement will happen, and the format method is superfluous. If parameters were intended,\n\t\t\tadd the appropriate format markers as needed; otherwise, just remove the call to String.format and use the static\n\t\t\tstring as is.</p>"},{"summary":"Correctness - Method performs algorithmic operations on the result of a toString() call","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls algorithmic operations on a String that was returned from a toString() method.\n\t\t\tAs these methods are for debugging/logging purposes, it shouldn't be the basis of core logic in your code.</p>"},{"summary":"Style - Method is excessively complex","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method has a high cyclomatic complexity figure, which calculates the number of branch\n\t\t\tpoints. It is likely difficult to test, and is brittle to change. Consider refactoring this\n\t\t\tmethod into several to reduce the risk.</p>"},{"summary":"Correctness - Class has a circular dependency with other classes","type":"Bug","defaultSeverity":"Major","description":"<p>\n\t\t    This class has a circular dependency with other classes. This makes building these classes\n\t\t    difficult, as each is dependent on the other to build correctly. Consider using interfaces\n\t\t    to break the hard dependency. The dependency chain can be seen in the GUI version of FindBugs.\n\t\t    </p>"},{"summary":"Style - Collection variable is named with a different type of collection in the name","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class defines a field or local collection variable with a name that contains a different type\n            of collection in its name. An example would be a Set<User> called userList. This is confusing to the reader,\n            and likely caused by a previous refactor of type, without changing the name. This detector is obviously\n            only checking for English names.</p>"},{"summary":"Performance - Method uses iterator().next() on a List to get the first item","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls myList.iterator().next() on a List to get the first item. It is more performant\n\t\t\tto just use myList.get(0).</p>"},{"summary":"Correctness - Method passes a negative number as a bit to a BitSet which isn't supported","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes a constant negative value as a bit position to a java.util.BitSet. The BitSet class\n\t\t\tdoesn't support negative values, and thus this method call will not work as expected.</p>"},{"summary":"Performance - Method uses a ternary operator to cast a boolean to true or false","type":"Bug","defaultSeverity":"Major","description":"<p>This method tests the value of a boolean and using a ternary operator to return either true or false.\n\t\t\tThe ternary operator is completely unnecessary, just use the original boolean value.</p>"},{"summary":"Correctness - Method creates promiscuous ServerSocket object","type":"Bug","defaultSeverity":"Major","description":"<p>Do not use the <code>ServerSocket</code> constructor or <code>ServerSocketFactory.createServerSocket()</code> factory methods that \n\t\t\taccept connections on any network interface. By default, an application that listens on a socket will listen for connection attempts \n\t\t\ton any network interface, which can be a security risk. Only the long form of the <code>ServerSocket</code> constructor or \n\t\t\t<code>ServerSocketFactory.createServerSocket()</code> factory methods take a specific local address to define which network interface \n\t\t\tthe socket should bind.</p>"},{"summary":"Correctness - Method modifies collection element while iterating","type":"Bug","defaultSeverity":"Major","description":"<p>This method modifies the contents of a collection using the collection API methods, while\n\t\t\tat the same time iterating across the collection. Doing this will invalidate the iterator, and further\n\t\t\tuse of it will cause ConcurrentModificationExceptions to be thrown.</p>"},{"summary":"Performance - Method performs time consuming operation in GUI thread","type":"Bug","defaultSeverity":"Major","description":"<p>This method implements an AWT or Swing listener and performs time\n\t\t\tconsuming operations. Doing these operations in the GUI thread will cause the\n\t\t\tinterface to appear sluggish and non-responsive to the user. Consider\n\t\t\tusing a separate thread to do the time consuming work so that the user\n\t\t\thas a better experience.</p>"},{"summary":"Correctness - Method deletes collection element while iterating","type":"Bug","defaultSeverity":"Major","description":"<p>This method removes items from a collection using the remove method of the collection, while\n\t\t\tat the same time iterating across the collection. Doing this will invalidate the iterator, and further\n\t\t\tuse of it will cause ConcurrentModificationExceptions to be thrown. To avoid this, the remove\n\t\t\tmethod of the iterator should be used.</p>"},{"summary":"Performance - Method concatenates an empty string to effect type conversion","type":"Bug","defaultSeverity":"Major","description":"<p>This method concatenates an empty string with a literal value, in order to convert\n\t\t\tthe literal value into a string. It is more efficient to use String.valueOf() to do the same\n\t\t\tthing as you do not incur the cost of creating a StringBuffer/Builder and calling methods on it\n\t\t\tto accomplish this.</p>"},{"summary":"Correctness - Method compares class name instead of comparing class","type":"Bug","defaultSeverity":"Major","description":"<p>In a JVM, two classes are the same class (and consequently the same type) if\n\t\t\tthey are loaded by the same class loader, and they have the same fully\n\t\t\tqualified name [JVMSpec 1999].\n\n\t\t\tComparing class name ignores the class loader.</p>"},{"summary":"Correctness - Method tests a field for not null as guard and reassigns it","type":"Bug","defaultSeverity":"Major","description":"<p>This method tests a field to make sure it's not null before executing a conditional block of\n\t\t\tcode. However, in the conditional block it reassigns the field. It is likely that the guard\n\t\t\tshould have been a check to see if the field is null, not that the field was not null.</p>\n\t\t\t<p>example:\n<pre><code>\nif (name != null) {\n    name = person.getName();\n}\n</code></pre>\n\t\t\tIt is possible this is correct, but it seems likely the guard was meant to be <code>if (name == null)</code>\n\t\t\t</p>"},{"summary":"Correctness - Method incorrectly passes exception as first argument to logger method","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes an exception as the first argument to a logger method. The stack\n\t\t\ttrace is potentially lost due to the logger emitting the exception using toString(). It\n\t\t\tis better to construct a log message with sufficient context and pass the exception as\n\t\t\tthe second argument to capture the stack trace.</p>"},{"summary":"Correctness - Method returns the result of invoking toString() without intermediate invocation of append() in ToStringBuilder","type":"Bug","defaultSeverity":"Major","description":"<p>This method returns the result of toString() on a ToStringBuilder without an\n\t\t\tintermediate invocation of append().</p>"},{"summary":"Style - Class appears to implement the old style type safe enum pattern","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class appears to implement the old style type safe enum pattern that was used in place of\n\t\t\treal enums. Since this class is compiled with Java 1.5 or better, it would be simpler and more\n\t\t\teasy to understand if it was just switched over to an enum.</p>"},{"summary":"Correctness - Method performs a contravariant array element assignment","type":"Bug","defaultSeverity":"Major","description":"<p>This method contains a contravariant array element assignment. Since arrays are mutable\n\t\t\tdata structures, their use must be restricted to covariant or invariant usage.</p>\n\n<pre><code>\nclass A {}\nclass B extends A {}\n\nB[] b = new B[2];\nA[] a = b;\na[0] = new A(); // results in ArrayStoreException (Runtime)\n</code></pre>"},{"summary":"Correctness - Method explicitly sets the color of a Component","type":"Bug","defaultSeverity":"Major","description":"<p>This method sets a Components explicitly foreground or background color which may\n\t\t\tcause difficulty with people with vision problems from using this application.\n\t\t\tColors should be allowed to be set from the operating system.</p>"},{"summary":"Correctness - Class holds a map-type field, but uses it as only a List","type":"Bug","defaultSeverity":"Major","description":"<p>This method instantiates a map-type field in a static initializer or constructor, but then only uses it\n\t\t\tthrough iteration. This means that this data structure should really just be a List&lt;SomeObject&gt;,\n\t\t\twhere the class held by the list contains the two fields held by the key and value of the Map.\n\t\t\tIt was likely done this way to avoid having to create a class, but this just obfuscates the purpose of the field.\n\t\t\t</p>"},{"summary":"Style - Method stores return result in local before immediately returning it","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method stores the return result in a local variable, and then immediately\n\t\t\treturns the local variable. It would be simpler just to return the value that is\n\t\t\tassigned to the local variable, directly.</p>\n\t\t\t<p>\n\t\t\t\tInstead of the following: <br/>\n\n<pre><code>\npublic float average(int[] arr) {\n    float sum = 0;\n    for (int i = 0; i &lt; arr.length; i++) {\n        sum += arr[i];\n    }\n    float ave = sum / arr.length;\n    return ave;\n}\n</code></pre>\n\n\t\t\t\tSimply change the method to return the result of the division: <br/>\n\n<pre><code>\npublic float average(int[] arr) {\n    float sum = 0;\n    for (int i = 0; i &lt; arr.length; i++) {\n        sum += arr[i];\n    }\n    <b>return sum / arr.length;</b> //Change\n}\n</code></pre>\n\t\t\t</p>"},{"summary":"Correctness - Method calls toString() on a String","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls toString on a String. Just use the object itself if you want a String.</p>"},{"summary":"Style - Method makes literal string comparisons passing the literal as an argument","type":"Code Smell","defaultSeverity":"Info","description":"<p>This line is in the form of <br/>\n<pre><code>String str = ...\nstr.equals(\"someOtherString\");\n//or\nstr.compareTo(\"someOtherString\");</code></pre>\n\t\t    </p>\n\t\t\t<p>A <code>NullPointerException</code> may occur if the String variable <code>str</code> is <code>null</code>. If instead the code was restructured to<br/>\n<pre><code>String str = ...\n\"someOtherString\".equals(str);\n//or\n\"someOtherString\".compareTo(str);</code></pre><br/>\n\t\t\tthat is, call <code>equals()</code> or <code>compareTo()</code> on the string literal, passing the \n\t\t\tvariable as an argument, this exception could never happen as both <code>equals()</code> and \n\t\t\t<code>compareTo()</code> check for <code>null</code>.</p>"},{"summary":"Style - TestNG test method asserts that a value is true or false","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method asserts that a value is equal to true or false. It is simpler to just\n\t\t\tuse assertTrue, or assertFalse, instead.</p>"},{"summary":"Performance - Method passes constant String of length 1 to character overridden method","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes a constant literal <code>String</code> of length 1 as a parameter to a method, that\n\t\t\texposes a similar method that takes a <code>char</code>. It is simpler and more expedient to handle one\n\t\t\tcharacter, rather than a <code>String</code>.</p>\n\t\t\t\n\t\t\t<p>\n\t\t\tInstead of making calls like: <br/>\n<pre><code>\nString myString = ...\nif (myString.indexOf(\"e\") != -1) {\n    int i = myString.lastIndexOf(\"e\");\n    System.out.println(myString + \":\" + i);  //the Java compiler will use a StringBuilder internally here [builder.append(\":\")]\n    ...\n    return myString.replace(\"m\",\"z\");\n}\n</code></pre>\n\t\t\tReplace the single letter <code>String</code>s with their <code>char</code> equivalents like so:<br/>\n\t\t\t\n<pre><code>\nString myString = ...\nif (myString.indexOf('e') != -1) {\n    int i = myString.lastIndexOf('e');\n    System.out.println(myString + ':' + i);  //the Java compiler will use a StringBuilder internally here [builder.append(':')]\n    ...\n    return myString.replace('m','z');\n}\n</code></pre>\n\t\t\t</p>"},{"summary":"Correctness - Method declares unbound method template parameter(s)","type":"Bug","defaultSeverity":"Major","description":"<p>This method declares a method level template parameter that is not bound by any parameter of this\n\t\t\tmethod. Therefore the template parameter adds no validation or type safety and can be removed, as it's\n\t\t\tjust confusing to the reader.</p>"},{"summary":"Performance - Method appends two literal strings back to back to a StringBuilder","type":"Bug","defaultSeverity":"Major","description":"<p>This method appends two literal strings to a <code>StringBuilder</code> back to back. \n\t\t\tModern compilers will optimize something like:<br/>\n<pre><code>\npublic static final string CONST_VAL = \"there\";\n...\nString str = \"Hello\" + \" \"+ CONST_VAL + \" \" +\"world!\";\n</code></pre>\n\t\t\tto: <br/>\n<pre><code>\npublic static final string CONST_VAL = \"there\";\n...\nString str = \"Hello there world!\";\n</code></pre>\n\t\t\tThis means the concatenation is done during compile time, not at runtime, so there's <b>no need</b> to do: <br/>\n<pre><code>\npublic static final string CONST_VAL = \"there\";\n...\nStringBuilder sb = new StringBuilder(\"Hello\").append(\" \").append(CONST_VAL).append(\" \").append(\"world!\");\nString str = sb.toString();\n</code></pre>\n\t\t\twhich is harder to read and will result in more complex bytecode.\n\t\t\t</p>\n\t\t\t\n\t\t\t<p>\n\t\t\tSimply append your constants with the \"+\" symbol, don't append them with <code>StringBuilder.append()</code>.\n\t\t\t</p>"},{"summary":"Correctness - Method attempts to log using numbered formatting anchors","type":"Bug","defaultSeverity":"Major","description":"<p>This method attempts to use an SLF4J logger to log a parameterized expression using formatting anchors.\n\t\t\tHowever, SLF4J uses simple non numbered anchors such as {}, rather than anchors with digits in them as the\n\t\t\tcode uses. Thus no parameter replacement will occur.</p>\n\t\t\t<p>This pattern is invalid:\n\t\t\t<code>LOGGER.error(\"{0} is broken\", theThing);</code>\n\t\t\tUse instead\n\t\t\t<code>LOGGER.error(\"{} is broken\", theThing);</code>\n\t\t\t</p>"},{"summary":"Performance - Method passes primitive wrapper to Wrapper class valueOf method","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes a wrapped primitive object to the same class's .valueOf method.\n\t\t\tSince wrapper classes are immutable, you can just use the original object, rather\n\t\t\tthan calling valueOf to create a new one. This code works because of an abuse of autoboxing.</p>"},{"summary":"Performance - Method uses two date comparisons when one would do","type":"Bug","defaultSeverity":"Major","description":"<p>This method compares dates with two comparisons, rather than using the reverse comparison.\n\t\t\tSo this pattern</p>\n\n<pre><code>\nif ((date1.equals( date2 )) || (date1.after( date2 )))\n</code></pre>\n\n\t\t\tcould become:<br/>\n\n<pre><code>\nif (date1.compareTo( date2 ) >= 0)\n</code></pre><br/>\n\n\t\t\tand<br/>\n\n<pre><code>\nif ((date1.equals( date2 )) || (date1.before( date2 )))\n</code></pre>\n\n\t\t\tcould become <br/>\n\n<pre><code>\nif (date1.compareTo( date2 ) <= 0)\n</code></pre><br/>\n\n\t\t\tand<br/>\n\n<pre><code>\nif ((date1.before( date2 )) || (date1.after( date2 )))\n</code></pre>\n\n\t\t\tcould become<br/>\n\n<pre><code>\nif (!date1.equals( date2 ))\n</code></pre>"},{"summary":"Correctness - Method annotated with @Transactional is called from a non Spring proxy","type":"Bug","defaultSeverity":"Major","description":"<p>This method call is to a method that has a @Transactional annotation on it. However, since this call is from the\n    \t\tsame class, it is not going through any Spring proxy, and thus the transactional quality of this method is completely\n    \t\tlost. @Transactional method must always be called through a Spring bean that is autowired.</p>"},{"summary":"Correctness - An ExecutorService isn't shutdown before the reference to it is lost","type":"Bug","defaultSeverity":"Major","description":"<p>Most <code>ExecutorService</code> objects must be explicitly shutdown, otherwise, their internal threads can prevent the JVM from ever shutting down, even when everything else has stopped.</p>\n            \n            <p>FindBugs has detected that something like the following is happening:<br/>\n<pre><code>\nExecutorService executor = ... //e.g. Executors.newCachedThreadPool();\n...\npublic void reset() {\n    this.executor = Executors.newCachedThreadPool();\n    this.executor.execute(new SampleExecutable());\n}<br/>\n</code></pre>\n            For normal objects, losing the last reference to them like this would trigger the object to be cleaned up\n            in garbage collection.  For <code>ExecutorService</code>s, this isn't enough to terminate the internal threads in the \n            thread pool, and the <code>ExecutorService</code> isn't guaranteed to shutdown, causing the JVM to never stop. <br/>\n            To fix this, simply add a call to <code>shutdown()</code> like this:<br/>\n<pre><code>\nExecutorService executor = ... //e.g. Executors.newCachedThreadPool();\n...\npublic void reset() {\n    this.executor.shutDown(); //Fix\n    this.executor = Executors.newCachedThreadPool();\n    this.executor.execute(new SampleExecutable());\n}\n</code></pre>\n            </p>\n            \t\t\t\n\t\t\t<p>Even though there are some exceptions to this, particularly when a custom <code>ThreadFactory</code> is \n\t\t\tprovided, or for <code>ThreadPoolExecutor</code>s with <code>allowsCoreThreadTimeOut()</code> set to true,\n\t\t\tit is good practice to explicitly shutdown the <code>ExecutorService</code> at the end of execution, or\n\t\t\twhen it is being replaced.</p>\n\t\t\t\n\t\t\t<p><b>Note:</b> <code>ExecutorService</code>s are generally created once in a program's life cycle.  If you find yourself\n\t\t\treplacing the <code>ExecutorService</code>, perhaps you may consider restructuring your code to use calls like\n\t\t\t<code>awaitTermination()</code> or <code>Future</code>s/<code>Callable</code>s to avoid recreating the <code>ExecutorService</code>.</p>"},{"summary":"Correctness - Method gets and sets a value of a ConcurrentHashMap in a racy manner","type":"Bug","defaultSeverity":"Major","description":"<p>This method retrieves the value of a key from a ConcurrentHashMap, where the value is itself a collection. It checks this\n    \t\tvalue for null, and if it is so, creates a new collection and places it in the map. This may cause thread race conditions\n    \t\twhere two threads overwrite each other's values. You should be using\n    \t\t<code>\n    \t\t\tConcurrentHashMap.putIfAbsent(K, V)\n    \t\t</code>\n    \t\tinstead."},{"summary":"Performance - Method passes primitive wrapper to same primitive wrapper constructor","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes a wrapped primitive object to the same class's constructor.\n\t\t\tSince wrapper classes are immutable, you can just use the original object, rather\n\t\t\tthan constructing a new one. This code works because of an abuse of autoboxing.</p>"},{"summary":"Style - Private or static method only returns one constant value","type":"Code Smell","defaultSeverity":"Info","description":"<p>This private or static method only returns one constant value. As this method is private or static,\n\t\t\tits behavior can't be overridden, and thus the return of a constant value seems dubious.\n\t\t\tEither the method should be changed to return no value, or perhaps another return value\n\t\t\twas expected to be returned in another code path in this method.</p>"},{"summary":"Performance - Method retrieves instance to load static member","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls a method to load a reference to an object, and then only\n\t\t\tuses it to load a static member of that instance's class. It is simpler and\n\t\t\tmore performant to just load the static field from the class itself.</p>"},{"summary":"Style - Method declares RuntimeException in throws clause","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method declares a RuntimeException derived class in its throws clause.\n\t\t\tThis may indicate a misunderstanding as to how unchecked exceptions are handled.\n\t\t\tIf it is felt that a RuntimeException is so prevalent that it should be declared, it\n\t\t\tis probably a better idea to prevent the occurrence in code.</p>"},{"summary":"Correctness - Method uses JDBC vendor specific classes and methods","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses JDBC vendor specific classes and method to perform database work.\n\t\t\tThis makes the code specific to this vendor, and unable to run on other databases.</p>"},{"summary":"Correctness - Method returns the result of invoking hashCode() on HashCodeBuilder","type":"Bug","defaultSeverity":"Major","description":"<p>This method returns the result of hashCode on the HashCodeBuilder type\n\t\t\tinstead of calling the method toHashCode().</p>"},{"summary":"Correctness - This method should use a StandardCharsets.XXX.name() to specify an encoding","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses a hand-typed <code>String</code> literal to specify a <code>Charset</code> encoding. As this class is compiled\n    \t\twith JDK 7 (or better), and the charset in question is available as a constant from the \n    \t\t<code>java.nio.charset.StandardCharsets</code> class, it is better to use the .name() method of the appropriate\n    \t\t<code>StandardCharsets</code> constant.</p>\n    \t\t\n\t\t\t<p>The method in question doesn't directly support a <code>Charset</code> as a parameter, only a <code>String</code>.\n\t\t\t\tStill, instead of specifying something like \"UTF-8\" (and potentially mistyping it), use <code>StandardCharsets.UTF_8.name()</code>.\n\t\t\t</p>"},{"summary":"Correctness - Comparator method doesn't seem to return all ordering values","type":"Bug","defaultSeverity":"Major","description":"<p>This compareTo or compare method returns constant values to represent less than,\n\t\t\tequals, and greater than. However, it does not return each type, or it unconditionally returns a non zero value. \n\t\t\tGiven that comparators are transitive, this seems incorrect.</p>"},{"summary":"Performance - Method creates array using constants","type":"Bug","defaultSeverity":"Major","description":"<p>This method creates an array initialized by constants. Each time this method is called\n\t\t\tthis array will be recreated. It would be more performant to define the array as a\n\t\t\tstatic field of the class instead.</p>"},{"summary":"Style - Method returns modified parameter","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method appears to modify a parameter, and then return this parameter as the\n\t\t\tmethod's return value. This will be confusing to callers of this method, as it won't be\n\t\t\tapparent that the 'original' passed in parameter will be changed as well. If the purpose\n\t\t\tof this method is to change the parameter, it would be more clear to change the method to\n\t\t\ta have a void return value. If a return type is required due to interface or superclass contract,\n\t\t\tperhaps a clone of the parameter should be made.</p>"},{"summary":"Correctness - Method attempts to store an array element to an array that does not appear to be allocated","type":"Bug","defaultSeverity":"Major","description":"<p>This method attempts to store an array element into an array that appears not to have been allocated.</p>"},{"summary":"Style - Method needlessly defines parameter with concrete classes","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method uses concrete classes for parameters when only methods defined in an implemented\n\t\t\tinterface or superclass are used. Consider increasing the abstraction of the interface to\n\t\t\tmake low impact changes easier to accomplish in the future.</p>\n\n\t\t\t<p>Take the following example:<br/>\n<pre><code>\nprivate void appendToList(ArrayList&lt;String&gt; list) {\n    if (list.size() &lt; 100) {\n        list.add(\"Foo\");\n    }\n}\n</code></pre>\n\n\t\t\t\tThe parameter list is currently defined as an <code>ArrayList</code>, which is a concrete implementation of the <code>List</code> interface.  \n\t\t\t\tSpecifying <code>ArrayList</code> is unnecessary here, because we aren't using any <code>ArrayList</code>-specific methods (like <code>ensureCapacity()</code> or <code>trimToSize()</code>).\n\t\t\t\tInstead of using the concrete definition, it is better to do something like:<br/>\n<pre><code>\nprivate void appendToList(List&lt;String&gt; list) {\n    ...\n</code></pre>\n\t\t\t\tIf the design ever changes, e.g. a <code>LinkedList</code> is used instead, this code won't have to change.\n\n\t\t\t</p>\n\n\t\t\t<p>IDEs tend to have tools to help generalize parameters.  For example, in Eclipse, the refactoring tool <a href=\"http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Freference%2Fref-menu-refactor.htm\">Generalize Declared Type</a> helps find an appropriate level of concreteness.</p>"},{"summary":"Style - Class defines two or more one for one associated lists or arrays","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class appears to maintain two or more lists or arrays whose contents are related in a parallel way.  That is,\n\t\t\tyou have something like:<br/>\n<pre><code>\nList&lt;String&gt; words = new ArrayList&lt;String&gt;();\nList&lt;Integer&gt; wordCounts = new ArrayList&lt;String&gt;();\n</code></pre>\n\t\t\twhere the elements of the list at index 0 are related, the elements at index 1 are related and so on. </p>\n\t\t\t<p>\n\t\t\tConsider creating a separate class to hold all the related\n\t\t\tpieces of information, and adding instances of this class to just one list or array, or if just two values, use\n\t\t\ta Map to associate one value with the other like:<br/>\n<pre><code>\nprivate class WordAndCount{public String word;  public int count}\n\nList&lt;WordAndCount&gt; wordsAndCounts = new ArrayList&lt;WordAndCount&gt;();\n//or, for just two elements\nMap<String,Integer> wordCounts = new HashMap<String,Integer>();\n</code></pre>\n\t\t\t\n\t\t\t</p>"},{"summary":"Correctness - Abstract method overrides a concrete implementation","type":"Bug","defaultSeverity":"Major","description":"<p>This abstract method is derived from a concrete method implementation. It is highly\n\t\t\tsuspect that the superclass method's implementation would be cast away.</p>"},{"summary":"Style - Class implements interface by relying on unknowing superclass methods","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class declares that it implements an interface, but does so by relying on methods supplied\n\t\t\tby superclasses, even though those superclasses know nothing about the interface in question. If you wish\n\t\t\tto have the child not implement all the methods of the interface, it would probably be better to declare\n\t\t\tthe superclass as implementing the interface, and if that class does not provide all the methods, then declare\n\t\t\tthat superclass abstract.</p>"},{"summary":"Correctness - Method passes an incorrect number of parameters to an SLF4J logging statement","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes the wrong number of parameters to an SLF4J logging method (error, warn, info, debug) based on the number of anchors {} in the\n\t\t\tformat string. An additional exception argument is allowed if found.</p>"},{"summary":"Performance - Method uses a set of collections","type":"Bug","defaultSeverity":"Major","description":"<p>This method creates a set that contains other collections, or a Map whose keySet is\n\t\t\tanother collection. As collections tend to calculate hashCode, equals and compareTo by\n\t\t\titerating the contents of the collection, this can perform poorly.</p>\n\t\t\t<p>In addition, when a set is used, you typically are using it to do 'contains', or 'find'\n\t\t\ttype functionality, which seems dubious when done on a collection</p>\n\t\t\t<p>Finally, as a collection is often modified, problems will occur if the collection is\n\t\t\tcontained in a set, because the hashCode, equals or compareTo values will change while the\n\t\t\tcollection is in the set.</p>\n\t\t\t<p>If you wish to maintain a collection of collections, it is probably better to use a List\n\t\t\tas the outer collection.</p>"},{"summary":"Correctness - Method uses delayed execution of a block of code that is trivial","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses the Optional.orElseGet() method passing in a simple variable or constant value.\n    \t\tAs this value takes not time to execute or causes no side effects, the use of Optional.orElseGet is\n    \t\tunnecessary and potentially confusing. You can use Optional.orElse() instead."},{"summary":"Correctness - Method needlessly assigns a StringBuilder to itself, as it's mutable","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls StringBuilder.append and assigns the results to the same StringBuilder like:</p>\n\t\t\t<code>sb = sb.append(\"foo\")</code>\n\t\t\t<p>StringBuilder is mutable, so this is not necessary.\n\t\t\tThis is also true of StringBuffer.</p>"},{"summary":"Correctness - Method creates local variable-based synchronized collection","type":"Bug","defaultSeverity":"Major","description":"<p>This method creates a synchronized collection and stores the reference to it\n\t\t\tin a local variable. As local variables are by definition thread-safe, it seems\n\t\t\tquestionable that this collection needs to be synchronized.</p>\n\t\t\t<p>\n\t\t\t<table>\n\t\t\t\t<tr><th>If you are using</th><th>consider using</th></tr>\n\t\t\t\t<tr><td>java.util.Vector</td><td>java.util.ArrayList</td></tr>\n\t\t\t\t<tr><td>java.util.Hashtable</td><td>java.util.HashMap</td></tr>\n\t\t\t\t<tr><td>java.lang.StringBuffer</td><td>java.lang.StringBuilder</td></tr>\n\t\t\t</table>\n\t\t\t</p>"},{"summary":"Correctness - Method does not specify how to handle transaction when exception is thrown","type":"Bug","defaultSeverity":"Major","description":"<p>This method declares that it throws one or more non-runtime exceptions. It also is annotated with a\n    \t\t@Transactional annotation but fails to describe whether to rollback the transaction or not based on this\n    \t\tthrown exception. Use 'rollbackFor' or 'noRollbackFor' attributes of the Transactional annotation to \n    \t\tdocument this.</p>"},{"summary":"Style - Clone method declares it returns an Object","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class implements the Cloneable interface but defines its clone method to return an\n\t\t\tObject. Since most likely users of this method will need to cast it to the real type, this will\n\t\t\tbe more painful than necessary. Just declare the return value to be the type of this class.</p>"},{"summary":"Correctness - Method passes a non array object to a parameter that expects an array","type":"Bug","defaultSeverity":"Major","description":"<p>This method expects an array to be passed as one of its parameters, but unfortunately defines\n\t\t\tthe parameter as Object. This invocation of this method does not pass an array and will throw\n\t\t\tan exception when run.</p>"},{"summary":"Style - Method adds unrelated types to collection or array","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method adds unrelated objects to a collection or array, requiring careful and brittle\n\t\t\tdata access to that collection. Create a separate class with properties needed, and add\n\t\t\tan instance of this class to the collection or array, if possible.</p>"},{"summary":"Correctness - JAX-RS Method specifies an invalid @Context parameter type","type":"Bug","defaultSeverity":"Major","description":"<p>This JAX-RS endpoint annotates a parameter with a @Context annotation. This annotation can supply values\n    \t\tfor the following types:\n    \t\t<ul>\n\t    \t\t<li>javax.ws.rs.core.UriInfo</li>\n\t\t        <li>javax.ws.rs.core.HttpHeaders</li>\n\t\t        <li>javax.ws.rs.core.Request</li>\n\t\t        <li>javax.ws.rs.core.SecurityContext</li>\n\t\t        <li>javax.ws.rs.ext.Providers</li>\n\t\t        <li>javax.servlet.ServletConfig</li>\n\t\t        <li>javax.servlet.ServletContext</li>\n\t\t        <li>javax.servlet.HttpServletRequest</li>\n\t\t        <li>javax.servlet.HttpServletResponse</li>\n\t\t    </ul>\n\t\t    It is possible that your container can supply additional types, but these types are not standard and may\n\t\t    not be supported on other application servers.</p>"},{"summary":"Correctness - This method needlessly uses a String literal as a Charset encoding","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses a string literal to specify a <code>Charset</code> encoding. However, the method invoked has an \n    \t\talternative signature that takes a <code>Charset</code> object. You should use this signature, as this class is compiled\n    \t\twith JDK 7 (or better), and the <code>Charset</code> in question is available as a constant from the \n    \t\t<code>java.nio.charset.StandardCharsets</code> class.</p>\n    \t\t<p>So instead of specifying \"UTF-8\", use <code>StandardCharsets.UTF_8</code>, for instance. An added benefit of this is \n    \t\tthat you will not need to catch <code>UnsupportedEncodingException</code>.</p>"},{"summary":"Correctness - Suspicious Local Executor Service","type":"Bug","defaultSeverity":"Major","description":"<p><code>ExecutorService</code>s are typically instantiated as fields so that many tasks can be executed on a controlled number of <code>Thread</code>s across many method calls.  Therefore, it is unusual for <code>ExecutorService</code>s to be a local variable, where tasks will be added only one time, in the enclosing method. </p>\n\t\t\t\n\t\t\t<p>Furthermore, when a local <code>ExecutorService</code> reaches the end of scope and goes up for garbage collection, the internal <code>Thread</code>s are not necessarily terminated and can prevent the JVM from ever shutting down.</p>\n\t\t\t\n\t\t\t<p>Consider making this local variable a field and create a method that will explicitly shutdown the <code>ExecutorService</code></p>"},{"summary":"Correctness - TestNG test method passes null Assert.assertNotEquals","type":"Bug","defaultSeverity":"Major","description":"<p>This method compares an object's inequality to null. It is better to use the Assert.assertNotNull\n\t\t\tmethod so that the TestNG failure method is more descriptive of the intended test.</p>"},{"summary":"Style - Method uses 1 element array to simulate call by reference","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method uses a one-element array to wrap an object that is to be passed to a method as an argument\n\t\t\tto simulate call by pointer ala C++. It is better to define a proper return class type that holds all\n\t\t\tthe relevant information retrieved from the called method.</p>"},{"summary":"Style - Method returns different types of unrelated Objects","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method returns two or more unrelated types of objects (Related only through java.lang.Object).\n\t\t\tThis will be very confusing to the code that must call it.</p>"},{"summary":"Correctness - Method calls equals(Object o) on a StringBuilder or StringBuffer","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls equals on a StringBuilder or StringBuffer. Surprisingly, these classes do not override\n\t\t\tthe equals method from Object, and so equals is just defined to be == (or same references). This is most\n\t\t\tlikely not what you would like. If you wish to check that the strings have the same characters, you need to\n\t\t\tcall toString() on these object and compare them as Strings.</p>"},{"summary":"Correctness - Method calls intern on a string constant","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls intern on a constant string. As constant strings are already interned, this call\n\t\t\tis superfluous.</p>"},{"summary":"Correctness - Method possibly mixes up normal strings and empty strings in branching logic","type":"Bug","defaultSeverity":"Major","description":"<p>This method tests a string, and groups null values with real strings, leaving empty strings as another\n\t\t\tcase. That is, FindBugs has detected a structure like: <br/>\n<pre><code>\nString a = null, b = \"\", c = \"someString\";\n\nString testStr = ...;  //one of a, b or c\nif ({{FLAWED_TEST_LOGIC}}) {\n    // Strings a and c fall into this branch... which is not typical.\n} else {\n    // String b falls into this branch.\n}\n</code></pre>\n\t\t\t\n\t\t\tThis might be perfectly valid, but normally, null strings and empty strings are logically handled the same way,\n\t\t\tand so this test may be flawed.</p>\n\t\t\t<p>Pattern found is one of the following:\n\t\t\t<ul>\n\t\t\t\t<li><code>if ((s == null) || (s.length() &gt; 0))</code> --- did you mean\n\t\t\t\t<code>((s == null) || (s.length() == 0))</code>?</li>\n\t\t\t\t<li><code>if ((s == null) || (s.length() != 0))</code> -- did you mean \n\t\t\t\t<code>((s == null) || (s.length() == 0))</code>? </li>\n\t\t\t\t<li><code>if ((s != null) && (s.length() == 0))</code> -- did you mean \n\t\t\t\t<code>((s != null) && (s.length() &gt; 0))</code> or perhaps\n\t\t\t\t<code>((s == null) || (s.length() == 0))</code>? </li>\n\t\t\t</ul>\n\t\t\t</p>"},{"summary":"Style - Method excessively uses methods of another class","type":"Code Smell","defaultSeverity":"Info","description":"<p><em>THIS DETECTOR IS HIGHLY EXPERIMENTAL AND IS LIKELY TO CREATE A LOT OF FUD</em></p>\n\t\t\t<p>This method makes extensive use of methods from another class over methods of its own\n\t\t\tclass. Typically this means that the functionality that is accomplished by this method\n\t\t\tmost likely belongs with the class that is being used so liberally. Consider refactoring this\n\t\t\tmethod to be contained in that class, and to accept all the parameters needed in the method signature.</p>"},{"summary":"Correctness - Method serializes an instance of a non-static inner class","type":"Bug","defaultSeverity":"Major","description":"<p>This method serializes an instance of a non-static inner class. Since this class has a\n\t\t\treference to the containing class, this outer class will be serialized as well. This is often\n\t\t\tnot intentional, and will make the amount of data that is serialized much more than is needed.\n\t\t\tIf the outer classes is not desired to be serialized, either make the inner class static, or\n\t\t\tpull it out into a separate \"first class\" class.</p>"},{"summary":"Correctness - Method checks a reference for null before calling instanceof","type":"Bug","defaultSeverity":"Major","description":"<p>This method checks a reference for null just before seeing if the reference is an instanceof some class.\n\t\t\tSince instanceof will return false for null references, the null check is not needed.</p>"},{"summary":"Correctness - Non derivable method declares throwing an exception that isn't thrown","type":"Bug","defaultSeverity":"Major","description":"<p>This method declares that it throws a checked exception that it does not throw. As this method is\n\t\t\teither a constructor, static method or private method, there is no reason for this method to declare\n\t\t\tthe exception in its throws clause, and just causes calling methods to unnecessarily handle an exception\n\t\t\tthat will never be thrown. The exception in question should be removed from the throws clause.</p>"},{"summary":"Correctness - JUnit test method passes boolean expression to Assert.assertFalse / Assert.assertTrue","type":"Bug","defaultSeverity":"Major","description":"<p>This method evaluates a boolean expression and passes that to Assert.assertFalse / Assert.assertTrue.\n\t\t\tIt is better to pass the two values that are being equated to the Assert.assertNotEquals method so that the\n\t\t\tJUnit failure method is more descriptive of the intended test.</p>"},{"summary":"Style - Method passes an empty string to equalsIgnoreCase or compareToIgnoreCase","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method passes the empty string \"\" to equalsIgnoreCase or compareToIgnoreCase. As the empty string\n\t\t\tis not case-sensitive, using equals is simpler. It would be even simpler to do a length() == 0 test.</p>"},{"summary":"Correctness - Method of Singleton class writes to a field in an unsynchronized manner","type":"Bug","defaultSeverity":"Major","description":"<p>This method writes to a field of this class. Since this class is seen as a Singleton this can produce race\n    \t\tconditions, or cause non-visible changes to other threads, because the field isn't accessed synchronously."},{"summary":"Style - Method defines parameter list with array as last argument, rather than vararg","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method defines a parameter list that ends with an array. As this class is compiled with\n\t\t\tJava 1.5 or better, this parameter could be defined as a vararg parameter instead, which can be\n\t\t\tmore convenient for client developers to use. This is not a bug, per se, just an improvement.</p>"},{"summary":"Correctness - Method incorrectly compares a floating point number to NaN","type":"Bug","defaultSeverity":"Major","description":"<p>This method compares a double or float to the constant <code>Double.NaN</code> or <code>Float.NaN</code>.\n\t\t\tYou should use\n\t\t\t<code>Double.isNaN(d)</code> or <code>Float.isNaN(f)</code>\n\t\t\t if the variable is a primitive. If using a boxed primitive <code>d.isNaN()</code> or <code>f.isNaN()</code> should be used.</p>"},{"summary":"Correctness - Method converts a String literal","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls a converting method like <code>toLowerCase()</code> or <code>trim</code>\n\t\t   on a <code>String</code> literal. You should make the transformation yourself and use the transformed literal.</p>\n\t\t   \n\t\t   <p>\n\t\t   For example, instead of :<br/>\n<pre><code>\nreturn \"ThisIsAConstantString\".toLowerCase().trim();\n</code></pre>\n\t\t   just do <br/>\n<pre><code>\nreturn \"thisisaconstantstring\";\n</code></pre>\n\t\t   for shorter and easier to read code.  An exception might be made when locale-specific transformations need\n\t\t   to be done (in the case of <code>toUpperCase()</code> and <code>toLowerCase()</code>.\n\t\t   </p>"},{"summary":"Correctness - Constructor declares a Logger parameter","type":"Bug","defaultSeverity":"Major","description":"<p>This constructor declares a parameter that is a Logger. As loggers are meant to be\n\t\t\tcreated statically per class, it doesn't make sense that you would pass a Logger from one\n\t\t\tclass to another. Declare the Logger static in each class instead.</p>"},{"summary":"Correctness - Method uses rt.jar class or method that does not exist","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls a method that does not exist, on a class that does not exist in the JDK that\n\t\t\tthis class has been compiled for. This can happen if you compile the class specifying the -source and\n\t\t\t-target options, and use a version that is before the version of the compiler's JDK.</p>"},{"summary":"Style - JUnit test method asserts that a value is true or false","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method asserts that a value is equal to true or false. It is simpler to just\n\t\t\tuse assertTrue, or assertFalse, instead.</p>"},{"summary":"Correctness - Method uses a java.util.Optional when use of OptionalInt, OptionalLong, OptionalDouble would be more clear","type":"Bug","defaultSeverity":"Major","description":"<p>This method creates an Optional object to hold an int, double or long. In these cases it\n    \t\tis more natural to use the Optional variants OptionalInt, OptionalDouble and OptionalLong.\n    \t\t</p>"},{"summary":"Correctness - Class relies on internal API classes","type":"Bug","defaultSeverity":"Major","description":"<p>This class makes use of internal API classes. As these\n\t\t\tclasses are not documented, nor externally released as part of the API, they are subject\n\t\t\tto change or removal. You should not be using these classes.</p>\n\t\t\tPackages that shouldn't be used are:\n\t\t\t<ul>\n\t\t\t\t<li>sun.xxx</li>\n\t\t\t\t<li>org.apache.xerces.xxx</li>\n\t\t\t\t<li>org.apache.xalan.xxx</li>\n\t\t\t</ul>"},{"summary":"Correctness - JAX-RS Method specifies non-resolveable @PathParam","type":"Bug","defaultSeverity":"Major","description":"<p>This JAX-RS endpoint has a @PathParam specified that is not found in the @Path annotation\n    \t\tand thus can not determine from where to populate that parameter.</p>"},{"summary":"Performance - Method employs tail recursion","type":"Bug","defaultSeverity":"Major","description":"<p>This method recursively calls itself as the last statement of the method\n\t\t\t(Tail Recursion). This method can be easily refactored into a simple loop, which\n\t\t\twill make it more performant, and reduce the stack size requirements.</p>"},{"summary":"Correctness - Method constructs a File object, merely to convert it to a Path object","type":"Bug","defaultSeverity":"Major","description":"<p>This method creates a java.nio.file.Path object by first creating a java.io.File object, and then calling\n    \t\ttoPath() on it. It is simpler to just construct the Path object directly, say by using\n    \t\t{@code Path.get(String...)}.\n    \t\t</p>"},{"summary":"Correctness - TestNG test method passes boolean expression to Assert.assertFalse / Assert.assertTrue","type":"Bug","defaultSeverity":"Major","description":"<p>This method evaluates a boolean expression and passes that to Assert.assertFalse / Assert.assertTrue.\n\t\t\tIt is better to pass the two values that are being equated to the Assert.assertEquals method so that the\n\t\t\tTestNG failure method is more meaningful of the intended test.</p>"},{"summary":"Correctness - This method performs arithmetic operations on time values with different units","type":"Bug","defaultSeverity":"Major","description":"<p>This method takes two values that appear to be representing time, and performs arithmetic operations on these \n    \t\ttwo values directly, even though it appears that the two values are representing different time units, such as \n    \t\tadding a millisecond value to a nanosecond value. You should convert the two values to the same time unit before\n    \t\tperforming this calculation in order for it to be meaningful.</p>"},{"summary":"Style - Clone method declares it returns a type different than the owning class","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class implements the Cloneable interface but defines its clone method to return a type\n\t\t\tthat is different than the class itself, or any interfaces that the class implements.</p>"},{"summary":"Correctness - JAX-RS Method implements a GET request but consumes input","type":"Bug","defaultSeverity":"Major","description":"<p>This JAX-RS endpoint is annotated to be used as @GET requests, but also documents that it\n    \t\tconsumes JSON or XML data. Since a GET request pulls parameters from the URL, and not\n    \t\tthe body of request, this pattern is problematic. If you wish to consume JSON or XML data,\n    \t\tthis request should be annotated with @POST.</p>"},{"summary":"Correctness - Method uses floating point indexed loops","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses floating point variables to index a loop. Since floating point\n\t\t\tmath is imprecise, rounding errors will accumulate over time each time the loop is\n\t\t\texecuted. It is usually better to use integer indexing, and calculate the new value\n\t\t\tof the floating point number at the top of the loop body.</p>\n\t\t\t<p>Example:\n<pre><code>\nfor (float f = 1.0f; f &lt;= 10.0f; f += 0.1f) {\n    System.out.println(f);\n}\n</code></pre>\n\t\t\tThe last value printed may not be 10.0, but instead might be 9.900001 or such.\n\t\t\t</p>"},{"summary":"Correctness - Method declares throwing two or more exceptions related by inheritance","type":"Bug","defaultSeverity":"Major","description":"<p>This method declares that it throws an exception that is the child of another exception that is\n\t\t\talso declared to be thrown. Given that the parent exception is declared, there is no need for the child\n\t\t\texception to also be declared; it just adds confusion.</p>"},{"summary":"Correctness - TestNG test method passes boolean expression to Assert.assertFalse / Assert.assertTrue","type":"Bug","defaultSeverity":"Major","description":"<p>This method evaluates a boolean expression and passes that to Assert.assertFalse / Assert.assertTrue.\n\t\t\tIt is better to pass the two values that are being equated to the Assert.assertNotEquals method so that the\n\t\t\tTestNG failure method is more meaningful of the intended test.</p>"},{"summary":"Correctness - Method attempts to access an array element outside the array's size","type":"Bug","defaultSeverity":"Major","description":"<p>This method accesses an array element using a literal index that is known to be outside the size\n\t\t\tof the specified array. This will cause an ArrayIndexOutOfBoundsException at runtime.</p>"},{"summary":"Correctness - Class auto wires the same object into two separate fields in a class hierarchy","type":"Bug","defaultSeverity":"Major","description":"<p>this class has two fields in either itself or a parent class which autowire (without specialization), the same object\n    \t\tfor both fields. This is likely caused by a developer just not being aware that the field already is available for your use, \n    \t\tand just causes wasted space, and confusing code access to the same object through two different pathways.</p>"},{"summary":"Style - Static or private method has unused parameters","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method defines parameters that are never used. As this method is either static or private,\n\t       and can't be derived from, it is safe to remove these parameters and simplify your method.\n\t       You should consider, while unlikely, that this method may be used reflectively, and thus you will\n\t       want to change that call as well. In this case, it is likely that once you remove the parameter,\n\t       there will be a chain of method calls that have spent time creating this parameter and passing it\n\t       down the line. All of this may be able to be removed.</p>"},{"summary":"Style - Clone method declares it throws CloneNotSupportedException","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class implements the Cloneable interface but defines its clone method to still return\n\t\t\ta CloneNotSupportedException. Since you are implementing clone() it would make sense that the method\n\t\t\tin question will <em>not</em> throw that exception, so annotating your method with it just makes clients'\n\t\t\tuse of your class more painful as they have to handle an exception that will never happen.\n\t\t\tJust remove the throws clause from your method.</p>"},{"summary":"Performance - Method allocates an object that is used in a constant way in a loop","type":"Bug","defaultSeverity":"Major","description":"<p>This method allocates an object using the default constructor in a loop, and then\n\t\t\tonly uses it in a quasi-static way. It is never assigned to anything that lives outside\n\t\t\tthe loop, and could potentially be allocated once outside the loop. Often this can be\n\t\t\tachieved by calling a clear() like method in the loop, to reset the state of the object\n\t\t\tin the loop.</p>"},{"summary":"Style - Method returns more specific type of object than declared","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method is defined to return a java.lang.Object. However, the return types\n\t\t\treturned from this method can be defined by a more specific class or interface. Since this\n\t\t\tmethod is not derived from a superclass or interface, it would be more clear to\n\t\t\tchange the return type of this method.</p>"},{"summary":"Correctness - Method creates DOM node but doesn't attach it to a document","type":"Bug","defaultSeverity":"Major","description":"<p>This method creates a DOM node but does not attach it to a DOM document.</p>"},{"summary":"Style - Method builds String array using String Tokenizing","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method uses a StringTokenizer to split up a String and then walks through the\n\t\t\tseparated elements and builds an array from these enumerated values. It is simpler\n\t\t\tand easier to use the String.split method.</p>\n\t\t\t<p>PLEASE NOTE: String.split will return an array of 1 element when passed the\n\t\t\tempty string, as opposed to using StringTokenizer which returns false on the first\n\t\t\thasMoreElements/hasMoreTokens call. So you may need to use:</p>\n<pre><code>\nif (s.length() &gt; 0) <br/>\n    return s.split(\";\");<br/>\nreturn new String[0];<br/>\n</code></pre>"},{"summary":"Correctness - JPA Entity with Generated @Id defined with hashCode/equals","type":"Bug","defaultSeverity":"Major","description":"<p>This class is defined to be a JPA Entity, and has an @Id field that is generated by the JPA provider.\n    \t\tSince you do not control when that Id is created directly, it is risky to implement hashCode/equals for this\n    \t\tclass, and especially for use with Collections, as the data behind the algorithms will not be immutable, and\n    \t\tthus cause problems when those fields change, and the object is in the collection. It is usually safer\n    \t\tto not define hashCode and equals for entity objects, but treat them as objects for IdentityHashSet/Maps instead.</p>"},{"summary":"Performance - Class defines unneeded synchronization on member collection","type":"Bug","defaultSeverity":"Major","description":"<p>This class defines a private collection member as synchronized. It appears however\n\t\t\tthat this collection is only modified in a static initializer, or constructor. As these\n\t\t\ttwo areas are guaranteed to be thread safe, defining this collection as synchronized is\n\t\t\tunnecessary and a potential performance bottleneck.</p>"},{"summary":"Style - Method uses integer based for loops to iterate over a List","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method uses an integer based for loop to iterate over a java.util.List, by calling\n\t\t\tList.get(i) each time through the loop. The integer is not used for other reasons. It is better\n\t\t\tto use an Iterator instead, as depending on List implementation, iterators can perform better,\n\t\t\tand they also allow for exchanging of other collection types without issue.</p>"},{"summary":"Correctness - Method manually casts the right hand side of an assignment more specifically than needed","type":"Bug","defaultSeverity":"Major","description":"<p>This method casts the right hand side of an expression to a class that is more specific than the\n\t\t\tvariable on the left hand side of the assignment. The cast only has to be as specific as what the variable\n\t\t\tthat is on the left. Using a more specific type on the right hand side just increases cohesion.</p>"},{"summary":"Correctness - Method checks an Optional reference for null","type":"Bug","defaultSeverity":"Major","description":"<p>This method compares an Optional reference variable against null. As the whole point of the\n    \t\tOptional class is to avoid the null pointer exception, this use pattern is highly suspect. \n    \t\tThe code should always make sure the Optional reference is valid, and should count on the apis\n    \t\tof this class to check for the held reference instead."},{"summary":"Correctness - This method continues a loop after finding an equality condition","type":"Bug","defaultSeverity":"Major","description":"<p>This method continues with a loop, and does not break out of it, after finding and setting a variable in an if\n    \t\tcondition based on equality. Since continuing on in the loop would seem to be unlikely to find the item again, breaking\n    \t\tat this point would seem to be the proper action.</p>\n    \t\t<p>Example:\n<pre><code>\nint age = 0;\nfor (Person p : people) {\n    if (p.getName().equals(\"Dave\")) {\n        age = p.getAge();\n    }\n}\n</code></pre>\n    \t\tIt is likely you wanted a break after getting the age for \"Dave\".</p>"},{"summary":"Correctness - Unreleased HttpRequest network resources (field)","type":"Bug","defaultSeverity":"Major","description":"<p>FindBugs has detected an <code>org.apache.http.HttpRequest</code> (e.g. <code>HttpGet</code>, <code>HttpPost</code>, etc)\n\t\t\t\tthat didn't release its associated resources.  Code like the following: <br/>\n<pre>code>\nprivate HttpGet httpGet;\n\npublic String requestInfo(URI u) {\n    this.httpGet = new HttpGet(u);\n    try(CloseableHttpResponse response = client.execute(httpGet);) {\n        return getResponseAsString(response);\n    }\n    catch (IOException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n</code></pre>\n\t\t\t\twill freeze after a few requests, usually with no indication as to why.  </p>\n\t\t\t\t\n\t\t\t<p>\n\t\t\t\tThe reason this code freezes is because <code>org.apache.http.HttpRequest</code>s need to explicitly release their connection\n\t\t\t\twith a call to either <code>reset()</code> or <code>releaseConnection()</code>.  The above example can be easily fixed:<br/>\n<pre><code>\nprivate HttpGet httpGet;\n...\npublic String requestInfo(URI u) {\n    this.httpGet = new HttpGet(u);\n    try(CloseableHttpResponse response = client.execute(httpGet);) {\n        return getResponseAsString(response);\n    }\n    catch (IOException e) {\n        e.printStackTrace();\n    }\n    <b>finally {\n        this.httpGet.reset();\n    }</b>\n    return null;\n}<br/>\n</code></pre>\n\t\t\t</p>"},{"summary":"Multi-threading - Method calls Condition.signal() rather than Condition.signalAll()","type":"Bug","defaultSeverity":"Major","description":"<p><code>Condition.signalAll()</code> is preferred over <code>Condition.signal()</code>. Calling <code>signal()</code> only wakes up one thread, meaning that the thread woken up might not be the one waiting for the condition that the caller just satisfied.</p>"},{"summary":"Correctness - TestNG test method passes null Assert.assertEquals","type":"Bug","defaultSeverity":"Major","description":"<p>This method compares an object's equality to null. It is better to use the Assert.assertNull\n\t\t\tmethod so that the TestNG failure method is more descriptive of the intended test.</p>"},{"summary":"Correctness - Potential memory bloat in static field","type":"Bug","defaultSeverity":"Major","description":"<p>This class defines static fields that are <code>Collection</code>s, <code>StringBuffer</code>s, or <code>StringBuilder</code>s\n\t\t\tthat do not appear to have any way to clear or reduce their size. That is, a collection is defined\n\t\t\tand has method calls like <br/>\n\t\t\t{<code>add()</code>, <code>append()</code>, <code>offer()</code>, <code>put()</code>, ...} <br/>\n\t\t\twith no method calls to removal methods like<br/>\n\t\t\t{<code>clear()</code>, <code>delete()</code>, <code>pop()</code>, <code>remove()</code>, ...}<br/>\n\t\t\tThis means that the collection in question can only ever increase in size, which is \n\t\t\ta potential cause of memory bloat.</p>\n\t\t\t\n\t\t\t<p>\n\t\t\tIf this collection is a list, set or otherwise of static things (e.g. a List&gt;String&gt; for month names), consider\n\t\t\tadding all of the elements in a static initializer, which can only be called once:<br/>\n<pre><code>\nprivate static List&lt;String&gt; monthNames = new ArrayList&lt;String&gt;();\nstatic {\n    monthNames.add(\"January\");\n    monthNames.add(\"February\");\n    monthNames.add(\"March\");\n    ...\n}\n</code></pre>\n\t\t\t</p>"},{"summary":"Correctness - Method calls a method from a class that has been shaded by a 3rdparty jar","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls a method found in a 3rdparty library, which appears to be shaded from another 3rdparty library.\n    \t\tThis occurs when a jar includes other code using tools like the maven shade plugin. It is likely you wanted to use the\n    \t\t\"first-class\" class from the original jar, rather than the class with the shaded package structure, but your IDE pulled in\n    \t\tthe wrong import.</p>\n    \t\t<p>An example might be, you attempted to use a method from the class:\n    \t\t<pre><code>\n    \t\tcom.google.common.collect.Sets\n    \t\t</code></pre>\n    \t\tBut instead, you import:\n    \t\t<pre><code>\n    \t\torg.apache.jena.ext.com.google.common.collect.Sets\n    \t\t</code></pre>\n    \t\t</p>"},{"summary":"Correctness - Method creates and initializes a collection but never reads or gains information from it","type":"Bug","defaultSeverity":"Major","description":"<p>This method creates and initializes a collection but then never access this collection\n\t\t\tto gain information, or fetch items from the collection. It is likely that this collection\n\t\t\tis left over from a past effort, and can be removed.</p>"},{"summary":"Multi-threading - Method sleeps without timeout","type":"Bug","defaultSeverity":"Major","description":"<p>Calling one of the following methods without timeout could block forever. Consider using a timeout to detect deadlocks or performance problems. \n\t\t\tMethods: \n\t\t\t<ul>\n\t\t\t<li>Thread.join()</li>\n\t\t\t<li>Object.wait()</li>\n\t\t\t<li>Condition.await()</li>\n\t\t\t<li>Lock.lock()</li> \n\t\t\t<li>Lock.lockInterruptibly()</li>\n\t\t\t<li>ReentrantLock.lock()</li>\n\t\t\t<li>ReentrantLock.lockInterruptibly()</li>\n\t\t\t</ul>\n\t\t\t</p>"},{"summary":"Performance - Method compares string without case after enforcing a case","type":"Bug","defaultSeverity":"Major","description":"<p>This method compares two strings with compareToIgnoreCase or equalsIgnoreCase, after having\n\t\t\tcalled toUpperCase or toLowerCase on the string in question. As you are comparing without\n\t\t\tconcern to case, the toUpperCase or toLowerCase calls are pointless and can be removed.</p>"},{"summary":"Correctness - Method calls deprecated SecureRandom method","type":"Bug","defaultSeverity":"Major","description":"<p>In JDK 1.5 or less, the <code>SecureRandom()</code> constructors and <code>SecureRandom.getSeed()</code> method are recommended against using. \n\t\t\tCall <code>SecureRandom.getInstance()</code> and <code>SecureRandom.getInstance().generateSeed()</code> instead.</p>"},{"summary":"Correctness - Method uses Properties.put instead of Properties.setProperty","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses the inherited method from Hashtable put(String key, Object value) in\n\t\t\ta Properties object. Since the Properties object was intended to be only a String to String\n\t\t\tmap, use of the derived put method is discouraged. Use the Properties.setProperty method instead.</p>\n\t\t\t<p>\n\t\t\tDon't use <code>properties.put(\"foo\", \"bar\");</code>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\tDo use <code>properties.setProperty(\"foo\", \"bar\");</code>\n\t\t\t</p>"},{"summary":"Style - Constrained method converts checked exception to unchecked","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method's exception signature is constrained by an interface or superclass not to throw\n\t\t\tany checked exceptions. Therefore a caught checked exception was converted to an unchecked exception\n\t\t\tand thrown. However, it appears that the class in question is owned by the same author as the constraining\n\t\t\tinterface or superclass. Consider changing the signature of this method to include the checked exception.</p>"},{"summary":"Correctness - Method needlessly implements what is default streaming behavior","type":"Bug","defaultSeverity":"Major","description":"<p>This method implements the Serializable interface by performing the same operations that\n\t\t\twould be done if this method did not exist. Since this is the case, this method is not needed.</p>"},{"summary":"Correctness - Method ignores the return value of EntityManager.merge","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls EntityManager.merge, and throws away the resultant value. This result is the \n    \t\tmanaged entity version of the potentially unmanaged object that was passed to merge. You should use\n    \t\tthe returned managed entity for any further use.</p>"},{"summary":"Correctness - Method constructs a Date object, merely to convert it to an Instant object","type":"Bug","defaultSeverity":"Major","description":"<p>This method creates a java.time.Instant object by first creating a java.util.Date object, and then calling\n    \t\ttoInstant() on it. It is simpler to just construct the Instant object directly, say by using\n    \t\t{@code Instant.now()} to get the current time, of by using {@code Instant.parse(CharSequence)} to convert a String.\n    \t\t</p>"},{"summary":"Performance - Method passes a Buffered Stream/Reader/Writer to a already buffering copy method","type":"Bug","defaultSeverity":"Major","description":"<p>This method copies data from input to output using streams or reader/writers using a well known copy method, from java.nio, commons-io, \n    \t\tspringframework, guava or poi. These methods are efficient in that they copy these files using buffers. However, this method is also \n    \t\tbuffering the streams, causing a double buffering to occur. So data first goes to one buffer, then is copied to another buffer, before\n    \t\tmaking it to the destination (or vice-versa). This just causes the copy operation to be inefficient both from a time perspective, as well\n    \t\tas a memory allocation one. When using these copy methods, do not pass buffered streams/readers/writers.</p>"},{"summary":"Performance - Method passes parsed string to primitive wrapper constructor","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes a primitive value retrieved from a <code>BoxedPrimitive.parseBoxedPrimitive(\"1\")</code> call to\n\t\t\tthe same class's constructor. It is simpler to just pass the string to the BoxedPrimitives constructor or, better yet, use the static valueOf.</p>\n\t\t\t<p>Instead of something like:<br/>\n<pre><code>\nBoolean bo = new Boolean(Boolean.parseBoolean(\"true\"));\nFloat f = new Float(Float.parseFloat(\"1.234\"));\n</code></pre>\n\t\t\tSimply do: <br/>\n<pre><code>\nBoolean bo = new Boolean(\"true\");\nFloat f = new Float(\"1.234\");\n</code></pre>\n\t\t\tor, to be more memory efficient: <br/>\n<pre><code>\nBoolean bo = Boolean.valueOf(\"true\");\nFloat f = Float.valueOf(\"1.234\");\n</code></pre>\n\t\t\t</p>"},{"summary":"Style - TestNG test method asserts that two doubles are exactly equal","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method calls assert with two doubles or Doubles. Due to the imprecision of doubles, you\n\t\t\tshould be using the assert method that takes a range parameter that gives a range of error.</p>"},{"summary":"Correctness - Class doesn't serialize superclass fields","type":"Bug","defaultSeverity":"Major","description":"<p>This method implements Serializable but is derived from a\n\t\t\tclass that does not. The superclass has fields that are not serialized\n\t\t\tbecause this class does not take the responsibility of writing these fields out\n\t\t\teither using Serializable's writeObject method, or Externalizable's writeExternal\n\t\t\tmethod. Therefore when this class is read from a stream, the superclass fields\n\t\t\twill only be initialized to the values specified in its default constructor.\n\t\t\tIf possible, change the superclass to implement Serializable, or implement\n\t\t\tSerializable or Externalizable methods in the child class.</p>"},{"summary":"Correctness - Tag library is not recycleable","type":"Bug","defaultSeverity":"Major","description":"<p>This tag library class implements an attribute whose associated backing store field\n\t\t\tis modified at another point in the tag library. In order for a tag library to be\n\t\t\trecycleable, only the container is allowed to change this attribute, through the use\n\t\t\tof the setXXX method of the taglib. By modifying the value programmatically, the\n\t\t\tcontainer will not initialize the attribute correctly on reuse.</p>"},{"summary":"Correctness - GUI uses absolute layout","type":"Bug","defaultSeverity":"Major","description":"<p>This class passes null to setLayout, which specifies that components are\n\t\t\tto be laid out using absolute coordinates. This makes making changes for\n\t\t\tfont sizes, etc, difficult as items will not reposition.</p>"},{"summary":"Correctness - This method uses an unknown character encoding literal","type":"Bug","defaultSeverity":"Major","description":"<p>This method specifies a <code>Charset</code> encoding with a String literal that is not recognized by the current\n    \t\tJDK. It's possible that this application will only be deployed on a JVM that does recognize this encoding, but\n    \t\tit seems dubious that this is the case.</p>\n    \t\t<p>\n    \t\tThe standard JDK encodings (for Java 8) are \"UTF-8\", \"US-ASCII\", \"ISO-8859-1\", \"UTF-16BE\", \"UTF-16LE\", \"UTF-16\".  These are all case-sensitive.\n    \t\t</p>"},{"summary":"Correctness - Method passes double value to BigDecimal Constructor","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls the BigDecimal constructor that takes a double, and passes a literal double constant value. Since\n\t\t\tthe use of BigDecimal is to get better precision than double, by passing a double, you only get the precision of double number\n\t\t\tspace. To take advantage of the BigDecimal space, pass the number as a string. </p>"},{"summary":"Correctness - Method checks an Optional reference for null or non nullness","type":"Bug","defaultSeverity":"Major","description":"This method uses an Optional variable, and checks the reference value for whether it is null or not null.\n\t\t\tSince the point of the Optional class is to avoid 'the null reference problem', having code that needs to \n\t\t\tcheck the reference itself is self defeating, and therefore makes the use of the Optional variable useless.\n\t\t\tYou should never use a variable of type Optional that has a value of null, and so there should be no need to\n\t\t\tcheck for it."},{"summary":"Correctness - Method calls Array.asList on an array of primitive values","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes an array of primitive values to the Array.asList call. As primitive\n\t\t\tvalues in arrays aren't automatically promoted to boxed primitives in arrays, the asList call\n\t\t\tcannot convert this array to a list of boxed primitives. It therefore just creates an array\n\t\t\twith one item in it, the array itself. This is rarely what is desired.</p>"},{"summary":"Correctness - Method puts non-String values into a Properties object","type":"Bug","defaultSeverity":"Major","description":"<p>This method places non-String objects into a Properties object. As the Properties object\n\t\t\tis intended to be a String to String map, putting non String objects is wrong, and takes advantage\n\t\t\tof a design flaw in the Properties class by deriving from Hashtable instead of using aggregation.\n\t\t\tIf you want a collection that holds other types of objects, use a Hashtable, or better still newer collections\n\t\t\tlike HashMap or TreeMap.</p>\n\t\t\t<p>\n\t\t\tDon't use <code>properties.put(\"foo\", bar);</code>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\tDo use <code>properties.setProperty(\"foo\", \"bar\");</code>\n\t\t\t</p>"},{"summary":"Correctness - Method passes an invalid value as a method argument","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes an invalid constant value to a method parameter that expects only a select number of possible values.\n\t\t\tThis is likely going to cause this method to fail to operate correctly.</p>"},{"summary":"Performance - Method fetches character array just to do the equivalent of the charAt method","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls the toCharArray method on a String to fetch an array of characters, only\n\t\t\tto retrieve one of those characters by index. It is more performant to just use the charAt method.</p>"},{"summary":"Style - Method is implemented with an exact copy of its superclass's method","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method is implemented using an exact copy of its superclass method's\n\t\t\timplementation, which usually means that this method can just be removed.</p>"},{"summary":"Experimental - Method uses a FileInputStream or FileOutputStream constructor","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method creates and uses a java.io.FileInputStream or java.io.FileOutputStream object. Unfortunately both\n    \t\tof these classes implement a finalize method, which means that objects created will likely hang around until a \n    \t\tfull garbage collection occurs, which will leave excessive garbage on the heap for longer, and potentially much\n    \t\tlonger than expected. Java 7 introduced two ways to create streams for reading and writing files that do not have this concern.\n    \t\tYou should consider switching from these above classes to\n    \t\t<code>\n    \t\tInputStream is = java.nio.file.Files.newInputStream(myfile.toPath());\n    \t\tOutputStream os = java.nio.file.Files.newOutputStream(myfile.toPath());\n    \t\t</code>\n    \t\t</p>"},{"summary":"Correctness - ExecutorService field doesn't ever get shutdown","type":"Bug","defaultSeverity":"Major","description":"<p>Most <code>ExecutorService</code> objects must be explicitly shutdown, \n            otherwise, their internal threads can prolong the running of the JVM, even when everything\n            else has stopped.</p>\n            \n            <p>FindBugs has detected that there are no calls to either the <code>shutdown()</code> or <code>shutdownNow()</code>\n            method, and thus, the <code>ExecutorService</code> is not guaranteed to ever terminate.  This is especially\n            problematic for <code>Executors.newFixedThreadPool()</code> and most of the other convenience methods in \n            the <code>Executors</code> class.</p>\n\t\t\t\n\t\t\t<p>Even though there are some exceptions to this, particularly when a custom <code>ThreadFactory</code> is \n\t\t\tprovided, or for <code>ThreadPoolExecutor</code>s with <code>allowsCoreThreadTimeOut()</code> set to true,\n\t\t\tit is good practice to explicitly shutdown the <code>ExecutorService</code> when its utility is done.</p>"},{"summary":"Correctness - JLabel doesn't specify what it's labeling","type":"Bug","defaultSeverity":"Major","description":"<p>This class uses JLabels that do not specify what fields are being labeled.\n\t\t\tThis hampers screen readers from given appropriate feed back to users. Use\n\t\t\tthe JLabel.setLabelFor method to accomplish this.</p>"},{"summary":"Style - Class does not implement an equals method","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class which has instance fields has no equals(Object o) method. It is possible that this\n    \t\tclass is never used in a context where this is required; it is often assumed, however, from clients \n    \t\tof this class that it is, so it is good to add such methods when you create them.\n    \t\t</p>"},{"summary":"Correctness - Method returns an array that appears not to be initialized","type":"Bug","defaultSeverity":"Major","description":"<p>This method returns an array that was allocated but apparently not initialized. It is\n\t\t\tpossible that the caller of this method will do the work of initializing this array, but\n\t\t\tthat is not a common pattern, and it is assumed that this array has just been forgotten to\n\t\t\tbe initialized.</p>"},{"summary":"Style - Inherited method returns more specific type of object than declared","type":"Code Smell","defaultSeverity":"Info","description":"<p>This inherited method is defined to return a java.lang.Object. However, the return types returned\n\t\t\tfrom this method can be defined by a more specific class or interface. If possible consider changing the\n\t\t\treturn type in the inheritance hierarchy of this method, otherwise the caller of this method will be brittle\n\t\t\tin handling of the return type.</p>"},{"summary":"Correctness - Method ignores return value of a non mutating method","type":"Bug","defaultSeverity":"Major","description":"<p>This method ignores the return value of a common method that is assumed to be non-mutating.\n\t\t\tIf this method does in fact not modify the object it is called on, there is no reason to call\n\t\t\tthis method, and it can be removed.</p>"},{"summary":"Correctness - Method encodes String bytes without specifying the character encoding","type":"Bug","defaultSeverity":"Major","description":"<p>The behavior of the <code>String(byte[] bytes)</code> and <code>String.getBytes()</code> is undefined if the string cannot be encoded in the platform's default charset. Instead, use the <code>String(byte[] bytes, String encoding)</code> or <code>String.getBytes(String encoding)</code> constructor which accepts the string's encoding as an argument. Be sure to specify the encoding used for the user's locale.</p>\n\n\t\t\t<p>As per the Java specifications, \"UTF-8\", \"US-ASCII\", \"UTF-16\" and \"ISO-8859-1\" will all be valid <a href = \"http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#standard\">encoding charsets</a>.  If you aren't sure, try \"UTF-8\".</p>\n\n\t\t\t<p><b>New in Java 1.7</b>, you can specify an encoding from <code>StandardCharsets</code>, like <code>StandardCharsets.UTF_8</code>.  These are generally preferrable because you don't have to deal with <code>UnsupportedEncodingException</code>.</p>"},{"summary":"Style - Constrained method converts checked exception to unchecked instead of another allowable checked exception","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method's exception signature is constrained by an interface of superclass not to throw a\n\t\t\tchecked exception that was caught. Therefore this exception was converted to an unchecked exception and\n\t\t\tthrown. It would probably be better to throw the closest checked exception allowed, and to annotate\n\t\t\tthe new exception with the original exception using the initial cause field.</p>"},{"summary":"Correctness - OneToMany join specifies 1+n EAGER join","type":"Bug","defaultSeverity":"Major","description":"<p>This JPA entity specifies a @OneToMany join with a fetch type of EAGER. By default EAGER joins perform\n    \tselect operations on each element returned from the original query in sequence, thus producing 1 + n queries.\n    \tIf you are going to use EAGER joins, it is wise to specify a Join type by using @Fetch annotations in\n    \tHibernate or @JoinFetch/@BatchFetch annotations (or hints) in EclipseLink, for example. Even so, these\n    \tannotations may only apply in limited cases, such as in the use of find.</p>"},{"summary":"Correctness - JUnit test method asserts that an autoboxed value is not null","type":"Bug","defaultSeverity":"Critical","description":"<p>This method asserts that a primitive value that was autoboxed into a boxed primitive was not\n\t\t\tnull. This will never happen, as primitives are never null, and thus the autoboxed value isn't\n\t\t\teither.</p>"},{"summary":"Style - Unconstrained method converts checked exception to unchecked","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method is not constrained by an interface or superclass, but converts a caught checked exception\n\t\t\tto unchecked exception and thrown. It would be more appropriate just to throw the checked exception, adding\n\t\t\tthe exception to the throws clause of the method.</p>"},{"summary":"Correctness - Method returns the result of invoking equals() on EqualsBuilder","type":"Bug","defaultSeverity":"Major","description":"<p>This method returns the result of equals on the EqualsBuilder type\n\t\t\tinstead of calling the method isEqual().</p>"},{"summary":"Correctness - Method uses array as basis of collection","type":"Bug","defaultSeverity":"Major","description":"<p>This method passes an array as the key to a Map, element in a Set, or item in a List when\n\t\t\tthe contains method is used on the List. Since arrays do not and cannot override the equals\n\t\t\tmethod, collection inclusion is based on the reference's address, which is probably not desired.\n\t\t\tIn the case that this is a TreeMap or TreeSet, consider passing a Comparator to the map's\n\t\t\tconstructor.</p>"},{"summary":"Style - This method stores the value of a toString() call into a field","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method calls the toString() method on an object and stores the value in a field. Doing this\n            throws away the type safety of having the object defined by a Class. Using String makes it very easy to\n            use the wrong type of value, and the compiler will not catch these mistakes. You should delay converting\n            values to Strings for as long as possible, and thus not store them as fields.\n            </p>"},{"summary":"Style - Method stutters exception message in logger","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method uses a logger method that takes an exception, and passes the result of\n\t\t\tthe getMessage() method on the exception that occurred as the log message.\n\t\t\tSince you are already passing in the exception, that message is already present in the\n\t\t\tlogs, and by passing it in as the message, you are just stuttering information.\n\t\t\tIt would be more helpful to provide a hand written message that describes the error in\n\t\t\tthis method, possibly including the values of key variables.</p>"},{"summary":"Style - Method uses the same HttpRequest parameter name but with different casing","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method fetches an HttpServletRequest parameter with a parameter name that was used in other locations\n\t\t\tbut with a different casing. As HttpServletRequest parameters are case-sensitive, this will be very confusing.</p>"},{"summary":"Style - method converts an exception into a boolean 'error code' value","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method catches an exception and returns a boolean that represents whether an exception occurred or not.\n\t       This throws away the value of exception handling and lets code ignore the resultant 'error code' return value.\n\t       You should just throw the exception to the caller instead.</p>"},{"summary":"Style - Method calls toString() on an instance of a class that hasn't overridden toString()","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method calls toString() on an object that hasn't overridden the toString() method, and thus relies on\n\t       the version found in java.lang.Object. This string is just a raw display of the object's class and location, and\n\t       provides no information about the information of use. You should implement toString in this class.</p>"},{"summary":"Correctness - Method has a Spring @Transactional annotation on it, but is non-public","type":"Bug","defaultSeverity":"Major","description":"<p>This method specifies a Spring @Transactional annotation but the method is defined as being non-public.\n    \t\tSpring only creates transactional boundaries on methods that are public, and so this annotation is not doing\n    \t\tanything for this method. Make the method public, or place the annotation on a more appropriate method.</p>"},{"summary":"Style - Method merely delegates to its superclass's version","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method is implemented to just delegate its implementation by calling\n\t\t\tthe superclass method with the same signature. This method can just be removed.</p>"},{"summary":"Performance - Method creates Boxed primitive from primitive only to get primitive value","type":"Bug","defaultSeverity":"Major","description":"<p>This method constructs a Boxed Primitive from a primitive only to call the primitiveValue() method to\n\t\t\tconvert it back to a primitive. Just use the primitive value instead.</p>\n\t\t\t<p>Instead of something like:<br/>\n<pre><code>\nboolean bo = new Boolean(true).booleanValue();\nfloat f = new Float(1.234f).floatValue();\n</code></pre>\n\t\t\tSimply do: <br/>\n<pre><code>\nboolean bo = true;\nfloat f = 1.234f;\n</code></pre>\n\t\t\t</p>"},{"summary":"Correctness - Field is an instance based ThreadLocal variable","type":"Bug","defaultSeverity":"Major","description":"<p>This ThreadLocal field is defined as being instance based (not static). As all \n\t       ThreadLocal variables describe permanent reachability roots so far as the garbage\n\t       collector is concerned, these variables will never be reclaimed (so long as the Thread lives).\n\t       Since this ThreadLocal is instanced, you potentially will be creating many non reclaimable \n\t       variables, even after the owning instance has been reclaimed. It is almost a certainty that\n\t       you want to use static based ThreadLocal variables.</p>"},{"summary":"Correctness - Method specifies an unrelated class when allocating a Logger","type":"Bug","defaultSeverity":"Major","description":"<p>This method creates a Logger by passing in a specification for a class that is unrelated\n\t\t\tto the class in which the logger is going to be used. This is likely caused by copy/paste code.</p>"},{"summary":"Style - This method parses a String that is a field","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method calls a parsing method (indexOf, lastIndexOf, startsWith, endsWith, substring, indexOf) on a String\n            that is a field, or comes from a collection that is a field. This implies that the String in question is holding \n            multiple parts of information inside the string, which would be more maintainable and type safe if that value was a\n            true collection or a first class object with fields, rather than a String.\n            </p>"},{"summary":"Correctness - Method calls Runtime.exit() or Runtime.halt()","type":"Bug","defaultSeverity":"Major","description":"<p>Calling <code>Runtime.exit()</code> or <code>Runtime.halt()</code> shuts down the entire Java virtual machine.\n\t\t\tThis should only be done in very rare circumstances. Such calls make it hard or impossible for your code to be\n\t\t\tinvoked by other code. Consider throwing a RuntimeException instead.</p>"},{"summary":"Style - TestNG test method passes constant to first (actual) assertion parameter","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method calls assert passing a constant value as the first of the two values. The assert\n\t\t\tmethod assumes that the expected value is the second parameter, and so it appears that the order\n\t\t\tof values has been swapped here.</p>"},{"summary":"Correctness - JUnit test method passes boolean expression to Assert.assertFalse / Assert.assertTrue","type":"Bug","defaultSeverity":"Major","description":"<p>This method evaluates a boolean expression and passes that to Assert.assertFalse / Assert.assertTrue.\n\t\t\tIt is better to pass the two values that are being equated to the Assert.assertEquals method so that the\n\t\t\tJUnit failure method is more descriptive of the intended test.</p>"},{"summary":"Performance - Method overly synchronizes a block of code","type":"Bug","defaultSeverity":"Major","description":"<p>This method implements a synchronized block, but the code found at the beginning\n\t\t\tof this block only accesses local variables, and not member variables, or this.\n\t\t\tFor better performance, move the code that accesses local variables only, above the\n\t\t\tsynchronized block, and leave the synchronized block only for field accesses, or access\n\t\t\tto this object.</p>"},{"summary":"Style - Method calls static method on instance reference","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method makes a static method call on an instance reference. For\n\t\t\treading comprehension of the code is better to call the method on the class,\n\t\t\trather than an instance. Perhaps this method's static nature has changed since\n\t\t\tthis code was written, and should be revisited.</p>"},{"summary":"Correctness - Method concatenates the result of a toString() call","type":"Bug","defaultSeverity":"Major","description":"<p>This method concatenates the output of a <code>toString()</code> call into a <code>StringBuffer</code> or <code>StringBuilder</code>.\n\t\t\tIt is simpler just to pass the object you want to append to the append call, as that form\n\t\t\tdoes not suffer the potential for <code>NullPointerException</code>s, and is easier to read.</p>\n\t\t\t\n\t\t\t<p>\n\t\t\tKeep in mind that Java compiles simple <code>String</code> concatenation to use <code>StringBuilder</code>s, \n\t\t\tso you may see this bug even when you don't use <code>StringBuilder</code>s explicitly.\n\t\t\t</p>\n\t\t\t\n\t\t\t<p>\n\t\t\tInstead of: <br/>\n<pre><code>\nStringBuilder builder = ...;\nbuilder.append(someObj.toString());\n...\nSystem.out.println(\"Problem with the object :\" + someObj.toString());\n</code></pre>\n\njust do: <br/>\n\n<pre><code>\nStringBuilder builder = ...\nbuilder.append(someObj);\n...\nSystem.out.println(\"Problem with the object :\" + someObj);\n</code></pre>\n\t\t\tto avoid the possibility of <code>NullPointerException</code>s when someObj is <code>null</code>.\n\t\t\t</p>"},{"summary":"Correctness - TestNG test method appears to have no assertions","type":"Bug","defaultSeverity":"Major","description":"<p>This TestNG test method has no assertions. While a unit test could still be valid if it relies on whether\n\t\t\tor not an exception is thrown, it is usually a sign of a weak test if there are no assertions. It is also\n\t\t\tpossible that assertions occur in a called method that is not seen by this detector, but this makes the logic of \n\t\t\tthis test more difficult to reason about.</p>"},{"summary":"Style - Method uses a Side Effect Constructor","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method creates an object but does not assign this object to any variable or field.\n\t\t\tThis implies that the class operates through side effects in the constructor, which is a\n\t\t\tbad pattern to use, as it adds unnecessary coupling. Consider pulling the side effect out of\n\t\t\tthe constructor, into a separate method, or into the calling method.</p>"},{"summary":"Correctness - Method tests a local variable for not null as guard and reassigns it","type":"Bug","defaultSeverity":"Major","description":"<p>This method tests a local variable to make sure it's not null before executing a conditional block of\n\t\t\tcode. However, in the conditional block it reassigns the local variable. It is likely that the guard\n\t\t\tshould have been a check to see if the local variable is null, not that the local variable was not null.</p>\n\t\t\t<p>example:\n<pre><code>\nif (name != null) {\n    name = person.getName();\n}\n</code></pre>\n\t\t\tIt is possible this is correct, but it seems likely the guard was meant to be <code>if (name == null)</code>\n\t\t\t</p>"},{"summary":"Correctness - Constructor makes call to non-final method","type":"Bug","defaultSeverity":"Major","description":"<p>This constructor makes a call to a non-final method. Since this method can be overridden, a subclasses\n\t\t\timplementation will be executing against an object that has not been initialized at the subclass level.\n\t\t\tYou should mark all methods called from the constructor as final to avoid this problem.</p>"},{"summary":"Performance - Method passes a concatenated string to SLF4J's format string","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses an SLF4J logger to log a string, where the first (format) string is created using concatenation.\n\t       You should use {} markers to inject dynamic content into the string, so that String building is delayed until the\n\t       actual log string is needed. If the log level is high enough that this log statement isn't used, then the appends\n\t       will never be executed.</p>"},{"summary":"Performance - Method allocations a java.awt.Graphics object without disposing it","type":"Bug","defaultSeverity":"Major","description":"<p>This method allocates a java.awt.Graphics object but doesn't dispose of it when done. While\n\t\t\tthe garbage collector will clean this up, given that a large number of Graphics objects can be\n\t\t\tcreated in a short period of time, it is recommended that you explicitly dispose() of them.</p>"},{"summary":"Style - Method builds XML strings through ad hoc concatenation","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method generates an XML based string by concatenating together various\n\t\t\tXML fragments, and variable values. Doing so makes the code difficult to read, modify\n\t\t\tand validate. It is much more clean to build XML structures in external files that are\n\t\t\tread in and transformed into the final product, through modification by Transformer.setParameter.</p>"},{"summary":"Correctness - Method triggers finalization","type":"Bug","defaultSeverity":"Major","description":"<p>Manually triggering finalization can result in serious performance problems and may be masking resource cleanup bugs. \n\t\t\tOnly the garbage collector, not application code, should be concerned with finalization.</p>"},{"summary":"Style - Class 'overloads' a method with both instance and static versions","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class 'overloads' the same method with both an instance and static version. As the use\n\t\t\tof these two models is different, it will be confusing to the users of these methods.</p>"},{"summary":"Style - Method does not define a parameter as final, but could","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method does not write to a parameter. To help document this, and to perhaps\n\t\t\thelp the JVM optimize the invocation of this method, you should consider defining these parameters\n\t\t\tas final.</p>\n\t\t\t\n\t\t\t<p>Performance gains are debatable as \"the final keyword does not appear in the class file for \n\t\t\tlocal variables and parameters, thus it cannot impact the runtime performance. Its only use \n\t\t\tis to clarify the coders intent that the variable not be changed (which many consider dubious \n\t\t\treason for its usage), and dealing with anonymous inner classes.\" - http://stackoverflow.com/a/266981/1447621 </p>"},{"summary":"Performance - Method passes an empty string to StringBuffer of StringBuilder constructor","type":"Bug","defaultSeverity":"Major","description":"<p>This method calls the StringBuffer or StringBuilder constructor passing in a constant empty string (\"\").\n\t\t\tThis is the same as calling the default constructor, but makes the code work harder. Consider passing in a\n\t\t\tdefault size instead.</p>"},{"summary":"Correctness - Class defines methods which confuse Character with int parameters","type":"Bug","defaultSeverity":"Major","description":"<p>This class defines two methods that differ only by a parameter being defined\n\t\t\tas Character vs. int, long, float or double. As autoboxing is present, it may be\n\t\t\tassumed that a parameter of 'a' would map to the Character version, but it does not.</p>"},{"summary":"Experimental - Method passes a simple String.format result to an SLF4J's format string","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method uses an SLF4J logger to log a string, which was produced through a call to String.format, where\n\t       the format string passed was a constant string containing only simple format markers that could be directly handled\n\t       by slf4j. Rather than doing\n\t       <pre>\n\t          logger.error(\"String.format(\"This %s is an error\", s));\n\t       <pre>\n\t       do\n\t       <pre>\n\t          logger.error(This {} is an error\", s);\n\t       </pre>\n\t       </p>"},{"summary":"Performance - Method needlessly boxes a boolean constant","type":"Bug","defaultSeverity":"Major","description":"<p>This method assigns a Boxed boolean constant to a primitive boolean variable, or assigns a primitive boolean\n\t\t\tconstant to a Boxed boolean variable. Use the correct constant for the variable desired. Use <br/>\n<pre><code>\nboolean b = true;\nboolean b = false;\n</code></pre>\n\t\t\tor <br/>\n<pre><code>\nBoolean b = Boolean.TRUE;\nBoolean b = Boolean.FALSE;\n</code></pre>\n\t\t\t</p>\n\t\t\t\n\t\t\t<p>Be aware that this boxing happens automatically when you might not expect it.  For example, <br/>\n<pre><code>\nMap<String, Boolean> statusMap = ...\n\npublic Boolean someMethod() {\n    statusMap.put(\"foo\", true);  //the \"true\" here is boxed\n    return false;  //the \"false\" here is boxed\n}\n</code></pre>\n\t\t\thas two cases of this needless autoboxing.  This can be made more efficient by simply substituting \n\t\t\tin the constant values: <br/>\n\t\t\t\n<pre><code>\nMap<String, Boolean> statusMap = ...\n\npublic Boolean someMethod() {\n    statusMap.put(\"foo\", Boolean.TRUE);\n    return Boolean.FALSE;\n}\n</code></pre>\n\t\t\t</p>"},{"summary":"Correctness - Method uses immediate execution of a block of code that is often not used","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses the Optional.orElse() method passing in some code that will execute immediately, whether \n    \t\tor not the else case of the Optional is needed. This may cause incorrect side effects to happen, or at the \n    \t\tminimum, code to execute for no reason. It would be better to use Optional.orElseGet()"},{"summary":"Style - Class orders instance fields before static fields","type":"Code Smell","defaultSeverity":"Info","description":"<p>This class adds fields to the class in an order that is confusing, and not expected by \n    \t\tother developers. The standard is for static fields to be listed first, followed by instance \n    \t\tfields. when fields are listed out of order, developers may make assumptions about their\n    \t\tbehaviour that is incorrect and lead to bugs.</p>"},{"summary":"Performance - Method creates Boxed primitive from primitive only to cast to another primitive type","type":"Bug","defaultSeverity":"Major","description":"<p>This method constructs a Boxed Primitive from a primitive only to call the primitiveValue() method to\n\t\t\tcast the value to another primitive type. It is simpler to just use casting.</p>\n\t\t\t<p>Instead of something like:<br/>\n<pre><code>\ndouble someDouble = ...\nfloat f = new Double(someDouble).floatValue();\n\nint someInt = ...\nbyte b = new Integer(someInt).byteValue();\n</code></pre>\n\t\t\tSimply do: <br/>\n<pre><code>\ndouble someDouble = ...\nfloat f = (float) someDouble;\n\nint someInt = ...\nbyte b = (byte)someInt;\n</code></pre>\n\t\t\t</p>"},{"summary":"Correctness - Class creates and initializes a collection but never reads or gains information from it","type":"Bug","defaultSeverity":"Major","description":"<p>This class creates and initializes a collection as a field but then never access this collection\n\t\t\tto gain information, or fetch items from the collection. It is likely that this collection\n\t\t\tis left over from a past effort, and can be removed.</p>"},{"summary":"Correctness - TestNG test method uses Java asserts rather than a TestNG assertion","type":"Bug","defaultSeverity":"Major","description":"<p>This method uses a Java assert to assure that a certain state is in effect. As this is\n\t\t\ta TestNG test it makes more sense to either check this condition with a TestNG assert, or allow\n\t\t\ta following exception to occur.</p>"},{"summary":"Correctness - Method accesses list or array with constant index","type":"Bug","defaultSeverity":"Major","description":"<p>This method accesses an array or list using a constant integer index. Often,\n\t\t\tthis is a typo where a loop variable is intended to be used. If however, specific\n\t\t\tlist indices mean different specific things, then perhaps replacing the list with\n\t\t\ta first-class object with meaningful accessors would make the code less brittle.</p>"},{"summary":"Style - Method prints the stack trace to the console","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method prints a stack trace to the console. This is non configurable, and causes an \n    \t\tapplication to look unprofessional. Switch to using loggers so that users can control what \n    \t\tis logged and where.</p>"},{"summary":"Performance - Method does not presize the allocation of a collection","type":"Bug","defaultSeverity":"Major","description":"<p>This method allocates a collection using the default constructor even though it is known\n\t\t\ta priori how many items are going to be placed in the collection (or at least can be reasonably guessed)\n\t\t\tand thus needlessly causes intermediate reallocations of the collection.</p>\n\t\t\t<p>You can use the constructor that takes an initial size and that will be much better, but\n\t\t\tdue to the loadFactor of Maps and Sets, even this will not be a correct estimate.</p>\n\t\t\t<p>If you are using Guava, use its methods that allocate maps and sets with a predetermined size,\n\t\t\tto get the best chance for no reallocations, such as:\n\t\t\t<ul>\n\t\t\t    <li>Sets.newHashSetWithExpectedSize(int)</li>\n\t\t\t    <li>Maps.newHashMapWithExpectedSize(int)</li>\n\t\t\t</ul>\n\t\t\tIf not, a good estimate would be the expectedSize / {LOADING_FACTOR} which by default is 0.75\n\t\t\t</p>"},{"summary":"Correctness - JUnit 4 test using deprecated junit.framework.* classes","type":"Bug","defaultSeverity":"Major","description":"<p>This JUnit 4 test is still using classes from the junit.framework.* package. You should switch them\n\t\t\tover to the corresponding org.junit.* set of classes, instead.</p>"},{"summary":"Style - Method uses the same HttpSession attribute name but with different casing","type":"Code Smell","defaultSeverity":"Info","description":"<p>This method sets or gets an HttpSession attribute with a parameter name that was used in other locations\n\t\t\tbut with a different casing. As HttpSession attribute are case-sensitive, this will be very confusing.</p>"},{"summary":"Classes and enums with private members should have a constructor","type":"Code Smell","defaultSeverity":"Major","description":"<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>","debt":"5min"},{"summary":"\"toString()\" and \"clone()\" methods should not return null","type":"Bug","defaultSeverity":"Major","description":"<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code>\ninstead contravenes the method's implicit contract.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return null; // Noncompliant\n  } else {\n    // ...\n {code}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return \"\";\n  } else {\n    // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>","debt":"5min"},{"summary":"Constant names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>","debt":"2min"},{"summary":"Boolean expressions should not be gratuitous","type":"Code Smell","defaultSeverity":"Major","description":"<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"10min"},{"summary":"Value-based classes should not be used for locking","type":"Bug","defaultSeverity":"Major","description":"<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization...\n</blockquote>\n<p>This is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to\n<code>struct</code>s in other languages) that will come in future versions of Java.</p>\n<blockquote>\n  <p> Instances of a value-based class ... </p>\n  <ul>\n    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no committment as to the identity of\n    returned instances; </li>\n  </ul>\n</blockquote>\n<p>Which means that you can't be sure you're the only one trying to lock on any given instance of a value-based class, opening your code up to\ncontention and deadlock issues.</p>\n<p>Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.</p>\n<p>This rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the <code>java.time</code>\npackage except <code>Clock</code>; the date classes for alternate calendars, <code>HijrahDate</code>, <code>JapaneseDate</code>,\n<code>MinguoDate</code>, <code>ThaiBuddhistDate</code>; and the optional classes: <code>Optional</code>, <code>OptionalDouble</code>,\n<code>OptionalLong</code>, <code>OptionalInt</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;Foo&gt; fOpt = doSomething();\nsynchronized (fOpt) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>","debt":"10min"},{"summary":"Servlets should not have mutable instance fields","type":"Bug","defaultSeverity":"Major","description":"<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to\nprocess this request. So all threads are sharing the servlet instances and by extension instance fields. To prevent any misunderstanding and\nunexpected behavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently\n  ...\n}\n</pre>\n<p>or </p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  //Same reason\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYBUC\">CERT, MSC11-J.</a> - Do not let session information leak within a servlet </li>\n</ul>","debt":"30min"},{"summary":"Field names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n   private int my_field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private int myField;\n}\n</pre>","debt":"2min"},{"summary":"Track uses of \"TODO\" tags","type":"Code Smell","defaultSeverity":"Info","description":"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>"},{"summary":"Track uses of \"FIXME\" tags","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>"},{"summary":"Interface names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic interface myInterface {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyInterface {...}\n</pre>","debt":"10min"},{"summary":"\"Exception\" should not be caught when not required by called methods","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the <code>catch</code> clause.</p>\n<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n</pre>\n<p>or if runtime exceptions should not be caught:</p>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n</ul>","debt":"15min"},{"summary":"Deprecated code should be removed","type":"Code Smell","defaultSeverity":"Info","description":"<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>","debt":"10min"},{"summary":"Type parameter names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type\nparameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { // Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass&lt;T&gt; {\n  &lt;T&gt; void method(T t) {\n  }\n}\n</pre>","debt":"10min"},{"summary":"\"Optional\" should not be used for parameters","type":"Code Smell","defaultSeverity":"Major","description":"<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value. </p>\n<p>And for that, it's valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really\nincreasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and there's really no reason to have <code>Optional</code> parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String sayHello(Optional&lt;String&gt; name) {  // Noncompliant\n  if (name == null || !name.isPresent()) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String sayHello(String name) {\n  if (name == null) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>","debt":"5min"},{"summary":"Locks should be released","type":"Bug","defaultSeverity":"Critical","description":"<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>\n<p>Failing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    lock.lock(); // Noncompliant\n    if (isInitialized()) {\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    if (isInitialized()) {\n      lock.lock();\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>","debt":"20min"},{"summary":"Strings literals should be placed on the left side when checking for equality","type":"Code Smell","defaultSeverity":"Minor","description":"<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null &amp;&amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n</pre>","debt":"10min"},{"summary":"Conditionally executed blocks should be reachable","type":"Bug","defaultSeverity":"Major","description":"<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"15min"},{"summary":"Abstract class names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\nabstract class names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nabstract class MyClass { // Noncompliant\n}\n\nclass AbstractLikeClass { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nabstract class MyAbstractClass {\n}\n\nclass LikeClass {\n}\n</pre>","debt":"10min"},{"summary":"Untrusted data should not be stored in sessions","type":"Vulnerability","defaultSeverity":"Major","description":"<p>Data in a web session is considered inside the \"trust boundary\". That is, it is assumed to be trustworthy. But storing unvetted data from an\nunauthenticated user violates the trust boundary, and may lead to that data being used inappropriately.</p>\n<p>This rule raises an issue when data from <code>Cookie</code>s or <code>HttpServletRequest</code>s is stored in a session. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlogin = request.getParameter(\"login\");\nsession.setAttribute(\"login\", login);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/501\">MITRE, CWE-501</a> - Trust Boundary Violation </li>\n</ul>","debt":"20min"},{"summary":"Reflection should not be used to check non-runtime annotations","type":"Bug","defaultSeverity":"Major","description":"<p>The writer of an annotation can set one of three retention policies for it:</p>\n<ul>\n  <li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>,\n  <code>@SuppressWarnings</code>. </li>\n  <li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the\n  default. </li>\n  <li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM. </li>\n</ul>\n<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any\nother retention policy is simply an error, since the test will always return false.</p>\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMethod m = String.class.getMethod(\"getBytes\", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code\n</pre>","debt":"15min"},{"summary":"Value-based objects should not be serialized","type":"Bug","defaultSeverity":"Minor","description":"<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization...\n</blockquote>\n<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = new Foo(0);\n</pre>\n<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = arr[0];\n</pre>\n<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>\n<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.</p>\n<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the\ndate classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass implements Serializable {\n  private HijrahDate date;  // Noncompliant; mark this transient\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>","debt":"2min"},{"summary":"\"SingleConnectionFactory\" instances should be set to \"reconnectOnException\"","type":"Bug","defaultSeverity":"Major","description":"<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic\nconnection recovery when the connection goes bad. </p>\n<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this\nconnection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the\n<code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing\nanything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\" p:reconnectOnException=\"true\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<p>or</p>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n   &lt;property name=\"reconnectOnException\"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;\n &lt;/bean&gt;\n</pre>","debt":"2min"},{"summary":"Limited dependence should be placed on operator precedence rules in expressions","type":"Code Smell","defaultSeverity":"Major","description":"<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational\noperators are used in together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n  <tbody>\n    <tr>\n      <td> </td>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td><code>&amp;</code></td>\n      <td><code>^</code></td>\n      <td> <code>|</code> </td>\n    </tr>\n    <tr>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&amp;</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>^</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td> <code>|</code> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions </li>\n  <li> MISRA C:2004, 12.2 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>\n  <li> MISRA C++:2008, 5-0-1 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions </li>\n  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_wI\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VoAyAQ\">CERT, EXP00-CPP.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9wHEAw\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/783.html\">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>\n</ul>","debt":"2min"},{"summary":"Statements should be on separate lines","type":"Code Smell","defaultSeverity":"Major","description":"<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>","debt":"1min"},{"summary":"Package names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z]+(\\.[a-z][a-z0-9]*)*$</code>:</p>\n<pre>\npackage org.exAmple; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n</pre>","debt":"10min"},{"summary":"Control structures should use curly braces","type":"Code Smell","defaultSeverity":"Critical","description":"<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>","debt":"2min"},{"summary":"Track uses of disallowed classes","type":"Code Smell","defaultSeverity":"Info","description":"<p>This rule allows banning certain classes.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n</ul>\n<pre>\nString name;  // Noncompliant\n</pre>"},{"summary":"Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should not be called on Thread instances","type":"Bug","defaultSeverity":"Blocker","description":"<p>The methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available on a <code>Thread</code> instance, but only\nbecause all classes in Java extend <code>Object</code> and therefore automatically inherit those methods. But there are two very good reasons for not\ncalling them on a <code>Thread</code>:</p>\n<ul>\n  <li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling\n  them will corrupt the behavior of the JVM. </li>\n  <li> It is not clear (perhaps even to the original coder) what is really expected. For instance, it is waiting for the execution of the Thread to\n  suspended, or is it the acquisition of the object monitor that is waited for? </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n</pre>","debt":"30min"},{"summary":"Throwable.printStackTrace(...) should not be called","type":"Vulnerability","defaultSeverity":"Minor","description":"<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>","debt":"10min"},{"summary":"Files should not have too many lines of code","type":"Code Smell","defaultSeverity":"Major","description":"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>","debt":"1h"},{"summary":"\"hashCode\" and \"toString\" should not be called on array instances","type":"Bug","defaultSeverity":"Major","description":"<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's\n\"identity hash code\", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents.\nInstead, you should pass the array to the relevant static <code>Arrays</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); // Noncompliant\n    int argHash = args.hashCode(); // Noncompliant\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n</pre>","debt":"5min"},{"summary":"Tabulation characters should not be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>","debt":"2min"},{"summary":"IllegalMonitorStateException should not be caught","type":"Code Smell","defaultSeverity":"Critical","description":"<p>According to Oracle Javadoc:</p>\n<blockquote>\n  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting\n  on an object's monitor without owning the specified monitor.</p>\n</blockquote>\n<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and\n<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n</pre>","debt":"20min"},{"summary":"Collections should not be passed as arguments to their own methods","type":"Bug","defaultSeverity":"Major","description":"<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>","debt":"15min"},{"summary":"Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed","type":"Bug","defaultSeverity":"Major","description":"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {\n  doSomething();\n}\n...\nif (false) {\n  doSomethingElse();\n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nboolean b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS2583'>S2583</a> instead.</p>","debt":"2min"},{"summary":"Lines should not be too long","type":"Code Smell","defaultSeverity":"Major","description":"<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>","debt":"1min"},{"summary":"\"ResultSet.isLast()\" should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>\nresult sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear\non what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nResultSet rs = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (! rs.next()) {\n  // process row\n}\n</pre>","debt":"10min"},{"summary":"Nested blocks of code should not be left empty","type":"Code Smell","defaultSeverity":"Major","description":"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>","debt":"5min"},{"summary":"A \"while\" loop should be used instead of a \"for\" loop","type":"Code Smell","defaultSeverity":"Minor","description":"<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>","debt":"5min"},{"summary":"\"URL.hashCode\" and \"URL.equals\" should be avoided","type":"Code Smell","defaultSeverity":"Major","description":"<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to\nresolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand\nmakes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>\n<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the\n<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>\n<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and\n<code>hashCode</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant\n\n  URL homepage = new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant\n\n  URI homepage = new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n</pre>","debt":"20min"},{"summary":"Jump statements should not occur in \"finally\" blocks","type":"Bug","defaultSeverity":"Major","description":"<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any\nunhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and\n<code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   // incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/584.html\">MITRE, CWE-584</a> - Return Inside Finally Block </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/mIEbAQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>","debt":"30min"},{"summary":"Non-public methods should not be \"@Transactional\"","type":"Bug","defaultSeverity":"Major","description":"<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't \"see\" non-<code>public</code>\nmethods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a <code>private</code> method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the\nmethod is actually written to be <code>@Transactional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>","debt":"20min"},{"summary":"Methods should not have too many return statements","type":"Code Smell","defaultSeverity":"Major","description":"<p>Having too many return statements in a method increases the method's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>","debt":"20min"},{"summary":"Invalid \"Date\" values should not be used","type":"Bug","defaultSeverity":"Major","description":"<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month\nstarts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12\nfor month, and you'll get January of the following year.</p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and\n<code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Field</th>\n      <th>Valid</th>\n    </tr>\n    <tr>\n      <td>month</td>\n      <td>0-11</td>\n    </tr>\n    <tr>\n      <td>date (day)</td>\n      <td>0-31</td>\n    </tr>\n    <tr>\n      <td>hour</td>\n      <td>0-23</td>\n    </tr>\n    <tr>\n      <td>minute</td>\n      <td>0-60</td>\n    </tr>\n    <tr>\n      <td>second</td>\n      <td>0-61</td>\n    </tr>\n  </tbody>\n</table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>","debt":"5min"},{"summary":"Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression","type":"Code Smell","defaultSeverity":"Major","description":"<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>","debt":"5min"},{"summary":"Try-catch blocks should not be nested","type":"Code Smell","defaultSeverity":"Major","description":"<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.</p>","debt":"20min"},{"summary":"Methods should not have too many parameters","type":"Code Smell","defaultSeverity":"Major","description":"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore\nignored.</p>","debt":"20min"},{"summary":"Non-serializable classes should not be written","type":"Bug","defaultSeverity":"Major","description":"<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown.\nOnly a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Vegetable {  // neither implements Serializable nor extends a class that does\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  // Noncompliant. Nothing will be written\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Vegetable implements Serializable {  // can now be serialized\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n</pre>","debt":"15min"},{"summary":"Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>\n  <li> <code>Deque</code> instead of <code>Stack</code> </li>\n  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>\n  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>","debt":"20min"},{"summary":"Generic exceptions should never be thrown","type":"Code Smell","defaultSeverity":"Major","description":"<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>","debt":"20min"},{"summary":"Optional value should only be accessed after calling isPresent()","type":"Bug","defaultSeverity":"Major","description":"<p><code>Optional</code> value can hold either a value or not. The value held in the <code>Optional</code> can be accessed using the\n<code>get()</code> method, but it will throw a </p>\n<p><code>NoSuchElementException</code> if there is no value present. To avoid the exception, calling the <code>isPresent()</code> method should always\nbe done before any call to <code>get()</code>.</p>\n<p>Alternatively, note that other methods such as <code>orElse(...)</code>, <code>orElseGet(...)</code> or <code>orElseThrow(...)</code> can be used\nto specify what to do with an empty <code>Optional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.get(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nif (value.isPresent()) {\n  String stringValue = value.get();\n}\n</pre>\n<p>or</p>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.orElse(\"default\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n</ul>","debt":"10min"},{"summary":"\"collect\" should be used with \"Streams\" instead of \"list::add\"","type":"Code Smell","defaultSeverity":"Minor","description":"<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the\nbetter choice because it's automatically thread-safe and parallellizable. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; bookNames = new ArrayList&lt;&gt;();\nbooks.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .forEach(bookNames::add);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .collect(Collectors.toList());\n</pre>","debt":"15min"},{"summary":"Cognitive Complexity of methods should not be too high","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>","debt":"5min"},{"summary":"\"private\" methods that don't access instance data should be \"static\"","type":"Code Smell","defaultSeverity":"Minor","description":"<p><code>private</code> methods that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the\nmethod.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>\n<ul>\n  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>\n  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>\n  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>\n</ul>","debt":"5min"},{"summary":"\"notifyAll\" should be used","type":"Bug","defaultSeverity":"Major","description":"<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code>\nrouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notify();  // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notifyAll();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OoAlAQ\">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread\n  </li>\n</ul>","debt":"2min"},{"summary":"\".equals()\" should not be used to test the values of \"Atomic\" classes","type":"Bug","defaultSeverity":"Major","description":"<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and\n<code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free,\nthread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be \"equal\" to itself. Instead, you should\n<code>.get()</code> the value and make comparisons on it.</p>\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and\n<code>AtomicBoolean</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n</pre>","debt":"5min"},{"summary":"Package declaration should match source file directory","type":"Code Smell","defaultSeverity":"Critical","description":"<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java\nfile located at \"src/org/sonarqube/Foo.java\" should have a package of \"org.sonarqube\". </p>\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the\n\"com.apple\" package, which could degrade the maintainability of both the class and its application.</p>","debt":"5min"},{"summary":"Lazy initialization of \"static\" fields should be \"synchronized\"","type":"Code Smell","defaultSeverity":"Critical","description":"<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of non-<code>volatile</code> fields could mean that a second thread\nhas access to a half-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the\ninitialization block should be <code>synchronized</code> or the variable made <code>volatile</code>.</p>\n<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected static Object instance = null;\n\npublic static Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();  // Noncompliant\n    return instance;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected static volatile Object instance = null;\n\npublic static Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();\n    return instance;\n}\n</pre>\n<p>or </p>\n<pre>\nprotected static Object instance = null;\n\npublic static synchronized Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();\n    return instance;\n}\n</pre>","debt":"30min"},{"summary":"\"Collections.EMPTY_LIST\", \"EMPTY_MAP\", and \"EMPTY_SET\" should not be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw\nones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>\nfields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>","debt":"2min"},{"summary":"Non-serializable objects should not be stored in \"HttpSession\" objects","type":"Bug","defaultSeverity":"Major","description":"<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not\nseem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use\nin a process called \"passivation\". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such\nsessions at startup.</p>\n<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be\nserialized, and understand that if you've stored non-serializable objects in the session, errors will result. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\n//...\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  // Noncompliant; Address isn't serializable\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/579.html\">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session\n  </li>\n</ul>","debt":"20min"},{"summary":"\"Lock\" objects should not be \"synchronized\"","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with\n<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such\nobjects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n//...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/cQCaAg\">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level\n  concurrency objects </li>\n</ul>","debt":"15min"},{"summary":"\"compareTo\" results should not be checked for specific values","type":"Bug","defaultSeverity":"Minor","description":"<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>","debt":"5min"},{"summary":"Classes with only \"static\" methods should not be instantiated","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only\n<code>static</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>See Also</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1118'>S1118</a> - Utility classes should not have public constructors </li>\n</ul>","debt":"2min"},{"summary":"Track uses of \"NOSONAR\" comments","type":"Code Smell","defaultSeverity":"Major","description":"<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>","debt":"1min"},{"summary":"Group ids should follow a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom's <code>groupId</code> does not match\nthe provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>(com|org)(\\.[a-z][a-z-0-9]*)+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;com.myco&lt;/groupId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>","debt":"5min"},{"summary":"\"static\" members should be accessed statically","type":"Code Smell","defaultSeverity":"Major","description":"<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>","debt":"5min"},{"summary":"Track uses of disallowed dependencies","type":"Code Smell","defaultSeverity":"Major","description":"<p>Whether they are disallowed locally for security, license, or dependability reasons, forbidden dependencies should not be used. </p>\n<p>This rule raises an issue when the group or artifact id of a direct dependency matches the configured forbidden dependency pattern. </p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter of: <code>*:.*log4j.*</code></p>\n<pre>\n&lt;dependency&gt; &lt;!-- Noncompliant --&gt;\n    &lt;groupId&gt;log4j&lt;/groupId&gt;\n    &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n    &lt;version&gt;1.2.17&lt;/version&gt;\n&lt;/dependency&gt;\n</pre>"},{"summary":"Wildcard imports should not be used","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>","debt":"5min"},{"summary":"Utility classes should not have public constructors","type":"Code Smell","defaultSeverity":"Major","description":"<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this\nrule.</p>","debt":"30min"},{"summary":"Null should not be returned from a \"Boolean\" method","type":"Code Smell","defaultSeverity":"Critical","description":"<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and\n<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>","debt":"20min"},{"summary":"Unused type parameters should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint Add(int a, int b)\n{\n  return a + b;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"5min"},{"summary":"Unit tests should throw exceptions","type":"Code Smell","defaultSeverity":"Minor","description":"<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature. </p>\n<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testMethod() {\n  try {\n            // Some code\n  } catch (MyException e) {\n    Assert.fail(e.getMessage());  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testMethod() throws MyException {\n    // Some code\n}\n</pre>","debt":"2min"},{"summary":"\"switch\" statements should not have too many \"case\" clauses","type":"Code Smell","defaultSeverity":"Major","description":"<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>","debt":"30min"},{"summary":"Useless imports should be removed","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>","debt":"2min"},{"summary":"Unused \"private\" methods should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated methods.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>","debt":"5min"},{"summary":"Redundant pairs of parentheses should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>","debt":"1min"},{"summary":"JUnit assertions should include messages","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Adding messages to JUnit assertions is an investment in your future productivity. Spend a few seconds writing them now, and you'll save a lot of\ntime on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the tests and the\nassertion messages work as a sort of documentation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo(\"pear\");  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertEquals(\"There should have been 4 Fruits in the list\", 4, list.size());\n\ntry {\n  fail(\"And exception is expected here\");\n} catch (Exception e) {\n  assertThat(list.get(0)).as(\"check first element\").overridingErrorMessage(\"The first element should be a pear, not a %s\", list.get(0)).isEqualTo(\"pear\");\n}\n</pre>","debt":"5min"},{"summary":"Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>","debt":"2min"},{"summary":"Tests should include assertions","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.</p>\n<p>This rule raises an exception when no assertions from any of the following frameworks are found in a test:</p>\n<ul>\n  <li> Junit </li>\n  <li> Fest 1.x </li>\n  <li> Fest 2.x </li>\n  <li> Rest-assured 2.0 </li>\n  <li> AssertJ </li>\n  <li> Hamcrest </li>\n  <li> Spring's <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> </li>\n  <li> Truth Framework </li>\n  <li> Mockito </li>\n  <li> EasyMock </li>\n  <li> JMock </li>\n  <li> WireMock </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass = new MyClass();\n  myClass.doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoSomething() {\n  MyClass myClass = new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n</pre>","debt":"10min"},{"summary":"Local Variables should not be declared and then immediately returned or thrown","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>","debt":"2min"},{"summary":"Custom resources should be closed","type":"Bug","defaultSeverity":"Blocker","description":"<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule\ntemplate allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom\nresources are leaked.</p>\n<h2>See also</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=squid%3AS2095'>S2095</a> - Resources should be closed </li>\n</ul>"},{"summary":"Dependencies should not have \"system\" scope","type":"Bug","defaultSeverity":"Critical","description":"<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact\nin an environment that's not configured just like yours is, your code won't work. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>","debt":"5min"},{"summary":"Instance methods should not write to \"static\" fields","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>\nmethods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>","debt":"20min"},{"summary":"Redundant modifiers should not be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically\n<code>public static final</code>. There is no need to explicitly declare them so.</p>\n<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>\n<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, and <code>private</code> is redundant on the\nconstructor of an <code>Enum</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n</pre>","debt":"2min"},{"summary":"pom elements should be in the recommended order","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The POM Code Convention is the Maven project's internal recommendation for POM element ordering. It calls for listing modifiers in the following\norder:</p>\n<ol>\n  <li> &lt;modelVersion/&gt; </li>\n  <li> &lt;parent/&gt; </li>\n  <li> &lt;groupId/&gt; </li>\n  <li> &lt;artifactId/&gt; </li>\n  <li> &lt;version/&gt; </li>\n  <li> &lt;packaging/&gt; </li>\n  <li> &lt;name/&gt; </li>\n  <li> &lt;description/&gt; </li>\n  <li> &lt;url/&gt; </li>\n  <li> &lt;inceptionYear/&gt; </li>\n  <li> &lt;organization/&gt; </li>\n  <li> &lt;licenses/&gt; </li>\n  <li> &lt;developers/&gt; </li>\n  <li> &lt;contributors/&gt; </li>\n  <li> &lt;mailingLists/&gt; </li>\n  <li> &lt;prerequisites/&gt; </li>\n  <li> &lt;modules/&gt; </li>\n  <li> &lt;scm/&gt; </li>\n  <li> &lt;issueManagement/&gt; </li>\n  <li> &lt;ciManagement/&gt; </li>\n  <li> &lt;distributionManagement/&gt; </li>\n  <li> &lt;properties/&gt; </li>\n  <li> &lt;dependencyManagement/&gt; </li>\n  <li> &lt;dependencies/&gt; </li>\n  <li> &lt;repositories/&gt; </li>\n  <li> &lt;pluginRepositories/&gt; </li>\n  <li> &lt;build/&gt; </li>\n  <li> &lt;reporting/&gt; </li>\n  <li> &lt;profiles/&gt; </li>\n</ol>\n<p>Not following this convention has no technical impact, but will reduce the pom's readability because most developers are used to the standard\norder.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention\">POM Code Convention</a> </li>\n</ul>","debt":"10min"},{"summary":"Floating point numbers should not be tested for equality","type":"Bug","defaultSeverity":"Major","description":"<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>","debt":"5min"},{"summary":"Artifact ids should follow a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom's <code>artifactId</code> does not match the\nprovided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>","debt":"5min"},{"summary":"Inner classes which do not reference their owning classes should be \"static\"","type":"Code Smell","defaultSeverity":"Major","description":"<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary. </p>\n<p>If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it. </p>\n<p>However, while a nested/<code>static</code> class would be more efficient, it's worth nothing that there are semantic differences between an inner\nclass and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>","debt":"15min"},{"summary":"Deprecated \"${pom}\" properties should not be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect,\ndeprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated\nfeatures should be added, and all existing uses should be gradually removed.</p>\n<p>This rule raises an issue when <code>${pom.*</code>} properties are used in a pom.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;\n</pre>\n<p>or</p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;\n</pre>","debt":"2min"},{"summary":"\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices","type":"Bug","defaultSeverity":"Blocker","description":"<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any \"set\" method of a <code>PreparedStatement</code> with a\nnumber less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1,\nrather than 0</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>","debt":"2min"},{"summary":"Types should be used in lambdas","type":"Code Smell","defaultSeverity":"Major","description":"<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (a, b) -&gt; {  // Noncompliant\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -&gt; {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>","debt":"5min"},{"summary":"\"indexOf\" checks should not be for positive numbers","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>","debt":"2min"},{"summary":"Threads should not be started in constructors","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you'll have a confusing mess on your hands if the class is ever\nextended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>\n<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  Thread thread = null;\n\n  public MyClass(Runnable runnable) {\n    thread = new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZQIRAg\">CERT, TSM02-J.</a> - Do not use background threads during class initialization\n  </li>\n</ul>","debt":"30min"},{"summary":"Constructor injection should be used instead of field injection","type":"Bug","defaultSeverity":"Major","description":"<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a <code>NullPointerException</code>\nwaiting to happen unless all your class constructors are <code>private</code>. That's because any class instances that are constructed by callers,\nrather than instantiated by the Spring framework, won't have the ability to perform the field injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor\n\n  @Inject MyCollaborator collaborator;  // Noncompliant\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>","debt":"5min"},{"summary":"Unused local variables should be removed","type":"Code Smell","defaultSeverity":"Minor","description":"<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>","debt":"5min"},{"summary":"Ternary operators should not be nested","type":"Code Smell","defaultSeverity":"Major","description":"<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>","debt":"5min"},{"summary":"Underscores should be used to make large numbers readable","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>\n<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Base</th>\n      <th> Minimum digits</th>\n      <th> Ideal spacing</th>\n    </tr>\n    <tr>\n      <td>binary</td>\n      <td> 9 </td>\n      <td> every 8 </td>\n    </tr>\n    <tr>\n      <td>decimal</td>\n      <td> 5 </td>\n      <td> every 3</td>\n    </tr>\n    <tr>\n      <td>hexadecimal</td>\n      <td> 9 </td>\n      <td> every 4</td>\n    </tr>\n  </tbody>\n</table>\n<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j = 0b01101001010011011110010101011110;  // Noncompliant\nlong l = 0x7fffffffffffffffL;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i = 10_000_000;\nint  j = 0b01101001_01001101_11100101_01011110;\nlong l = 0x7fff_ffff_ffff_ffffL;\n</pre>","debt":"5min"},{"summary":"Inner class calls to super class methods should be unambiguous","type":"Code Smell","defaultSeverity":"Major","description":"<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using <code>super.</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>","debt":"5min"},{"summary":"Double Brace Initialization should not be used","type":"Bug","defaultSeverity":"Minor","description":"<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when there's no leak, DBI is so obscure that it's bound to\nconfuse most maintainers. </p>\n<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMap source = new HashMap(){{ // Noncompliant\n    put(\"firstName\", \"John\");\n    put(\"lastName\", \"Smith\");\n}};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMap source = new HashMap();\n// ...\nsource.put(\"firstName\", \"John\");\nsource.put(\"lastName\", \"Smith\");\n// ...\n</pre>","debt":"5min"},{"summary":"Catches should be combined","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>","debt":"5min"},{"summary":"Mutable fields should not be \"public static\"","type":"Vulnerability","defaultSeverity":"Minor","description":"<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>","debt":"15min"},{"summary":"Defined filters should be used","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>Every filter defined in <code>web.xml</code> file should be used in a <code>&lt;filter-mapping&gt;</code> element. Otherwise such filters are not\ninvoked.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n</ul>","debt":"30min"},{"summary":"Child class fields should not shadow parent class fields","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>","debt":"5min"},{"summary":"\"InterruptedException\" should not be ignored","type":"Bug","defaultSeverity":"Major","description":"<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as \"ignoring\". The\nthrowing of the <code>InterruptedException</code> clears the interrupted state of the Thread, so if the exception is not handled properly the fact\nthat the thread was interrupted will be lost. Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up\nthe method's state - or the thread should be re-interrupted by calling <code>Thread.interrupt()</code> even if this is supposed to be a\nsingle-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -\nprobably without finishing its task.</p>\n<p>Similarly, the <code>ThreadDeath</code> exception should also be propagated. According to its JavaDoc:</p>\n<blockquote>\n  <p>If <code>ThreadDeath</code> is caught by a method, it is important that it be rethrown so that the thread actually dies.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    // Restore interrupted state...\n    Thread.currentThread().interrupt();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/391.html\">MITRE, CWE-391</a> - Unchecked Error Condition </li>\n  <li> <a href=\"https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1\">Dealing with InterruptedException</a> </li>\n</ul>","debt":"15min"},{"summary":"Mutable members should not be stored or returned directly","type":"Vulnerability","defaultSeverity":"Minor","description":"<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,\n<code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return the copy instead.</p>\n<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"yellow\", \"second\"};\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"first\", \"second\"};\n  }\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/374\">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/375\">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zQCuAQ\">CERT, OBJ05-J.</a> - Do not return references to private mutable class members\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QIEVAQ\">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal\n  components </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/kwCuAQ\">CERT, OOP08-CPP.</a> - Do not return references to private data </li>\n</ul>","debt":"5min"},{"summary":"The signature of \"finalize()\" should match that of \"Object.finalize()\"","type":"Bug","defaultSeverity":"Critical","description":"<p><code>Object.finalize()</code> is called by the Garbage Collector at some point after the object becomes unreferenced.</p>\n<p>In general, overloading <code>Object.finalize()</code> is a bad idea because:</p>\n<ul>\n  <li> The overload may not be called by the Garbage Collector. </li>\n  <li> Users are not expected to call <code>Object.finalize()</code> and will get confused. </li>\n</ul>\n<p>But beyond that it's a terrible idea to name a method \"finalize\" if it doesn't actually override <code>Object.finalize()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>","debt":"10min"},{"summary":"\"java.time\" classes should be used for dates and times","type":"Code Smell","defaultSeverity":"Major","description":"<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8's JSR 310\nimplementation offers specific classes for:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Class</th>\n      <th>Use for</th>\n    </tr>\n    <tr>\n      <td>LocalDate</td>\n      <td>a date, without time of day, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalTime</td>\n      <td>the time of day, without date, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalDateTime</td>\n      <td>the date and time, without offset, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDate</td>\n      <td>a date with an offset such as +02:00, without time of day, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetTime</td>\n      <td>the time of day with an offset such as +02:00, without date, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDateTime</td>\n      <td>the date and time with an offset such as +02:00, without a zone</td>\n    </tr>\n    <tr>\n      <td>ZonedDateTime</td>\n      <td>the date and time with a time zone and offset</td>\n    </tr>\n    <tr>\n      <td>YearMonth</td>\n      <td>a year and month</td>\n    </tr>\n    <tr>\n      <td>MonthDay</td>\n      <td>month and day</td>\n    </tr>\n    <tr>\n      <td>Year/MonthOfDay/DayOfWeek/...</td>\n      <td>classes for the important fields</td>\n    </tr>\n    <tr>\n      <td>DateTimeFields</td>\n      <td>stores a map of field-value pairs which may be invalid</td>\n    </tr>\n    <tr>\n      <td>Calendrical</td>\n      <td>access to the low-level API</td>\n    </tr>\n    <tr>\n      <td>Period</td>\n      <td>a descriptive amount of time, such as \"2 months and 3 days\"</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate now = new Date();  // Noncompliant\nDateFormat df = new SimpleDateFormat(\"dd.MM.yyyy\");\nCalendar christmas  = Calendar.getInstance();  // Noncompliant\nchristmas.setTime(df.parse(\"25.12.2020\"));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLocalDate now = LocalDate.now();  // gets calendar date. no time component\nLocalTime now2 = LocalTime.now(); // gets current time. no date component\nLocalDate christmas = LocalDate.of(2020,12,25);\n</pre>","debt":"15min"},{"summary":"\"Object.finalize()\" should remain protected (versus public) when overriding","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/583.html\">MITRE, CWE-583</a> - finalize() Method Declared Public </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>","debt":"10min"},{"summary":"Classes should not be too complex","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>,\n<code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>,\n<code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance\ninitializer in the class. The last return statement in method, if exists, is not taken into account.</p>\n<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the\ntime, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several\nclasses.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>","debt":"10min"},{"summary":"Methods of \"Random\" that return floating point values should not be used in random integer generation","type":"Code Smell","defaultSeverity":"Minor","description":"<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the\n<code>nextInt</code> method instead.</p>\n<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an\ninteger.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\n</pre>","debt":"5min"},{"summary":"Classes that don't define \"hashCode()\" should not be used in hashes","type":"Bug","defaultSeverity":"Major","description":"<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define\n<code>equals(Object)</code> but not <code>hashCode()</code> aren't truly hash-able because instances that are equivalent according to the\n<code>equals</code> method can return different hashes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Student {  // no hashCode() method; not hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = // okay so far\n          new HashTable&lt;Student, Integer&gt;(); // Noncompliant\n\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Student {  // has hashCode() method; hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n  public int hashCode() {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();\n\n  // ...\n</pre>","debt":"15min"},{"summary":"Unused method parameters should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething(int a, int b) {     // \"b\" is unused\n  compute(a);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething(int a) {\n  compute(a);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise issues for unused parameters:</p>\n<ul>\n  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n  <li> in overrides and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>\n  <li> in annotated methods, unless the annotation is <code>@SuppressWarning(\"unchecked\")</code> or <code>@SuppressWarning(\"rawtypes\")</code>, in\n  which case the annotation will be ignored </li>\n</ul>\n<pre>\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"5min"},{"summary":"Only static class initializers should be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When\npossible, non-static initializers should be refactored into standard constructors or field initializers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n</pre>\n<p>or using Guava:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(\"a\", \"b\");\n}\n</pre>","debt":"30min"},{"summary":"Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n</blockquote>","debt":"2min"},{"summary":"Silly equality checks should not be made","type":"Bug","defaultSeverity":"Major","description":"<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>","debt":"15min"},{"summary":"Member variable visibility should be specified","type":"Vulnerability","defaultSeverity":"Minor","description":"<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don't expect, and potentially leave it\nopen to unexpected modification by other classes. </p>\n<h2>Compliant Solution</h2>\n<pre>\nclass Ball {\n    private String color=\"red\";  // Compliant\n}\nenum A {\n  B;\n  private int a;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\nclass Cone {\n  @VisibleForTesting\n  Logger logger; // Compliant\n}\n</pre>","debt":"5min"},{"summary":"\"Cloneables\" should implement \"clone\"","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While\nthe <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.\nOtherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.\nwithout overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>\n<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a\nclass to be copied.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Team implements Cloneable {  // Noncompliant\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Team implements Cloneable {\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() {\n    Team clone = (Team) super.clone();\n    //...\n  }\n}\n</pre>","debt":"30min"},{"summary":"Neither DES (Data Encryption Standard) nor DESede (3DES) should be used","type":"Vulnerability","defaultSeverity":"Blocker","description":"<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>\n<blockquote>\n  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer\n  provides the security that is needed to protect federal government information.</p>\n  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>\n</blockquote>\n<p>For similar reasons, RC2 should also be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwAZAg\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE\">DES / DESede Unsafe</a> </li>\n</ul>","debt":"20min"},{"summary":"Unused \"private\" fields should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"5min"},{"summary":"\"wait(...)\" should be used instead of \"Thread.sleep(...)\" when a lock is held","type":"Bug","defaultSeverity":"Blocker","description":"<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance and scalability issues, or even\nworse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)</code> on the monitor object to\ntemporarily release the lock and allow other threads to run.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/FgG7AQ\">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a\n  lock </li>\n</ul>","debt":"5min"},{"summary":"Lambdas and anonymous classes should not have too many lines of code","type":"Code Smell","defaultSeverity":"Major","description":"<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>","debt":"20min"},{"summary":"Expressions should not be too complex","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>","debt":"5min"},{"summary":"\"final\" classes should not have \"protected\" members","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a\n<code>final</code> class <code>protected</code> is confusingly pointless.</p>\n<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n</pre>","debt":"5min"},{"summary":"Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an\nissue as soon as a literal value starts with <code>RSA/NONE</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/NONE/NoPadding\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/780.html\">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration\">OWASP Top Ten 2013 Category A5</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING\">RSA NoPadding Unsafe</a> </li>\n</ul>","debt":"20min"},{"summary":"Collapsible \"if\" statements should be merged","type":"Code Smell","defaultSeverity":"Major","description":"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>","debt":"5min"},{"summary":"Boxing and unboxing should not be immediately reversed","type":"Bug","defaultSeverity":"Minor","description":"<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>","debt":"5min"},{"summary":"\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop","type":"Code Smell","defaultSeverity":"Critical","description":"<p>According to the documentation of the Java <code>Condition</code> interface:</p>\n<blockquote>\n  <p>When waiting upon a <code>Condition</code>, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.</p>\n</blockquote>\n<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>\n<blockquote>\n  <p>waits should always occur in loops, like this one:</p>\n  <pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   //the thread can wake up even if the condition is still false\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9QIhAQ\">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop\n  </li>\n</ul>","debt":"20min"},{"summary":"Unused labels should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() {\n  outer: //label is not used.\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() {\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 2.6 - A function should not contain unused label declarations </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"2min"},{"summary":"Methods should not be empty","type":"Code Smell","defaultSeverity":"Critical","description":"<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.</p>\n<pre>\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n</pre>","debt":"5min"},{"summary":"Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting","type":"Bug","defaultSeverity":"Major","description":"<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>","debt":"5min"},{"summary":"Printf-style format strings should not lead to unexpected behavior at runtime","type":"Bug","defaultSeverity":"Blocker","description":"<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/e4EyAQ\">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>","debt":"10min"},{"summary":"Overriding methods should do more than simply call the same method in the super class","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>","debt":"2min"},{"summary":"Public types, methods and fields (API) should be documented with Javadoc","type":"Code Smell","defaultSeverity":"Major","description":"<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way\nto understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>\n<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>\n<ul>\n  <li> Parameters, using <code>@param parameterName</code>. </li>\n  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>\n  <li> Method return values, using <code>@return</code>. </li>\n  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>\n</ul>\n<p>Furthermore the following guidelines should be followed:</p>\n<ul>\n  <li> At least 1 line of description which should have more than one word. </li>\n  <li> All parameters documented with <code>@param</code>, and names should match. </li>\n  <li> All checked exceptions documented with <code>@throws</code> </li>\n  <li> <code>@return</code> present and documented when not <code>void</code>. </li>\n  <li> Placeholders like \"TODO\", \"FIXME\", \"...\" should be avoided. </li>\n</ul>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li> Getters and setters. </li>\n  <li> Methods with <code>@Override</code> annotation. </li>\n  <li> Empty constructors. </li>\n  <li> Static constants. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'\n\n  public static final DEFAULT_STATUS = 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; the parameter of the class\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * Will do something.\n    * @param value the value to be used\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>","debt":"10min"},{"summary":"Static non-final field names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic final class MyClass {\n   private static String foo_bar;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private static String fooBar;\n}\n</pre>","debt":"2min"},{"summary":"\"runFinalizersOnExit\" should not be called","type":"Bug","defaultSeverity":"Critical","description":"<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and\n<code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>\n<p>According to the Oracle Javadoc:</p>\n<blockquote>\n  <p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic\n  behavior or deadlock.</p>\n</blockquote>\n<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String [] args) {\n  ...\n  System.runFinalizersOnExit(true);  // Noncompliant\n  ...\n}\n\nprotected void finalize(){\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String [] args) {\n  Runtime.addShutdownHook(new Runnable() {\n    public void run(){\n      doSomething();\n    }\n  });\n  //...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>","debt":"20min"},{"summary":"\"Iterator.next()\" methods should throw \"NoSuchElementException\"","type":"Bug","defaultSeverity":"Minor","description":"<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception\nwhen the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this\n<code>Iterator</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      return null;\n    }\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      throw new NoSuchElementException();\n    }\n    ...\n  }\n}\n</pre>","debt":"5min"},{"summary":"\"wait\", \"notify\" and \"notifyAll\" should only be called when a lock is obviously held on an object","type":"Bug","defaultSeverity":"Major","description":"<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a\nthread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule\nreinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    obj.wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<p>or</p>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void removeElement() {\n  synchronized(obj) {\n    while (!suitableCondition()){\n      obj.wait();\n    }\n    ... // Perform removal\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nprivate synchronized void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>","debt":"20min"},{"summary":"JUnit framework methods should be declared properly","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used. Such a method must be named\n\"suite\", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code> or a\n<code>junit.framework.TestSuite</code>.</p>\n<p>Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren't properly capitalized will also be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nTest suite() { ... }  // Noncompliant; must be public static\npublic static boolean suite() { ... }  // Noncompliant; wrong return type\npublic static Test suit() { ... }  // Noncompliant; typo in method name\npublic static Test suite(int count) { ... } // Noncompliant; must be no-arg\n\npublic void setup() { ... } // Noncompliant; should be setUp\npublic void tearDwon() { ... }  // Noncompliant; should be tearDown\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static Test suite() { ... }\npublic void setUp() { ... }\npublic void tearDown() { ... }\n</pre>","debt":"5min"},{"summary":"Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"","type":"Code Smell","defaultSeverity":"Minor","description":"<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding\n<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,\nit's probably a mistake.</p>\n<p>The usual convention for <code>Object.clone()</code> according to Oracle's Javadoc is:</p>\n<ol>\n  <li> <code>x.clone() != x</code> </li>\n  <li> <code>x.clone().getClass() == x.getClass()</code> </li>\n  <li> <code>x.clone().equals\\(x\\)</code> </li>\n</ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ol>\n  <li> <code>super.clone()</code> returns a new object instance </li>\n  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>\n  <li> <code>Object.clone()</code> performs a shallow copy of the object's state </li>\n</ol>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass BaseClass {  // Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/580.html\">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/CQHEAw\">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>\n</ul>","debt":"20min"},{"summary":"Throwable and Error should not be caught","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>","debt":"20min"},{"summary":"Classes should not access their own subclasses during initialization","type":"Code Smell","defaultSeverity":"Critical","description":"<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child\nclass might not have been initialized yet. This could create what is known as an \"initialisation cycle\", or even a deadlock in some extreme cases.</p>\n<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  static int field1 = Child.method(); // Noncompliant\n  static int field2 = 42;\n\n  public static void main(String[] args) {\n    System.out.println(Parent.field1); // will display \"0\" instead of \"42\"\n  }\n}\n\nclass Child extends Parent {\n  static int method() {\n    return Parent.field2;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>","debt":"20min"},{"summary":"Test methods should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>\n<pre>\n@Test\npublic void foo() {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testFoo() {\n  // ...\n}\n</pre>","debt":"5min"},{"summary":"Printf-style format strings should be used correctly","type":"Code Smell","defaultSeverity":"Major","description":"<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their\narguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,\n<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of\n<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument '2' is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument '3' is unused\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s = String.format(\"string without arguments\"); // Noncompliant\n\nMessageFormat.format(\"Result '{0}'.\", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result '{0}'  =  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/e4EyAQ\">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>","debt":"10min"},{"summary":"\"Double.longBitsToDouble\" should not be used for \"int\"","type":"Bug","defaultSeverity":"Major","description":"<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the\nmathematical conversion into a <code>double</code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as\nif a child were trying to use an adult's gloves.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 42;\ndouble d = Double.longBitsToDouble(i);  // Noncompliant\n</pre>","debt":"15min"},{"summary":"Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is\ninefficient.</p>\n<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew Integer(myInteger).toString();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger.toString(myInteger);        // Compliant\n</pre>","debt":"5min"},{"summary":"Pseudorandom number generators (PRNGs) should not be used in secure contexts","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.</p>\n<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code>\nmethod should not be used for security-critical applications or for protecting sensitive data. In such context, the\n<code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom random = new Random();\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/338.html\">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/330.html\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/310\">MITRE, CWE-310</a> - Cryptographic Issues </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/mAFqAQ\">CERT, MSC02-J.</a> - Generate strong random numbers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qw4\">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom\n  numbers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/WYIyAQ\">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom\n  numbers </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n</ul>","debt":"10min"},{"summary":"Case insensitive string comparisons should be made without intermediate upper or lower casing","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>","debt":"5min"},{"summary":"Test classes should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9]+|[A-Z][a-zA-Z0-9]*(Test|IT|TestCase|ITCase))$</code></p>\n<pre>\nclass Foo {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass FooTest {\n}\n</pre>","debt":"5min"},{"summary":"\"ScheduledThreadPoolExecutor\" should not have 0 core threads","type":"Bug","defaultSeverity":"Critical","description":"<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>'s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code>\nto zero means the executor will have no threads and run nothing.</p>\n<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void do(){\n\n  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant\n\n  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);\n  stpe2.setCorePoolSize(0);  // Noncompliant\n</pre>","debt":"20min"},{"summary":"Collection.isEmpty() should be used to test for emptiness","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can\nbe more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations\nof <code>size()</code> can be <code>O(n)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myCollection.size() == 0) {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n</pre>","debt":"2min"},{"summary":"Labels should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col &lt; matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int row = 1; row &lt; matrix.length; row++) {          // Compliant\n  for (int col = 0; col &lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>","debt":"30min"},{"summary":"Values should not be uselessly incremented","type":"Bug","defaultSeverity":"Major","description":"<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n</pre>","debt":"5min"},{"summary":"String.valueOf() should not be appended to a String","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>\n<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + String.valueOf(i));    // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + i);                    // Compliant\n}\n</pre>","debt":"5min"},{"summary":"Constructors should not be used to instantiate \"String\" and primitive-wrapper classes","type":"Code Smell","defaultSeverity":"Major","description":"<p>Constructors for <code>Strings</code> and the objects used to wrap primitives should never be used. Doing so is less clear and uses more memory\nthan simply using the desired value in the case of strings, and using <code>valueOf</code> for everything else.</p>\n<p>Further, these constructors are deprecated in Java 9, which is an indication that they will eventually be removed from the language altogether.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\n</pre>","debt":"5min"},{"summary":"\"switch case\" clauses should not have too many lines of code","type":"Code Smell","defaultSeverity":"Major","description":"<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>","debt":"5min"},{"summary":"Enumeration should not be implemented","type":"Code Smell","defaultSeverity":"Major","description":"<p>From the official Oracle Javadoc:</p>\n<blockquote>\n  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>","debt":"30min"},{"summary":"Method names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic int DoSomething(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int doSomething(){...}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded. </p>\n<pre>\n@Override\npublic int Do_Something(){...}\n</pre>","debt":"5min"},{"summary":"Functions should not be defined with a variable number of arguments","type":"Code Smell","defaultSeverity":"Info","description":"<p>As stated per effective java : </p>\n<blockquote>\n  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments. </li>\n  <li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4CW\">CERT, DCL50-CPP.</a> - Do not define a C-style variadic function </li>\n</ul>","debt":"1min"},{"summary":"\"javax.crypto.NullCipher\" should not be used for anything other than testing","type":"Vulnerability","defaultSeverity":"Blocker","description":"<p>By contract, the <code>NullCipher</code> class provides an \"identity cipher\" <del></del> one that does not transform or encrypt the plaintext in\nany way. As a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nNullCipher nc=new NullCipher();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#NULL_CIPHER\">NullCipher Unsafe</a> </li>\n</ul>","debt":"15min"},{"summary":"Null pointers should not be dereferenced","type":"Bug","defaultSeverity":"Major","description":"<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a\nhref=\"https://jcp.org/en/jsr/detail?id=305\">JSR-305</a> to understand which values are and are not nullable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nString getName(){...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked\n}\n</pre>\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry{\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n\n}catch(Exception e){\n  e.printStackTrace();\n}finally{\n  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close();  // Noncompliant; conn could be null if an exception was thrown\n}\n</pre>\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic  void append(@CheckForNull Color color) {\n    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n</pre>\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println(\"Unable to apply color \" + color.toString());  // Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PAw\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>","debt":"10min"},{"summary":"Empty arrays and collections should be returned instead of null","type":"Code Smell","defaultSeverity":"Major","description":"<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/AgG7AQ\">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an\n  empty array over a null value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zwHEAw\">CERT, MET55-J.</a> - Return an empty array or collection instead of a null\n  value for methods that return an array or collection </li>\n</ul>","debt":"30min"},{"summary":"Expressions used in \"assert\" should not produce side effects","type":"Bug","defaultSeverity":"Major","description":"<p>Since <code>assert</code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their\nexecution the evaluation of any logic required for correct program function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassert myList.remove(myList.get(0));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/vwG7AQ\">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side\n  effects </li>\n</ul>","debt":"5min"},{"summary":"Only standard cryptographic algorithms should be used","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, ... should be used instead.</p>\n<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyCryptographicAlgorithm extends MessageDigest {\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST\">MessageDigest is Custom</a>\n  </li>\n</ul>","debt":"1d"},{"summary":"Objects should not be created only to \"getClass\"","type":"Code Smell","defaultSeverity":"Major","description":"<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'\n<code>.class</code> property.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass c = MyObject.class;\n</pre>","debt":"5min"},{"summary":"\"HttpServletRequest.getRequestedSessionId()\" should not be used","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>\n<blockquote>\n  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client\n  did not specify a session ID, this method returns null.</p>\n</blockquote>\n<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually\nupdating the value of this session ID in the HTTP request. </p>\n<p>Here is an example of a updated HTTP header:</p>\n<pre>\nGET /pageSomeWhere HTTP/1.1\nHost: webSite.com\nUser-Agent: Mozilla/5.0\nCookie: JSESSIONID=Hacked_Session_Value'''\"&gt;\n</pre>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G.\nTomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated.\nMoreover, this session ID should never be logged to prevent hijacking of active sessions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(isActiveSession(request.getRequestedSessionId()) ){\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/807\">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SERVLET_SESSION_ID\">Untrusted Session Cookie Value</a>\n  </li>\n</ul>","debt":"10min"},{"summary":"Exception handlers should preserve the original exceptions","type":"Code Smell","defaultSeverity":"Major","description":"<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/6gEqAQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n</ul>","debt":"10min"},{"summary":"Classes extending java.lang.Thread should override the \"run\" method","type":"Bug","defaultSeverity":"Major","description":"<p>According to the Java API documentation:</p>\n<blockquote>\n  <p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the\n  run method of class Thread. An instance of the subclass can then be allocated and started...</p>\n  <p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An\n  instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>\n</blockquote>\n<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn't make sense, and implies that the contract of the\n<code>Thread</code> class is not well understood.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyRunner extends Thread { // Noncompliant; run method not overridden\n\n  public void doSometing() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If <code>run()</code> is not overridden in a class extending <code>Thread</code>, it means that starting the thread will actually call\n<code>Thread.run()</code>. However, <code>Thread.run()</code> does nothing if it has not been fed with a target <code>Runnable</code>. The rule\nconsequently ignore classes extending <code>Thread</code> if they are calling, in their constructors, the <code>super(...)</code> constructor with a\nproper <code>Runnable</code> target.</p>\n<pre>\nclass MyThread extends Thread { // Compliant - calling super constructor with a Runnable\n  MyThread(Runnable target) {\n    super(target); // calling super constructor with a Runnable, which will be used for when Thread.run() is executed\n    // ...\n  }\n}\n</pre>","debt":"5min"},{"summary":"Exception classes should be immutable","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Exceptions are meant to represent the application's state at the point at which an error occurred.</p>\n<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>\n<ul>\n  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>\n  <li> Won't be updated or corrupted by a questionable error handler. </li>\n</ul>\n<p>This will enable developers to quickly understand what went wrong.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>","debt":"15min"},{"summary":"Primitives should not be boxed just for \"String\" conversion","type":"Code Smell","defaultSeverity":"Major","description":"<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'\n<code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>\nargument should be avoided, as should concatenating empty string <code>\"\"</code> to a primitive.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\nmyIntString = 4 + \"\";  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>","debt":"5min"},{"summary":"Loop conditions should be true at least once","type":"Bug","defaultSeverity":"Major","description":"<p>If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always\nbugs, particularly when the initial value and stop conditions are hard-coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  // Noncompliant\n  // ...\n</pre>","debt":"10min"},{"summary":"Track uses of disallowed methods","type":"Code Smell","defaultSeverity":"Major","description":"<p>This rule allows banning certain methods.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n  <li> methodName: replace </li>\n  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>\n</ul>\n<pre>\nString name;\nname.replace(\"A\",\"a\");  // Noncompliant\n</pre>"},{"summary":"Exceptions should not be thrown in finally blocks","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>\nblock, and the masked's exception message and stack trace will be lost.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/soUbAQ\">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block\n  </li>\n</ul>","debt":"30min"},{"summary":"Literal suffixes should be upper case","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlong long1 = 1l; // Noncompliant\nfloat float1 = 1.0f; // Noncompliant\ndouble double1 = 1.0d; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlong long1 = 1L;\nfloat float1 = 1.0F;\ndouble double1 = 1.0D;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>\n  <li> MISRA C:2012, 7.3 - The lowercase character \"l\" shall not be used in a literal suffix </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/koAtAQ\">CERT DCL16-C</a> - Use \"L,\" not \"l,\" to indicate a long value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/n4AtAQ\">CERT DCL16-CPP</a> - Use \"L,\" not \"l,\" to indicate a long value </li>\n</ul>","debt":"2min"},{"summary":"Collection methods with O(n) performance should be used carefully","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes\nconstant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation. </p>\n<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>\n<ul>\n  <li> <code>ArrayList</code>\n    <ul>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>LinkedList</code>\n    <ul>\n      <li> <code>get</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedQueue</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedDeque</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArrayList</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArraySet</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n//...\nlog.info(\"Queue contains \" + queue.size() + \" elements\");  // Noncompliant\n</pre>","debt":"15min"},{"summary":"Checked exceptions should not be thrown","type":"Code Smell","defaultSeverity":"Major","description":"<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>\n<p>This rule verifies that no method throws a new checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}\n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n</pre>","debt":"1h"},{"summary":"Annotation arguments should appear in the order in which they were declared","type":"Code Smell","defaultSeverity":"Minor","description":"<p>For optimal code readability, annotation arguments should be specified in the same order that they were declared in the annotation definition.</p>","debt":"2min"},{"summary":"Parsing should be used to convert \"Strings\" to primitives","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method\ninstead. It will be clearer and more efficient.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = Float.parseFloat(myNum);\n</pre>","debt":"5min"},{"summary":"A \"for\" loop update clause should move the counter in the right direction","type":"Bug","defaultSeverity":"Major","description":"<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    //...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    //...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zYEzAg\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>","debt":"5min"},{"summary":"\"@Override\" should be used on overriding and implementing methods","type":"Code Smell","defaultSeverity":"Major","description":"<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>\n<ul>\n  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>\n  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashcode()</code>, ...</p>","debt":"5min"},{"summary":"Public methods should throw at most one checked exception","type":"Code Smell","defaultSeverity":"Major","description":"<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.</p>\n<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>","debt":"20min"},{"summary":"\"entrySet()\" should be iterated when both the key and value are needed","type":"Code Smell","defaultSeverity":"Major","description":"<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>","debt":"5min"},{"summary":"The ternary operator should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose <code>if</code>/<code>else</code> structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(i&gt;10?\"yes\":\"no\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (i &gt; 10) {\n  System.out.println((\"yes\");\n} else {\n  System.out.println(\"no\");\n}\n</pre>","debt":"5min"},{"summary":"Assignments should not be made from within sub-expressions","type":"Code Smell","defaultSeverity":"Major","description":"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {...}\n</pre>\n<p>Chained assignments, including compound assignments, are ignored.</p>\n<pre>\nint i = j = 0;\nint k = (j += 1);\nresult = (bresult = new byte[len]);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/nYFtAg\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1gCTAw\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KQvhAg\">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KYIyAQ\">CERT, MSC02-CPP.</a> - Avoid errors of omission </li>\n</ul>","debt":"5min"},{"summary":"\"Preconditions\" and logging arguments should not require evaluation","type":"Code Smell","defaultSeverity":"Major","description":"<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a\nperformance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.</p>\n<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.</p>\n<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging\ncalls.</p>\n<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen <code>Preconditions</code> should be skipped altoghether, and the relevant exception should be conditionally thrown instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlogger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a &gt; 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a &gt; 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(Level.SEVERE, \"Something went wrong: %s \", message);  // String formatting only applied if needed\n\nlogger.log(Level.FINE, \"An exception occurred with message: {}\", message);\n\nlogger.log(Level.SEVERE, () -&gt; \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nLOG.error(\"Unable to open file {}\", csvPath, e);\n\nif (LOG.isDebugEnabled() {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg &gt; 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored. This rule accounts for explicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and\nignores the bodies of such <code>if</code> statements.</p>","debt":"5min"},{"summary":"Intermediate Stream methods should not be left unused","type":"Bug","defaultSeverity":"Major","description":"<p>There are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something\nother than a stream. Intermediate operations are lazy, meaning they aren't actually executed until and unless a terminal stream operation is performed\non their results. Consequently if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is\nalmost certainly an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nwidgets.stream().filter(b -&gt; b.getColor() == RED); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint sum = widgets.stream()\n                      .filter(b -&gt; b.getColor() == RED)\n                      .mapToInt(b -&gt; b.getWeight())\n                      .sum();\nStream&lt;Widget&gt; pipeline = widgets.stream()\n                                 .filter(b -&gt; b.getColor() == GREEN)\n                                 .mapToInt(b -&gt; b.getWeight());\nsum = pipeline.sum();\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>","debt":"10min"},{"summary":"The Object.finalize() method should not be called","type":"Bug","defaultSeverity":"Major","description":"<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection\ndetermines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/586.html\">MITRE, CWE-586</a> - Explicit Call to Finalize() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>","debt":"20min"},{"summary":"Consumed Stream pipelines should not be reused","type":"Bug","defaultSeverity":"Major","description":"<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is\nperformed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == RED);\nint sum1 = pipeline.sum();\nint sum2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>","debt":"10min"},{"summary":"Multiple variables should not be declared on the same line","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Declaring multiple variable on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator\n  respectively </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7wHEAw\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VgU\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fAAhAQ\">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration\n  </li>\n</ul>","debt":"2min"},{"summary":"Java parser failure","type":"Code Smell","defaultSeverity":"Major","description":"<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>","debt":"30min"},{"summary":"Variables should not be self-assigned","type":"Bug","defaultSeverity":"Major","description":"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"3min"},{"summary":"\"switch\" statements should have at least 3 \"case\" clauses","type":"Code Smell","defaultSeverity":"Minor","description":"<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>","debt":"5min"},{"summary":"Method overrides should not change contracts","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>","debt":"15min"},{"summary":"Inappropriate regular expressions should not be used","type":"Bug","defaultSeverity":"Major","description":"<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>\n<p>The following should not be used as regular expressions:</p>\n<ul>\n  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>\n  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>\n  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"/File|Name.txt\";\n\nString clean = str.replaceAll(\".\",\"\"); // Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll(\"|\",\"_\"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,\"\"); // Noncompliant; exception on Windows\n</pre>","debt":"15min"},{"summary":"\"=+\" should not be used instead of \"+=\"","type":"Bug","defaultSeverity":"Major","description":"<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>","debt":"2min"},{"summary":"Java 8's \"Files.exists\" should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don't actually exist. </p>\n<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPath myPath;\nif(java.nio.Files.exists(myPath)) {  // Noncompliant\n // do something\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath myPath;\nif(myPath.toFile().exists())) {\n // do something\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8153414\">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8153414\">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>\n</ul>","debt":"5min"},{"summary":"\"@NonNull\" values should not be set to null","type":"Bug","defaultSeverity":"Minor","description":"<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null\nvalues and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field\nin a constructor, could cause <code>NullPointerException</code>s at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MainClass {\n\n  @Nonnull\n  private String primary;\n  private String secondary;\n\n  public MainClass(String color) {\n    if (color != null) {\n      secondary = null;\n    }\n    primary = color;  // Noncompliant; \"primary\" is Nonnull but could be set to null here\n  }\n\n  public MainClass() { // Noncompliant; \"primary\" Nonnull\" but is not initialized\n  }\n\n  @Nonnull\n  public String indirectMix() {\n    String mix = null;\n    return mix;  // Noncompliant; return value is Nonnull, but null is returned.}}\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>","debt":"15min"},{"summary":"\"for\" loop increment clauses should modify the loops' counters","type":"Code Smell","defaultSeverity":"Critical","description":"<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) {  // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or</p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>","debt":"20min"},{"summary":"Jump statements should not be used unconditionally","type":"Code Smell","defaultSeverity":"Major","description":"<p>Having an unconditional <code>break</code>, <code>return</code> or <code>throw</code> in a loop renders it useless; the loop will only execute once\nand the loop structure itself is simply wasted keystrokes.</p>\n<p>Having an unconditional <code>continue</code> in a loop is itself wasted keystrokes.</p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i;\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println(\"i is \" + i);\n  break;  // loop only executes once\n}\n\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println(\"i is \" + i);\n  continue;  // this is meaningless; the loop would continue anyway\n}\n\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println(\"i is \" + i);\n  return;  // loop only executes once\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i;\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println(\"i is \" + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"5min"},{"summary":"Classes should not be compared by name","type":"Bug","defaultSeverity":"Major","description":"<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access.</p>\n<p>Instead, the <code>instanceof</code> operator or the <code>Class.isAssignableFrom()</code> method should be used to check the object's underlying\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (List.class.getName().equals(valueClass.getName())) {  // Noncompliant\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (valueClass.isAssignableFrom(List.class)) {\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/486.html\">MITRE, CWE-486</a> - Comparison of Classes by Name </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/LAFlAQ\">CERT, OBJ09-J.</a> - Compare classes and not class names </li>\n</ul>","debt":"5min"},{"summary":"Two branches in a conditional structure should not have exactly the same implementation","type":"Code Smell","defaultSeverity":"Major","description":"<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<p>or </p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>","debt":"10min"},{"summary":"Number patterns should be regular","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>\n<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint duos = 1_00_00;\nint million = 1_000_00_000;  // Noncompliant\nint thousand = 1000;\nint tenThousand = 100_00;  // Noncompliant\n</pre>","debt":"10min"},{"summary":"Files should contain only one top-level class or interface each","type":"Code Smell","defaultSeverity":"Major","description":"<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.</p>"},{"summary":"Sections of code should not be \"commented out\"","type":"Code Smell","defaultSeverity":"Major","description":"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>","debt":"5min"},{"summary":"Escaped Unicode characters should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>\n<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString prefix = \"n\\u00E9e\"; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString prefix = \"née\";\n</pre>","debt":"5min"},{"summary":"Identical expressions should not be used on both sides of a binary operator","type":"Bug","defaultSeverity":"Major","description":"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n\nc.equals(c); //always true\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>","debt":"2min"},{"summary":"Strings should not be concatenated using '+' in a loop","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>","debt":"10min"},{"summary":"Classes without \"public\" constructors should be \"final\"","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>","debt":"5min"},{"summary":"Sets with elements that are enum values should be replaced with EnumSet","type":"Code Smell","defaultSeverity":"Minor","description":"<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLORS.RED);\n    warm.add(COLORS.ORANGE);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    EnumSet&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>","debt":"5min"},{"summary":"Inner classes should not have too many lines of code","type":"Code Smell","defaultSeverity":"Major","description":"<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.</p>","debt":"20min"},{"summary":"Maps with keys that are enum values should be replaced with EnumMap","type":"Code Smell","defaultSeverity":"Minor","description":"<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more\nefficient than other sets because the underlying data structure is a simple array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;COLOR, String&gt; (COLOR.class);\n  }\n}\n</pre>","debt":"5min"},{"summary":"Assertions should be complete","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>\n<ul>\n  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>\n</ul>\n<p>In such cases, what is intended to be a test doesn't actually verify anything</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n</pre>\n<h2>Exceptions</h2>\n<p>Variable assignments and return statements are skipped to allow helper methods.</p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n</pre>","debt":"5min"},{"summary":"\"catch\" clauses should do more than rethrow","type":"Code Smell","defaultSeverity":"Minor","description":"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {  // Noncompliant\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<p>or</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  StringBuilder sb = new StringBuilder();\n  FileReader fileReader = new FileReader(fileName);\n  BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n  while((line = bufferedReader.readLine()) != null) {\n    //...\n\n  return sb.toString();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"5min"},{"summary":"\"clone\" should not be overridden","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky\nand difficult to get right, according to Joshua Bloch:</p>\n<blockquote>\n  Object's clone method is very tricky. It's based on field copies, and it's \"extra-linguistic.\" It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and\n  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow\n  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n</blockquote>\n<p>A copy constructor or copy factory should be used instead.</p>\n<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://www.artima.com/intv/bloch13.html\">Copy Constructor versus Cloning</a> </li>\n</ul>\n<h3>See Also</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=squid%3AS2157'>S2157</a> - \"Cloneables\" should implement \"clone\" </li>\n  <li> <a href='/coding_rules#rule_key=squid%3AS1182'>S1182</a> - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" </li>\n</ul>","debt":"30min"},{"summary":"\"File.createTempFile\" should not be used to create a directory","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and\ninsecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or a library function such as Guava's similarly-named\n<code>Files.createTempDir</code> should be used.</p>\n<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>\n<ul>\n  <li> call to <code>File.createTempFile</code> </li>\n  <li> delete resulting file </li>\n  <li> call <code>mkdir</code> on the File object </li>\n</ul>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile tempDir;\ntempDir = File.createTempFile(\"\", \".\");\ntempDir.delete();\ntempDir.mkdir();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath tempPath = Files.createTempDirectory(\"\");\nFile tempDir = tempPath.toFile();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities\">OWAPS Top Ten 2013 Category A9</a> - Using\n  Components with Known Vulnerabilities </li>\n</ul>","debt":"5min"},{"summary":"\"super.finalize()\" should be called at the end of \"Object.finalize()\" implementations","type":"Bug","defaultSeverity":"Critical","description":"<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/568.html\">MITRE, CWE-568</a> - finalize() Method Without super.finalize() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>","debt":"5min"},{"summary":"Files should not be empty","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Files with no lines of code clutter a project and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>","debt":"5min"},{"summary":"Nested \"enum\"s should not be declared static","type":"Code Smell","defaultSeverity":"Minor","description":"<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>","debt":"2min"},{"summary":"\"==\" and \"!=\" should not be used when \"equals\" is overridden","type":"Code Smell","defaultSeverity":"Minor","description":"<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>\nmethod inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>\n<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName();   //String is a good example of a class overriding the equals method\nString lastName = getLastName();\n\nif (firstName == lastName) { ... };   // Non-compliant, the two literals can have the same value and yet the condition is false\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wwD1AQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/8AEqAQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>","debt":"2min"},{"summary":"Constants should not be defined in interfaces","type":"Code Smell","defaultSeverity":"Critical","description":"<p>According to Joshua Bloch, author of \"Effective Java\":</p>\n<blockquote>\n  <p>The constant interface pattern is a poor use of interfaces. </p>\n  <p>That a class uses some constants internally is an implementation detail.</p>\n  <p>Implementing a constant interface causes this implementation detail to leak into the class's exported API. It is of no consequence to the users\n  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future\n  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.\n  If a nonfinal class implements a constant interface,</p>\n  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface Status {                      // Noncompliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n</pre>\n<p>or</p>\n<pre>\npublic final class Status {             // Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n</pre>","debt":"10min"},{"summary":"Short-circuit logic should be used to prevent null pointer dereferences in conditionals","type":"Bug","defaultSeverity":"Major","description":"<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null || str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null &amp;&amp; str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS2259'>S2259</a> instead.</p>","debt":"2min"},{"summary":"The members of an interface declaration or class should appear in a pre-defined order","type":"Code Smell","defaultSeverity":"Minor","description":"<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:</p>\n<ul>\n  <li> Class and instance variables </li>\n  <li> Constructors </li>\n  <li> Methods </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo{\n   private int field = 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{\n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>","debt":"5min"},{"summary":"\"Arrays.stream\" should be used for primitive arrays","type":"Code Smell","defaultSeverity":"Major","description":"<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use\n<em>that</em> last as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,\n<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n</pre>","debt":"5min"},{"summary":"\"NullPointerException\" should not be caught","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can\neasily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of\nthe conditional.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/395.html\">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer\n  Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>","debt":"5min"},{"summary":"Public methods should not contain selector arguments","type":"Code Smell","defaultSeverity":"Major","description":"<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it's well named. </p>\n<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at\nthe meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n</pre>","debt":"15min"},{"summary":"\"NullPointerException\" should not be explicitly thrown","type":"Code Smell","defaultSeverity":"Major","description":"<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE's. </p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely\nthrow an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation\ninstead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>","debt":"10min"},{"summary":"Spring \"@Controller\" classes should not use \"@Scope\"","type":"Bug","defaultSeverity":"Major","description":"<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s have <code>singleton</code> scope by default, meaning only\none instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn\nas new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the\nserver.</p>\n<p>This rule raises an issue when the <code>@Scope</code> annotation is applied to a <code>@Controller</code>, <code>@Service</code>, or\n<code>@Repository</code> with any value but \"singleton\". <code>@Scope(\"singleton\")</code> is redundant, but ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Scope(\"prototype\")  // Noncompliant\n@Controller\npublic class HelloWorld {\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n</pre>","debt":"2min"},{"summary":"An abstract class should have both abstract and concrete methods","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n<code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n</pre>","debt":"5min"},{"summary":"Generic wildcard types should not be used in return parameters","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Using a wildcard as a return type implicitly means that the return value should be considered read-only, but without any way to enforce this\ncontract. </p>\n<p>Let's take the example of method returning a \"List&lt;? extends Animal&gt;\". Is it possible on this list to add a Dog, a Cat, ... we simply don't\nknow. The consumer of a method should not have to deal with such disruptive questions. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n</pre>","debt":"20min"},{"summary":"\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method","type":"Code Smell","defaultSeverity":"Minor","description":"<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n  <p>The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\" </p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on\n<code>equals()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>","debt":"15min"},{"summary":"\"@RequestMapping\" methods should be \"public\"","type":"Vulnerability","defaultSeverity":"Blocker","description":"<p>A <code>@Controller</code> method with a <code>@RequestMapping</code> annotation will be called to handle matching web requests. That will happen\neven if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility. </p>\n<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if you've tried to control web access to your sensitive, <code>private</code>,\n<code>@RequestMapping</code> method by marking it <code>@Secured</code> ... it will still be called, whether or not the user is authorized to access\nit. That's because AOP proxies are not applied to non-public methods. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\nprivate String greet(String greetee) {  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\npublic String greet(String greetee) {\n</pre>","debt":"2min"},{"summary":"Track lack of copyright and license headers","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>","debt":"5min"},{"summary":"Private fields only used as local variables in methods should become local variables","type":"Code Smell","defaultSeverity":"Minor","description":"<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>","debt":"5min"},{"summary":"Zero should not be a possible denominator","type":"Bug","defaultSeverity":"Critical","description":"<p>If the denominator to a division or modulo operation is zero it would result in a fatal error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n  }\n  z = 1 / z; // Noncompliant, possible division by zero\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n    z = 1;\n  }\n  z = 1 / z;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/369.html\">MITRE, CWE-369</a> - Divide by zero </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KAGyAw\">CERT, NUM02-J.</a> - Ensure that division and remainder operations do not\n  result in divide-by-zero errors </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/cAI\">CERT, INT33-C.</a> - Ensure that division and remainder operations do not result\n  in divide-by-zero errors </li>\n</ul>","debt":"5min"},{"summary":"\"switch\" statements should not contain non-case labels","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>","debt":"10min"},{"summary":"Thread.run() should not be called directly","type":"Bug","defaultSeverity":"Major","description":"<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make\nsense because it causes its code to be executed in the current thread. </p>\n<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/572.html\">MITRE, CWE-572</a> - Call to Thread run() instead of start() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KQAiAg\">CERT THI00-J.</a> - Do not invoke Thread.run() </li>\n</ul>","debt":"20min"},{"summary":"Arrays should not be created for varargs parameters","type":"Code Smell","defaultSeverity":"Minor","description":"<p>There's no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>\nis expected makes the intent ambiguous: Is the array supposed to be one object ora collection of objects?</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(new String[] { \"s1\", \"s2\"});  // Noncompliant: unnecessary\n  doTheThing(new String[12]);  // Compliant\n  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous\n  // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(\"s1\", \"s2\");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>","debt":"2min"},{"summary":"\"null\" should not be used with \"Optional\"","type":"Bug","defaultSeverity":"Major","description":"<p>The concept of <code>Optional</code> is that it will be used when <code>null</code> could cause errors. In a way, it replaces <code>null</code>,\nand when <code>Optional</code> is in use, there should never be a question of returning or receiving <code>null</code> from a call.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  if (optional != null) {  // Noncompliant\n    // do something with optional...\n  }\n}\n\n@Nullable // Noncompliant\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  optional.ifPresent(\n    // do something with optional...\n  );\n}\n\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return Optional.empty();\n}\n</pre>","debt":"15min"},{"summary":"Constructors should only call non-overridable methods","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.</p>\n<p>For example:</p>\n<ul>\n  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>\n  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>\n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  <code>NullPointerException</code>) can result, because the fields aren't initialized yet. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo = foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/MYYbAQ\">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/TQBi\">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or\n  destructors </li>\n</ul>","debt":"10min"},{"summary":"Execution of the Garbage Collector should be triggered only by the JVM","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>\n<ul>\n  <li> Will the whole application be frozen during the call? </li>\n  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>\n  <li> Will the JVM simply ignore the call? </li>\n  <li> ... </li>\n</ul>\n<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector should\nbe left exclusively to the JVM.</p>","debt":"30min"},{"summary":"Neither \"Math.abs\" nor negation should be used on numbers that could be \"MIN_VALUE\"","type":"Bug","defaultSeverity":"Minor","description":"<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you'll\nstill have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.</p>\n<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object's <code>compareTo</code> method, and\n<code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods\nis similarly ill-advised.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    // ...\n  }\n}\n</pre>","debt":"5min"},{"summary":"\"read\" and \"readLine\" return values should be used","type":"Bug","defaultSeverity":"Major","description":"<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of\naction is surely a bug.</p>\n<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>,\n<code>Reader.read()</code>, and these methods in any child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    while (buffReader.readLine() != null) { // Noncompliant\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>","debt":"5min"},{"summary":"Methods should not return constants","type":"Code Smell","defaultSeverity":"Minor","description":"<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>","debt":"5min"},{"summary":"The value returned from a stream read should be checked","type":"Bug","defaultSeverity":"Minor","description":"<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value\nreturned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>\n<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned\nfrom the method.</p>\n<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not\nchecked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child\nclasses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  // Noncompliant\n    // ...\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      // ...\n    }\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/XACSAQ\">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an\n  array </li>\n</ul>","debt":"15min"},{"summary":"Non-constructor methods should not have the same name as the enclosing class","type":"Code Smell","defaultSeverity":"Major","description":"<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>","debt":"5min"},{"summary":"\"readObject\" should not be \"synchronized\"","type":"Code Smell","defaultSeverity":"Major","description":"<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be\nthe case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the\n<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method\nshould be refactored to make it the case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n</pre>","debt":"2min"},{"summary":"Methods should not be named \"hashcode\" or \"equal\"","type":"Bug","defaultSeverity":"Major","description":"<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>","debt":"10min"},{"summary":"The default unnamed package should not be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>According to the Java Language Specification:</p>\n<blockquote>\n  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just\n  beginning development.</p>\n</blockquote>\n<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n</pre>","debt":"10min"},{"summary":"\"Threads\" should not be used where \"Runnables\" are expected","type":"Code Smell","defaultSeverity":"Major","description":"<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose\nrunning should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tThread r =new Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tRunnable r =new Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n</pre>","debt":"15min"},{"summary":"Packages should have a javadoc file 'package-info.java'","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n</pre>","debt":"20min"},{"summary":"Silly bit operations should not be performed","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and\n<code>anyValue | 0</code>.</p>","debt":"5min"},{"summary":"\"for\" loop stop conditions should be invariant","type":"Code Smell","defaultSeverity":"Major","description":"<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the\n  loop. </li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>\n</ul>","debt":"10min"},{"summary":"Track breaches of architectural constraints","type":"Code Smell","defaultSeverity":"Major","description":"<p>A source code comply to an architectural model when it fully adheres to a set of architectural constraints. A constraint allows to deny references\nbetween classes by pattern.</p>\n<p>You can for instance use this rule to :</p>\n<ul>\n  <li> forbid access to <code>**.web.**</code> from <code>**.dao.**</code> classes </li>\n  <li> forbid access to <code>java.util.Vector</code>, <code>java.util.Hashtable</code> and <code>java.util.Enumeration</code> from any classes </li>\n  <li> forbid access to <code>java.sql.**</code> from <code>**.ui.**</code> and <code>**.web.**</code> classes </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>"},{"summary":"Non-thread-safe fields should not be static","type":"Bug","defaultSeverity":"Major","description":"<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>","debt":"15min"},{"summary":"IP addresses should not be hardcoded","type":"Vulnerability","defaultSeverity":"Minor","description":"<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>\n<ul>\n  <li> a recompile is required if the address changes </li>\n  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) </li>\n  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer </li>\n  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString ip = \"127.0.0.1\";\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString ip = System.getProperty(\"myapplication.ip\");\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>","debt":"30min"},{"summary":"Getters and setters should be synchronized in pairs","type":"Bug","defaultSeverity":"Major","description":"<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may\nresult in inconsistent behavior at runtime as callers access an inconsistent method state.</p>\n<p>This rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  // Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  // Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/I4BoAg\">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable\n  objects </li>\n</ul>","debt":"5min"},{"summary":"Loggers should be \"private static final\" and should share a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Loggers should be:</p>\n<ul>\n  <li> <code>private</code>: not accessible outside of their parent classes. If another class needs to log something, it should instantiate its own\n  logger. </li>\n  <li> <code>static</code>: not dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>\n  <li> <code>final</code>: created once and only once per class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>\n<pre>\npublic Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\n</pre>\n<h2>Exceptions</h2>\n<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>","debt":"5min"},{"summary":"Track uses of \"NOPMD\" suppression comments","type":"Code Smell","defaultSeverity":"Minor","description":"<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// NOPMD\n</pre>","debt":"10min"},{"summary":"Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>","debt":"10min"},{"summary":"\"StringBuilder\" and \"StringBuffer\" should not be instantiated with a character","type":"Bug","defaultSeverity":"Major","description":"<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect\nthe character to be the initial value of the <code>StringBuffer</code>. </p>\n<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStringBuffer foo = new StringBuffer('x');   //equivalent to StringBuffer foo = new StringBuffer(120);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuffer foo = new StringBuffer(\"x\");\n</pre>","debt":"5min"},{"summary":"Track uses of \"CHECKSTYLE:OFF\" suppression comments","type":"Code Smell","defaultSeverity":"Minor","description":"<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// CHECKSTYLE:OFF\n</pre>","debt":"5min"},{"summary":"Octal values should not be used","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myNumber = 8;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>\n  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used </li>\n  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_QC7AQ\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a\n  decimal value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>","debt":"5min"},{"summary":"Inheritance tree of classes should not be too deep","type":"Code Smell","defaultSeverity":"Major","description":"<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object\noriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>\n<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>","debt":"4h"},{"summary":"Unused \"private\" classes should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  ...\n  private class MyUnusedPrivateClass {...} // Noncompliant\n}\n</pre>","debt":"2min"},{"summary":"Week Year (\"YYYY\") should not be used for date formatting","type":"Bug","defaultSeverity":"Major","description":"<p>Few developers are aware of the difference between <code>Y</code> for \"Week year\" and <code>y</code> for Year when formatting and parsing a date\nwith <code>SimpleDateFormat</code>. That's likely because for most dates, Week year and Year are the same, so testing at any time other than the first\nor last week of the year will yield the same value for both <code>y</code> and <code>Y</code>. But in the last week of December and the first week of\nJanuary, you may get unexpected results.</p>\n<p>According to the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year\">Javadoc</a>:</p>\n<blockquote>\n  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.\n  Therefore, the first and last days of a week year may have different calendar year values.</p>\n  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible\n  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar\n  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three\n  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY/MM/dd\").format(date);   //Noncompliant; yields '2016/12/31'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"yyyy/MM/dd\").format(date);   //Yields '2015/12/31' as expected\n</pre>\n<h2>Exceptions</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY-ww\").format(date);  //compliant, 'Week year' is used along with 'Week of year'. result = '2016-01'\n</pre>","debt":"2min"},{"summary":"\"public static\" fields should be constant","type":"Vulnerability","defaultSeverity":"Minor","description":"<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>","debt":"20min"},{"summary":"\"equals\" method overrides should accept \"Object\" parameters","type":"Bug","defaultSeverity":"Major","description":"<p>\"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check.\nHowever, this will not work as expected when that is the only override.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));  // Prints \"false\" because o2 an Object not a MyClass\n  }\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {  // Ignored; `boolean equals(Object)` also present\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>","debt":"10min"},{"summary":"Exception should not be created without being thrown","type":"Bug","defaultSeverity":"Major","description":"<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n</pre>","debt":"2min"},{"summary":"Web applications should not have a \"main\" method","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>There is no reason to have a <code>main</code> method in a web application. It may have been useful for debugging during application development,\nbut such a method should never make it into production. Having a <code>main</code> method in a web application opens a door to the application logic\nthat an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be\npresent.</p>\n<p>This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    if (userIsAuthorized(req)) {\n      updatePrices(req);\n    }\n  }\n\n  public static void main(String[] args) { // Noncompliant\n    updatePrices(req);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VoB8Bw\">CERT, ENV06-J.</a> - Production code must not contain debugging entry points\n  </li>\n</ul>","debt":"5min"},{"summary":"Classes should not be coupled to too many other classes (Single Responsibility Principle)","type":"Code Smell","defaultSeverity":"Major","description":"<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>","debt":"2h"},{"summary":"Source code should be indented consistently","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier. </p>\n<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With an indent size of 2:</p>\n<pre>\nclass Foo {\n  public int a;\n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  public int a;\n  public int b;\n\n...\n\n  public void doSomething() {\n    if(something) {\n        doSomethingElse();\n    }\n  }\n}\n</pre>","debt":"1min"},{"summary":"Members of Spring components should be injected","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s are singletons by default, meaning only one instance of the\nclass is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all\nnon-<code>static</code> members should be managed by Spring. That is, they should have one of these annotations: <code>@Resource</code>,\n<code>@Inject</code>, <code>@Autowired</code> or <code>@Value</code>.</p>\n<p>Having non-injected members in one of these classes could indicate an attempt to manage state. Because they are singletons, such an attempt is\nalmost guaranteed to eventually expose data from User1's session to User2. </p>\n<p>This rule raises an issue when a singleton <code>@Controller</code>, <code>@Service</code>, or <code>@Repository</code> has non-<code>static</code>\nmembers that are not annotated with one of:</p>\n<ul>\n  <li> <code>org.springframework.beans.factory.annotation.Autowired</code> </li>\n  <li> <code>org.springframework.beans.factory.annotation.Value</code> </li>\n  <li> <code>javax.annotation.Inject</code> </li>\n  <li> <code>javax.annotation.Resource</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    if (greetee != null) {\n      this.name = greetee;\n    }\n\n    return \"Hello \" + this.name;  // if greetee is null, you see the previous user's data\n  }\n}\n</pre>","debt":"15min"},{"summary":"Locale should be used in String operations","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code> or <code>toUpperCase()</code> on <code>String</code> objects means\nthe system default encoding will be used, possibly creating problems with international characters. For instance with the Turkish language, when\nconverting the small letter 'i' to upper case, the result is capital letter 'I' with a dot over it.</p>\n<p>Case conversion without a locale may work fine in its \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but <code>Locale.ENGLISH</code> can be used for case-insensitive ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyString.toLowerCase()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyString.toLowerCase(Locale.TR)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwAiAg\">CERT, STR02-J.</a> - Specify an appropriate locale when comparing\n  locale-dependent data </li>\n</ul>","debt":"5min"},{"summary":"Classes should not be loaded dynamically","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn't even have to instantiate or\nexplicitly invoke methods on such classes to be vulnerable to an attack.</p>\n<p>This rule raises an issue for each use of dynamic class loading.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString className = System.getProperty(\"messageClassName\");\nClass clazz = Class.forName(className);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top 10 2013 Category A1</a> - Injection </li>\n</ul>","debt":"45min"},{"summary":"Classes should not have too many methods","type":"Code Smell","defaultSeverity":"Major","description":"<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>","debt":"1h"},{"summary":"\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs","type":"Bug","defaultSeverity":"Minor","description":"<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two\n  objects must produce the same integer result. </p>\n  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the\n  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {    // Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/581.html\">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYYbAQ\">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>","debt":"15min"},{"summary":"Boolean checks should not be inverted","type":"Code Smell","defaultSeverity":"Minor","description":"<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...}\nboolean b = (i &gt;= 10);\n</pre>","debt":"2min"},{"summary":"A close curly brace should be located at the beginning of a line","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>","debt":"1min"},{"summary":"Fields in a \"Serializable\" class should either be transient or serializable","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. </p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they\ncould be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn't serializable\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/594.html\">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>\n  <li> <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Oracle Java 6, Serializable</a> </li>\n  <li> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">Oracle Java 7, Serializable</a> </li>\n</ul>","debt":"30min"},{"summary":"\"indexOf\" checks should use a start position","type":"Code Smell","defaultSeverity":"Minor","description":"<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper\nchoice of <code>indexOf</code> methods can help move code from confusing to clear.</p>\n<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus\nthe target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the\nresult is tested against -1, which is an easily recognizable \"not found\" indicator.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\") &gt; 2) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\", 2) &gt; -1) {\n  // ...\n}\n</pre>","debt":"5min"},{"summary":"Classes and methods that rely on the default system encoding should not be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its \"home\" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when it's time to fix them.</p>\n<p>This rule detects uses of the following classes and methods:</p>\n<ul>\n  <li> <code>FileReader</code> </li>\n  <li> <code>FileWriter</code> </li>\n  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument\n    <ul>\n      <li> <code>String(byte[] bytes)</code> </li>\n      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>\n    </ul> </li>\n  <li> <code>String.getBytes()</code> </li>\n  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>\n  <li> <code>InputStreamReader(InputStream in)</code> </li>\n  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>\n  <li> <code>ByteArrayOutputStream.toString()</code> </li>\n  <li> Some <code>Formatter</code> constructors\n    <ul>\n      <li> <code>Formatter(String fileName)</code> </li>\n      <li> <code>Formatter(File file)</code> </li>\n      <li> <code>Formatter(OutputStream os)</code> </li>\n    </ul> </li>\n  <li> Some <code>Scanner</code> constructors\n    <ul>\n      <li> <code>Scanner(File source)</code> </li>\n      <li> <code>Scanner(Path source)</code> </li>\n      <li> <code>Scanner(InputStream source)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintStream</code> constructors\n    <ul>\n      <li> <code>PrintStream(File file)</code> </li>\n      <li> <code>PrintStream(OutputStream out)</code> </li>\n      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintStream(String fileName)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintWriter</code> constructors\n    <ul>\n      <li> <code>PrintWriter(File file)</code> </li>\n      <li> <code>PrintWriter(OutputStream out)</code> </li>\n      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintWriter(String fileName)</code> </li>\n    </ul> </li>\n  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit\n  the encoding argument\n    <ul>\n      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>\n      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>\n      <li> <code>IOUtils.readLines(InputStream)</code> </li>\n      <li> <code>IOUtils.toByteArray(Reader)</code> </li>\n      <li> <code>IOUtils.toByteArray(String)</code> </li>\n      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>\n      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>\n      <li> <code>IOUtils.toString(byte[])</code> </li>\n      <li> <code>IOUtils.toString(URI)</code> </li>\n      <li> <code>IOUtils.toString(URL)</code> </li>\n      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>\n      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>\n      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>\n      <li> <code>FileUtils.readFileToString(File)</code> </li>\n      <li> <code>FileUtils.readLines(File)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>\n      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>\n    </ul> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/FoL5AQ\">CERT, STR04-J.</a> - Use compatible character encodings when communicating\n  string data between JVMs </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JgAWCQ\">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a\n  string </li>\n</ul>","debt":"15min"},{"summary":"Simple class names should be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>","debt":"2min"},{"summary":"A field should not duplicate the name of its containing class","type":"Code Smell","defaultSeverity":"Major","description":"<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>","debt":"10min"},{"summary":"Classes should not have too many fields","type":"Code Smell","defaultSeverity":"Major","description":"<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>","debt":"1h"},{"summary":"Variables should not be declared before they are relevant","type":"Code Smell","defaultSeverity":"Minor","description":"<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>","debt":"5min"},{"summary":"Extensions and implementations should not be redundant","type":"Code Smell","defaultSeverity":"Minor","description":"<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there's no need to do so explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>","debt":"1min"},{"summary":"Redundant casts should not be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>","debt":"5min"},{"summary":"\"ThreadLocal.withInitial\" should be preferred","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Java 8 Introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a\n<code>ThreadLocal</code> instance.</p>\n<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to\n<code>ThreadLocal.withInitial</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =\n    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant\n        @Override\n        protected List&lt;String&gt; initialValue() {\n            return new ArrayList&lt;String&gt;();\n        }\n    };\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);\n</pre>","debt":"5min"},{"summary":"Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be located on the same line","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or\n<code>finally</code> keywords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n</pre>","debt":"1min"},{"summary":"\"deleteOnExit\" should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>\n<ul>\n  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>\n  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant\n</pre>","debt":"30min"},{"summary":"\"@Deprecated\" code should not be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn't deprecated\n    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KgAVAg\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n</ul>","debt":"15min"},{"summary":"\"switch\" statements should end with \"default\" clauses","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,\nthen no <code>default</code> clause is expected.</p>\n<p>Example:</p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n</ul>","debt":"5min"},{"summary":"Abstract classes without fields should be converted to interfaces","type":"Code Smell","defaultSeverity":"Minor","description":"<p>With Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>","debt":"10min"},{"summary":"\"instanceof\" operators that always return \"true\" or \"false\" should be removed","type":"Bug","defaultSeverity":"Major","description":"<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding\nwhich could lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  String name = null;\n\n  if (name instanceof String) { // Noncompliant; always false since name is null\n    //...\n  }\n\n  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer\n    doSomething();\n  }\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=squid%3AS2589'>S2589</a> instead.</p>","debt":"5min"},{"summary":"\"toString()\" should never be called on a String object","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>","debt":"2min"},{"summary":"Dead stores should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>A dead store happens when a local variable is assigned a value, including <code>null</code>, that is not read by any subsequent instruction.\nCalculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error,\nit is at best a waste of resources. </p>\n<p>Even assigning <code>null</code> to a variable is a dead store if the variable is not subsequently used. Assigning null as a hint to the garbage\ncollector used to be common practice, but is no longer needed and such code should be eliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a;\n  }\n  return x;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, empty string (<code>\"\"</code>), <code>true</code>, and <code>false</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/S4IyAQ\">CERT, MSC13-CPP.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"15min"},{"summary":"Lambdas should be replaced with method references","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred. Similarly, <code>null</code> checks\ncan be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code> methods.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(a -&gt; a.&lt;String&gt;getObject())\n      .forEach(a -&gt; { System.out.println(a); });\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(A::&lt;String&gt;getObject)\n      .forEach(System.out::println);\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>","debt":"2min"},{"summary":"Literal boolean values should not be used in assertions","type":"Code Smell","defaultSeverity":"Critical","description":"<p>There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.assertTrue(true);  // Noncompliant\nassertThat(true).isTrue(); // Noncompliant\n</pre>","debt":"5min"},{"summary":"Parentheses should be removed from a single lambda input parameter when its type is inferred","type":"Code Smell","defaultSeverity":"Minor","description":"<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>","debt":"2min"},{"summary":"@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces","type":"Code Smell","defaultSeverity":"Critical","description":"<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as\n<code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and\n<code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or\nMethod references. </p>\n<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would\nbreak the use of Lambda implementations.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>","debt":"2min"},{"summary":"Related \"if/else if\" statements should not have the same condition","type":"Bug","defaultSeverity":"Major","description":"<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"10min"},{"summary":"Synchronization should not be based on Strings or boxed primitives","type":"Bug","defaultSeverity":"Major","description":"<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock\nwith unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects\nbecause they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there are only two instances of\n<code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the\ntwo.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = \"LOCK\";\n\npublic void doSomething() {\n\n  synchronized(bLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(iLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(sLock) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Object lock1 = new Object();\nprivate static final Object lock2 = new Object();\nprivate static final Object lock3 = new Object();\n\npublic void doSomething() {\n\n  synchronized(lock1) {\n    // ...\n  }\n  synchronized(lock2) {\n    // ...\n  }\n  synchronized(lock3) {\n    // ...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rQGeAQ\">CERT, LCK01-J.</a> - Do not synchronize on objects that may be reused </li>\n</ul>","debt":"15min"},{"summary":"Unnecessary semicolons should be omitted","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>","debt":"1min"},{"summary":"\"DateUtils.truncate\" from Apache Commons Lang library should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>The use of the <code>Instant</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code> class\nfrom Commons Lang.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  instant = instant.truncatedTo(ChronoUnit.SECONDS);\n  return Date.from(instant);\n}\n</pre>","debt":"10min"},{"summary":"Exceptions should not be thrown from servlet methods","type":"Vulnerability","defaultSeverity":"Minor","description":"<p>Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>, it's a bad idea to let such\nexceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service\nattacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging\ninformation back to the user. And that information could be very valuable to an attacker. </p>\n<p>This rule checks all exceptions in methods named \"do*\" are explicitly handled in servlet classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  String ip = request.getRemoteAddr();\n  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  try {\n    String ip = request.getRemoteAddr();\n    InetAddress addr = InetAddress.getByName(ip);\n    //...\n  }\n  catch (UnknownHostException uhex) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/600.html\">MITRE, CWE-600</a> - Uncaught Exception in Servlet </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/s4EVAQ\">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information\n  </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten Category A6</a> - Sensitive Data Exposure </li>\n</ul>","debt":"20min"},{"summary":"All branches in a conditional structure should not have exactly the same implementation","type":"Bug","defaultSeverity":"Major","description":"<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>","debt":"15min"},{"summary":"Local variables should not shadow class fields","type":"Code Smell","defaultSeverity":"Major","description":"<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>","debt":"5min"},{"summary":"Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>","debt":"10min"},{"summary":"JUnit rules should be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and\nthere's no reason to leave them cluttering up the file if they're not in use.</p>\n<p>This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any of the test methods:\n<code>TemporaryFolder</code>, and <code>TestName</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>","debt":"5min"},{"summary":"\"Thread.sleep\" should not be used in tests","type":"Code Smell","defaultSeverity":"Major","description":"<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on\nenvironment (\"Passes on my machine!\") or load. Don't rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous\ntesting. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable&lt;Boolean&gt; didTheThing() {\n  return new Callable&lt;Boolean&gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n</pre>","debt":"20min"},{"summary":"Standard functional interfaces should not be redefined","type":"Code Smell","defaultSeverity":"Major","description":"<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.</p>\n<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n</pre>","debt":"10min"},{"summary":"Annotation repetitions should not be wrapped","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>","debt":"2min"},{"summary":"Track comments matching a regular expression","type":"Code Smell","defaultSeverity":"Major","description":"<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>"},{"summary":"Methods should not be too complex","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>","debt":"10min"},{"summary":"Switch cases should end with an unconditional \"break\" statement","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZoFLAQ\">CERT, MSC18-CPP.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ewHAAQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>","debt":"10min"},{"summary":"\"Iterator.hasNext()\" should not call \"Iterator.next()\"","type":"Bug","defaultSeverity":"Major","description":"<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator.\n<code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the\n<code>hasNext()</code> contract, and will lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FibonacciIterator implements Iterator&lt;Integer&gt;{\n...\n@Override\npublic boolean hasNext() {\n  if(next() != null) {\n    return true;\n  }\n  return false;\n}\n...\n}\n</pre>","debt":"20min"},{"summary":"Anonymous inner classes containing only one method should become lambdas","type":"Code Smell","defaultSeverity":"Major","description":"<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>","debt":"5min"},{"summary":"Methods and field names should not be the same or differ only by capitalization","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.</p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.</p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} //Huh?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n</pre>","debt":"10min"},{"summary":"\"Object.wait(...)\" should never be called on objects that implement \"java.util.concurrent.locks.Condition\"","type":"Code Smell","defaultSeverity":"Major","description":"<p>From the Java API documentation:</p>\n<blockquote>\n  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)\n  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.\n  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the\n  <code>Object</code> monitor methods.</p>\n</blockquote>\n<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,\ncalling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.wait();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.await();\n</pre>","debt":"20min"},{"summary":"Lamdbas containing only one statement should not nest this statement in a block","type":"Code Smell","defaultSeverity":"Minor","description":"<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx -&gt; {System.out.println(x+1);}\n(a, b) -&gt; { return a+b; }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; System.out.println(x+1)\n(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped\n</pre>","debt":"5min"},{"summary":"Deprecated elements should have both the annotation and the Javadoc tag","type":"Code Smell","defaultSeverity":"Major","description":"<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored. </p>\n<p>Further, Java 9 adds two additional arguments to the annotation:</p>\n<ul>\n  <li> <code>since</code> allows you to describe when the deprecation took place </li>\n  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>\n</ul>\n<p>If your compile level is Java 9 or higher, you should be using one or both of these arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"5.1\")\n  public void foo2() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"4.2\", forRemoval=true)\n  public void foo3() {\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>","debt":"5min"},{"summary":"Loops should not contain more than a single \"break\" or \"continue\" statement","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>"},{"summary":"Methods should not have too many lines","type":"Code Smell","defaultSeverity":"Major","description":"<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.</p>","debt":"20min"},{"summary":"Abstract methods should not be redundant","type":"Code Smell","defaultSeverity":"Minor","description":"<p>There's no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the\nclass <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>","debt":"2min"},{"summary":"JUnit test cases should call super methods","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding\nmethod. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3\n<code>TestCase</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  // Noncompliant\n      myClass = new MyClass();\n    }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass = new MyClass();\n    }\n</pre>","debt":"5min"},{"summary":"\"private\" methods called only by inner classes should be moved to those classes","type":"Code Smell","defaultSeverity":"Minor","description":"<p>When a <code>private</code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same\naccess to the outer class' members, but the outer class will be clearer and less cluttered.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n</pre>","debt":"5min"},{"summary":"Loops should not be infinite","type":"Bug","defaultSeverity":"Blocker","description":"<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nint j;\nwhile (true) { // Noncompliant; end condition omitted\n  j++;\n}\n\nint k;\nboolean b = true;\nwhile (b) { // Noncompliant; b never written to in loop\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint j;\nwhile (true) { // reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k &lt; Integer.MAX_VALUE;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PYHfAw\">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>","debt":"15min"},{"summary":"Credentials should not be hard-coded","type":"Vulnerability","defaultSeverity":"Blocker","description":"<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConnection conn = null;\ntry {\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=steve&amp;password=blue\"); // Noncompliant\n  String uname = \"steve\";\n  String password = \"blue\";\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password); // Noncompliant\n\n  java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication(\"userName\", \"1234\".toCharArray());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/798\">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/259\">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>","debt":"30min"},{"summary":"Fields in non-serializable classes should not be \"transient\"","type":"Code Smell","defaultSeverity":"Minor","description":"<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class\nthat does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Vegetable {  // does not implement Serializable\n  private transient Season ripe;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Vegetable {\n  private Season ripe;\n  // ...\n}\n</pre>","debt":"2min"},{"summary":"JUnit assertions should not be used in \"run\" methods","type":"Code Smell","defaultSeverity":"Critical","description":"<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in\n<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the\ntest won't fail.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run() {\n  // ...\n  Assert.assertEquals(expected, actual);  // Noncompliant\n}\n</pre>","debt":"30min"},{"summary":"TestCases should contain tests","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>There's no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn't have a file in the tests directory with\n\"Test\" in the name, but no tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.</p>\n<p>This rule raises an issue when files in the test directory have \"Test\" in the name or implement <code>TestCase</code> but don't contain any\ntests.</p>","debt":"5min"},{"summary":"Raw byte values should not be used in bitwise operations in combination with shifts","type":"Bug","defaultSeverity":"Major","description":"<p>When reading bytes in order to build other primitive values such as <code>int</code>s or <code>long</code>s, the <code>byte</code> values are\nautomatically promoted, but that promotion can have unexpected results.</p>\n<p>For instance, the binary representation of the integer 640 is <code>0b0000_0010_1000_0000</code>, which can also be written with the array of\n(unsigned) bytes <code>[2, 128]</code>. However, since Java uses two's complement, the representation of the integer in signed bytes will be <code>[2,\n-128]</code> (because the <code>byte</code> <code>0b1000_0000</code> is promoted to the <code>int</code>\n<code>0b1111_1111_1111_1111_1111_1111_1000_0000</code>). Consequently, trying to reconstruct the initial integer by shifting and adding the values of\nthe bytes without taking care of the sign will not produce the expected result. </p>\n<p>To prevent such accidental value conversion, use bitwise and (<code>&amp;</code>) to combine the <code>byte</code> value with <code>0xff</code>\n(255) and turn all the higher bits back off.</p>\n<p>This rule raises an issue any time a <code>byte</code> value is used as an operand without <code>&amp; 0xff</code>, when combined with shifts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | readByte(); // Noncompliant\n    }\n    return result;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | (readByte() &amp; 0xff);\n    }\n    return result;\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SAHEAw\">CERT, NUM52-J.</a> - Be aware of numeric promotion behavior </li>\n</ul>","debt":"5min"},{"summary":"\"Serializable\" inner classes of non-serializable classes should be \"static\"","type":"Bug","defaultSeverity":"Minor","description":"<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not\nserializable, then serialization will fail, resulting in a runtime error. </p>\n<p>Making the inner class <code>static</code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static</code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: </p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public class Seed implements Serializable {  // Noncompliant; serialization will fail\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public static class Seed implements Serializable {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/O4CpAQ\">CERT SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>","debt":"15min"},{"summary":"Comparators should be \"Serializable\"","type":"Code Smell","defaultSeverity":"Critical","description":"<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the\noverhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {\n  private static final long serialVersionUID = 1;\n\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>","debt":"5min"},{"summary":"Math operands should be cast before assignment","type":"Bug","defaultSeverity":"Minor","description":"<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long</code>,\n<code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code> or <code>long</code>, the result\nwill likely not be what you expect. </p>\n<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the\nassignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the\noperation takes place.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat twoThirds = 2/3; // Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.\nDate myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748\n}\n\npublic float compute2(long factor){\n  return factor / 123;  //Noncompliant, will be rounded to closest long integer\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfloat twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n\npublic float compute2(long factor){\n  return factor / 123f;\n}\n</pre>\n<p>or</p>\n<pre>\nfloat twoThirds = (float)2/3; // 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n\npublic float compute2(float factor){\n  return factor / 123;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 5-0-8 - An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue\n  expression. </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/190\">MITRE, CWE-190</a> - Integer Overflow or Wraparound </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/woIyAQ\">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point\n  operations </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/AxE\">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1IAyAQ\">CERT, INT18-CPP.</a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Risky Resource Management </li>\n</ul>","debt":"5min"},{"summary":"Silly math should not be performed","type":"Code Smell","defaultSeverity":"Major","description":"<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>","debt":"15min"},{"summary":"Custom serialization method signatures should meet requirements","type":"Bug","defaultSeverity":"Major","description":"<p>Writers of <code>Serializable</code> classes can choose to let Java's automatic mechanisms handle serialization and deserialization, or they can\nchoose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they\nwill be ignored and the default serialization mechanisms will kick back in. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  void writeObject(java.io.ObjectOutputStream out)// Noncompliant; not private\n        throws IOException\n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n  {...}\n\n  public void readObjectNoData()  // Noncompliant; not private\n  {...}\n\n  static Object readResolve() throws ObjectStreamException  // Noncompliant; this method may have any access modifier, may not be static\n\n  Watermelon writeReplace() throws ObjectStreamException // Noncompliant; this method may have any access modifier, but must return Object\n  {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  private void writeObject(java.io.ObjectOutputStream out)\n        throws IOException\n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n        throws IOException, ClassNotFoundException\n  {...}\n\n  private void readObjectNoData()\n        throws ObjectStreamException\n  {...}\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  private Object writeReplace() throws ObjectStreamException\n  {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/4gAMAg\">CERT, SER01-J.</a> - Do not deviate from the proper signatures of serialization\n  methods </li>\n</ul>","debt":"5min"},{"summary":"Classes should not have too many \"static\" imports","type":"Code Smell","defaultSeverity":"Major","description":"<p>Importing a class statically allows you to use its <code>public static</code> members without qualifying them with the class name. That can be\nhandy, but if you import too many classes statically, your code can become confusing and difficult to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value: 4</p>\n<pre>\nimport static java.lang.Math.*;\nimport static java.util.Collections.*;\nimport static com.myco.corporate.Constants.*;\nimport static com.myco.division.Constants.*;\nimport static com.myco.department.Constants.*;  // Noncompliant\n</pre>","debt":"30min"},{"summary":"\"readResolve\" methods should be inheritable","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement\n<code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private Object readResolve() throws ObjectStreamException  // Noncompliant\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {  // No access to parent's readResolve() method\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {\n  //...\n}\n</pre>","debt":"5min"},{"summary":"Ints and longs should not be shifted by zero or more than their number of bits-1","type":"Bug","defaultSeverity":"Minor","description":"<p>Since an <code>int</code> is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. Shifting an\n<code>int</code> by 32 is the same as shifting it by 0, and shifting it by 33 is the same as shifting it by 1.</p>\n<p>Similarly, shifting a <code>long</code> by +/-64 is the same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int shift(int a) {\n  return a &lt;&lt; 48;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int shift(int a) {\n  return a &lt;&lt; 16;\n}\n</pre>","debt":"5min"},{"summary":"\"Externalizable\" classes should have no-arguments constructors","type":"Bug","defaultSeverity":"Major","description":"<p>An <code>Externalizable</code> class is one which handles its own <code>Serialization</code> and deserialization. During deserialization, the first\nstep in the process is a default instantiation using the class' no-argument constructor. Therefore an <code>Externalizable</code> class without a\nno-arg constructor cannot be deserialized.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Tomato implements Externalizable {  // Noncompliant; no no-arg constructor\n\n  public Tomato (String color, int weight) { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Tomato implements Externalizable {\n\n  public Tomato() { ... }\n  public Tomato (String color, int weight) { ... }\n}\n</pre>","debt":"20min"},{"summary":"Standard outputs should not be used directly to log anything","type":"Code Smell","defaultSeverity":"Major","description":"<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(\"My Message\");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(\"My Message\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/RoElAQ\">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>","debt":"10min"},{"summary":"Magic numbers should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>","debt":"5min"},{"summary":"\"wait\" should not be called when multiple locks are held","type":"Bug","defaultSeverity":"Blocker","description":"<p>When two locks are held simultaneously, a <code>wait</code> call only releases one of them. The other will be held until some other thread requests\na lock on the awaited object. If no unrelated code tries to lock on that object, then all other threads will be locked out, resulting in a\ndeadlock.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (this.mon1) {  // threadB can't enter this block to request this.mon2 lock &amp; release threadA\n\tsynchronized (this.mon2) {\n\t\tthis.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1\n\t}\n}\n</pre>","debt":"30min"},{"summary":"Values passed to LDAP queries should be sanitized","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>Applications that execute LDAP queries should neutralize any externally-provided values in those commands. Failure to do so could allow an attacker\nto include input that changes the query so that unintended commands are executed, or sensitive data is exposed. Unhappily LDAP doesn't provide any\nprepared statement interfaces like SQL to easily remove this risk. So each time a LDAP query is built dynamically this rule logs an issue.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic User lookupUser(String username, String base, String [] requestedAttrs) {\n\n  // ...\n  DirContext dctx = new InitialDirContext(env);\n\n  SearchControls sc = new SearchControls();\n  sc.setReturningAttributes(requestedAttrs);  // Noncompliant\n  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n\n  String filter = \"(&amp;(objectClass=user)(sAMAccountName=\" + username + \"))\";\n\n  NamingEnumeration results = dctx.search(base,  // Noncompliant\n        filter,  // Noncompliant; parameter concatenated directly into string\n        sc);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic User lookupUser(String username, String base, String [] requestedAttrs) {\n\n  // ...\n  DirContext dctx = new InitialDirContext(env);\n\n  SearchControls sc = new SearchControls();\n  sc.setReturningAttributes(buildAttrFilter(requestedAttrs));  // Compliant; method presumably scrubs input\n  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n\n  String useBase = \"ou=People\";\n  if (! base.startsWith(useBase)) {\n    useBase = base;\n  }\n\n  String filter = \"(&amp;(objectClass=user)(sAMAccountName=\" + username.replaceAll(\"[()| ]\",\"\") + \"))\";\n\n  NamingEnumeration results = dctx.search(useBase,  // Compliant; originally value used conditionally\n        filter,  // Compliant; parameter NOT concatenated directly into string\n        sc);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/90\">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP\n  Injection') </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/CgLEAw\">CERT, IDS54-J.</a> - Prevent LDAP injection </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#LDAP_INJECTION\">Potential LDAP Injection</a> </li>\n</ul>","debt":"30min"},{"summary":"Multiple loops over the same set should be combined","type":"Code Smell","defaultSeverity":"Minor","description":"<p>When a method loops multiple over the same set of data, whether it's a list or a set of numbers, it is highly likely that the method could be made\nmore efficient by combining the loops into a single set of iterations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n</pre>","debt":"20min"},{"summary":"Modulus results should not be checked for direct equality","type":"Code Smell","defaultSeverity":"Critical","description":"<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 != 0;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/xAHAAQ\">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQBi\">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_YBLAQ\">CERT, INT10-CPP.</a> - Do not assume a positive remainder when using the %\n  operator </li>\n</ul>","debt":"5min"},{"summary":"Values passed to OS commands should be sanitized","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any\nexternally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands, or\nexposes sensitive data.</p>\n<p>This rule logs issues for dynamically-built commands, and when parameter values are used to influence how a command is run. it's then up to the\nauditor to figure out if the command execution is secure or not. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void listContent(String input) {\n  Runtime rt = Runtime.getRuntime();\n  rt.exec(\"ls \" + input); // Noncompliant; input could easily contain extra commands\n  ...\n}\n\npublic void execute(String command, String argument) {\n  ProcessBuilder pb = new ProcessBuilder(command, argument); // Noncompliant\n  ...\n}\n\npublic void doTheThing(String path) {\n  ProcessBuilder pb = new ProcessBuilder(\"ls\");  // command hard coded. So far, so good\n  pb.redirectOutput(path);  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/78\">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/88\">MITRE, CWE-88</a> - Argument Injection or Modification </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from the FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#COMMAND_INJECTION\">Potential Command Injection</a>\n  </li>\n</ul>","debt":"30min"},{"summary":"SQL binding mechanisms should be used","type":"Vulnerability","defaultSeverity":"Blocker","description":"<p>Applications that execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an\nattacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed.</p>\n<p>This rule checks a variety of methods from different frameworks which are susceptible to SQL injection if not used properly. Frameworks which are\ncovered are Java JDBC, JPA, JDO, Hibernate and Spring. The following specific method signatures are tested. </p>\n<ul>\n  <li> <code>org.hibernate.Session.createQuery</code> </li>\n  <li> <code>org.hibernate.Session.createSQLQuery</code> </li>\n  <li> <code>java.sql.Statement.executeQuery</code> </li>\n  <li> <code>java.sql.Statement.execute</code> </li>\n  <li> <code>java.sql.Statement.executeUpdate</code> </li>\n  <li> <code>java.sql.Statement.executeLargeUpdate</code> </li>\n  <li> <code>java.sql.Statement.addBatch</code> </li>\n  <li> <code>java.sql.Connection.prepareStatement</code> </li>\n  <li> <code>java.sql.Connection.prepareCall</code> </li>\n  <li> <code>java.sql.Connection.nativeSQL</code> </li>\n  <li> <code>javax.persistence.EntityManager.createNativeQuery</code> </li>\n  <li> <code>javax.persistence.EntityManager.createQuery</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.batchUpdate</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.execute</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.query</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForList</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForMap</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForObject</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForRowSet</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForInt</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForLong</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.update</code> </li>\n  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.&lt;init&gt;</code> </li>\n  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementCreator</code> </li>\n  <li> <code>javax.jdo.PersistenceManager.newQuery</code> </li>\n  <li> <code>javax.jdo.Query.setFilter</code> </li>\n  <li> <code>javax.jdo.Query.setGrouping</code> </li>\n</ul>\n<p>If a method is defined in an interface, implementations are also tested. For example this is the case for\n<code>org.springframework.jdbc.core.JdbcOperations</code> , which is usually used as <code>org.springframework.jdbc.core.JdbcTemplate</code>). </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  Statement stmt2 = null;\n  PreparedStatement pstmt;\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\"); // Compliant; parameters not used here\n\n    stmt2 = con.createStatement();\n    ResultSet rs2 = stmt2.executeQuery(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  // Noncompliant; parameter concatenated directly into query\n\n    pstmt = con.prepareStatement(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  // Noncompliant; parameter concatenated directly into query\n    ResultSet rs3 = pstmt.executeQuery();\n\n    //...\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query = session.createQuery(  // Compliant\n            \"FROM students where fname = \" + userInput);  // Noncompliant; parameter binding should be used instead\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  PreparedStatement pstmt = null;\n  String query = \"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=?\"\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\");\n\n    pstmt = con.prepareStatement(query);\n    pstmt.setString(1, user);  // Compliant; PreparedStatements escape their inputs.\n    ResultSet rs2 = pstmt.executeQuery();\n\n    //...\n  }\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query =  session.createQuery(\"FROM students where fname = ?\");\n  query = query.setParameter(0,userInput);  // Parameter binding escapes all input\n  // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/89\">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/564.html\">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/943.html\">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PgIRAg\">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rules <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>","debt":"20min"},{"summary":"Empty statements should be removed","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");;                     // Noncompliant - double ;\n  ...\n  for (int i = 0; i &lt; 3; System.out.println(i), i++);       // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");\n  ...\n  for (int i = 0; i &lt; 3; i++){\n    System.out.println(i);\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7gCTAw\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4FtAg\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>","debt":"2min"},{"summary":"\"writeObject\" should not be the only \"synchronized\" code in a class","type":"Code Smell","defaultSeverity":"Major","description":"<p>The purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There's no real problem with marking\n<code>writeObject</code> <code>synchronized</code>, but if it's highly suspicious if this serialization-related method the only\n<code>synchronized</code> code in a <code>class</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n  public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n   public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private void writeObject(ObjectOutputStream stream) throws IOException {\n    // ...\n  }\n}\n</pre>","debt":"20min"},{"summary":"Switches should be used for sequences of simple \"String\" tests","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Since Java 7, <code>String</code>s can be used as <code>switch</code> arguments. So when a single <code>String</code> is tested against three or\nmore values in an <code>if</code>/<code>else if</code> structure, it should be converted to a switch instead for greater readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (\"red\".equals(choice)) {  // Noncompliant\n  dispenseRed();\n} else if (\"blue\".equals(choice)) {\n  dispenseBlue();\n} else if (\"yellow\".equals(choice)) {\n  dispenseYellow();\n} else {\n  promptUser();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch(choice) {\n  case \"Red\":\n    dispenseRed();\n    break;\n  case \"Blue\":\n    dispenseBlue():\n    break;\n  case \"Yellow\":\n    dispenseYellow();\n    break;\n  default:\n    promptUser();\n    break;\n}\n</pre>","debt":"5min"},{"summary":"Track uses of disallowed constructors","type":"Code Smell","defaultSeverity":"Major","description":"<p>This rule allows banning usage of certain constructors.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className: java.util.Date </li>\n  <li> argumentTypes: java.lang.String </li>\n</ul>\n<pre>\nDate birthday;\nbirthday = new Date(\"Sat Sep 27 05:42:21 EDT 1986\");  // Noncompliant\nbirthday = new Date(528176541000L); // Compliant\n</pre>"},{"summary":"EJB interceptor exclusions should be declared as annotations","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Exclusions for default interceptors can be declared either in xml or as class annotations. Since annotations are more visible to maintainers, they\nare preferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;assembly-descriptor&gt;\n      &lt;interceptor-binding&gt;\n         &lt;ejb-name&gt;MyExcludedClass&lt;/ejb-name&gt;\n         &lt;exclude-default-interceptors&gt;true&lt;/exclude-default-interceptors&gt; &lt;!-- Noncompliant --&gt;\n         &lt;exclude-class-interceptors&gt;true&lt;/exclude-class-interceptors&gt; &lt;!-- Noncomopliant --&gt;\n         &lt;method&gt;\n           &lt;method-name&gt;doTheThing&lt;/method-name&gt;\n         &lt;/method&gt;\n      &lt;/interceptor-binding&gt;\n\n&lt;/assembly-descriptor&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@ExcludeDefaultInterceptors\npublic class MyExcludedClass implements MessageListener\n{\n\n  @ExcludeClassInterceptors\n  @ExcludeDefaultInterceptors\n  public void doTheThing() {\n    // ...\n  }\n</pre>","debt":"15min"},{"summary":"SHA-1 and Message-Digest hash algorithms should not be used","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,\nit takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash\nvalue gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,\nMD4, MD6, RIPEMD160.</p>\n<p>The following APIs are tracked for use of obsolete crypto algorithms:</p>\n<p> * <code>java.security.AlgorithmParameters</code> (JDK)</p>\n<p> * <code>java.security.AlgorithmParameterGenerator</code> (JDK)</p>\n<p> * <code>java.security.MessageDigest</code> (JDK)</p>\n<p> * <code>java.security.KeyFactory</code> (JDK)</p>\n<p> * <code>java.security.KeyPairGenerator</code> (JDK)</p>\n<p> * <code>java.security.Signature</code> (JDK)</p>\n<p> * <code>javax.crypto.Mac</code> (JDK)</p>\n<p> * <code>javax.crypto.KeyGenerator</code> (JDK)</p>\n<p> * <code>org.apache.commons.codec.digest.DigestUtils</code> (Apache Commons Codec)</p>\n<p> * <code>com.google.common.hash.Hashing</code> (Guava)</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA1\");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/328\">MITRE, CWE-328</a> - Reversible One-Way Hash </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST\">MessageDigest Is Weak</a> </li>\n</ul>","debt":"30min"},{"summary":"Default EJB interceptors should be declared in \"ejb-jar.xml\"","type":"Vulnerability","defaultSeverity":"Blocker","description":"<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml</code> file, or they will not be treated\nas default. </p>\n<p>This rule applies to projects that contain JEE Beans (any one of <code>javax.ejb.Singleton</code>, <code>MessageDriven</code>,\n<code>Stateless</code> or <code>Stateful</code>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// file: ejb-interceptors.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;&lt;!-- Noncompliant; will not be treated as default --&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// file: ejb-jar.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>","debt":"5min"},{"summary":"The names of methods with boolean return values should start with \"is\" or \"has\"","type":"Code Smell","defaultSeverity":"Major","description":"<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean should have names that start with \"is\" or \"has\" rather than with \"get\".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean getFoo() { // Noncompliant\n  // ...\n}\n\npublic boolean getBar(Bar c) { // Noncompliant\n  // ...\n}\n\npublic boolean testForBar(Bar c) { // Compliant - The method does not start by 'get'.\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isFoo() {\n  // ...\n}\n\npublic boolean hasBar(Bar c) {\n  // ...\n}\n\npublic boolean testForBar(Bar c) {\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded.</p>\n<pre>\n@Override\npublic boolean getFoo(){\n  // ...\n}\n</pre>","debt":"15min"},{"summary":"Double-checked locking should not be used","type":"Bug","defaultSeverity":"Blocker","description":"<p>Double-checked locking is the practice of checking a lazy-initialized object's state both before and after a <code>synchronized</code> block is\nentered to determine whether or not to initialize the object.</p>\n<p>It does not work reliably in a platform-independent manner without additional synchronization for mutable instances of anything other than\n<code>float</code> or <code>int</code>. Using double-checked locking for the lazy initialization of any other type of primitive or mutable object\nrisks a second thread using an uninitialized or partially initialized member while the first thread is still creating it, and crashing the\nprogram.</p>\n<p>There are multiple ways to fix this. The simplest one is to simply not use double checked locking at all, and synchronize the whole method instead.\nWith early versions of the JVM, synchronizing the whole method was generally advised against for performance reasons. But <code>synchronized</code>\nperformance has improved a lot in newer JVMs, so this is now a preferred solution. If you prefer to avoid using <code>synchronized</code> altogether,\nyou can use an inner <code>static class</code> to hold the reference instead. Inner static classes are guaranteed to load lazily.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@NotThreadSafe\npublic class DoubleCheckedLocking {\n    private static Resource resource;\n\n    public static Resource getInstance() {\n        if (resource == null) {\n            synchronized (DoubleCheckedLocking.class) {\n                if (resource == null)\n                    resource = new Resource();\n            }\n        }\n        return resource;\n    }\n\n    static class Resource {\n\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@ThreadSafe\npublic class SafeLazyInitialization {\n    private static Resource resource;\n\n    public synchronized static Resource getInstance() {\n        if (resource == null)\n            resource = new Resource();\n        return resource;\n    }\n\n    static class Resource {\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">The \"Double-Checked Locking is Broken\" Declaration</a> </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IgAZAg\">CERT, LCK10-J.</a> - Use a correct form of the double-checked locking idiom\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/609.html\">MITRE, CWE-609</a> - Double-checked locking </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.4\">JLS 12.4</a> - Initialization of Classes and Interfaces </li>\n</ul>","debt":"20min"},{"summary":"Classes named like \"Exception\" should extend \"Exception\" or a subclass","type":"Code Smell","defaultSeverity":"Major","description":"<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation\nthat a class' name will indicate what it is and/or does.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>","debt":"5min"},{"summary":"Nested code blocks should not be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>","debt":"10min"},{"summary":"\"compareTo\" should not return \"Integer.MIN_VALUE\"","type":"Bug","defaultSeverity":"Minor","description":"<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo</code> that matters. Returning <code>Integer.MIN_VALUE</code>\ndoes <em>not</em> convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo</code> is sometimes\ninversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE</code> yields\n<code>Integer.MIN_VALUE</code> rather than <code>Integer.MAX_VALUE</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return Integer.MIN_VALUE;  // Noncompliant\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return -1;\n  }\n</pre>","debt":"5min"},{"summary":"Struts validation forms should have unique names","type":"Vulnerability","defaultSeverity":"Blocker","description":"<p>According to the Common Weakness Enumeration,</p>\n<blockquote>\n  If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the\n  other. This decision might not correspond to the programmer's expectations...\n</blockquote>\n<p>In such a case, it is likely that the two forms should be combined. At the very least, one should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/102.html\">MITRE, CWE-102</a> - Struts: Duplicate Validation Forms </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Struts:_Duplicate_Validation_Forms#Struts:_Duplicate_Validation_Forms\">OWASP, Improper Data\n  Validation</a> - Struts: Duplicate Validation Forms </li>\n</ul>","debt":"20min"},{"summary":"Math should not be performed on floats","type":"Bug","defaultSeverity":"Minor","description":"<p>For small numbers, <code>float</code> math has enough precision to yield the expected value, but for larger numbers, it does not.\n<code>BigDecimal</code> is the best alternative, but if a primitive is required, use a <code>double</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nfloat c = a + b; // Noncompliant; yields 1.6777216E7 not 1.6777217E7\n\ndouble d = a + b; // Noncompliant; addition is still between 2 floats\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nBigDecimal c = BigDecimal.valueOf(a).add(BigDecimal.valueOf(b));\n\ndouble d = (double)a + (double)b;\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the mathematical expression is only used to build a string.</p>\n<pre>\nSystem.out.println(\"[\"+getName()+\"] \" +\n           \"\\n\\tMax time to retrieve connection:\"+(max/1000f/1000f)+\" ms.\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/DgU\">CERT, FLP02-C.</a> - Avoid using floating-point numbers when precise computation\n  is needed </li>\n</ul>","debt":"15min"},{"summary":"Array designators \"[]\" should be on the type, not the variable","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint[][] matrix;   // Compliant\n</pre>","debt":"5min"},{"summary":"Default annotation parameter values should not be passed as arguments","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Specifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@MyAnnotation(arg = \"def\")  // Noncompliant\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@MyAnnotation\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n</pre>","debt":"2min"},{"summary":"\"finalize\" should not set fields to \"null\"","type":"Code Smell","defaultSeverity":"Minor","description":"<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -\nthe object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name = null;  // Noncompliant; completely unnecessary\n</pre>","debt":"5min"},{"summary":"URIs should not be hardcoded","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.</p>\n<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>\n<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  public Collection&lt;User&gt; listUsers() {\n    File userList = new File(\"/home/mylogin/Dev/users.txt\"); // Non-Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.\n  private Configuration config;\n  public Foo(Configuration myConfig) {\n    this.config = myConfig;\n  }\n  public Collection&lt;User&gt; listUsers() {\n    // Find here the way to get the correct folder, in this case using the Configuration object\n    String listingFolder = config.getProperty(\"myApplication.listingFolder\");\n    // and use this parameter instead of the hard coded path\n    File userList = new File(listingFolder, \"users.txt\"); // Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>","debt":"20min"},{"summary":"\"equals\" methods should be symmetric and work for subclasses","type":"Bug","defaultSeverity":"Minor","description":"<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is\nsymmetric. </p>\n<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the\nparent is not an <code>instanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a\nnew implementation of <code>equals</code>):</p>\n<pre>\nFruit fruit = new Fruit();\nRaspberry raspberry = new Raspberry();\n\nif (raspberry instanceof Fruit) { ... } // true\nif (fruit instanceof Raspberry) { ... } // false\n</pre>\n<p>If similar <code>instanceof</code> checks were used in the classes' <code>equals</code> methods, the symmetry principle would be broken:</p>\n<pre>\nraspberry.equals(fruit); // false\nfruit.equals(raspberry); //true\n</pre>\n<p>Additionally, non <code>final</code> classes shouldn't use a hardcoded class name in the <code>equals</code> method because doing so breaks the\nmethod for subclasses. Instead, make the comparison dynamic.</p>\n<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while\n<code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class\n      // ...\n    }\n    //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (this.getClass() == obj.getClass()) {\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    return false;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zIUbAQ\">CERT, MET08-J.</a> - Preserve the equality contract when overriding the\n  equals() method </li>\n</ul>","debt":"5min"},{"summary":"Array designators \"[]\" should be located after the type in method signatures","type":"Code Smell","defaultSeverity":"Minor","description":"<p>According to the Java Language Specification: </p>\n<blockquote>\n  <p>For compatibility with older versions of the Java SE platform,</p>\n  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the\n  array type after the formal parameter list.</p>\n  <p>This obsolescent syntax should not be used in new code.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getVector()[] { /* ... */ }    // Noncompliant\n\npublic int[] getMatrix()[] { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int[] getVector() { /* ... */ }\n\npublic int[][] getMatrix() { /* ... */ }\n</pre>","debt":"5min"},{"summary":"\"action\" mappings should not have too many \"forward\" entries","type":"Code Smell","defaultSeverity":"Minor","description":"<p>It makes sense to handle all related actions in the same place. Thus, the same <code>&lt;action&gt;</code> might logically handle all facets of\nCRUD on an entity, with no confusion in the naming about which <code>&lt;forward/&gt;</code> handles which facet. But go very far beyond that, and it\nbecomes difficult to maintain a transparent naming convention. </p>\n<p>So to ease maintenance, this rule raises an issue when an <code>&lt;action&gt;</code> has more than the allowed number of\n<code>&lt;forward/&gt;</code> tags.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 4:</p>\n<pre>\n&lt;action path='/book' type='myapp.BookDispatchAction' name='form' parameter='method'&gt;\n  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;\n  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;\n  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;\n  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;\n  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;  &lt;!-- Noncompliant --&gt;\n&lt;/action&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;action path='/book' type='myapp.BookDispatchAction' name='bookForm' parameter='method'&gt;\n  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;\n  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;\n  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;\n  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;\n&lt;/action&gt;\n\n&lt;action path='/author' type='myapp.AuthorDispatchAction' name='authorForm' parameter='method'&gt;\n  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;\n&lt;/action&gt;\n</pre>"},{"summary":"Static fields should not be updated in constructors","type":"Code Smell","defaultSeverity":"Major","description":"<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.</p>\n<p>Instead remove the field's <code>static</code> modifier, or initialize it statically.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  static Date dateOfBirth;\n  static int expectedFingers;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers = 10;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  Date dateOfBirth;\n  static int expectedFingers = 10;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;\n  }\n}\n</pre>","debt":"20min"},{"summary":"\"java.lang.Error\" should not be extended","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be\nencountered by the Java Virtual Machine.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>","debt":"10min"},{"summary":"Subclasses that add fields should override \"equals\"","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of\nnon-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>\n<p>This rule looks for classes that do all of the following:</p>\n<ul>\n  <li> extend classes that override <code>equals</code>. </li>\n  <li> do not themselves override <code>equals</code>. </li>\n  <li> add fields. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method\n  private Color ripeColor;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj = (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n</pre>","debt":"30min"},{"summary":"Exception types should not be tested using \"instanceof\" in catch blocks","type":"Code Smell","defaultSeverity":"Major","description":"<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/5gFFB\">CERT, ERR51-J.</a> - Prefer user-defined exceptions over more general exception\n  types </li>\n</ul>","debt":"10min"},{"summary":"String literals should not be duplicated","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\"'\" + a + \"'\");               // Compliant - literal \"'\" has less than 5 characters and is excluded\n  return \"\";                                       // Compliant - literal \"\" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>","debt":"2min"},{"summary":"Classes from \"sun.*\" packages should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>\n<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause\nproblems when moving to a different Java vendor, such as OpenJDK.</p>\n<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport com.sun.jna.Native;     // Noncompliant\nimport sun.misc.BASE64Encoder; // Noncompliant\n</pre>"},{"summary":"Future keywords should not be used as names","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>","debt":"5min"},{"summary":"String function use should be optimized for single characters","type":"Code Smell","defaultSeverity":"Major","description":"<p>An <code>indexOf</code> or <code>lastIndexOf</code> call with a single letter <code>String</code> can be made more performant by switching to a\ncall with a <code>char</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myStr = \"Hello World\";\n// ...\nint pos = myStr.indexOf(\"W\");  // Noncompliant\n// ...\nint otherPos = myStr.lastIndexOf(\"r\"); // Noncompliant\n// ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myStr = \"Hello World\";\n// ...\nint pos = myStr.indexOf('W');\n// ...\nint otherPos = myStr.lastIndexOf('r');\n// ...\n</pre>","debt":"5min"},{"summary":"\"Serializable\" inner classes of \"Serializable\" classes should be static","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually\nserializable, then the serialization will succeed but possibly write out far more data than was intended. </p>\n<p>Making the inner class <code>static</code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static</code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: </p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public class Drupelet implements Serializable {  // Noncompliant; output may be too large\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public static class Drupelet implements Serializable {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/O4CpAQ\">CERT, SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>","debt":"15min"},{"summary":"Child class methods named for parent class methods should be overrides","type":"Bug","defaultSeverity":"Major","description":"<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that's not the case\nwhen:</p>\n<ul>\n  <li> the parent class method is <code>static</code> and the child class method is not. </li>\n  <li> the arguments or return types of the child method are in different packages than those of the parent method. </li>\n  <li> the parent class method is <code>private</code>. </li>\n</ul>\n<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent\ndeclaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then\nthe method should be renamed to prevent confusion. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport fruit.Pear;\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // Noncompliant; this is not an override\n    // ...\n  }\n\n\n  public void doSomethingElse() {  // Noncompliant; parent method is static\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport computer.Pear;  // import corrected\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // true override (see import)\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n</pre>","debt":"30min"},{"summary":"\"Serializable\" classes should have a version id","type":"Code Smell","defaultSeverity":"Critical","description":"<p>A <code>serialVersionUID</code> field is required in all <code>Serializable</code> classes. If you do not provide one, one will be calculated for\nyou by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an entirely new id,\nand you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the class.</p>\n<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.\n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s),\nand classes marked with <code>@SuppressWarnings(\"serial\")</code> are ignored.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYCpAQ\">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution\n  </li>\n</ul>","debt":"5min"},{"summary":"Short-circuit logic should be used in boolean contexts","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>","debt":"5min"},{"summary":"Inappropriate \"Collection\" calls should not be made","type":"Bug","defaultSeverity":"Major","description":"<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>","debt":"15min"},{"summary":"Class names should not shadow interfaces or superclasses","type":"Code Smell","defaultSeverity":"Critical","description":"<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>","debt":"5min"},{"summary":"The non-serializable super class of a \"Serializable\" class should have a no-argument constructor","type":"Bug","defaultSeverity":"Minor","description":"<p>When a <code>Serializable</code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the\nobject from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until\nthe final object has been instantiated. </p>\n<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a\n<code>Serializable</code> class must have a no-arg constructor. Otherwise the class is <code>Serializable</code> but not deserializable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {  // Noncompliant; nonserializable ancestor doesn't have no-arg constructor\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit () {...};  // Compliant; no-arg constructor added to ancestor\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) {...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>","debt":"30min"},{"summary":"Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be on two different lines","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on\ntwo different lines.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>","debt":"1min"},{"summary":"Class variable fields should not have public accessibility","type":"Vulnerability","defaultSeverity":"Minor","description":"<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>","debt":"10min"},{"summary":"An open curly brace should be located at the beginning of a line","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>","debt":"1min"},{"summary":"\"toArray\" should be passed an array of the proper type","type":"Bug","defaultSeverity":"Minor","description":"<p>Given no arguments, the <code>Collections.toArray</code> method returns an <code>Object []</code>, which will cause a\n<code>ClassCastException</code> at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the\ncall.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray();  // Noncompliant; ClassCastException thrown\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return strings.toArray(new String[0]);\n}\n</pre>","debt":"5min"},{"summary":"The diamond operator (\"<>\") should be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>","debt":"1min"},{"summary":"\"throws\" declarations should not be superfluous","type":"Code Smell","defaultSeverity":"Minor","description":"<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>\n<ul>\n  <li> listed multiple times </li>\n  <li> a subclass of another listed exception </li>\n  <li> a <code>RuntimeException</code>, or one of its descendants </li>\n  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\nvoid baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\nvoid baz() {}\n</pre>","debt":"5min"},{"summary":"Comments should not be located at the end of lines of code","type":"Code Smell","defaultSeverity":"Minor","description":"<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n</pre>","debt":"1min"},{"summary":"\"java.nio.Files#delete\" should be preferred","type":"Code Smell","defaultSeverity":"Major","description":"<p>When <code>java.io.File#delete</code> fails, this <code>boolean</code> method simply returns <code>false</code> with no indication of the cause. On\nthe other hand, when <code>java.nio.Files#delete</code> fails, this <code>void</code> method returns one of a series of exception types to better\nindicate the cause of the failure. And since more information is generally better in a debugging situation, <code>java.nio.Files#delete</code> is the\npreferred option.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void cleanUp(Path path) {\n  File file = new File(path);\n  if (!file.delete()) {  // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException{\n  Files.delete(path);\n}\n</pre>","debt":"10min"},{"summary":"HTTP referers should not be relied on","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>The fields in an HTTP request are putty in the hands of an attacker, and you cannot rely on them to tell you the truth about anything. While it may\nbe safe to store such values after they have been neutralized, decisions should never be made based on their contents.</p>\n<p>This rule flags uses of the referer header field.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n    String referer = request.getHeader(\"referer\");  // Noncompliant\n    if(isTrustedReferer(referer)){\n      //..\n    }\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/807\">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/293\">MITRE, CWE-293</a> - Using Referer Field for Authentication </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n</ul>","debt":"20min"},{"summary":"Fields should not be initialized to default values","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need\nto explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it's considered poor style to do so.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  int count = 0;  // Noncompliant\n  // ...\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  int count;\n  // ...\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>final</code> fields are ignored.</p>","debt":"2min"},{"summary":"Equality operators should not be used in \"for\" loop termination conditions","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li> starts below the ending value and is incremented by 1 on each iteration. </li>\n  <li> starts above the ending value and is decremented by 1 on each iteration. </li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 6-5-2 </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/835\">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwDJAQ\">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/GwDJAQ\">CERT, MSC21-CPP.</a> - Use inequality to terminate a loop whose counter changes\n  by more than one </li>\n</ul>","debt":"2min"},{"summary":"Modifiers should be declared in the correct order","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The Java Language Specification recommends listing modifiers in the following order:</p>\n<p>1. Annotations</p>\n<p>2. public</p>\n<p>3. protected</p>\n<p>4. private</p>\n<p>5. abstract</p>\n<p>6. static</p>\n<p>7. final</p>\n<p>8. transient</p>\n<p>9. volatile</p>\n<p>10. synchronized</p>\n<p>11. native</p>\n<p>12. strictfp</p>\n<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard\norder.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic public void main(String[] args) {   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>","debt":"2min"},{"summary":"\"enum\" fields should not be publicly mutable","type":"Vulnerability","defaultSeverity":"Minor","description":"<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>","debt":"20min"},{"summary":"\"getClass\" should not be used for synchronization","type":"Bug","defaultSeverity":"Major","description":"<p><code>getClass</code> should not be used for synchronization in non-<code>final</code> classes because child classes will synchronize on a\ndifferent object than the parent or each other, allowing multiple threads into the code block at once, despite the <code>synchronized</code>\nkeyword.</p>\n<p>Instead, hard code the name of the class on which to synchronize or make the class <code>final</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (this.getClass()) {  // Noncompliant\n      // ...\n    }\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (MyClass.class) {\n      // ...\n    }\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/bwCaAg\">CERT, LCK02-J.</a> - Do not synchronize on the class object returned by\n  getClass() </li>\n</ul>","debt":"5min"},{"summary":"Packages containing only \"package-info.java\" should be removed","type":"Code Smell","defaultSeverity":"Minor","description":"<p>There is no reason to have a package that is empty except for \"package-info.java\". Such packages merely clutter a project, taking up space but\nadding no value. </p>","debt":"2min"},{"summary":"\"main\" should not \"throw\" anything","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>There's no reason for a <code>main</code> method to <code>throw</code> anything. After all, what's going to catch it? </p>\n<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and\nperform whatever logging or user communication is necessary, and <code>exit</code> with a non-zero (i.e. non-success) exit code if necessary.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String args[]) throws Exception { // Noncompliant\n  doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String args[]) {\n try {\n    doSomething();\n  } catch (Throwable t) {\n    log.error(t);\n    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.\n  }\n}\n</pre>","debt":"15min"},{"summary":"\"equals(Object obj)\" should test argument type","type":"Bug","defaultSeverity":"Minor","description":"<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>","debt":"5min"},{"summary":"Classes should not be empty","type":"Code Smell","defaultSeverity":"Minor","description":"<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an\n<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Nothing {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Nothing {\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n</pre>","debt":"5min"},{"summary":"Return values should not be ignored when they contain the operation status code","type":"Vulnerability","defaultSeverity":"Minor","description":"<p>When the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed\nsuccessfully.</p>\n<p>This rule raises an issue when the return values of the following are ignored:</p>\n<ul>\n  <li> <code>java.io.File</code> operations that return a status code (except <code>mkdirs</code>) </li>\n  <li> <code>Iterator.hasNext()</code> </li>\n  <li> <code>Enumeration.hasMoreElements()</code> </li>\n  <li> <code>Lock.tryLock()</code> </li>\n  <li> non-void <code>Condition.await*</code> methods </li>\n  <li> <code>CountDownLatch.await(long, TimeUnit)</code> </li>\n  <li> <code>Semaphore.tryAcquire</code> </li>\n  <li> <code>BlockingQueue</code>: <code>offer</code>, <code>remove</code>, <code>drainTo</code>, </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  file.delete();  // Noncompliant\n  // ...\n  lock.tryLock(); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  if (!lock.tryLock()) {\n    // lock failed; take appropriate action\n  }\n  if (!file.delete()) {\n    // file delete failed; take appropriate action\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.10 - If a function returns error information, then that error information shall be tested </li>\n  <li> MISRA C++:2008, 0-1-7 - The value returned by a function having a non-void return type that is not an overloaded operator shall always be used.\n  </li>\n  <li> MISRA C:2012, Dir. 4.7 - If a function returns error information, then that error information shall be tested </li>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/w4C4Ag\">CERT, ERR33-C.</a> - Detect and handle standard library errors </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/iIBfBw\">CERT, POS54-C.</a> - Detect and handle POSIX library errors </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/toHWAw\">CERT, FIO02-J.</a> - Detect and handle file-related errors </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/754\">MITRE, CWE-754</a> - Improper Check for Unusual Exceptional Conditions </li>\n</ul>","debt":"15min"},{"summary":"Cookies should be \"secure\"","type":"Vulnerability","defaultSeverity":"Minor","description":"<p>The \"secure\" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon.\nInstead, cookies with the secure attribute are only sent over encrypted HTTPS connections.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);  // Noncompliant; cookie is not secure\nresponse.addCookie(c);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);\nc.setSecure(true);\nresponse.addCookie(c);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/614\">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n</ul>","debt":"5min"},{"summary":"Try-with-resources should be used","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer\nto bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>\n<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFileReader fr = null;\nBufferedReader br = null;\ntry {\n  fr = new FileReader(fileName);\n  br = new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n} finally {\n  if (br != null) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n  if (fr != null ) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (\n    FileReader fr = new FileReader(fileName);\n    BufferedReader br = new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<p>or</p>\n<pre>\ntry (BufferedReader br =\n        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don't want to\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/MACfBg\">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle\n  closeable resources </li>\n</ul>","debt":"15min"},{"summary":"Failed unit tests should be fixed","type":"Bug","defaultSeverity":"Major","description":"Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions."},{"summary":"Skipped unit tests should be either removed or fixed","type":"Code Smell","defaultSeverity":"Major","description":"Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed."},{"summary":"Source files should not have any duplicated blocks","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as there is at least one block of duplicated code on this file","debt":"10min"},{"summary":"Source files should have a sufficient density of comment lines","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message."},{"summary":"Lines should have sufficient coverage by tests","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold."},{"summary":"Branches should have sufficient coverage by tests","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold."}]}