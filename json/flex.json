{"types":{"Vulnerability":6,"Code Smell":68,"Bug":5,"Other":0},"rules":[{"summary":"Package definition should be separate from Class definition","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Declaring the package and class together has been deprecated since ActionScript 3. The package definition should be declared outside of the class definition even if the old syntax is still supported. </p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass P.A {...} \n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npackage P {    \n    class A {...}\n}\n\n</pre>","debt":"5min"},{"summary":"Multiple \"++\" or \"--\" unary operators should not be used in a single arithmetic expression","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  Using several \"--\" or \"++\" unary operators in the same arithmetic expression can quickly make the expression unreadable.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n var j:int = foo++ - --bar;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nbar--;\nvar j:int = foo++ - bar;\n</pre>","debt":"2min"},{"summary":"Public classes, methods, properties and metadata should be documented with ASDoc","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  Try to imagine using the standard Flex API without ASDoc. It would be a nightmare, because ASDoc is the only way to understand of the contract of the API.</br>\n  Documenting an API with ASDoc increases the productivity of the developers use it.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  public var myLabel:String;\n\n  public function myMethod(param1:String):Boolean {...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * my doc\n */\npublic class MyClass {\n  /**\n   * my doc\n   */\n  public var myLabel:String;\n\n  /**\n   * my doc\n   * @param param1 my doc\n   * @return my doc\n   */\n  public function myMethod(param1:String):Boolean {...}\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Classes or class elements with an ASDoc <code>@private</code> comment are ignored by this rule.</p>\n<pre>\n/**\n * @private  // This class and all its elements are ignored\n */\npublic class MyClass {  // Compliant\n\n  public var myLabel:String;   // Compliant\n}\n\npublic class AnotherClass {  // Noncompliant; class not @private and not documented\n\n  /**\n   * @private\n   */\n  public var name:String;  // Compliant\n}\n</pre>","debt":"10min"},{"summary":"Copyright and license headers should be defined","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>\n  Each source file should start with a header stating file ownership and the license which must be used to distribute the application.<br/>\n  This rule must be fed with the header text that is expected at the beginning of every file.\n</p>\n\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>","debt":"5min"},{"summary":"Flex parser failure","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nWhen the Flex parser fails, it is possible to record the failure as a violation on the file.\nThis way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.\n</p>","debt":"30min"},{"summary":"Lines should not be too long","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n</p>","debt":"1min"},{"summary":"Unused function parameters should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a:int, b:int):void      // \"b\" is unused\n{\n  compute(a);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(a:int):void\n{\n  compute(a);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>The following cases are ignored</p>\n<ul>\n  <li>event handlers.</li>\n  <li>overriding methods.</li>\n  <li>all methods in classes implementing one or more interfaces.</li>\n  <li>methods which are empty or where the body consists of a single comment or a single throw statement (i.e. where the intention is apparently to simulate an abstract class).</li>\n</ul>\n<pre>\noverride function doSomething(a:int):void {    // ignored\n  compute(a);\n}\n\n...\n\nclass AbstractSomething {\n  public function doSomething(a:int) {  // ignored\n    throw new IllegalOperationError(\"doSomething() is abstract\");\n  }\n\n...\n\ninterface I {\n  function action(a:int, b:int);\n}\n\nclass C extends I {\n  function action(a:int, b:int) { // ignored\n    return doSomethignWith(a);\n  }\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C++:2008, 0-1-11\n  </li><li> MISRA C:2012, 2.7\n</li></ul>","debt":"5min"},{"summary":"Public constants and fields initialized at declaration should be \"const static\" rather than merely \"const\"","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  Making a public constant just <code>const</code> as opposed to <code>static const</code> leads to duplicating its value for every instance of the class, uselessly increasing the amount of memory required to execute the application.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass\n{\n  public const THRESHOLD:int = 3;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass\n{\n  public static const THRESHOLD:int = 3;\n}\n</pre>","debt":"2min"},{"summary":"Functions should not have too many parameters","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic function addData(p1 : int, p2 : int, p3 : int, p4 : int, p5 : int): void  {\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic function addData(p1 : int, p2 : int, p3 : int, p4 : int): void  {\n...\n}\n</pre>","debt":"20min"},{"summary":"Nested blocks of code should not be left empty","type":"Code Smell","defaultSeverity":"Major","description":"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (var i:int = 0; i &lt; 42; i++){}  // Noncompliant\n\ntry {                               // Noncompliant\n} catch (error)\n{\n    ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfor (var i:int = 0; i &lt; 42; i++);\n\nfor (var i:int = 0; i &lt; 42; i++) {\n  trace(i);\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>When a block contains a comment, this block is not considered to be empty.</p>","debt":"5min"},{"summary":"Constructors should not dispatch events","type":"Bug","defaultSeverity":"Blocker","description":"<p>\n  A listener can be attached to an object only after it has been constructed. So dispatching an event in a constructor is useless and error prone.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  public function MyClass()\n  {\n    dispatchEvent( new Event( \"uselessEvent\" ) ); \n  }\n}\n</pre>","debt":"10min"},{"summary":"XPath rule","type":"Code Smell","defaultSeverity":"Major","description":"<p>This rule allows the definition of custom rules using XPath expressions.</p>\n\n<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>\n\n<ul>\n  <li> a single or list of AST nodes, then a line issue with the given message is created for each node\n  </li><li> a boolean, then a file issue with the given message is created only if the boolean is true\n</li><li> anything else, no issue is created\n</li></ul>\n\n<p>Here is an example of an XPath expression to log an issue on each if statement:</p>\n\n<pre>\n//IF_STATEMENT\n</pre>"},{"summary":"The flash.system.Security.exactSettings property should never be set to false","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\n  The security.exactSettings value should remain set at the default value of true. Setting this value to false could make the SWF vulnerable to cross-domain attacks.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nSecurity.exactSettings = false;\n</pre>","debt":"10min"},{"summary":"\"switch\" statements should have at least 3 \"case\" clauses","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  <code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.\n  For just one or two cases however, the code will be more readable with <code>if</code> statements.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.\n  </li><li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.\n</li><li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses\n</li></ul>","debt":"5min"},{"summary":"\"MovieClip.onEnterFrame\" event handler should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  The <code>onEnterFrame</code> event handler is continually invoked at the frame rate of the SWF file, regardless of which individual movie frame it is set for. Having too many <code>onEnterFrame</code> handlers can seriously degrade performance.\n</p>\n<p>\n  If the use of this event handler cannot be avoided entirely, then it should be created as close to its use as possible, and then destroyed as soon as possible afterward.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nmovieClip.onEnterFrame = function () {   // Noncompliant\n   // ...\n}\n</pre>","debt":"20min"},{"summary":"Method visibility should be explicitly declared","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  Access modifiers define which classes can access properties, variables, methods, and other classes. If an access modifier is not specified, the access level defaults to <code>internal</code>, which grants access to all classes in the same package. This may be what is intended, but it should be specified explicitly to avoid confusion.\n</p>\n<p>\n  Available access modifiers are:\n</p>\n<ul>\n    <li><code>internal</code> - access allowed within the same package</li>\n    <li><code>private</code> - access allowed only within the same class</li>\n    <li><code>protected</code> - access allowed to the class and its child classes</li>\n    <li><code>public</code> - unfettered access by all</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction checkResources():Boolean {\n  ...\n  return true;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic function checkResources():Boolean {\n  ...\n  return true;\n}\n</pre>","debt":"2min"},{"summary":"LocalConnection should be configured to narrowly specify the domains with which local connections to other Flex application are allowed","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\n  A LocalConnection object is used to invoke a method in another LocalConnection object, either within a single SWF file or between multiple SWF files. This kind of local connection should be authorized only when the origin (domain) of the other Flex applications is perfectly defined.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nlocalConnection.allowDomain(\"*\");\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nlocalConnection.allowDomain(\"www.myDomain.com\");\n</pre>","debt":"10min"},{"summary":"Unused private fields should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  If a private field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n public class MyClass {\n  private var foo:int = 4;                       //foo is unused\n\n  public function compute(a:int):int{\n    return a * 4;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public function compute(a:int):int{\n    return a * 4;\n  }\n}\n</pre>","debt":"5min"},{"summary":"Each ManagedEvents metadata tag should have a companion Event metadata tag","type":"Bug","defaultSeverity":"Blocker","description":"<p>\n  The \"ManagedEvents\" metadata tag allows you to flag an event as being managed. By definition this \"ManageEvents\" metadata tag should be used in pair with an \"Event\" metadata tag.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Event(name=\"message\", type=\"my.package.MyEvemt\")]\n[ManagedEvents(\"mes\")]       //This \"mes\" event is not defined with the \"Event\" metadata tag\npublic class MyClass {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n[Event(name=\"message\", type=\"my.package.MyEvemt\")]\n[ManagedEvents(\"message\")]\npublic class MyClass {...}\n</pre>","debt":"5min"},{"summary":"Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  <code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional.\n  <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.\n</p>\n\n<p>There are three possible causes for the presence of such code: </p>\n\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed.</li>\n  <li> Some value was left unset.</li>\n  <li> Some logic is not doing what the programmer thought it did.</li>\n</ul>\n\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (true) {  \n  doSomething(); \n}\n...\nif (false) {  \n  doSomethingElse(); \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\ndoSomething(); \n...\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code\n  </li><li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True\n</li><li> MISRA C:2004, 13.7\n</li><li> MISRA C:2012, 14.3\n</li></ul>","debt":"2min"},{"summary":"Unused private function should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  Private functions that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  private function Foo(){}   //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static function doSomething():void\n  {\n    var foo:Foo = new Foo();\n    ...\n  }\n  private function unusedPrivateFunction():void {...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  private function Foo(){}   //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static function doSomething():void\n  {\n    var foo:Foo = new Foo();\n    ...\n  }\n}\n</pre>","debt":"5min"},{"summary":"Event types should be defined in metadata tags","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  According to the Flex documentation :\n</p>\n\n<blockquote>\n  <p>\n    In an ActionScript file, when you define component events or other aspects of a component that affect more than a single property, you add the metadata tag outside the class definition so that the metadata is bound to the entire class, as the following example shows:\n  </p>\n\n  <pre>\n  // Add the [Event] metadata tag outside of the class file.\n  [Event(name=\"enableChange\", type=\"flash.events.Event\")]\n  public class ModalText extends TextArea {\n\n      ...\n\n      // Define class properties/methods\n      private var _enableTA:Boolean;\n\n      // Add the [Inspectable] metadata tag before the individual property.\n      [Inspectable(defaultValue=\"false\")]\n      public function set enableTA(val:Boolean):void {\n          _enableTA = val;\n          this.enabled = val;\n\n          // Define event object, initialize it, then dispatch it.\n          var eventObj:Event = new Event(\"enableChange\");\n          dispatchEvent(eventObj);\n      }\n  }\n  </pre>\n</blockquote>\n<p>\n  In this example, the \"enableChange\" event must be considered part of the API. Therefore, it should be strongly typed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Event(name=\"enableChange\")]\npublic class ModalText extends TextArea {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n[Event(name=\"enableChange\", type=\"flash.events.Event\")]\npublic class ModalText extends TextArea {...}\n</pre>","debt":"5min"},{"summary":"Event names should not be hardcoded in event listeners","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  Using plain string event names in even listeners is an anti-pattern; if the event is renamed, the application can start behaving unexpectedly. A constant variable should be used instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport flash.display.Sprite;\nimport flash.events.MouseEvent;\n\nclass ChildSprite extends Sprite\n{\n    public function ChildSprite()\n    {\n        ...\n        addEventListener(\"CustomEvent\", clickHandler);\n    }\n}\n\nfunction clickHandler(event:CustomEvent):void\n{\n    trace(\"clickHandler detected an event of type: \" + event.type);\n    trace(\"the this keyword refers to: \" + this);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nimport flash.display.Sprite;\nimport flash.events.MouseEvent;\n\nclass ChildSprite extends Sprite\n{\n   public const CUSTOM_EVENT:String = \"CustomEvent\";\n\n    public function ChildSprite()\n    {\n        ...\n        addEventListener(CUSTOM_EVENT, clickHandler);\n    }\n}\n\nfunction clickHandler(event:CustomEvent):void\n{\n    trace(\"clickHandler detected an event of type: \" + event.type);\n    trace(\"the this keyword refers to: \" + this);\n}\n</pre>","debt":"5min"},{"summary":"Package names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z]+(\\[a-z][a-z0-9]*)*$</code>:</p>\n<pre>\npackage org.Example { // Noncompliant\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example {\n...\n}\n</pre>","debt":"10min"},{"summary":"Collapsible \"if\" statements should be merged","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  Merging collapsible <code>if</code> statements increases the code's readability.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  if (condition2) {             // NonCompliant\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1 && condition2) {\n  ...\n}\n</pre>","debt":"5min"},{"summary":"Methods should not be empty","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  There are several reasons for a method not to have a method body:\n</p>\n\n<ul>\n    <li>It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production.</li>\n    <li>It is not yet, or never will be, supported. In this case an <code>NotSupportedException</code> should be thrown.</li>\n    <li>The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic override function doSomething():void {\n}\n\npublic function doSomethingElse():void {\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic override function doSomething():void {\n  throw new IllegalOperationError(\"doSomething cannot be performed because ...\");\n}\n\npublic function doSomethingElse():void {\n  //This method is empty because ...\n}\n</pre>","debt":"5min"},{"summary":"Functions should not contain too many return statements","type":"Code Smell","defaultSeverity":"Major","description":"<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a return statement is encountered. This makes it harder to read and understand the logic of the function.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default threshold of 3:</p>\n\n<pre>\nfunction myFunction():boolean { // Noncompliant as there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>","debt":"20min"},{"summary":"Overriding methods should do more than simply call the same method in the super class","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\noverride public function doSomething() : void\n{\n  super.doSomething();\n}\n\noverride public function isLegal(action:Action) : Boolean\n{\n  return super.isLegal(action);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\noverride public function doSomething() : void\n{\n  super.doSomething();                             // Compliant - not simply forwarding the call\n  doSomethingElse();\n}\n\noverride public function isLegal(action:Action) : Boolean\n{\n  return super.isLegal(new Action(...));   // Compliant - not simply forwarding the call\n}\n\n[Deprecated(replacement=\"isAuthorized\")]\noverride public function isLegal(action:Action) : Boolean\n{\n  return super.isLegal(action);   // Compliant as there is a metadata\n}\n</pre>","debt":"5min"},{"summary":"Statements should be on separate lines","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  For better readability, do not put more than one statement on a single line.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>","debt":"1min"},{"summary":"\"switch\" statements should not be nested","type":"Code Smell","defaultSeverity":"Major","description":"<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>\n<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving the inner <code>switch</code> to another function.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic function func(foo:Number, bar:Number):void\n{\n  switch (foo)\n  { \n    case 1:\n      // do something\n      break;\n    case 2:\n      switch (bar)  // Noncompliant\n      {\n        case 89:  // It's easy to lose sight of what's being tested; is it foo or bar?\n          // ...\n          break;\n        case 90:\n          // ...\n          break;\n      }\n      break;\n    case 3:\n      // do something\n      break;\n    default:\n      break;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n\npublic function func(foo:Number, bar:Number):void\n{\n  switch (foo)\n  { \n    case 1:\n      // ...\n      break;\n    case 2:\n      handleBar(bar);\n      break;\n    case 3:\n      // ...\n      break;\n    default:\n      break;\n  }\n}\n\npublic function handleBar(bar:Number):void\n{\n  switch (bar)\n  {\n    case 89:\n      // ...\n      break;\n    case 90:\n      // ...\n      break;\n  }\n}\n</pre>","debt":"10min"},{"summary":"The element type of an array field should be specified","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  Quoted from the Flex documentation :\n</p>\n<blockquote>\n  <p>\n    When you define an Array variable in ActionScript, you specify Array as the data type of the variable. However, you cannot specify the data type of the elements of the Array.\n  </p>\n  <p>\n    To allow the Flex MXML compiler to perform type checking on Array elements, you can use the [ArrayElementType] metadata tag to specify the allowed data type of the Array elements.\n  </p>\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic var newStringProperty:Array;\npublic var newNumberProperty:Array;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n[ArrayElementType(\"String\")]\npublic var newStringProperty:Array;\n\n[ArrayElementType(\"Number\")]\npublic var newNumberProperty:Array;\n</pre>","debt":"5min"},{"summary":"Classes should not have too many fields","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and having a lot of fields is an indication that a class has grown too large.\n</p>\n<p>\n  Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\n</p>","debt":"1h"},{"summary":"Security.allowDomain(...) should only be used in a tightly focused manner","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\n  Calling Security.allowDomain(\"*\") lets any domain cross-script into the domain of this SWF and exercise its functionality.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nSecurity.allowDomain(\"*\");\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nSecurity.allowDomain(\"www.myDomain.com\");\n</pre>","debt":"10min"},{"summary":"Classes should not be too complex","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nThe cyclomatic complexity of a class should not exceed a defined threshold.\nComplex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\n</p>","debt":"10min"},{"summary":"Field names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default regular expression <code>^[_a-z][a-zA-Z0-9]*$</code>:</p>\n\n<pre>\nclass MyClass {\n  public var my_field:int;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class MyClass {\n   public var myField:int;\n}\n</pre>","debt":"2min"},{"summary":"Constant names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n\n<pre>\npublic static const first:String = \"first\";\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic static const FIRST:String = \"first\";\n</pre>","debt":"2min"},{"summary":"Local variable and function parameter names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and function parameter names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[_a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic function doSomething(my_param:int):void\n{\n  var LOCAL:int;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic function doSomething(myParam):void\n{\n  var local;\n  ...\n}\n</pre>","debt":"2min"},{"summary":"The \"trace\" function should not be used","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>The <code>trace()</code> function outputs debug statements, which can be read by anyone with a debug version of the Flash player. Because sensitive information could easily be exposed in this manner, <code>trace()</code> should never appear in production code.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n    var val:Number = doCalculation();\n    trace(\"Calculation result: \" + val);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\n    var val:Number = doCalculation();\n</pre>\n<h2>See</h2>\n\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code\n  </li></ul>","debt":"2min"},{"summary":"Variables of the \"Object\" type should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>Creating a new variable with the type \"Object\" means that it may be used to store any kind of object. This feature may be required in some specific contexts, but it leaves the compiler unable to do any kind of type checking, and is therefore a hazardous practice.  </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar obj:Object = new String(); // Noncompliant; Object used explicitly\nvar foo = new Object(); // Noncompliant; Object used explicitly\nvar bar = {name:String, age:int};  // Noncompliant; Object implicitly created\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar obj:String = new String();\nvar foo:IPortfolio = new Portfolio();\nclass Person {\n  public var name:String;\n  public var age:int;\n}\nvar bar:Person = new Person();\n</pre>","debt":"20min"},{"summary":"Cases in a \"switch\" should not have the same condition","type":"Code Smell","defaultSeverity":"Critical","description":"<p>\n  Having multiple cases in a <code>switch</code> with the same condition is confusing at best. At worst, it's a bug that is likely to induce further bugs as the code is maintained.\n</p>\n\n<h2>Extended desc for languages with <code>break</code></h2>\n\n<p>\n  If the first case ends with a break, the second case will never be executed, rendering it dead code. Worse there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.\n</p>\n<p>\n  On the other hand, if the first case does not end with a break, both cases will be executed, but future maintainers may not notice that.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 5:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  case 1:  // Noncompliant\n    //...\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 5:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n}\n</pre>","debt":"15min"},{"summary":"Loggers should be \"private static const\" and should share a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Loggers should:</p>\n<ul>\n  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own logger.\n  </li><li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be provided in the messages but the logger should be created at class level to prevent creating a logger along with each object.\n</li><li> <code>(final|const)</code>: be created once and only once per class.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default regular expression <code>LOG(?:GER)?</code>:</p>\n\n<pre>\npublic const logger:ILogger = LogUtil.getLogger(MyClass);\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nprivate static const LOG:ILogger = LogUtil.getLogger(MyClass);\n</pre>","debt":"5min"},{"summary":"Two branches in the same conditional structure should not have exactly the same implementation","type":"Code Smell","defaultSeverity":"Major","description":"p>Having two <code>cases</code> in the same <code>switch</code> statement with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then one should fall through to the other.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n</pre>\n\n<p>or</p>\n\n<pre>\nswitch (i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n</pre>","debt":"10min"},{"summary":"A function should have a single point of exit at the end of the function","type":"Code Smell","defaultSeverity":"Minor","description":"<p>This is required by IEC 61508, under good programming style.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction func1() { // Noncompliant - there are two points of exit\n  if (false) {\n    return;\n  }\n}\n\nfunction func2() { // Noncompliant - there are two points of exit\n  if (a &gt; 0) {\n    return 0;\n  }\n  return -1;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction func1() {\n  return;\n}\n\nfunction func2() {\n}\n\nfunction func3();\n</pre>\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 14.7 - A function shall have a single point of exit at the end of the function.\n  </li><li> MISRA C++:2008, 6-6-5 - A function shall have a single point of exit at the end of the function\n</li><li> MISRA C:2012, 15.5 - A function should have a single point of exit at the end\n</li></ul>","debt":"20min"},{"summary":"Control flow statements \"if\", \"for\", \"while\" and \"switch\" should not be nested too deeply","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>do while</code> and <code>switch</code> statements is a key ingredient for making what's known as \"Spaghetti code\".\n</p>\n\n<p>\n  Such code is hard to read, refactor and therefore maintain.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\n  if (condition1) {                  // Compliant - depth = 1\n    /* ... */\n    if (condition2) {                // Compliant - depth = 2\n      /* ... */\n      for(int i = 0; i < 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n        /* ... */\n        if (condition4) {            // Noncompliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            /* ... */\n          }\n          return;\n        }\n      }\n    }\n  }\n</pre>","debt":"10min"},{"summary":"Only \"while\", \"do\" and \"for\" statements should be labelled","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  Any statement or block of statements can be identified by a label, but those labels should be used only on 'while', 'do-while' and 'for' statements. Using labels in any other context leads to unstructured, confusing code.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyLabel:if (i % 2 == 0) {            // Noncompliant\n  if (i == 12) {\n    print(\"12\");\n    break myLabel;\n  }\n  print(\"Odd number, but not 12\");\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nmyLabel:for (i = 0; i < 10; i++) {   // Compliant\n  print(\"Loop\");\n  break myLabel;\n}\n</pre>","debt":"20min"},{"summary":"Statements should end with semicolons","type":"Code Smell","defaultSeverity":"Minor","description":"<p>In Flex, the semicolon is optional as a statement separator, but omitting semicolons can be confusing.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction fun() {\n  return   // Noncompliant\n       5   // Noncompliant\n}\nprint(fun());  // prints \"undefined\", not \"5\"\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction fun() {\n  return 5;\n}\nprint(fun());\n</pre>","debt":"1min"},{"summary":"\"switch\" statements should end with a \"default\" clause","type":"Code Smell","defaultSeverity":"Major","description":"<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a <code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nswitch (param) { // Noncompliant - default clause is missing\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // Noncompliant - default clause should be the last one\n    doSomething();\n    break;\n  case 0:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nswitch (param) {\n  case 0:\n    doSomethingElse();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.\n  </li><li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause\n</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.\n</li><li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause\n</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed\n</li><li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label\n</li><li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C</a> - Strive for logical completeness\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP</a> - Strive for logical completeness\n</li></ul>","debt":"5min"},{"summary":"Local variables should not shadow class fields","type":"Code Smell","defaultSeverity":"Major","description":"<p>Shadowing fields with a local variable or with a function parameter is a bad practice that reduces code readability: It makes it confusing to know whether the field or the variable is being used.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass Foo {\n  public var myField:int;\n\n  public function doSomething():String {\n    var myField:int = 0;\n    ...\n  }\n\n  public function doSomethingElse(myField:int):String {\n    ...\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Constructors and setters are exceptions; it is common practice to name arguments for the fields the values will be assigned to. Static methods are also ignored.</p>\n\n<pre>\nclass Foo {\n  public var myField:int;\n\n  public function Foo(myField:int) {\n    this.myField = myField;\n  }\n\n  public static function build(myField:int):Foo {\n    ...\n  }\n\n  public function setMyField(int myField):void{\n    this.myField = myField;\n  } \n\n  public function set myField(int myField):void{ \n    this.myField = myField;\n  } \n}\n</pre>","debt":"5min"},{"summary":"Functions should not be too complex","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nThe cyclomatic complexity of functions should not exceed a defined threshold.\nComplex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\n</p>","debt":"10min"},{"summary":"Objects should not be instantiated inside a loop","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  It can be expensive to instantiate a new object, and doing so inside a loop is typically an error. Instead, create the object once, before the loop.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i:int = 0; i < 10; i++) {\n  var temp:MyObj = new MyObject();  // Noncompliant\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar temp:MyObj = new MyObject();\nfor (var i:int = 0; i < 10; i++) {\n  //...\n}\n</pre>","debt":"5min"},{"summary":"Octal values should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar myNumber:int = 010;  // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvar myNumber:int = 8;\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used.\n  </li><li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used\n</li><li> MISRA C:2012, 7.1 - Octal constants shall not be used\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/_QC7AQ\">CERT DCL18-C</a> - Do not begin integer constants with 0 when specifying a decimal value\n</li></ul>","debt":"5min"},{"summary":"Empty statements should be removed","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten.\n  </li><li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction doSomething():void {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nfunction doSomethingElse():void {\n  trace(\"Hello, world!\");;                     // Noncompliant - double ;\n  ...\n  for (var i:int = 0; i &lt; 3; trace(i), i++);       // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction doSomething():void {}\n\nfunction doSomethingElse():void {\n  trace(\"Hello, world!\");\n  ...\n  for (var i:int = 0; i &lt; 3; i++){\n    trace(i);\n  }\n  ...\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.\n  </li><li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C</a> - Detect and remove code that has no effect\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP</a> - Detect and remove code that has no effect\n</li></ul>","debt":"2min"},{"summary":"The special \"star\" type should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  According to the ActionScript language reference, the star type:\n</p>\n\n<p>\n  <blockquote>\n  Specifies that a property is untyped. Use of the asterisk symbol for a type annotation is equivalent to using no type annotation. Expressions that read from untyped properties are considered untyped expressions. Use of untyped expressions or properties is recommended in the following circumstances:\n    <ul>\n      <li>When you want to defer type checking to runtime. You can use an untyped property or expression to circumvent compile-time type checking in strict mode. Note, however, that runtime type checking of assignment statements occurs whether you use strict mode or not.</li>\n      <li>When you want to store the value undefined in a property. Unlike previous versions of ActionScript, the value undefined is not a member of the Object data type. You must use an untyped property to store the value undefined.</li>\n    </ul>\n  </blockquote>\n</p>\n\n<p>\nBut deferring type checking to runtime can highly impact the robustness of the application because the compiler is unable to assist the developer.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar obj:*;                   // Noncompliant\nvar foo:* = new Something(); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar obj:Something;\nvar foo:Something = new Something();\n</pre>","debt":"10min"},{"summary":"Comments matching a regular expression should be handled","type":"Code Smell","defaultSeverity":"Major","description":"<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression \"<code>.*TODO.*</code>\" to match all comment containing \"TODO\".</p>\n<p>Note that, in order to match TODO regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in <code>(?i).*TODO.*</code>.</p>"},{"summary":"Sections of code should not be \"commented out\"","type":"Code Smell","defaultSeverity":"Major","description":"<p>\nProgrammers should not comment out code as it bloats programs and reduces readability.\nUnused code should be deleted and can be retrieved from source control history if required.\n</p>\n\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\".\n  </li><li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments.\n</li><li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments.\n</li><li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\"\n</li></ul>","debt":"5min"},{"summary":"\"with\" statements should not be used","type":"Bug","defaultSeverity":"Major","description":"<p>Never use <code>with</code> statements, since they decrease readability. When you do not specify a variable's scope, you do not always know where you are setting properties, so your code can be confusing.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nwith (foo) { // Noncompliant\n  return x;  // is it a property of foo or local variable ?\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nreturn foo.x;\n</pre>","debt":"5min"},{"summary":"Switch cases should end with an unconditional \"break\" statement","type":"Code Smell","defaultSeverity":"Critical","description":"<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2: \n    doSomething();\n    break;\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:                               \n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional \n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.\n  </li><li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause\n</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.\n</li><li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause\n</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed\n</li><li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C</a> - Finish every set of statements associated with a case label with a break statement\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZoFLAQ\">CERT, MSC18-CPP</a> - Finish every set of statements associated with a case label with a break statement\n</li></ul>","debt":"10min"},{"summary":"Any class extending the Event class should override Event.clone()","type":"Bug","defaultSeverity":"Critical","description":"<p>\n  Overriding Event.clone() is a required part of the API contract:\n</p>\n<blockquote>\n  You are required to override the Event.clone() method in your Event subclass. The clone() method returns a cloned copy of the event object by setting the type property and any new properties in the clone. Typically, you define the clone() method to return an event instance created with the new operator.\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyEvent extends Event {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyEvent extends Event\n{\n...\n  override public function clone():Event {\n    return new MyEvent(...);\n  }\n...\n}\n</pre>","debt":"5min"},{"summary":"\"switch case\" clauses should not have too many lines","type":"Code Smell","defaultSeverity":"Major","description":"<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow.\n  As soon as a <code>case</code> clause contains too many statements this highly decreases the readability of the overall control flow statement.\n  In such case, the content of <code>case</code> clause should be extracted in a dedicated function.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0:       // Noncompliant - 6 lines till next case or default case\n    trace(\"\");\n    trace(\"\");\n    trace(\"\");\n    trace(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nswitch (myVariable) {\n  case 0:\n    printSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate function printSomething() {\n  trace(\"\");\n  trace(\"\");\n  trace(\"\");\n  trace(\"\");\n}\n</pre>","debt":"5min"},{"summary":"\"for\" loop stop conditions should be invariant","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>for</code> loop stop conditions must be invariant (i.e. true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are difficult to understand and maintain, and will likely lead to the introduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop\n  </li><li> When the stop condition depend upon a method call\n</li><li> When the stop condition depends on an object property, since such properties could change during the execution of the loop.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (var i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant \n  ...\n} \n\nfor (var i = 0; i &lt; getMaximumNumber(); i++) {...} \n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nint stopCondition = getMaximumNumber();\nfor (var i = 0; i &lt; stopCondition; i++) {...} \n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the loop.\n  </li><li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>.\n</li></ul>","debt":"10min"},{"summary":"Statements, operators and keywords specific to ActionScript 2 should not be used","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>\nUsage of statements, operators and keywords specific to ActionScript 2 does not allow to migrate to ActionScript 3.\nThis includes \"intrinsic\" keyword, set variable statement and following list of operators:\n</p>\n\n<ul>\n  <li><> (inequality) - use != instead</li>\n  <li>add (concatenation (strings)) - use + instead</li>\n  <li>eq (equality (strings)) - use == instead</li>\n  <li>ne (not equal (strings)) - use != instead</li>\n  <li>lt (less than (strings)) - use < instead</li>\n  <li>le (less than or equal to (strings)) - use <= instead</li>\n  <li>gt (greater than (strings)) - use > instead</li>\n  <li>ge (greater than or equal to (strings)) - use >= instead</li>\n  <li>and (logical and) - use && instead</li>\n  <li>or (logical or) - use || instead</li>\n  <li>not (logical not) - use ! instead</li>\n</ul>\n\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (true != false) { // Compliant\n}\n\nif (true <> false) { // Noncompliant\n}\n\nset(\"varName\", value); // Noncompliant\nvarName = value; // Compliant\n</pre>","debt":"2min"},{"summary":"Constructors should not have a \"void\" return type","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  Even though this is syntactically correct, the \"void\" return type should not be used in the signature of a constructor. Indeed some developers might be confused by this syntax, believing that the constructor is in fact a standard function.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  public function Foo() : void\n  {...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  public function Foo()\n  {...}\n}\n</pre>","debt":"5min"},{"summary":"\"public static\" fields should be constant","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"const\". Most of the time this is a kludge to share a state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to <code>null</code>. </p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Greeter {\n  public static var foo:Foo = new Foo(...);\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Greeter {\n  public static const FOO:Foo = new Foo(...);\n  ...\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final\n  </li><li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/OBJ10-J.\">CERT OBJ10-J</a> - Do not use public static nonfinal variables\n</li></ul>","debt":"20min"},{"summary":"Literal boolean values should not be used in condition expressions","type":"Code Smell","defaultSeverity":"Minor","description":"<p>\n  Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  if (booleanVariable == true) { /* ... */ }\n  if (booleanVariable != true) { /* ... */ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  if (booleanVariable) { /* ... */ }\n  if (!booleanVariable) { /* ... */ }\n</pre>","debt":"2min"},{"summary":"\"Alert.show(...)\" should not be used","type":"Vulnerability","defaultSeverity":"Major","description":"<p>Alert.show(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif(unexpectedCondition)\n{\n  Alert.show(\"Unexpected Condition\");\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code\n  </li></ul>","debt":"10min"},{"summary":"\"===\" and \"!==\" should be used instead of \"==\" and \"!=\"","type":"Code Smell","defaultSeverity":"Major","description":"<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For example, it evaluates <code>' \\t\\r\\n' == 0</code> as <code>true</code>.</p>\n<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (var == 'howdy') {...} // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nif (var === 'howdy') {...}\n</pre>","debt":"5min"},{"summary":"Class names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n\n<pre>\npublic class myClass {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class MyClass {...}\n</pre>","debt":"5min"},{"summary":"Function names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With default provided regular expression: ^[a-z][a-zA-Z0-9]*$</p>\n\n<pre>\nfunction DoSomething(){...} \n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction doSomething(){...} \n</pre>","debt":"5min"},{"summary":"Classes should not have too many methods","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  A class that grows too much tends to aggregate too many responsibilities\n  and inevitably becomes harder to understand and therefore to maintain.\n  Above a specific threshold, it is strongly advised to refactor the class\n  into smaller ones which focus on well defined topics.\n</p>","debt":"1h"},{"summary":"Constructor bodies should be as lightweight as possible","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  In ActionScript 3, constructor code is always interpreted rather than compiled by the JIT at runtime, which is why the body of a constructor should be as lightweight as possible. As soon as a constructor contains branches (\"if\", \"for\", \"switch\", ...) an issue is logged.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  public function Foo()\n  {\n    ... //lot of logic and control flow statements\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  public function Foo()\n  {\n    init()\n  }\n\n  private function init():void\n  {\n    ... //lot of logic and control flow statements\n  }\n}\n</pre>","debt":"5min"},{"summary":"Dynamic classes should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  A dynamic class defines an object that can be altered at run time by adding or changing properties and methods. This extremely powerful mechanism should be used very carefully, and only in very limited use cases.\n</p>\n<p>\n  Indeed, by definition dynamic classes make refactoring difficult and prevent the compiler from raising potential errors at compile time.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ndynamic public class DynamicFoo\n{...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo //Note that the class has been renamed to avoid confusion\n{...}\n</pre>","debt":"30min"},{"summary":"Unused local variables should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic function numberOfMinutes(hours:int):int\n{\n  var seconds:int = 0;  // seconds is never used\n  return hours * 60;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic function numberOfMinutes(hours:int):int\n{\n  return hours * 60;\n}\n</pre>","debt":"5min"},{"summary":"Functions should not have too many lines","type":"Code Smell","defaultSeverity":"Major","description":"<p>\n  A function that grows too large tends to aggregate too many responsibilities.\n  Such function inevitably become harder to understand and therefore harder to maintain.\n</p>\n<p>\n  Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n  Those smaller functions will not only be easier to understand, but also probably easier to test.\n</p>","debt":"20min"},{"summary":"Failed unit tests should be fixed","type":"Bug","defaultSeverity":"Major","description":"Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions."},{"summary":"Skipped unit tests should be either removed or fixed","type":"Code Smell","defaultSeverity":"Major","description":"Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed."},{"summary":"Source files should not have any duplicated blocks","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as there is at least one block of duplicated code on this file","debt":"10min"},{"summary":"Source files should have a sufficient density of comment lines","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message."},{"summary":"Lines should have sufficient coverage by tests","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold."},{"summary":"Branches should have sufficient coverage by tests","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold."}]}