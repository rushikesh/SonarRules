{"types":{"Vulnerability":1,"Code Smell":224,"Bug":15,"Other":0},"rules":[{"summary":"Raising a string exception","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a string exception is raised."},{"summary":"Failed to resolve interfaces","type":"Code Smell","defaultSeverity":"Major","description":"Used when a Pylint as failed to find interfaces implemented by a class."},{"summary":"Unnecessary semicolon","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a statement is ended by a semi-colon (\";\"), which isn't necessary(that's python, not C ;)."},{"summary":"Assigning to function call which only returns None","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an assignment is done on a function call but the inferred function returns nothing but None."},{"summary":"Used * or ** magic","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a function or method is called using `*args` or `**kwargs` to dispatch arguments. This doesn't improve readability and should be used with care."},{"summary":"Unable to consider inline option","type":"Code Smell","defaultSeverity":"Info","description":"Used when an inline option is either badly formatted or can't be used inside modules."},{"summary":"Used black listed builtin function","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a black listed builtin function is used (see the bad-function option). Usual black listed functions are the ones like map, or filter, where Python offers now some cleaner alternative like list comprehension."},{"summary":"Locally disabling message","type":"Code Smell","defaultSeverity":"Info","description":"Used when an inline option disables a message or a messages category."},{"summary":"Locally enabling message","type":"Code Smell","defaultSeverity":"Info","description":"Used when an inline option enables a message or a messages category."},{"summary":"Bad except clauses order","type":"Code Smell","defaultSeverity":"Major","description":"Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be catched by the most specific handler."},{"summary":"Ignoring entire file","type":"Code Smell","defaultSeverity":"Info","description":"Used to inform that the file will not be checked."},{"summary":"Raising only allowed for classes, instances or strings","type":"Code Smell","defaultSeverity":"Major","description":"Used when something which is neither a class, an instance or a string is raised (i.e. a 'TypeError' will be raised)."},{"summary":"Assigning to function call which doesn't return","type":"Code Smell","defaultSeverity":"Major","description":"Used when an assignment is done on a function call but the inferred function doesn't return anything."},{"summary":"Old-style class defined","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Used when a class is defined that does not inherit from another class and does not inherit explicitly from “object”.\n      This message can’t be emitted when using Python >= 3.0.</p>\n      <p>This rule was added in Pylint 1.0.0.</p>\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1722'>S1722</a> instead.</p>"},{"summary":"Implicit unpacking of exceptions is not supported in Python 3","type":"Code Smell","defaultSeverity":"Minor","description":"Python3 will not allow implicit unpacking of exceptions in except clauses.\n        See http://www.python.org/dev/peps/pep-3110/ This message\n        can't be emitted when using Python >= 3.0.\n        <p>This rule was added in Pylint 1.0.0.</p>"},{"summary":"Exception to catch is the result of a binary operation","type":"Code Smell","defaultSeverity":"Minor","description":"Used when the exception to catch is of the form \"except A or B:\". If intending to catch multiple, rewrite as \"except (A, B):\""},{"summary":"Anomalous Unicode escape in byte string","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an escape like u is encountered in a byte string where it has no effect.\n    <p>This rule was added in Pylint 0.26.0.</p>"},{"summary":"Exception doesn't inherit from standard \"Exception\" class","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a custom exception class is raised but doesn't inherit from the builtin \"Exception\" class."},{"summary":"Mixed tabs/spaces indentation","type":"Code Smell","defaultSeverity":"Major","description":"Used when there are some mixed tabs and spaces in a\n               module.\n               <p>As indentation is part of Python's syntax,\n               inconsistencies in its usage are usually considered a\n               major issue.</p>"},{"summary":"Bad indentation","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an unexpected number of indentation's tabulations or spaces has been found."},{"summary":"Anomalous backslash escape","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a backslash is in a literal string but not as an escape.\n    <p>This rule was added in Pylint 0.26.0.</p>\n    <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1717'>S1717</a> instead.</p>"},{"summary":"Use of \"property\" on an old style class","type":"Code Smell","defaultSeverity":"Minor","description":"Used when Pylint detects the use of the builtin \"property\" on an old style class while this is relying on new style classes features."},{"summary":"Statement in finally block may swallow exception","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised."},{"summary":"Unable to run raw checkers on built-in module","type":"Code Smell","defaultSeverity":"Info","description":"Used to inform that a built-in module has not been checked using the raw checkers."},{"summary":"Avoid catching an exception which doesn't inherit from BaseException","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a class which doesn't inherit from BaseException is used as an exception in an except clause."},{"summary":"Trailing whitespace","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Used when there is whitespace between the end of a line and the newline.</p>\n      <p>Added in Pylint 1.0.0.</p>\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1131'>S1131</a> instead.</p>"},{"summary":"NotImplemented raised - should raise NotImplementedError","type":"Code Smell","defaultSeverity":"Major","description":"Used when NotImplemented is raised instead of NotImplementedError."},{"summary":"Too many lines in module","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a module has too much lines, reducing its readability.\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS104'>S104</a> instead.</p>"},{"summary":"Cyclic import","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a cyclic import between two or more modules is detected.\n               <p>While cyclic imports terminate and execute without\n               surprises in most cases, the circular dependency often indicates a\n               design issue in the code base.</p>"},{"summary":"Final newline missing","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Used when the last line in a file is missing a newline.</p>\n               <p>While Python interpreters typically do not require line\n               end character(s) on the last line, other programs processing Python\n               source files may do, and it is simply good practice to have it.</p>\n               <p>Added in Pylint 1.0.0.</p>\n               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS113'>S113</a> instead.</p>"},{"summary":"Missing argument to super()","type":"Code Smell","defaultSeverity":"Minor","description":"Used when the super builtin didn't receive an argument. This message can't be emitted when using Python >= 3.0."},{"summary":"Raising a new style class which doesn't inherit from BaseException","type":"Code Smell","defaultSeverity":"Major","description":"Used when a new style class which doesn't inherit from BaseException is raised."},{"summary":"Too many positional arguments for function call","type":"Code Smell","defaultSeverity":"Major","description":"Used when a function call passes too many positional arguments."},{"summary":"Interface not implemented","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an interface class is not implemented anywhere."},{"summary":"Duplicate keyword argument in function call","type":"Code Smell","defaultSeverity":"Major","description":"Used when a function call passes the same keyword argument multiple times."},{"summary":"Use of __slots__ on an old style class","type":"Code Smell","defaultSeverity":"Major","description":"Used when an old style class uses the __slots__ attribute."},{"summary":"Passing unexpected keyword argument in function call","type":"Code Smell","defaultSeverity":"Major","description":"Used when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names."},{"summary":"Use of super on an old style class","type":"Code Smell","defaultSeverity":"Major","description":"Used when an old style class uses the super builtin."},{"summary":"Multiple values passed for parameter in function call","type":"Code Smell","defaultSeverity":"Major","description":"Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument."},{"summary":"Bad first argument given to super","type":"Code Smell","defaultSeverity":"Major","description":"Used when another argument than the current class is given as first argument of the super builtin."},{"summary":"Except doesn't do anything","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an except clause does nothing but \"pass\" and there is no \"else\" clause."},{"summary":"Catching too general exception","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an except catches a too general exception, possibly burying unrelated errors.\n               <p>Catching exceptions should be as precise as possible. The type of\n               exceptions that can be raised should be known in advance. Using a\n               catch-all Exception instance defeats the purpose of knowing the type\n               of error that occur-ed, and prohibits the use of tailored responses.</p>"},{"summary":"Abstract class used too few times","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an abstract class is used less than X times as ancestor."},{"summary":"Line too long","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a line is longer than a given number of characters.\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3ALineLength'>LineLength</a> instead.</p>"},{"summary":"Similar lines","type":"Code Smell","defaultSeverity":"Minor","description":"Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=common-py%3ADuplicatedBlocks'>DuplicatedBlocks</a> instead.</p>"},{"summary":"No exception type(s) specified","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an except clause doesn't specify exceptions\n               type to catch.\n               <p>Catching exceptions should be as precise as\n               possible. The type of exceptions that can be raised should be known in\n               advance. Using catch-all-constructs hides potential\n               errors (including syntax ones), defeats the purpose of\n               knowing the type of error that occurred, and prohibits the use of\n               tailored responses.</p>"},{"summary":"Abstract class not referenced","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an abstract class is not used as ancestor anywhere."},{"summary":"Too few arguments","type":"Code Smell","defaultSeverity":"Major","description":"Used when a function call passes too few arguments."},{"summary":"Unassigned global variable","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a variable is defined through the \"global\" statement but no assignment to this variable is done."},{"summary":"Global variable undefined at the module level","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a variable is defined through the \"global\" statement but the variable is not defined in the module scope."},{"summary":"Unable to import module","type":"Code Smell","defaultSeverity":"Major","description":"Used when Pylint has been unable to import a module."},{"summary":"Attribute defined outside __init__","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an instance attribute is defined outside the __init__ method."},{"summary":"Unexpected inferred value","type":"Code Smell","defaultSeverity":"Major","description":"Used to indicate that some value of an unexpected type has been inferred."},{"summary":"Ignored builtin module","type":"Code Smell","defaultSeverity":"Major","description":"Used to indicate that the user asked to analyze a builtin module which has been skipped."},{"summary":"Analysis failed","type":"Code Smell","defaultSeverity":"Major","description":"Used when an error occurred preventing the analysis of a\n               module (unable to find it for instance)."},{"summary":"Internal Pylint error","type":"Code Smell","defaultSeverity":"Major","description":"Used when an unexpected error occurred while building the ASTNG representation. This is usually accompanied by a traceback. Please report such errors!"},{"summary":"Undefined variable","type":"Code Smell","defaultSeverity":"Major","description":"Used when an undefined variable is accessed."},{"summary":"Using variable before assignment","type":"Code Smell","defaultSeverity":"Major","description":"Used when a local variable is accessed before it's assignment."},{"summary":"Invalid object in __all__, must contain only strings","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an invalid (non-string) object occurs in __all__.\n       <p>This rule was added in Pylint 0.27.0.</p>"},{"summary":"Undefined variable name in __all__","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an undefined variable name is referenced in __all__."},{"summary":"Method hidden by attribute of super class","type":"Code Smell","defaultSeverity":"Major","description":"Used when a class defines a method which is hidden by an instance attribute from an ancestor class."},{"summary":"Access to member before its definition","type":"Code Smell","defaultSeverity":"Major","description":"Used when an instance member is accessed before it's actually assigned."},{"summary":"Too many arguments","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a function or method takes too many arguments.\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS107'>S107</a> instead.</p>"},{"summary":"Too many branches","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a function or method has too many branches, making it hard to follow.\n               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AFunctionComplexity'>FunctionComplexity</a> instead.</p>"},{"summary":"Bad continuation","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Used when continued lines are badly indented.</p>\n      <p>This rule was added in Pylint 1.2.1.</p>"},{"summary":"Too many local variables","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a function or method has too many local variables."},{"summary":"Too many statements","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a function or method has too many statements. You should then split it in smaller functions / methods."},{"summary":"Too many return statements","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a function or method has too many return statement, making it hard to follow.\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1142'>S1142</a> instead.</p>"},{"summary":"Unused argument","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a function or method argument is not used."},{"summary":"Unused variable","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a variable is defined but not used."},{"summary":"Unused import","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an imported module or variable is not used."},{"summary":"Unused key in format string dictionary","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a format string that uses named conversion\n      specifiers is used with a dictionary that contains keys not required by the format string."},{"summary":"Use of the `` operator","type":"Code Smell","defaultSeverity":"Minor","description":"Used when the deprecated \"``\" (backtick) operator is used instead of the str() function.\n               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3ABackticksUsage'>BackticksUsage</a> instead.</p>"},{"summary":"Access to a protected member of a client class","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined."},{"summary":"Use l as long integer identifier","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a lower case \"l\" is used to mark a long integer. You should use an upper case \"L\" since the letter \"l\" looks too much like the digit \"1\"."},{"summary":"Static method with \"self\" or \"cls\" as first argument","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a static method has \"self\" or \"cls\" as first argument."},{"summary":"Format string dictionary key should be a string","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings."},{"summary":"Use of the <> operator","type":"Code Smell","defaultSeverity":"Minor","description":"Used when the deprecated \"<>\" operator is used instead of \"!=\".\n               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AInequalityUsage'>InequalityUsage</a> instead.</p>"},{"summary":"Error while code parsing","type":"Code Smell","defaultSeverity":"Major","description":"Used when an exception occurred while building the ASTNG representation which could be handled by ASTNG."},{"summary":"Unnecessary parentheses","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Used when a single item in parentheses follows an if, for, or other keyword.</p>\n      <p>This rule was added in Pylint 1.1.0.</p>\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1110'>S1110</a> instead.</p>"},{"summary":"Metaclass class method first argument","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a metaclass class method has a first argument named differently than the value specified\n      in valid-metaclass-classmethod-first-arg option (defaults to \"mcs\"),\n      recommended to easily differentiate them from regular instance methods."},{"summary":"Too many arguments for format string","type":"Code Smell","defaultSeverity":"Major","description":"Used when a format string that uses unnamed conversion specifiers is given too few arguments."},{"summary":"Not enough arguments for format string","type":"Code Smell","defaultSeverity":"Major","description":"Used when a format string that uses unnamed conversion specifiers is given too many arguments."},{"summary":"Comma not followed by a space","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a comma (\",\") is not followed by a space."},{"summary":"Metaclass method should have \"mcs\" as first argument","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a metaclass method has an attribute different the \"mcs\" as first argument."},{"summary":"Wrong number of spaces around an operator, bracket, or comma, or before a block opener colon","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Used when a wrong number of spaces is used around an operator, bracket, or comma, or before a block opener colon.</p>\n        <p>This message belongs to the format checker.</p>\n        <p>In Pylint 1.1.0, this message replaced the older whitespace-related messages\n        <a href='/coding_rules#rule_key=Pylint%3AC0322'>C0322</a>, <a href='/coding_rules#rule_key=Pylint%3AC0323'>C0323</a>, and <a href='/coding_rules#rule_key=Pylint%3AC0324'>C0324</a>, and now reports some additional situations.</p>"},{"summary":"Format string ends in middle of conversion specifier","type":"Code Smell","defaultSeverity":"Major","description":"Used when a format string terminates before the end of a conversion specifier."},{"summary":"Method should have \"self\" as first argument","type":"Code Smell","defaultSeverity":"Major","description":"Used when a method has an attribute different the \"self\" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!"},{"summary":"Mixing named and unnamed conversion specifiers in format string","type":"Code Smell","defaultSeverity":"Major","description":"Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision."},{"summary":"Expected mapping for format string","type":"Code Smell","defaultSeverity":"Major","description":"Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping."},{"summary":"Undefined name","type":"Code Smell","defaultSeverity":"Major","description":"Used when a name cannot be found in a module."},{"summary":"Missing key in format string dictionary","type":"Code Smell","defaultSeverity":"Major","description":"Used when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string."},{"summary":"Too many instance attributes","type":"Code Smell","defaultSeverity":"Minor","description":"Used when class has too many instance attributes, try to reduce this to get a more simple (and so easier to use) class."},{"summary":"Too many ancestors","type":"Code Smell","defaultSeverity":"Minor","description":"Used when class has too many parent classes, try to reduce this to get a more simple (and so easier to use) class."},{"summary":"Too many public methods","type":"Code Smell","defaultSeverity":"Minor","description":"Used when class has too many public methods, try to reduce this to get a more simple (and so easier to use) class."},{"summary":"Method has no argument","type":"Code Smell","defaultSeverity":"Major","description":"Used when a method which should have the bound instance as first argument has no argument defined."},{"summary":"Too few public methods","type":"Code Smell","defaultSeverity":"Minor","description":"Used when class has too few public methods, so be sure it's really worth it."},{"summary":"More than one statement on a single line","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Used when more than one statement are found on the same line.</p>\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AOneStatementPerLine'>OneStatementPerLine</a> instead.</p>"},{"summary":"Using the global statement at the module level","type":"Code Smell","defaultSeverity":"Minor","description":"Used when you use the \"global\" statement at the module level since it has no effect."},{"summary":"Operator not followed by a space","type":"Code Smell","defaultSeverity":"Minor","description":"Used when one of the following operator (!= | <= | == | >= | < | > | = | \\+= |-= | \\*= | /= | %) is not followed by a space."},{"summary":"Class method should have \"cls\" as first argument","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a class method has an attribute different than \"cls\" as first argument, to easily differentiate them from regular instance methods."},{"summary":"Using the global statement","type":"Code Smell","defaultSeverity":"Minor","description":"Used when you use the \"global\" statement to update a global variable. Pylint just tries to discourage this usage. That doesn't mean you can not use it!"},{"summary":"Operator not preceded by a space","type":"Code Smell","defaultSeverity":"Minor","description":"Used when one of the following operator (!= | <= | == | >= | < | > | = | \\+= |-= | \\*= | /= | %) is not preceded by a space."},{"summary":"Unnecessary pass statement","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a \"pass\" statement that can be avoided is encountered.\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2772'>S2772</a> instead.</p>"},{"summary":"Redefining name in exception handler","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an exception handler assigns the exception to an existing name."},{"summary":"Expression is assigned to nothing","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an expression that is not a function call is assigned to nothing. Probably something else was intended."},{"summary":"Redefining built-in","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a variable or function override a built-in."},{"summary":"String statement has no effect","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments."},{"summary":"Redefining name from outer scope","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a variable's name hides a name defined in the outer scope."},{"summary":"Statement seems to have no effect","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a statement doesn't have (or at least seems to) any effect."},{"summary":"Abstract method is not overridden","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class."},{"summary":"Dangerous default value as argument","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a mutable value as list or dictionary is\n               detected in a default value for an argument."},{"summary":"Signature discrepancy","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a method signature is different than in the implemented interface or in an overridden method."},{"summary":"Unreachable code","type":"Code Smell","defaultSeverity":"Minor","description":"Used when there is some code behind a \"return\" or \"raise\" statement, which will never be accessed.\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1763'>S1763</a> instead.</p>"},{"summary":"Arguments number discrepancy","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a method has a different number of arguments than in the implemented interface or in an overridden method."},{"summary":"Unknown encoding specified","type":"Code Smell","defaultSeverity":"Major","description":"Used when an encoding is specified, but it's unknown to Python."},{"summary":"Use of a non-existent operator","type":"Code Smell","defaultSeverity":"Major","description":"Used when you attempt to use the C-style pre-increment or pre-decrement operator -- and ++, which dont exist in Python.\n               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3APreIncrementDecrement'>PreIncrementDecrement</a> instead.</p>"},{"summary":"Wrong encoding specified","type":"Code Smell","defaultSeverity":"Major","description":"Used when a known encoding is specified but the file\n      doesn't seem to be actually in this encoding."},{"summary":"Return with argument inside generator","type":"Code Smell","defaultSeverity":"Major","description":"Used when a \"return\" statement with an argument is found outside in a generator function or method (e.g. with some \"yield\" statements).\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2712'>S2712</a> instead.</p>"},{"summary":"Missing argument to reversed()","type":"Code Smell","defaultSeverity":"Minor","description":"Used when reversed() builtin didn't receive an argument."},{"summary":"Duplicate argument name in function definition","type":"Code Smell","defaultSeverity":"Minor","description":"Duplicate argument names in function definitions are syntax errors.\n        <p>This rule was added in Pylint 0.28.0.</p>"},{"summary":"Usage of 'break' or 'continue' outside of a loop","type":"Code Smell","defaultSeverity":"Major","description":"Used when break or continue keywords are used outside a loop.\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1716'>S1716</a> instead.</p>"},{"summary":"Redefined function/class/method","type":"Code Smell","defaultSeverity":"Major","description":"Used when a function / class / method is redefined."},{"summary":"Non-ASCII characters found but no encoding specified (PEP 263)","type":"Code Smell","defaultSeverity":"Major","description":"Used when some non-ASCII characters are detected but no\n      encoding is specified, as stated in the PEP 263."},{"summary":"Yield outside function","type":"Code Smell","defaultSeverity":"Major","description":"Used when a \"yield\" statement is found outside a function or method.\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2711'>S2711</a> instead.</p>"},{"summary":"Return outside function","type":"Code Smell","defaultSeverity":"Major","description":"Used when a \"return\" statement is found outside a function or method.\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2711'>S2711</a> instead.</p>"},{"summary":"Suspicious argument in lstrip/rstrip","type":"Code Smell","defaultSeverity":"Minor","description":"The argument to a str.{l,r}strip call contains a duplicate character.\n      <p>This rule was added in Pylint 0.28.0.</p>"},{"summary":"Missing method from interface","type":"Code Smell","defaultSeverity":"Major","description":"Used when a method declared in an interface is missing from a class implementing this interface."},{"summary":"Explicit return in __init__","type":"Code Smell","defaultSeverity":"Major","description":"Used when the special class method __init__ has an\n               explicit return value.\n               <p>The __init__() method is required to return\n               nothing. Python raises a TypeError when __init__() is\n               called and executes a return statement with a value other than\n               None. Pylint reports this error without depending on the actual\n               invocation.</p>\n               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2734'>S2734</a> instead.</p>"},{"summary":"Implemented interface must be a class","type":"Code Smell","defaultSeverity":"Major","description":"Used when a class claims to implement an interface which is not a class."},{"summary":"__init__ method is a generator","type":"Code Smell","defaultSeverity":"Major","description":"Used when the special class method __init__ is turned\n               into a generator by a yield in its body.\n               <p>The __init__() method is required to return nothing. Python 2.7 and 3.x\n               raise a TypeError when __init__() is called and executes a yield\n               statement. Pylint reports this error without depending on the actual\n               invocation.</p>\n               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2734'>S2734</a> instead.</p>"},{"summary":"Empty docstring","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a module, function, class or method has an empty docstring (it would be too easy ;).\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1720'>S1720</a> instead.</p>"},{"summary":"Missing docstring","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a module, function, class or method has no docstring. Some special methods like __init__ doesn't necessary require a docstring.\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS1720'>S1720</a> instead.</p>"},{"summary":"Unused import from wildcard import","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an imported module or variable is not used from a 'from X import *'style import."},{"summary":"Attempting to unpack a non-sequence","type":"Code Smell","defaultSeverity":"Minor","description":"Used when something which is not a sequence is used in an unpack assignment.\n        <p>This rule was added in Pylint 1.1.0.</p>"},{"summary":"Source line cannot be decoded using the specified source file encoding","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a source line cannot be decoded using the specified source file encoding.\n        This message can't be emitted when using Python >= 3.0.\n        <p>This rule was added in Pylint 1.0.0.</p>"},{"summary":"Possible unbalanced tuple unpacking","type":"Code Smell","defaultSeverity":"Minor","description":"Used when there is an unbalanced tuple unpacking in assignment.\n        <p>This rule was added in Pylint 1.1.0.</p>"},{"summary":"Task marker found","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a warning note as FIXME or XXX is detected."},{"summary":"Using possibly undefined loop variable","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop."},{"summary":"__iter__ returns non-iterator","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an __iter__ method returns something which is not an iterable (i.e. has no `next` method).\n        <p>This rule was added in Pylint 1.1.0.</p>"},{"summary":"__init__ method from a non direct base class is called","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class."},{"summary":"Specify string format arguments as logging function parameters","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a logging statement has a call form of\n               \"logging.<loggingmethod>(format_string % (format_args...))\". Such\n               calls should leave string interpolation to the logging method itself\n               and be written \"logging.<loggingmethod>(format_string,\n               format_args...)\" so that the program may avoid incurring the cost of\n               the interpolation in those cases in which no message will be\n               logged. For more, see http://www.python.org/dev/peps/pep-0282/."},{"summary":"Class has no __init__ method","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a class has no __init__ method, neither its parent classes."},{"summary":"Assert called on a 2-uple","type":"Code Smell","defaultSeverity":"Minor","description":"A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is. Did you mean 'assert x,y'?"},{"summary":"map/filter on lambda could be replaced by comprehension","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a lambda is the first argument to \"map\" or \"filter\".\n        It could be clearer as a list comprehension or generator expression. This message can't be emitted when using Python >= 3.0.\n        <p>This rule was added in Pylint 0.27.0.</p>"},{"summary":"__init__ method from base class is not called","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an ancestor class method has an __init__ method which is not called by a derived class."},{"summary":"Not enough arguments for logging format string","type":"Code Smell","defaultSeverity":"Major","description":"Used when a logging format string is given too many arguments."},{"summary":"Method could be a function","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a method doesn't use its bound instance, and\n               so could be written as a function.\n               <p>If the class method does not reference any of the class\n               attributes it may be more clear to define the method as a static\n               function instead.</p>\n         <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2325'>S2325</a> instead.</p>"},{"summary":"Invalid __slots__ object","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.\n        <p>This rule was added in Pylint 1.2.0.</p>"},{"summary":"__exit__ must accept 3 arguments: type, value, traceback","type":"Code Smell","defaultSeverity":"Minor","description":"Used when the __exit__ special method, belonging to a context manager, does not accept 3 arguments (type, value, traceback).\n        <p>This rule was added in Pylint 1.1.0.</p>\n        <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS2733'>S2733</a> instead.</p>"},{"summary":"Invalid object in __slots__, must contain only non empty strings","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an invalid (non-string) object occurs in __slots__.\n        <p>This rule was added in Pylint 1.2.0.</p>"},{"summary":"Too many arguments for logging format string","type":"Code Smell","defaultSeverity":"Major","description":"Used when a logging format string is given too few arguments."},{"summary":"Unsupported logging format character","type":"Code Smell","defaultSeverity":"Major","description":"Used when an unsupported format character is used in a\n               logging statement format string."},{"summary":"The first reversed() argument is not a sequence","type":"Code Smell","defaultSeverity":"Minor","description":"Used when the first argument to reversed() builtin isn't a sequence\n      (does not implement __reversed__, nor __getitem__ and __len__\n      <p>This rule was added in Pylint 1.2.0.</p>"},{"summary":"Logging format string ends in middle of conversion specifier","type":"Code Smell","defaultSeverity":"Major","description":"Used when a logging statement format string terminates\n               before the end of a conversion specifier."},{"summary":"Duplicate key in dictionary","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a dictionary expression binds the same key multiple times."},{"summary":"Invalid name","type":"Code Smell","defaultSeverity":"Minor","description":"Used when the name doesn't match the regular expression associated to its type (constant, variable, class...).\n      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AS116'>S116</a>, <a href='/coding_rules#rule_key=python%3AS117'>S117</a>, <a href='/coding_rules#rule_key=python%3AS101'>S101</a>,\n      <a href='/coding_rules#rule_key=python%3AS100'>S100</a>, <a href='/coding_rules#rule_key=python%3AS1542'>S1542</a>, <a href='/coding_rules#rule_key=python%3AS1578'>S1578</a> instead.</p>"},{"summary":"Lambda may not be necessary","type":"Code Smell","defaultSeverity":"Minor","description":"Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda."},{"summary":"Black listed name","type":"Code Smell","defaultSeverity":"Minor","description":"Used when the name is listed in the black list\n               (unauthorized names).\n               <p>Pylint can be customized to help enforce coding\n               guidelines that discourage or forbid use of certain names for\n               variables, functions, etc. These names are specified with the\n               bad-names option. This message is raised whenever a name is in the\n               list of names defined with the bad-names option.</p>"},{"summary":"Reimport","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a module is reimported multiple times."},{"summary":"Relative import","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an import relative to the package directory is detected."},{"summary":"Uses of a deprecated module","type":"Code Smell","defaultSeverity":"Minor","description":"Used a module marked as deprecated is imported."},{"summary":"Wildcard import","type":"Code Smell","defaultSeverity":"Minor","description":"Used when `from module import *` is detected."},{"summary":"Unable to check methods signature","type":"Code Smell","defaultSeverity":"Major","description":"Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it."},{"summary":"Use of eval","type":"Code Smell","defaultSeverity":"Minor","description":"Used when you use the \"eval\" function, to discourage its usage.\n        Consider using `ast.literal_eval` for safely evaluating\n        strings containing Python expressions from untrusted sources.\n        <p>This rule was added in Pylint 1.2.0.</p>"},{"summary":"Format detection error","type":"Code Smell","defaultSeverity":"Major","description":"Used when an unexpected error occurred in bad format\n               detection. Please report the error if it occurs."},{"summary":"Use of the exec statement","type":"Code Smell","defaultSeverity":"Minor","description":"Used when you use the \"exec\" statement, to discourage its usage. That doesn't mean you can not use it!\n               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python%3AExecStatementUsage'>ExecStatementUsage</a> instead.</p>"},{"summary":"Use raise ErrorClass(args) instead of raise ErrorClass, args.","type":"Code Smell","defaultSeverity":"Minor","description":"Used when the alternate raise syntax 'raise foo, bar' is used instead of 'raise foo(bar)'.\n        This message can't be emitted when using Python >= 3.0.\n        <p>This rule was added in Pylint 1.0.0.</p>"},{"summary":"Else clause on loop without a break statement","type":"Code Smell","defaultSeverity":"Minor","description":"Loops should only have an else clause if they can exit early with a break statement,\n        otherwise the statements under else should be on the same scope as the loop itself.\n        <p>This rule was added in Pylint 0.28.0.</p>"},{"summary":"Syntax error","type":"Code Smell","defaultSeverity":"Major","description":"Used when a syntax error is raised for a module."},{"summary":"Invalid mode for open","type":"Code Smell","defaultSeverity":"Minor","description":"Python supports: r, w, a modes with b, +, and U options.\n        See http://docs.python.org/2/library/functions.html#open\n        <p>This rule was added in Pylint 1.0.0.</p>"},{"summary":"__future__ import is not the first non docstring statement","type":"Code Smell","defaultSeverity":"Minor","description":"Python 2.5 and greater require __future__ import to be the first non docstring statement in the module."},{"summary":"Accessing nonexistent member (type information incomplete)","type":"Code Smell","defaultSeverity":"Major","description":"Used when a variable is accessed for an nonexistent member, but Pylint was not able to interpret all possible types of this variable."},{"summary":"Unrecognized file option","type":"Code Smell","defaultSeverity":"Major","description":"Used when an unknown inline option is encountered.\n               <p>Note that options can be specified in the\n               configuration file and can be overridden on the command line.</p>"},{"summary":"Access of nonexistent member","type":"Code Smell","defaultSeverity":"Major","description":"Used when a variable is accessed for an nonexistent member."},{"summary":"Missing required attribute","type":"Code Smell","defaultSeverity":"Minor","description":"Used when an attribute required for modules is missing."},{"summary":"Calling of not callable","type":"Code Smell","defaultSeverity":"Major","description":"Used when an object being called has been inferred to a non callable object."},{"summary":"Bad option value","type":"Code Smell","defaultSeverity":"Major","description":"Used when a bad value for an inline option is encountered.\n               <p>The option exists but its value is not valid. The options can be\n               specified in the Pylint configuration file and can be overridden in\n               the Pylint command line.</p>"},{"summary":"Unsupported format character","type":"Code Smell","defaultSeverity":"Major","description":"Used when a unsupported format character is used in a format string."},{"summary":"Module imports itself","type":"Code Smell","defaultSeverity":"Minor","description":"Used when a module is importing itself."},{"summary":"Failed unit tests should be fixed","type":"Bug","defaultSeverity":"Major","description":"Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions."},{"summary":"Skipped unit tests should be either removed or fixed","type":"Code Smell","defaultSeverity":"Major","description":"Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed."},{"summary":"Source files should not have any duplicated blocks","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as there is at least one block of duplicated code on this file","debt":"10min"},{"summary":"Source files should have a sufficient density of comment lines","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message."},{"summary":"Lines should have sufficient coverage by tests","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold."},{"summary":"Branches should have sufficient coverage by tests","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold."},{"summary":"Track uses of \"FIXME\" tags","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef divide(numerator, denominator):\n  return numerator / denominator              # FIXME denominator value might be 0\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>"},{"summary":"Lines should not end with trailing whitespaces","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. </p>","debt":"1min"},{"summary":"Backticks should not be used","type":"Bug","defaultSeverity":"Blocker","description":"<p>Backticks are a deprecated alias for <code>repr()</code>. Don't use them any more, the syntax was removed in Python 3.0.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn `num`  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn repr(num)\n</pre>","debt":"5min"},{"summary":"Python parser failure","type":"Code Smell","defaultSeverity":"Major","description":"<p>When the Python parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.</p>","debt":"30min"},{"summary":"Lines should not be too long","type":"Code Smell","defaultSeverity":"Major","description":"<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>","debt":"1min"},{"summary":"Variables should not be self-assigned","type":"Bug","defaultSeverity":"Major","description":"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nname = name\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nname = other.name\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"3min"},{"summary":"Module names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared coding conventions allow teams to collaborate effectively. For that reason, module names should conform to a defined standard.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/P4IyAQ\">CERT, MSC09-CPP.</a> - Character encoding: Use subset of ASCII for safety </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/lQAl\">CERT, MSC09-C.</a> - Character encoding: Use subset of ASCII for safety </li>\n</ul>","debt":"10min"},{"summary":"Files should not have too many lines of code","type":"Code Smell","defaultSeverity":"Major","description":"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>","debt":"1h"},{"summary":"Functions, methods and lambdas should not have too many parameters","type":"Code Smell","defaultSeverity":"Major","description":"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\ndef do_something(param1, param2, param3, param4, param5):\n\t...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef do_something(param1, param2, param3, param4):\n\t...\n</pre>","debt":"20min"},{"summary":"Nested blocks of code should not be left empty","type":"Code Smell","defaultSeverity":"Major","description":"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor i in range(3):\n    pass\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>","debt":"5min"},{"summary":"Track breaches of an XPath rule","type":"Code Smell","defaultSeverity":"Major","description":"<p>This rule allows the definition of custom rules using XPath expressions.</p>\n<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>\n<ul>\n  <li> a single or list of AST nodes, then a line issue with the given message is created for each node </li>\n  <li> a boolean, then a file issue with the given message is created only if the boolean is true </li>\n  <li> anything else, no issue is created </li>\n</ul>\n<p>This rule allows the definition of custom rules using XPath expressions.</p>\n<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>\n<ul>\n  <li> a single or list of AST nodes, then a line issue with the given message is created for each node </li>\n  <li> a boolean, then a file issue with the given message is created only if the boolean is true </li>\n  <li> anything else, no issue is created </li>\n</ul>\n<p>Here is an example of an XPath expression to log a violation on each statement: </p>\n<pre>\n//statement\n</pre>"},{"summary":"Related \"if/else if\" statements should not have the same condition","type":"Bug","defaultSeverity":"Major","description":"<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 1:            # Noncompliant\n  moveWindowToTheBackground()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 3:\n  moveWindowToTheBackground()\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"10min"},{"summary":"Function names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Major","description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$</p>\n<pre>\ndef MyFunction(a,b):\n    ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef my_function(a,b):\n    ...\n</pre>","debt":"10min"},{"summary":"Collapsible \"if\" statements should be merged","type":"Code Smell","defaultSeverity":"Major","description":"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif condition1:\n    if condition2:\n        # ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif condition1 and condition2:\n    # ...\n</pre>","debt":"5min"},{"summary":"Functions should not contain too many return statements","type":"Code Smell","defaultSeverity":"Major","description":"<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\ndef fun():          # Noncompliant as there are 4 return statements\n  if condition1:\n    return True\n  elif condition2:\n    return False\n  else:\n    return True\n  return False\n}\n</pre>","debt":"20min"},{"summary":"Increment and decrement operators should not be used","type":"Bug","defaultSeverity":"Major","description":"<p>Python has no pre/post increment/decrement operator. For instance, <code>x++</code> and <code>x--</code> will fail to parse. More importantly,\n<code>++x</code> and <code>--x</code> will do nothing. To increment a number, simply write <code>x += 1</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n++x # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx += 1\n</pre>","debt":"5min"},{"summary":"Statements should be on separate lines","type":"Code Smell","defaultSeverity":"Major","description":"<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (True): print(\"hello\")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (True):\n    print(\"hello\")\n</pre>","debt":"1min"},{"summary":"A field should not duplicate the name of its containing class","type":"Code Smell","defaultSeverity":"Major","description":"<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo:\n  foo = ''\n\n  def getFoo(self):\n    ...\n\nfoo = Foo()\nfoo.getFoo() # what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo:\n  name = ''\n\n  def getName(self):\n    ...\n\nfoo = Foo()\nfoo.getName()\n</pre>","debt":"10min"},{"summary":"\"yield\" and \"return\" should not be used outside functions","type":"Bug","defaultSeverity":"Blocker","description":"<p><code>yield</code> and <code>return</code> only make sense in the context of functions. Using them outside a function raises a\n<code>SyntaxError</code>. To break out of a loop, use <code>break</code> instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass:\n    while True:\n        return False #Noncompliant\n</pre>","debt":"15min"},{"summary":"\"return\" and \"yield\" should not be used in the same function","type":"Bug","defaultSeverity":"Blocker","description":"<p>Functions that use <code>yield</code> are known as \"generators\", and generators cannot <code>return</code> values. Similarly, functions that use\n<code>return</code> cannot use <code>yield</code>. Doing so will cause a <code>SyntaxError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef adder(n):\n     num = 0\n     while num &lt; n:\n         yield num\n         num += 1\n     return num  #Noncompliant\n</pre>","debt":"15min"},{"summary":"Classes should not be too complex","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to\nunderstand and therefore to maintain.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>","debt":"10min"},{"summary":"Files should contain an empty new line at the end","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Some tools such as Git work better when files end with an empty line. This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<p>&lt;pre&gt;</p>\n<p>+class Test:</p>\n<p>+ pass</p>\n<p> \\ No newline at end of file</p>\n<p>&lt;/pre&gt;</p>","debt":"1min"},{"summary":"Field names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[_a-z][_a-z0-9]*$</code>:</p>\n<pre>\nclass MyClass:\n  myField = 1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n  my_field = 1\n</pre>","debt":"2min"},{"summary":"The \"exec\" statement should not be used","type":"Bug","defaultSeverity":"Blocker","description":"<p>Use of the <code>exec</code> statement could be dangerous, and should be avoided. Moreover, the <code>exec</code> statement was removed in Python\n3.0. Instead, the built-in <code>exec()</code> function can be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexec 'print 1' # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nexec('print 1')\n</pre>","debt":"10min"},{"summary":"Local variable and function parameter names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local\nvariable and function parameter names match a provided regular expression.</p>\n<h2>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor i in range(limit):  # Compliant\n    print(i)\n</pre>","debt":"2min"},{"summary":"IP addresses should not be hardcoded","type":"Vulnerability","defaultSeverity":"Minor","description":"<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>\n<ul>\n  <li> a recompile is required if the address changes </li>\n  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) </li>\n  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer </li>\n  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nip = '127.0.0.1'\nsock = socket.socket()\nsock.bind((ip, 9090))\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nip = config.get(section, ipAddress)\nsock = socket.socket()\nsock.bind((ip, 9090))\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>","debt":"30min"},{"summary":"Cognitive Complexity of functions should not be too high","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>","debt":"5min"},{"summary":"Methods and properties that don't access instance data should be static","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Class methods that don't access instance data can and should be static because they yield more performant code.</p>\n<p>To implement a static method in Python one should use either <code>@classmethod</code> or <code>@staticmethod</code>. A class method receives the\nclass as implicit first argument, just like an instance method receives the instance. A static method does not receive an implicit first argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities:\n    def do_the_thing(self, arg1, arg2, ...):  # Noncompliant\n        #...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities:\n    @classmethod\n    def do_the_thing(cls, arg1, arg2, ...):\n        #...\n</pre>\n<p>or</p>\n<pre>\nclass Utilities:\n    @staticmethod\n    def do_the_thing(arg1, arg2, ...):\n        #...\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Methods which raise or may raise a <code>NotImplementedError</code> are ignored. </li>\n</ul>","debt":"5min"},{"summary":"Two branches in a conditional structure should not have exactly the same implementation","type":"Code Smell","defaultSeverity":"Major","description":"<p>Having two branches in the same <code>if</code> structure with the same implementation is at best duplicate code, and at worst a coding error. If\nthe same logic is truly needed for both instances, then they should be combined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_the_thing()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_the_thing()  # Noncompliant; duplicates first condition\nelse:\n    do_the_rest()\n\nb = 4 if a &gt; 12 else 4\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (0 &lt;= a &lt; 10) or (20 &lt;= a &lt; 50):\n    do_the_thing()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelse:\n    do_the_rest()\n\nb = 4\n</pre>\n<p>or </p>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_the_thing()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_the_third_thing()\nelse:\n    do_the_rest()\n\nb = 8 if a &gt; 12 else 4\n</pre>","debt":"10min"},{"summary":"Redundant pairs of parentheses should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn ((3))        # Noncompliant\nreturn ((x + 1))    # Noncompliant\nx = ((y / 2)) + 1   # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn 3\nreturn (3)\nreturn x + 1\nreturn (x + 1)\nx = y / 2 + 1\nx = (y / 2) + 1\n</pre>","debt":"1min"},{"summary":"Control flow statements \"if\", \"for\", \"while\", \"try\" and \"with\" should not be nested too deeply","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>try</code>, and <code>with</code> statements are key ingredients for making\nwhat's known as \"Spaghetti code\". Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>The following code snippet illustrates this rule with the default threshold of 3.</p>\n<pre>\n  if condition1:           # Compliant - depth = 1\n    # ...\n    if condition2:         # Compliant - depth = 2\n      # ...\n      for i in range(10):  # Compliant - depth = 3, not exceeding the limit\n        # ...\n        if condition4:     # Non-Compliant - depth = 4\n          if condition5:   # Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            # ...\n</pre>","debt":"10min"},{"summary":"\"\\\" should only be used as an escape character outside of raw strings","type":"Bug","defaultSeverity":"Major","description":"<p>Typically, backslashes are seen only as part of escape sequences. Therefore, the use of a backslash outside of a raw string or escape sequence\nlooks suspiciously like a broken escape sequence. </p>\n<p>Characters recognized as escape-able are: <code>abfnrtvox\\'\"</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ns = \"Hello \\world.\"\nt = \"Nice to \\ meet you\"\nu = \"Let's have \\ lunch\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ns = \"Hello world.\"\nt = \"Nice to \\\\ meet you\"\nu = r\"Let's have \\ lunch\"  // raw string\n</pre>","debt":"2min"},{"summary":"\"break\" and \"continue\" should not be used outside a loop","type":"Bug","defaultSeverity":"Critical","description":"<p><code>break</code> and <code>continue</code> are unstructured control flow statements which make code harder to read. Additionally, more recent\nversions of Python raise a SyntaxError when modules containing <code>break</code> or <code>continue</code> outside of a loop are imported.</p>\n<p>Therefore, these statements should not be used outside of loops. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnarg=len(sys.argv)\nif narg == 1:\n        print('@Usage: input_filename nelements nintervals')\n        break\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif narg == 1:\n        print('@Usage: input_filename nelements nintervals')\n        sys.exit()\n</pre>","debt":"10min"},{"summary":"The \"print\" statement should not be used","type":"Bug","defaultSeverity":"Blocker","description":"<p>The <code>print</code> statement was removed in Python 3.0. The built-in function should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprint '1'  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprint('1')\n</pre>","debt":"5min"},{"summary":"Functions should not be too complex","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>","debt":"10min"},{"summary":"Long suffix \"L\" should be upper case","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The long suffix should always be written in uppercase, i.e. 'L', as the lowercase 'l' can easily be confused with the digit one '1'.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn 10l  // Noncompliant; easily confused with one zero one\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn 10L\n</pre>","debt":"2min"},{"summary":"Track comments matching a regular expression","type":"Code Smell","defaultSeverity":"Major","description":"<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>"},{"summary":"Track \"TODO\" and \"FIXME\" comments that do not contain a reference to a person","type":"Code Smell","defaultSeverity":"Minor","description":"<p>TODO and FIXME comments are typically intended to be short-lived; they are placeholders and reminders that programmers leave for themselves.\nUnfortunately, even with the best of intentions, those comments are not always acted on and removed in a timely manner. Thus, they can become\nmysterious, lingering cruft in a code base, reducing both readability and understand-ability.</p>\n<p>This rule flags all FIXME and TODO comments that do not have an attribution matching the specified regular expression immediately after the FIXME\nor TODO. Ideally, such comments will also contain information about what needs to be fixed or done, but this rule does not enforce that.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n# TODO\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n# TODO(ganncamp) per the business partners, more checks needed\n</pre>"},{"summary":"Sections of code should not be \"commented out\"","type":"Code Smell","defaultSeverity":"Major","description":"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>","debt":"5min"},{"summary":"Identical expressions should not be used on both sides of a binary operator","type":"Bug","defaultSeverity":"Major","description":"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif a == a: # Noncompliant\n    work()\n\nif  a != a: # Noncompliant\n    work()\n\nif  a == b and a == b: # Noncompliant\n    work()\n\nif a == b or a == b: # Noncompliant\n    work()\n\nj = 5 / 5 # Noncompliant\nk = 5 - 5 # Noncompliant\n</pre>\n<h2>Exceptions</h2>\n<p>The following are ignored:</p>\n<ul>\n  <li> The expression <code>1 &lt;&lt; 1</code> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href='/coding_rules#rule_key=python%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>","debt":"2min"},{"summary":"Docstrings should be defined","type":"Code Smell","defaultSeverity":"Major","description":"<p>A string literal that is the first statement in a module, function, class, or method is a docstring. A docstring should document what a caller\nneeds to know about the code. Information about what it does, what it returns, and what it requires are all valid candidates for documentation. Well\nwritten docstrings allow callers to use your code without having to first read it and understand its logic.</p>\n<p>By convention, docstrings are enclosed in three sets of double-quotes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef my_function(a,b):\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef my_function(a,b):\n      \"\"\"Do X\"\"\"\n</pre>","debt":"5min"},{"summary":"Jump statements should not be followed by other statements","type":"Bug","defaultSeverity":"Major","description":"<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>raise</code>) move control flow out of the current code\nblock. Typically, any statements in a block that come after a jump are simply wasted keystrokes lying in wait to confuse the unwary. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a       # Noncompliant\n  i += 1             # this is never executed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/561.html\">MITRE, CWE-561</a> - Dead Code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>","debt":"5min"},{"summary":"\"<>\" should not be used to test inequality","type":"Code Smell","defaultSeverity":"Major","description":"<p>The forms <code>&lt;&gt;</code> and <code>!=</code> are equivalent. But in Python 2.7.3 the <code>&lt;&gt;</code> form is considered obsolete.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn a &lt;&gt; b # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn a != b\n</pre>","debt":"5min"},{"summary":"\"pass\" should not be used needlessly","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The use of a <code>pass</code> statement where it's not required by the syntax is pure cruft and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n    def __init__(self, log=\"\", who=\"\", date=0, files=[]):\n        self.log = log\n        self.files = files\n        self.who = who\n        self.date = date\n        pass    # Noncompliant\n\n    def lookup():\n        pass    # Compliant; method can't be empty\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n    def __init__(self, log=\"\", who=\"\", date=0, files=[]):\n        self.log = log\n        self.files = files\n        self.who = who\n        self.date = date\n\n    def lookup():\n        pass\n</pre>","debt":"2min"},{"summary":"Files should not be too complex","type":"Code Smell","defaultSeverity":"Major","description":"<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>","debt":"30min"},{"summary":"Class names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass myClass:\n   ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n   ...\n</pre>","debt":"5min"},{"summary":"Method names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all method\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$</p>\n<pre>\nclass MyClass:\n    def MyMethod(a,b):\n        ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n    def my_method(a,b):\n        ...\n</pre>","debt":"5min"},{"summary":"Methods and field names should not differ only by capitalization","type":"Code Smell","defaultSeverity":"Blocker","description":"<p>Looking at the set of methods and fields in a <code>class</code> and finding two that differ only by capitalization is confusing to users of the\nclass.</p>\n<p>This situation may simply indicate poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case\nwhere both a method and a field have the same name (with or without capitalization differences). However, renaming a public method could be disruptive\nto callers. Therefore renaming the member is the recommended action.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass SomeClass:\n    lookUp = false\n    def lookup():       # Non-compliant; method name differs from field name only by capitalization\n        pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass SomeClass:\n    lookUp = false\n    def getLookUp():\n        pass\n</pre>","debt":"10min"},{"summary":"\"__exit__\" should accept type, value, and traceback arguments","type":"Bug","defaultSeverity":"Blocker","description":"<p>The <code>__exit__</code> method is invoked with four arguments: self, type, value and traceback. Leave one of these out of the method declaration\nand the result will be a <code>TypeError</code> at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass:\n   def __enter__(self):\n       pass\n   def __exit__(self, exc_type, exc_val):  # Noncompliant\n       pass\n</pre>","debt":"5min"},{"summary":"New-style classes should be used","type":"Code Smell","defaultSeverity":"Minor","description":"<p>The new style of class creation, with the declaration of a parent class, created a unified object model in Python, so that the type of an\ninstantiated class is equal to its class. In Python 2.2-2.7, this is not the case for old-style classes. In Python 3+ all classes are new-style\nclasses. However, since the behavior can differ from 2.2+ to 3+, explicitly inheriting from <code>object</code> (if there is no better candidate) is\nrecommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass():\n    pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass(object):\n    pass\n</pre>","debt":"2min"},{"summary":"\"__init__\" should not return a value","type":"Bug","defaultSeverity":"Blocker","description":"<p>By contract, every Python function returns something, even if it's the <code>None</code> value, which can be returned implicitly by omitting the\n<code>return</code> statement, or explicitly. </p>\n<p>The <code>__init__</code> method is required to return <code>None</code>. A <code>TypeError</code> will be raised if the <code>__init__</code>\nmethod either <code>yield</code>s or <code>return</code>s any expression other than <code>None</code>. Returning some expression that evaluates to\n<code>None</code> will not raise an error, but is considered bad practice.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n        return self  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n</pre>","debt":"5min"},{"summary":"Parentheses should not be used after certain keywords","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Parentheses are not required after the <code>assert</code>, <code>del</code>, <code>elif</code>, <code>except</code>, <code>for</code>,\n<code>if</code>, <code>in</code>, <code>not</code>, <code>raise</code>, <code>return</code>, <code>while</code>, and <code>yield</code> keywords, and\nusing them unnecessarily impairs readability. They should therefore be omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = 1\nwhile (x &lt; 10):\n    print \"x is now %d\" % (x)\n    x += 1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = 1\nwhile x &lt; 10:\n    print \"x is now %d\" % (x)\n    x += 1\n</pre>","debt":"1min"},{"summary":"Unused local variables should be removed","type":"Code Smell","defaultSeverity":"Minor","description":"<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef hello(name):\n    message = \"Hello \" + name # Noncompliant\n    print(name)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef hello(name):\n    message = \"Hello \" + name\n    print(message)\n</pre>","debt":"5min"},{"summary":"Comments should not be located at the end of lines of code","type":"Code Smell","defaultSeverity":"Minor","description":"<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b + c   # This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n# This very long comment is better placed before the line of code\na = b + c\n</pre>","debt":"1min"}]}