{"types":{"Vulnerability":0,"Code Smell":64,"Bug":5},"standards":{},"tags":[{"name":"convention","count":27},{"name":"brain-overload","count":5},{"name":"cert","count":10},{"name":"cwe","count":3},{"name":"error-handling","count":2},{"name":"suspicious","count":5},{"name":"misra","count":4},{"name":"style","count":1},{"name":"performance","count":3},{"name":"unused","count":3},{"name":"pitfall","count":8},{"name":"design","count":1},{"name":"clumsy","count":7},{"name":"bad-practice","count":2},{"name":"api-design","count":1},{"name":"confusing","count":1},{"name":"duplicate","count":1}],"rules":[{"summary":"Public methods should not have multidimensional array parameters","type":"Code Smell","defaultSeverity":"Blocker","inDefaultProfile":true,"ruleKey":"RSPEC-2368","tags":["pitfall"],"description":"<p>Exposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to\nuse them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used\ninternally.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub WriteMatrix(ByVal matrix As Integer()()) ' Non-Compliant\n        ' ...\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Matrix\n    ' ...\nEnd Class\n\nModule Module1\n    Sub WriteMatrix(ByVal matrix As Matrix)      ' Compliant\n        ' ...\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Short-circuit logic should be used in boolean contexts","type":"Code Smell","defaultSeverity":"Blocker","inDefaultProfile":true,"ruleKey":"RSPEC-2178","tags":["cert"],"description":"<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIf GetTrue() Or GetFalse() Then ' Noncompliant; both sides evaluated\nEnd If\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIf GetTrue() OrElse GetFalse() Then ' true short-circuit logic\nEnd If\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>\n\r\n"},{"summary":"Properties should not make collection or array copies","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-2365","tags":["api-design","performance"],"description":"<p>Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will\nbe much slower than a simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods\nso that callers are not surprised by unexpectedly poor performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    ' Internal state\n    Dim array = {\"apple\", \"banana\", \"orange\", \"pineapple\", \"strawberry\"}\n\n    ReadOnly Property Foo() As String() ' Noncompliant\n        Get\n            Dim copy = array.Clone      ' Expensive call\n            Return copy\n        End Get\n    End Property\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    ' Internal state\n    Dim array = {\"apple\", \"banana\", \"orange\", \"pineapple\", \"strawberry\"}\n\n    Function GetFoo() As String()       ' Compliant\n        Dim copy = array.Clone\n        Return copy\n    End Function\nEnd Module\n</pre>\n\r\n"},{"summary":"Flags enumerations zero-value members should be named \"None\"","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-2346","tags":["convention"],"description":"<p>Consistent use of \"None\" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other\nstate, since there is no way to check that the bit <code>0</code> is set.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;Flags()&gt;\nEnum FruitType\n    Void = 0        ' Non-Compliant\n    Banana = 1\n    Orange = 2\n    Strawberry = 4\nEnd Enum\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;Flags()&gt;\nEnum FruitType\n    None = 0        ' Compliant\n    Banana = 1\n    Orange = 2\n    Strawberry = 4\nEnd Enum\n</pre>\n\r\n"},{"summary":"\"Do\" loops should not be used without a \"While\" or \"Until\" condition","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-2340","tags":["pitfall"],"description":"<p>A <code>Do ... Loop</code> without a <code>While</code> or <code>Until</code> condition must be terminated by an unstructured <code>Exit Do</code>\nstatement. It is safer and more readable to use structured loops instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim i = 1\n\n        Do                        ' Non-Compliant\n            If i = 10 Then\n                Exit Do\n            End If\n\n            Console.WriteLine(i)\n\n            i = i + 1\n        Loop\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        For i = 1 To 9            ' Compliant\n            Console.WriteLine(i)\n        Next\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"The \"&\" operator should be used to concatenate strings","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-1645","tags":["suspicious"],"description":"<p>Consistently using the <code>&amp;</code> operator for string concatenation make the developer intentions clear.</p>\n<p><code>&amp;</code>, unlike <code>+</code>, will convert its operands to strings and perform an actual concatenation.</p>\n<p><code>+</code> on the other hand can be an addition, or a concatenation, depending on the operand types.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Console.WriteLine(\"1\" + 2) ' Noncompliant - will display \"3\"\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Console.WriteLine(1 &amp; 2)   ' Compliant - will display \"12\"\n        Console.WriteLine(1 + 2)   ' Compliant - but will display \"3\"\n        Console.WriteLine(\"1\" &amp; 2) ' Compliant - will display \"12\"\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Collection sizes and array length comparisons should make sense","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-3981","tags":[],"description":"<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIf Collection.Count &gt;= 0 Then ...\n\nIf Enumerable.Count &lt; 0 Then ...\n\nIf array.Length &gt;= 0 Then ...\n\nDim result As Boolean = Array.Length &gt;= 0\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIf list.Count = 0 Then ...\nIf array.Length &gt;= 42 Then ...\n</pre>\n\r\n"},{"summary":"Related \"If/ElseIf\" statements should not have the same condition","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1862","tags":["cert","unused","pitfall"],"description":"<p>A chain of <code>If</code>/<code>ElseIf</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one\nwith a condition that evaluates to <code>True</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIf param = 1 Then\n  OpenWindow()\nElseIf param = 2 Then\n  CloseWindow()\nElseIf param = 1 Then ' Noncompliant\n  MoveWindowToTheBackground()\nEnd If\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIf param = 1 Then\n  OpenWindow()\nElseIf param = 2 Then\n  CloseWindow()\nElseIf param = 3 Then\n  MoveWindowToTheBackground()\nEnd If\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n"},{"summary":"Identical expressions should not be used on both sides of a binary operator","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1764","tags":["cert"],"description":"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of most binary mathematical operators, having the same\nvalue on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, <code>&amp;</code>, <code>&lt;&lt;</code>, and <code>&gt;&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIf (a = a) Then\n  doZ()\nEnd If\n\nIf a = b OrElse a = b Then\n  doW()\nEnd If\n\nDim j = 5 / 5\nj = 5 \\ 5\nj = 5 Mod 5\nDim k = 5 - 5\n\nDim i = 42\ni /= i\ni -= i\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:vbnet:S1656} - Implements a check on <code>=</code>. </li>\n</ul>\n\r\n"},{"summary":"Variables should not be self-assigned","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1656","tags":["cert"],"description":"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPublic Sub SetName(name As String)\n  name = name\nEnd Sub\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Sub SetName(name As String)\n  Me.name = name\nEnd Sub\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n"},{"summary":"Methods should not have identical implementations","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-4144","tags":["confusing","duplicate","suspicious"],"description":"<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPrivate Const CODE As String = \"bounteous\"\nPrivate callCount As Integer = 0\n\nPublic Function GetCode() As String\n  callCount = callCount + 1\n  Return CODE\nEnd Function\n\nPublic Function GetName() As String ' Noncompliant\n  callCount = callCount + 1\n  Return CODE\nEnd Function\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPrivate Const CODE As String = \"bounteous\"\nPrivate callCount As Integer = 0\n\nPublic Function GetCode() As String\n  callCount = callCount + 1\n  Return CODE\nEnd Function\n\nPublic Function GetName() As String\n  Return GetCode()\nEnd Function\n</pre>\n<h2>Exceptions</h2>\n<p>Empty methods, methods with only one line of code and methods with the same name (overload) are ignored.</p>\n\r\n"},{"summary":"\"Exit\" statements should not be used","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-3385","tags":["brain-overload","bad-practice"],"description":"<p>Other than <code>Exit Select</code>, using an <code>Exit</code> statement is never a good idea.</p>\n<p><code>Exit Do</code>, <code>Exit For</code>, <code>Exit Try</code>, and <code>Exit While</code> will all result in unstructured control flow, i.e.\nspaghetti code.</p>\n<p><code>Exit Function</code>, <code>Exit Property</code>, and <code>Exit Sub</code> are all poor, less-readable substitutes for a simple\n<code>return</code>, and if used with code that should return a value (<code>Exit Function</code> and in some cases <code>Exit Property</code>) they\ncould result in a <code>NullReferenceException</code>.</p>\n<p>This rule raises an issue for all uses of <code>Exit</code> except <code>Exit Select</code> and <code>Exit Do</code> statements in loops without\ncondition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPublic Class Sample\n  Dim condition As Boolean\n\n  Public Sub MySub()\n    If condition Then\n      Exit Sub                  ' Noncompliant\n    End If\n\n    For index = 1 To 10\n      If index = 5 Then\n          Exit For               ' Noncompliant\n      End If\n      ' ...\n    Next\n  End Sub\n  Function MyFunction() As Object\n    ' ...\n    MyFunction = 42\n    Exit Function              ' Noncompliant\n  End Function\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Class Sample\n  Dim condition As Boolean\n\n  Public Sub MySub()\n    If condition Then\n        Return\n    End If\n\n    For index = 1 To 4\n        ' ...\n    Next\n  End Sub\n  Function MyFunction() As Object\n    ' ...\n    Return 42\n  End Function\nEnd Class\n</pre>\n\r\n"},{"summary":"Write-only properties should not be used","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-2376","tags":["pitfall"],"description":"<p>Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be\nreplaced with a setter method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    WriteOnly Property Foo() As Integer ' Non-Compliant\n        Set(ByVal value As Integer)\n            ' ... some code ...\n        End Set\n    End Property\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub SetFoo(ByVal value As Integer)  ' Compliant\n        ' ... some code ...\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Exceptions should not be thrown from property getters","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-2372","tags":["error-handling"],"description":"<p>Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a\nmethod. </p>\n<p>It is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Public Property Foo() As Integer\n        Get\n            Throw New Exception  ' Non-Compliant\n        End Get\n        Set(ByVal value As Integer)\n            ' ... some code ...\n        End Set\n    End Property\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub SetFoo(ByVal value As Integer)         ' Compliant\n        ' ... some code ...\n    End Sub\nEnd Module\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is raised when the thrown exception derives from or is of type <code>NotImplementedException</code>, <code>NotSupportedException</code> or\n<code>InvalidOperationException</code>.</p>\n\r\n"},{"summary":"\"On Error\" statements should not be used","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-2359","tags":["bad-practice"],"description":"<p>Prefer the use of <code>Try ... Catch</code> blocks instead of <code>On Error</code> statements.</p>\n<p>Visual Basic .NET and Visual Basic 2005 offer structured exception handling that provides a powerful, more readable alternative to the <code>On\nError Goto</code> error handling from previous versions of Microsoft Visual Basic. Structured exception handling is more powerful because it allows\nyou to nest error handlers inside other error handlers within the same procedure. Furthermore, structured exception handling uses a block syntax\nsimilar to the <code>If...Else...End If</code> statement. This makes Visual Basic .NET and Visual Basic 2005 code more readable and easier to\nmaintain.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSub DivideByZero()\n  On Error GoTo nextstep\n  Dim result As Integer\n  Dim num As Integer\n  num = 100\n  result = num / 0\nnextstep:\n  System.Console.WriteLine(\"Error\")\nEnd Sub\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSub DivideByZero()\n  Try\n    Dim result As Integer\n    Dim num As Integer\n    num = 100\n    result = num / 0\n  Catch\n    System.Console.WriteLine(\"Error\")\n  End Try\nEnd Sub\n</pre>\n\r\n"},{"summary":"\"IsNot\" should be used instead of \"Not ... Is ...\"","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-2358","tags":["clumsy"],"description":"<p>The <code>... IsNot ...</code> syntax is more compact and more readable than the <code>Not ... Is ...</code> syntax.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim a = Not \"a\" Is Nothing ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim a = \"a\" IsNot Nothing  ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Indexed properties with more than one parameter should not be used","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-2352","tags":["clumsy"],"description":"<p>Indexed properties are meant to represent access to a logical collection. When multiple parameters are required, this design guideline may be\nviolated, and refactoring the property into a method is preferable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    ReadOnly Property Sum(ByVal a As Integer, ByVal b As Integer) ' Noncompliant\n        Get\n            Return a + b\n        End Get\n    End Property\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Function Sum(ByVal a As Integer, ByVal b As Integer)          ' Compliant\n        Return a + b\n    End Function\nEnd Module\n</pre>\n\r\n"},{"summary":"Two branches in a conditional structure should not have exactly the same implementation","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1871","tags":["design","suspicious"],"description":"<p>Having two <code>Cases</code> in the same <code>Select</code> statement or branches in the same <code>If</code> structure with the same\nimplementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an\n<code>If</code> structure they should be combined, or for a <code>Select</code>, one should fall through to the other.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSelect i\n  Case 1\n    DoSomething()\n  Case 2\n    DoSomethingDifferent()\n  Case 3  ' Noncompliant; duplicates case 1's implementation\n    DoSomething()\n  Case Else:\n    DoTheRest()\nEnd Select\n\nIf a &gt;= 0 AndAlso a &lt; 10 Then\n  DoTheThing()\nElseIf a &gt;= 10 AndAlso a &lt; 20 Then\n  DoTheOtherThing()\nElseIf a &gt;= 20 AndAlso a &lt; 50\n  DoTheThing() ' Noncompliant; duplicates first condition\nElse\n  DoTheRest();\nEnd If\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSelect i\n  Case 1, 3\n    DoSomething()\n  Case 2\n    DoSomethingDifferent()\n  Case Else\n    DoTheRest()\nEnd Select\n\nIf (a &gt;= 0 AndAlso a &lt; 10) OrElse (a &gt;= 20 AndAlso a &lt; 50) Then\n  DoTheThing()\nElseIf a &gt;= 10 AndAlso a &lt; 20 Then\n  DoTheOtherThing()\nElse\n  DoTheRest();\nEnd If\n</pre>\n<p>or</p>\n<pre>\nSelect i\n  Case 1\n    DoSomething()\n  Case 2\n    DoSomethingDifferent()\n  Case 3\n    DoTheThirdThing()\n  Case Else\n    DoTheRest()\nEnd Select\n\nIf a &gt;= 0 AndAlso a &lt; 10 Then\n  DoTheThing()\nElseIf a &gt;= 10 AndAlso a &lt; 20 Then\n  DoTheOtherThing()\nElseIf a &gt;= 20 AndAlso a &lt; 50\n  DoTheThirdThing()\nElse\n  DoTheRest();\nEnd If\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n\r\n"},{"summary":"Jump statements should not be used unconditionally","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1751","tags":["misra","cert","unused"],"description":"<p>Having an unconditional <code>break</code>, <code>return</code>, <code>(@)throw</code> or <code>goto</code> in a loop renders it useless; the loop\nwill only execute once and the loop structure itself is simply wasted keystrokes.</p>\n<p>Having an unconditional <code>continue</code> in a loop can render the loop meaningless, or is itself wasted keystrokes, depending on where in the\nloop it occurs.</p>\n<p>Having an unconditional <code>return</code> anywhere other than at the end of a function or method simply renders all the rest of the code in the\nmethod useless.</p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDim length As Integer\n\nFor i As Integer = 0 To length - 1\n    foo(i)\n    Exit For ' loop only executes once\nNext\n\nFor i As Integer = 0 To length - 1\n    Continue For\n    foo(i) ' this is never executed\nNext\n\nFor i As Integer = 0 To length - 1\n    foo(i)\n    Continue For ' this is meaningless; the loop would continue anyway\nNext\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDim length As Integer\n\nFor i As Integer = 0 To length - 1\n    foo(i)\nNext\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\r\n"},{"summary":"Method parameters should follow a naming convention","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1654","tags":["convention"],"description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</p>\n<p>This rule allows to check that all parameter names match a provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Camel casing, starting with a lower case character, e.g. backColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. id, productID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. html </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>\n<pre>\nModule Module1\n    Sub GetSomething(ByVal ID As Integer) ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub GetSomething(ByVal id As Integer) ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Functions and procedures should comply with a naming convention","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1542","tags":["convention"],"description":"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all subroutine and function names match a provided regular\nexpression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n  <li> Event handlers with a handles clause and two-parameter methods with <code>EventArgs</code> second parameter are not covered by this rule. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>\n<pre>\nModule Module1\n  Sub bad_subroutine()                      ' Noncompliant\n  End Sub\n\n  Public Function Bad_Function() As Integer ' Noncompliant\n    Return 42\n  End Function\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n  Sub GoodSubroutine()                      ' Compliant\n  End Sub\n\n  Public Function GoodFunction() As Integer ' Compliant\n    Return 42\n  End Function\nEnd Module\n</pre>\n\r\n"},{"summary":"General exceptions should never be thrown","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-112","tags":["cwe","error-handling","cert"],"description":"<p>Throwing such general exceptions as <code>Exception</code>, <code>SystemException</code>, <code>ApplicationException</code>,\n<code>IndexOutOfRangeException</code>, <code>NullReferenceException</code>, <code>OutOfMemoryException</code> and\n<code>ExecutionEngineException</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated\nerrors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPublic Sub DoSomething(obj As Object)\n  If obj Is Nothing Then\n    ' Noncompliant\n    Throw New NullReferenceException(\"obj\")\n  End If\n  ' ...\nEnd Sub\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Sub DoSomething(obj As Object)\n  If obj Is Nothing Then\n    Throw New ArgumentNullException(\"obj\")\n  End If\n  ' ...\nEnd Sub\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>\n\r\n"},{"summary":"Flags enumerations should explicitly initialize all their members","type":"Bug","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-2345","tags":[],"description":"<p>Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to\n0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or\noperator in a useful way.</p>\n<p>Instead, 0 and powers of two (i.e. 1, 2, 4, 8, 16, ...) should be used to explicitly initialize all the members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;Flags()&gt;\nEnum FruitType    ' Non-Compliant\n  None\n  Banana\n  Orange\n  Strawberry\nEnd Enum\n\nModule Module1\n  Sub Main()\n    Dim bananaAndStrawberry = FruitType.Banana Or FruitType.Strawberry\n\n    ' Will display only Strawberry!\n    Console.WriteLine(bananaAndStrawberry.ToString())\n  End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;Flags()&gt;\nEnum FruitType    ' Compliant\n  None = 0\n  Banana = 1\n  Orange = 2\n  Strawberry = 4\nEnd Enum\n\nModule Module1\n  Sub Main()\n    Dim bananaAndStrawberry = FruitType.Banana Or FruitType.Strawberry\n\n    ' Will display Banana and Strawberry, as expected.\n    Console.WriteLine(bananaAndStrawberry.ToString())\n  End Sub\nEnd Module\n</pre>\n<h2>Exceptions</h2>\n<p>The default initialization of 0, 1, 2, 3, 4, ... matches 0, 1, 2, 4, 8 ... in the first three values, so no issue is reported if the first three\nmembers of the enumeration is not initialized.</p>\n\r\n"},{"summary":"VB.Net: \"Exit Select\" statements should not be used redundantly","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-2951","tags":["unused","clumsy"],"description":"<p>Visual Basic .NET, unlike many other programming languages, has no \"fall-through\" for its <code>Select</code> cases. Each case already has an\nimplicit <code>Exit Select</code> as its last instruction. It therefore is redundant to explicitly add one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n  Sub Main()\n    Dim x = 0\n    Select Case x\n      Case 0\n        Console.WriteLine(\"0\")\n        Exit Select                ' Noncompliant\n      Case Else\n        Console.WriteLine(\"Not 0\")\n        Exit Select                ' Noncompliant\n    End Select\n  End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n  Sub Main()\n    Dim x = 0\n    Select Case x\n      Case 0                         ' Compliant\n        Console.WriteLine(\"0\")\n      Case Else                      ' Compliant\n        Console.WriteLine(\"Not 0\")\n    End Select\n  End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"\"With\" statements should be used for a series of calls to the same object","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-2375","tags":["clumsy"],"description":"<p>Using the <code>With</code> statement for a series of calls to the same object makes the code more readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value of 6:</p>\n<pre>\nModule Module1\n    Dim product = New With {.Name = \"paperclips\", .RetailPrice = 1.2, .WholesalePrice = 0.6, .A = 0, .B = 0, .C = 0}\n\n    Sub Main()\n        product.Name = \"\"           ' Noncompliant\n        product.RetailPrice = 0\n        product.WholesalePrice = 0\n        product.A = 0\n        product.B = 0\n        product.C = 0\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Dim product = New With {.Name = \"paperclips\", .RetailPrice = 1.2, .WholesalePrice = 0.6, .A = 0, .B = 0, .C = 0}\n\n    Sub Main()\n        With product\n            .Name = \"\"\n            .RetailPrice = 0\n            .WholesalePrice = 0\n            .A = 0\n            .B = 0\n            .C = 0\n        End With\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Array literals should be used instead of array creation expressions","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-2355","tags":["clumsy"],"description":"<p>Array literals are more compact than array creation expressions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo = New String() {\"a\", \"b\", \"c\"} ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo = {\"a\", \"b\", \"c\"}              ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Event names should not have \"Before\" or \"After\" as a prefix or suffix","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-2349","tags":["convention"],"description":"<p>\"After\" and \"Before\" prefixes or suffixes should not be used to indicate pre and post events. The concepts of before and after should be given to\nevents using the present and past tense.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nClass Foo\n    Event BeforeClose() ' Noncompliant\n    Event AfterClose()  ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Event Closing()     ' Compliant\n    Event Closed()      ' Compliant\nEnd Class\n</pre>\n\r\n"},{"summary":"Event handlers should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-2347","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all even handler names match a provided regular\nexpression.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Either in Pascal case, i.e. starting with an upper case letter, e.g. OnMyButtonClicked </li>\n  <li> Or, a subject, in Pascal or camel case, followed by an underscore followed by an event name, in Pascal case, e.g. btn1_Clicked </li>\n</ul>\n<p>Event handlers with a <code>handles</code> clause and two-parameter methods with <code>EventArgs</code> second parameter are covered by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^(([a-z][a-z0-9]*)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?_)?([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nModule Module1\n    Sub subject__SomeEvent() Handles X.SomeEvent   ' Noncompliant - two underscores\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub subject_SomeEvent() Handles X.SomeEvent    ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Enumeration type names should not have \"Flags\" or \"Enum\" suffixes","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-2344","tags":["convention"],"description":"<p>The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEnum FooFlags ' Noncompliant\n    Foo = 1\n    Bar = 2\n    Baz = 4\nEnd Enum\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEnum Foo      ' Compliant\n    Foo = 1\n    Bar = 2\n    Baz = 4\nEnd Enum\n</pre>\n\r\n"},{"summary":"Enumeration types should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-2342","tags":["convention"],"description":"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all enum names match a provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower case, e.g. GetHtml </li>\n  <li> If the enum is marked as [Flags] then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption) </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression for non-flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>\n<pre>\nPublic Enum foo ' Noncompliant\n    FooValue = 0\nEnd Enum\n</pre>\n<p>With the default regular expression for flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$</code></p>\n<pre>\n&lt;Flags()&gt;\nPublic Enum Option ' Noncompliant\n    None = 0,\n    Option1 = 1,\n    Option2 = 2\nEnd Enum\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Enum Foo\n    FooValue = 0\nEnd Enum\n</pre>\n<pre>\n&lt;Flags()&gt;\nPublic Enum Options\n    None = 0,\n    Option1 = 1,\n    Option2 = 2\nEnd Enum\n</pre>\n\r\n"},{"summary":"Namespace names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-2304","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all namespace names match a provided regular\nexpression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. Microsoft, System </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. System.IO </li>\n  <li> Longer abbreviations need to be lower cased </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?(\\.([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2}))*$</code></p>\n<pre>\nNamespace foo  ' Noncompliant\nEnd Namespace\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nNamespace Foo  ' Compliant\nEnd Namespace\n</pre>\n\r\n"},{"summary":"Strings should not be concatenated using \"+\" or \"&\" in a loop","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1643","tags":["performance"],"description":"<p><code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo = \"\"\n        foo &amp;= \"Result: \"       ' Compliant - outside of loop\n\n        For i = 1 To 9\n            foo &amp;= i            ' Noncompliant\n        Next\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo = New System.Text.StringBuilder\n        foo.Append(\"Result: \")  ' Compliant\n\n        For i = 1 To 9\n            foo.Append(i)       ' Compliant\n        Next\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Array designators \"()\" should be on the type, not the variable","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1197","tags":["convention"],"description":"<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo() As String ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo As String() ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Local variable names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-117","tags":["convention"],"description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.This rule checks that all local variables\nfollow a naming convention.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Camel casing, starting with a lower case character, e.g. backColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. id, productID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. html </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nModule Module1\n    Sub Main()\n        Dim Foo = 0 ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo = 0 ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Interface names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-114","tags":["convention"],"description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.</p>\n<p>This rule allows to check that all interface names match a provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Must start with an upper case 'I' character, e.g. IFoo </li>\n  <li> Followed by Pascal casing, starting with an upper case character, e.g. IEnumerable </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. IFooID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. IFooHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^I([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nInterface Foo  ' Noncompliant\nEnd Interface\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInterface IFoo ' Compliant\nEnd Interface\n</pre>\n\r\n"},{"summary":"URIs should not be hardcoded","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1075","tags":["cert"],"description":"<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.</p>\n<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>\n<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>\n\r\n"},{"summary":"Class names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-101","tags":["convention"],"description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nClass foo ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo ' Compliant\nEnd Class\n</pre>\n\r\n"},{"summary":"\"End\" statements should not be used","type":"Code Smell","defaultSeverity":"Blocker","inDefaultProfile":false,"ruleKey":"RSPEC-1147","tags":["cwe","cert","suspicious"],"description":"<p><code>End</code> statements exit the control flow of the program in an unstructured way. This statement stops code execution immediately without\nexecuting <code>Dispose</code> or <code>Finalize</code> methods, or executing <code>Finally</code> blocks. Therefore, it should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Print(ByVal str As String)\n       Try\n            ...\n            End       ' Noncompliant\n        Finally\n            ' do something important here\n            ...\n        End Try\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"\"IIf\" should not be used","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-3866","tags":["performance"],"description":"<p>Visual Basic .NET offers a non-short-circuit conditional function, <code>IIf()</code>, which returns either its second or third parameter based on\nthe expression in the first parameter. Using it is slower than using <code>If()</code> because each parameter is unconditionally evaluated. Further,\nits use can lead to runtime exceptions because <code>IIf</code> always evaluates all three of its arguments. </p>\n<p>The newer version, <code>If()</code>, should be used instead because it short-circuits the evaluation of its parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPublic Class Foo\n    Public Sub Bar()\n        Dim var As Object = IIf(Date.Now.Year = 1999, \"Lets party!\", \"Lets party like it is 1999!\") ' Noncompliant\n    End Sub\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Class Foo\n    Public Sub Bar()\n        Dim var As String = If(Date.Now.Year = 1999, \"Lets party!\", \"Lets party like it is 1999!\")\n    End Sub\nEnd Class\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://msdn.microsoft.com/en-us/library/27ydhh0d(v=vs.90).aspx\">IIf Function (MSDN)</a> </li>\n  <li> <a href=\"https://msdn.microsoft.com/en-us/library/bb513985(v=vs.90).aspx\">If Operator (MSDN)</a> </li>\n</ul>\n\r\n"},{"summary":"Signed types should be preferred to unsigned ones","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-2374","tags":["pitfall"],"description":"<p>Unsigned integers have different arithmetic operators than signed ones - operators that few developers understand. Therefore, signed types should\nbe preferred where possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo1 As UShort   ' Noncompliant\n        Dim foo2 As UInteger ' Noncompliant\n        Dim foo3 As ULong    ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim foo1 As Short\n        Dim foo2 As Integer\n        Dim foo3 As Long\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Optional parameters should not be used","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-2360","tags":["pitfall"],"description":"<p>The overloading mechanism should be used in place of optional parameters for several reasons:</p>\n<ul>\n  <li> Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need\n  to be rebuilt, otherwise the original values will be used. </li>\n  <li> The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify\n  the values. </li>\n  <li> The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only\n  way to get the same behavior. </li>\n  <li> Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,\n  when one is defined, is the second one still optional or mandatory? </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSub Notify(ByVal Company As String, Optional ByVal Office As String = \"QJZ\") ' Noncompliant\n\nEnd Sub\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSub Notify(ByVal Company As String)\n  Notify(Company, \"QJZ\")\nEnd Sub\n\nSub Notify(ByVal Company As String, ByVal Office As String)\n\nEnd Sub\n</pre>\n<h2>Exceptions</h2>\n<p>The rule ignores non externally visible methods.</p>\n\r\n"},{"summary":"Public constant members should not be used","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-2339","tags":["pitfall"],"description":"<p>Constant members are copied at compile time to the call sites, instead of being fetched at runtime.</p>\n<p>As an example, say you have a library with a constant <code>Version</code> member set to <code>1.0</code>, and a client application linked to it.\nThis library is then updated and <code>Version</code> is set to <code>2.0</code>. Unfortunately, even after the old DLL is replaced by the new one,\n<code>Version</code> will still be <code>1.0</code> for the client application. In order to see <code>2.0</code>, the client application would need to\nbe rebuilt against the new version of the library.</p>\n<p>This means that you should use constants to hold values that by definition will never change, such as <code>Zero</code>. In practice, those cases\nare uncommon, and therefore it is generally better to avoid constant members.</p>\n<p>This rule only reports issues on public constant fields, which can be reached from outside the defining assembly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPublic Class Foo\n    Public Const Version = 1.0           ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Class Foo\n    Public Shared ReadOnly Property Version = 1.0 ' Compliant\nEnd Class\n</pre>\n\r\n"},{"summary":"Functions, procedures and properties should not be too complex","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-1541","tags":["brain-overload"],"description":"<p>The cyclomatic complexity of a function, procedure or property should not exceed a defined threshold. Complex code can perform poorly and will in\nany case be difficult to understand and therefore to maintain.</p>\n\r\n"},{"summary":"Control flow statements \"If\", \"For\", \"For Each\", \"Do\", \"While\", \"Select\" and \"Try\" should not be nested too deeply","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-134","tags":["brain-overload"],"description":"<p>Nested <code>If</code>, <code>Select</code>, <code>For</code>, <code>For Each</code>, <code>While</code>, <code>Do</code>, and <code>Try</code>\nstatements are key ingredients for making what's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nIf condition1 ' Compliant - depth = 1\n  ' ...\n  If condition2 ' Compliant - depth = 2\n    ' ...\n    For i = 0 to 10 ' Compliant - depth = 3, not exceeding the limit\n      ' ...\n      If condition4 ' Noncompliant - depth = 4\n        If condition5 ' Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          ' ...\n        End If\n        Return\n      End If\n    Next\n  End If\nEnd If\n</pre>\n\r\n"},{"summary":"\"Select\" statements should end with a \"Case Else\" clause","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-131","tags":["cwe","misra","cert"],"description":"<p>The requirement for a final <code>Case Else</code> clause is defensive programming.</p>\n<p>This clause should either take appropriate action or contain a suitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSelect Case param ' Noncompliant - Case Else clause is missing\n  Case 0\n    DoSomething()\n  Case 1\n    DoSomethingElse()\nEnd Select\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSelect Case param\n  Case 0\n    DoSomething()\n  Case 1\n    DoSomethingElse()\n  Case Else ' Compliant\n    DoSomethingElse()\nEnd Select\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n</ul>\n\r\n"},{"summary":"Expressions should not be too complex","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-1067","tags":["brain-overload"],"description":"<p>Complex boolean expressions are hard to read and so to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3</p>\n<pre>\nIf ((condition1 AndAlso condition2) OrElse (condition3 AndAlso condition4)) AndAlso condition5) Then  'Noncompliant\n  ...\nEnd If\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIf ((MyFirstCondition() OrElse MySecondCondition()) AndAlso MyLastCondition()) Then\n  ...\nEnd If\n</pre>\n\r\n"},{"summary":"Duplicate values should not be passed as arguments","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-4142","tags":["suspicious"],"description":"<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was\nintended for one of the arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIf compare(myPoint.x, myPoint.x) &lt;&gt; 0 Then ' Noncompliant\n    '...\nEnd If\n\nIf compare(getNextValue(), getNextValue()) &lt;&gt; 0 Then ' Noncompliant\n    '...\nEnd If\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIf compare(myPoint.x, myPoint.y) &lt;&gt; 0 Then\n    '...\nEnd If\n\nDim v1 As Integer = getNextValue()\nDim v2 As Integer = getNextValue()\nIf compare(v1, v2) &lt;&gt; 0 Then\n    '...\nEnd If\n</pre>\n\r\n"},{"summary":"Fields should be private","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-2357","tags":["pitfall"],"description":"<p>Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and\nvalidation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties.\nExplicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nClass Foo\n    Public Foo = 42          ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Public Property Foo = 42 ' Compliant\nEnd Class\n</pre>\n<h2>Exceptions</h2>\n<p><code>Shared</code> and <code>Const</code> fields are ignored.</p>\n\r\n"},{"summary":"Statements should be on separate lines","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-122","tags":["style"],"description":"<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim a = 0 : Dim b = 0  ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n        Dim a = 0              ' Compliant\n        Dim b = 0              ' Compliant\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Files should not have too many lines of code","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-104","tags":["brain-overload"],"description":"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>\n\r\n"},{"summary":"Lines should not be too long","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-103","tags":["convention"],"description":"<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>\n\r\n"},{"summary":"\"ByVal\" should not be used","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-3860","tags":["clumsy"],"description":"<p>Since Visual Studio 2010 SP1, the <code>ByVal</code> parameter modifier is implicitly applied, and therefore not required anymore. Removing it from\nyour source code will improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSub Foo(ByVal bar As String)\n  ' ...\nEnd Sub\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSub Foo(bar As String)\n  ' ...\nEnd Sub\n</pre>\n\r\n"},{"summary":"Arrays should be initialized using the \"... = {}\" syntax","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2429","tags":["clumsy"],"description":"<p>The <code>... = {</code>} syntax is more compact, more readable and less error-prone.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n  Sub Main()\n    Dim foo(1) As String   ' Noncompliant\n    foo(0) = \"foo\"\n    foo(1) = \"bar\"\n  End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n  Sub Main()\n    Dim foo = {\"foo\", \"bar\"}  ' Compliant\n  End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Generic type parameter names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2373","tags":["convention"],"description":"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all generic type parameter names match a provided regular\nexpression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Must start with an upper case 'T' character, e.g. T </li>\n  <li> Followed by Pascal casing, starting with an upper case character, e.g. TKey </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. TFooID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. TFooHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default parameter value <code>^T(([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?)?$</code>:</p>\n<pre>\nPublic Class Foo(Of t) ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPublic Class Foo(Of T) ' Compliant\nEnd Class\n</pre>\n\r\n"},{"summary":"Non-private \"Shared ReadOnly\" fields should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2370","tags":["convention"],"description":"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all non-private <code>Shared ReadOnly</code> fields names\nmatch a provided regular expression.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nClass Foo\n    Public Shared ReadOnly foo As Integer  ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Public Shared ReadOnly Foo As Integer  ' Compliant\nEnd Class\n</pre>\n\r\n"},{"summary":"Non-private fields should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2369","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private fields names match a provided regular\nexpression. </p>\n<p>Note that this rule does not apply to non-private <code>Shared ReadOnly</code> fields, for which there is another rule.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nClass Foo\n    Public foo As Integer  ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Public Foo As Integer  ' Compliant\nEnd Class\n</pre>\n\r\n"},{"summary":"Non-private constants should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2367","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private <code>Const</code> field names comply with\nthe provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nModule Module1\n    Public Const foo = 0  ' Noncompliant\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Public Const Foo = 0  ' Compliant\nEnd Module\n</pre>\n\r\n"},{"summary":"Properties should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2366","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that property names match a provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nModule Module1\n    Public Property foo As Integer   ' Noncompliant\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Public Property Foo As Integer   ' Compliant\nEnd Module\n</pre>\n\r\n"},{"summary":"\"Private\" fields should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2364","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all <code>Private</code> field names match the provided\nregular expression.</p>\n<p>Note that this rule does not apply to <code>Private Shared ReadOnly</code> fields, which are checked by another rule.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Optionally, can start with an underscore character or \"s_\", e.g. <em>foo, s</em>foo </li>\n  <li> Camel casing, starting with a lower case character, e.g. backColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. \"id\" in productID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. html </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nClass Foo\n    Private Foo As Integer  ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Private foo As Integer  ' Compliant\nEnd Class\n</pre>\n\r\n"},{"summary":"\"Private Shared ReadOnly\" fields should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2363","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all <code>Private Shared ReadOnly</code> field names comply\nwith the provided regular expression.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Optionally, can start with an underscore character or \"s_\", e.g. <em>foo, s</em>foo </li>\n  <li> Camel casing, starting with a lower case character, e.g. backColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. \"id\" in productID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. html </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nClass Foo\n    Private Shared ReadOnly Foo As Integer  ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Private Shared ReadOnly foo As Integer  ' Compliant\nEnd Class\n</pre>\n\r\n"},{"summary":"Private constants should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2362","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all <code>Private Const</code> field names comply with the\nprovided regular expression.</p>\n<p>The default configuration is:</p>\n<ul>\n  <li> Optionally, can start with an underscore character or \"s_\", e.g. <em>foo, s</em>foo </li>\n  <li> Camel casing, starting with a lower case character, e.g. backColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized only when not at the beginning, e.g. \"id\" in productID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. html </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^(s_|_)?[a-z][a-z0-9]*([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nModule Module1\n    Private Const Foo = 0  ' Noncompliant\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Private Const foo = 0  ' Compliant\nEnd Module\n</pre>\n\r\n"},{"summary":"Line continuations should not be used","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2354","tags":["convention"],"description":"<p>To improve the code readability, the explicit line continuation character, <code>_</code>, should not be used. Instead, it is better to break lines\nafter an operator.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Main()\n        ' Noncompliant\n        Console.WriteLine(\"Hello\" _\n                          &amp; \"world\")\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Main()\n\n        Console.WriteLine(\"Hello\" &amp;\n                          \"world\")\n    End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Indexed properties should be named \"Item\"","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2353","tags":[],"description":"<p>In most cases, indexed properties should be named Item for consistency. Exceptions are when there exists a name which is obviously better, for\nexample <code>System.String.Chars(System.Int32)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Dim array = {\"apple\", \"banana\", \"orange\", \"strawberry\"}\n\n    ReadOnly Property Foo(ByVal index As Integer)  ' Noncompliant\n        Get\n            Return array(index)\n        End Get\n    End Property\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Dim array = {\"apple\", \"banana\", \"orange\", \"strawberry\"}\n\n    ReadOnly Property Item(ByVal index As Integer)\n        Get\n            Return array(index)\n        End Get\n    End Property\nEnd Module\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>\n\r\n"},{"summary":"Events should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2348","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all even names match a provided regular expression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nClass Foo\n    Event fooEvent() ' Noncompliant\nEnd Class\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass Foo\n    Event FooEvent() ' Compliant\nEnd Class\n</pre>\n\r\n"},{"summary":"Enumeration values should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2343","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all enumeration value names match a provided regular\nexpression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower cased, e.g. GetHtml </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code>:</p>\n<pre>\nEnum Foo\n    fooValue   ' Noncompliant\nEnd Enum\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEnum Foo\n    FooValue   ' Compliant\nEnd Enum\n</pre>\n\r\n"},{"summary":"Multiple variables should not be declared on the same line","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1659","tags":["convention","misra","cert"],"description":"<p>Declaring multiple variable on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n  Public Const AAA As Integer = 5, BBB = 42, CCC As String = \"foo\"  ' Noncompliant\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n  Public Const AAA As Integer = 5\n  Public Const BBB = 42\n  Public Const CCC as String = \"foo\"\nEnd Module\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator\n  respectively </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7wHEAw\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VgU\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fAAhAQ\">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration\n  </li>\n</ul>\n\r\n"},{"summary":"Comments should not be located at the end of lines of code","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-139","tags":["convention"],"description":"<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default comment pattern <code>^'\\s*\\S+\\s*$</code>, which ignores single word comments:</p>\n<pre>\nModule Module1\n  Sub Main()\n    Console.WriteLine(\"Hello, world!\") ' Noncompliant - My first program!\n    Console.WriteLine(\"Hello, world!\") ' CompliantOneWord\n  End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n  Sub Main()\n    ' Compliant - My first program!\n    Console.WriteLine(\"Hello, world!\")\n    Console.WriteLine(\"Hello, world!\") ' CompliantOneWord\n  End Sub\nEnd Module\n</pre>\n\r\n"},{"summary":"Method parameters and caught exceptions should not be reassigned","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1226","tags":["misra"],"description":"<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters should be, if not treated as <code>readonly</code> then at least read before reassignment.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModule Module1\n    Sub Foo(ByVal a As Integer)\n        a = 42                  ' Noncompliant\n    End Sub\nEnd Module\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModule Module1\n    Sub Foo(ByVal a As Integer)\n        Dim tmp = a\n        tmp = 42\n    End Sub\nEnd Module\n</pre>\n<h2>Exceptions</h2>\n<p><code>ByRef</code> parameters are ignored.</p>\n<pre>\nModule Module1\n    Sub Foo(ByRef a As Integer)\n        a = 42                  ' Ignored; it is a ByRef parameter\n    End Sub\nEnd Module\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>\n\r\n"},{"summary":"Tabulation characters should not be used","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-105","tags":["convention"],"description":"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>\n\r\n"}]}