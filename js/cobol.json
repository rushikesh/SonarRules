{
  "types": {
    "Vulnerability": 6,
    "Code Smell": 113,
    "Bug": 53
  },
  "standards": {},
  "tags": [{
    "name": "bad-practice",
    "count": 10
  }, {
    "name": "error-handling",
    "count": 4
  }, {
    "name": "bug",
    "count": 47
  }, {
    "name": "brain-overload",
    "count": 24
  }, {
    "name": "confusing",
    "count": 6
  }, {
    "name": "misra",
    "count": 6
  }, {
    "name": "unused",
    "count": 12
  }, {
    "name": "lock-in",
    "count": 8
  }, {
    "name": "pitfall",
    "count": 16
  }, {
    "name": "suspicious",
    "count": 8
  }, {
    "name": "security",
    "count": 6
  }, {
    "name": "cwe",
    "count": 10
  }, {
    "name": "cert",
    "count": 8
  }, {
    "name": "convention",
    "count": 21
  }, {
    "name": "microfocus",
    "count": 1
  }, {
    "name": "unpredictable",
    "count": 2
  }, {
    "name": "performance",
    "count": 27
  }, {
    "name": "sql",
    "count": 46
  }, {
    "name": "clumsy",
    "count": 5
  }, {
    "name": "design",
    "count": 2
  }, {
    "name": "obsolete",
    "count": 2
  }, {
    "name": "redundant",
    "count": 1
  }, {
    "name": "leak",
    "count": 1
  }],
  "rules": [{
    "summary": "SQL statements should not contain dynamic clauses",
    "type": "Vulnerability",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1493",
    "tags": ["security", "sql"],
    "description": "<p>It is a bad practice to use Dynamic SQL. It differs from static embedded SQL in that part or all of the actual SQL commands may be stored in a host\nvariable that is built on the fly during execution of the program. In the extreme case, the SQL commands are generated in their entirety by the\napplication program at run time. While dynamic SQL is more flexible than static embedded SQL, it does require additional overhead and is much more\ndifficult to understand and to maintain.</p>\n<p>Moreover, dynamic SQL may expose the application to SQL injection vulnerabilities.</p>\n<p>This rule raises an issue when <code>PREPARE</code> or <code>EXECUTE IMMEDIATE</code> is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEXEC SQL PREPARE SEL INTO :SQLDA FROM :STMTBUF END-EXEC.\n</pre>\n\n"
  }, {
    "summary": "SQL \"SELECT\" statements should have \"WHERE\" conditions",
    "type": "Vulnerability",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1492",
    "tags": ["security", "performance", "sql"],
    "description": "<p>Although the <code>WHERE</code> condition is optional in a <code>SELECT</code> statement, for performance and security reasons, a\n<code>WHERE</code> clause should always be specified to prevent reading the whole table.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT * FROM db_persons INTO us_persons\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT * FROM db_persons INTO us_persons WHERE country IS 'US'\n</pre>\n<h2>Exceptions</h2>\n<p>Not having a WHERE clause is acceptable in read-only cursors as results are generally sorted and it is possible to stop processing in the\nmiddle.</p>\n\n"
  }, {
    "summary": "Inserts should include values for non-null columns",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3618",
    "tags": ["bug", "sql"],
    "description": "<p>Any insert which omits a value for a <code>NOT NULL</code> column in a database table will be automatically rejected by the database unless a\ndefault value has been specified for the column.</p>\n<p><strong>Note</strong> that this rule raises issues only when a database catalog is provided during the SonarQube analysis.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the table <code>MY_TABLE</code> having a <code>NOT NULL</code> column <code>N2</code> without default value and a <code>NOT NULL</code> column\n<code>N3</code> with default value:</p>\n<pre>\nEXEC SQL\n  INSERT INTO MY_TABLE  *&gt; Noncompliant; N2 value omitted\n  (\n    N1\n  )\n  VALUES\n  (\n    :ITQ1-NUMBER,\n  )\nEND-EXEC.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEXEC SQL\n  INSERT INTO MY_TABLE  *&gt; Compliant even though N3 value not supplied\n  (\n    N1,\n    N2\n  )\n  VALUES\n  (\n    :ITQ1-NUMBER,\n    :ITQ2-NUMBER,\n  )\nEND-EXEC.\n</pre>\n\n"
  }, {
    "summary": "Numbers should only be moved to variables large enough to hold them without truncation",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1967",
    "tags": ["cwe", "bug"],
    "description": "<p>Moving a large number into a small field will result in data truncation. Generally, numeric values are truncated from the left. However, in the\ncase of floating point values, when the target field has too little precision to hold the value being moved to it, decimals will be truncated (not\nrounded!) from the right.</p>\n<p>In any case, data loss is always the result when too-large values are moved to too-small fields.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n01 NUM-A   PIC 9(2)V9.\n*&gt; ...\n\n    MOVE 88.89   TO NUM-A  *&gt; Noncompliant. Becomes 88.8\n    MOVE 178.7   TO NUM-A  *&gt; Noncompliant. Becomes 78.7\n    MOVE 999.99 TO NUM-A  *&gt; Noncompliant. Truncated on both ends; becomes 99.9\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01 NUM-A   PIC 9(3)V99.\n*&gt; ...\n\n    MOVE 88.89   TO NUM-A\n    MOVE 178.7   TO NUM-A\n    MOVE 999.99 TO NUM-A\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/704\">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>\n</ul>\n<h3>See Also</h3>\n<ul>\n  <li> {rule:cobol:S3921} - for truncation of string values </li>\n</ul>\n\n"
  }, {
    "summary": "\"DELETE\" and \"UPDATE\" statements should contain \"WHERE\" clauses",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1590",
    "tags": ["bug", "sql"],
    "description": "<p><code>UPDATE</code> and <code>DELETE</code> statements should contain <code>WHERE</code> clauses to keep the modification of records under control.\nOtherwise unexpected data loss could result.</p>\n\n"
  }, {
    "summary": "Data items should be initialized with data of the correct type",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1574",
    "tags": ["bug"],
    "description": "<p>Initializing a data item with a value of the wrong type will lead to runtime errors. The rule checks that numeric data items are not initialized\nwith alphanumeric/alphabetic values and that alphanumeric /alphabetic data items are not initialized with numeric values. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n       WORKING-STORAGE SECTION.\n         EJECT\n       01  TAB-POS.\n           02  FILLER  PIC A(14) VALUE 0.  *&gt; Noncompliant\n           02  FILLER  PIC 9(14) VALUE 'ASDFJKL;QWERTY'.  *&gt; Noncompliant\n\n       01 MYGROUP PIC 9(1).\n          88 X VALUE 1,2.\n          88 Y VALUE 3, \"BLUE\".  *&gt; Noncompliant; BLUE is alphanumeric\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n       WORKING-STORAGE SECTION.\n         EJECT\n       01  TAB-POS.\n           02  FILLER  PIC A(14)  VALUE 'ASDFJKL;QWERTY'.\n           02  FILLER  PIC 9(14)  VALUE 0.\n\n       01 MYGROUP PIC 9(1).\n          88 X VALUE 1,2.\n          88 Y VALUE 3, 4.\n</pre>\n\n"
  }, {
    "summary": "DDL statements should not be used",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1069",
    "tags": ["bug", "bad-practice", "sql"],
    "description": "<p>Allowing an application to dynamically change the structure of a database at runtime is very dangerous because the application can become unstable\nunder unexpected conditions. Best practices dictate that applications only manipulate data.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEXEC SQL\n  CREATE TABLE INVENTORY\n                 (PARTNO         SMALLINT     NOT NULL,\n                  DESCR          VARCHAR(24 ),\n                  PRIMARY KEY(PARTNO))\nEND-EXEC.\n\nEXEC SQL\n  DROP TABLE EMPLOYEE RESTRICT\nEND-EXEC.\n\nEXEC SQL\n  ALTER TABLE EQUIPMENT\n     DROP COLUMN LOCATION CASCADE\nEND-EXEC.\n</pre>\n<h2>Exceptions</h2>\n<p>Creating global temporary tables, creating indexes on those tables, and then dropping those indices and tables is allowed.</p>\n<pre>\nEXEC SQL\n   DECLARE GLOBAL TEMPORARY TABLE SESSION.TBT09SCO ...\nEND-EXEC.\n\nEXEC SQL\n   CREATE UNIQUE INDEX X1T09SCO ON SESSION.TBT09SCO ...\nEND-EXEC.\n\n...\nEXEC SQL\n   DROP INDEX X1T09SCO\nEND-EXEC.\n\nEXEC SQL\n   DROP TABLE SESSION.TBT09SCO\nEND-EXEC.\n</pre>\n\n"
  }, {
    "summary": "When calling a subprogram, the data item containing the name of the subprogram to be called should not be programmatically updated",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1686",
    "tags": ["security", "pitfall"],
    "description": "<p>Defining a subprogram to be called at runtime is possible but ill-advised. This extremely powerful feature can quite easily be misused, and even\nwhen used correctly, it highly increases the overall complexity of the program, and makes it impossible before runtime to know exactly what will be\nexecuted. Therefore defining the subprogram to be called at runtime is a feature that should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMOVE SOMETHING TO MY_SUBPROG.\n...\nCALL MY_SUBPROG.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01 MY_SUBPROG PIC X(10) VALUE \"SUB123\".\n....\nCALL MY_SUBPROG.\n</pre>\n\n"
  }, {
    "summary": "\"INSERT\" statements should not set the values of identity columns",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3482",
    "tags": ["bug", "sql"],
    "description": "<p>While it is possible to manually set a primary key value, doing so almost guarantees a key clash at some point. Instead, primary key values should\nbe set by (in descending order of desirability):</p>\n<ul>\n  <li> automatic generation by the database via a column definition such as <code>PROD_ID INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1,\n  INCREMENT BY 1, NO CACHE)</code> </li>\n  <li> the <code>Generate_Unique()</code> function </li>\n  <li> a value pulled directly from a sequence, like so: <code>nextval for SEQ_PRODUCT</code> </li>\n</ul>\n<p>This rule raises an issue when an <code>INSERT</code> statement assigns values to identity columns that are configured to always generate their\nvalues.</p>\n<p><strong>Note</strong> That this rule raises issues only when a database catalog is provided during the SonarQube analysis.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCREATE table my_table (\n     column_a integer GENERATED ALWAYS AS IDENTITY primary key not null,\n     column_b varchar(50)\n);\n\nINSERT into my_table (column_a, column_b)\nVALUES (1, 'Hello World');  -- Noncompliant\n</pre>\n\n"
  }, {
    "summary": "SQL \"UPDATE\" statements should not change primary key values",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3004",
    "tags": ["bug", "sql"],
    "description": "<p>A primary key uniquely identifies a row in a database table, and should be considered immutable. Primary key values may be used in foreign keys in\nother tables, as well as in external systems. Changing such a value, even with the best of motivations, is likely to wreak havoc on the system's data\nintegrity and potentially across other systems as well.</p>\n<p><strong>Note</strong> That this rule raises issues only when a database catalog is provided during the SonarQube analysis.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nUPDATE USERS\n  SET USER_ID = :new-id, USER_NAME = :new-name  *&gt; Noncompliant\n  WHERE USER_ID = :input\n</pre>\n\n"
  }, {
    "summary": "Alphanumeric values should not be moved to numeric fields",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1966",
    "tags": ["cwe", "bug"],
    "description": "<p>An alphanumeric value should not be moved to a numeric field. Because alphanumeric values are stored differently than numeric values, simply moving\nthe bits from one field to the other will yield strange results at best, and crashes at worst.</p>\n<p>Instead, <code>NUMVAL</code> should be used to explicitly convert the alphanumeric value to a numeric one. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n01  MY-STR          PIC X(3) VALUE SPACES.\n01  MY-NUM         PIC 9(3) VALUE ZEROES.\n*&gt; ...\n    MOVE '1'         TO MY-STR\n    MOVE MY-STR  TO MY-NUM  *&gt; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01  MY-STR          PIC X(3) VALUE SPACES.\n01  MY-NUM         PIC 9(3) VALUE ZEROES.\n*&gt; ...\n    MOVE '1'         TO MY-STR\n    MOVE FUNCTION NUMVAL(MY-STR)  TO MY-NUM\n</pre>\n<p>or</p>\n<pre>\n01  MY-STR         PIC X(3) VALUE SPACES.\n01  MY-STR-RED     REDEFINES MY-STR PIC 9(3).\n01  MY-NUM         PIC 9(3) VALUE ZEROES.\n*&gt; ...\nIF MY-STR NUMERIC\n   MOVE MY-STR-RED  TO MY-NUM\nEND-IF\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/704.html\">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>\n</ul>\n\n"
  }, {
    "summary": "Open files should be closed explicitly",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1725",
    "tags": ["cwe", "bug", "bad-practice"],
    "description": "<p>Even though closing an open file isn't always mandatory (for instance when stopping the execution of a COBOL program with the <code>STOP RUN</code>\nstatement), it's good coding practice to always explicitly close any open files. This rule checks that for every <code>OPEN</code> statement there is\na corresponding <code>CLOSE</code> statement somewhere in the program.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOPEN INPUT my-file\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nOPEN INPUT my-file\n...\nCLOSE my-file\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>\n\n"
  }, {
    "summary": "The second procedure of a \"PERFORM THRU\" statement should be defined after the first procedure",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1299",
    "tags": ["bug"],
    "description": "<p>If the second procedure of a PERFORM THRU is not defined after the first one, the source code is semantically incorrect and the program doesn't\nbehave as expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  PERFORM SECOND-P THRU FIRST-P.\n  ...\n\n FIRST-P.\n   ...\n\n SECOND-P.\n   ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  PERFORM FIRST-P THRU SECOND-P.\n  ...\n\n FIRST-P.\n   ...\n\n SECOND-P.\n   ...\n</pre>\n\n"
  }, {
    "summary": "\"PERFORM\" calls should not be recursive",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-925",
    "tags": ["misra", "unpredictable", "bad-practice", "pitfall"],
    "description": "<p>Most COBOL environments do not support recursive <code>PERFORM</code> calls, since they can cause unpredictable results. This rule raises an issue\nwhen recursive <code>PERFORM</code> calls are used. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPARAGRAPH1.\n  PERFORM PARAGRAPH2.\n\nPARAGRAPH2.\n  PERFORM PARAGRAPH3.\n\nPARAGRAPH3.\n  PERFORM PARAGRAPH1.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPARAGRAPH1.\n  PERFORM PARAGRAPH2.\n\nPARAGRAPH2.\n  PERFORM PARAGRAPH3.\n\nPARAGRAPH3.\n  DISPLAY \"THIS IS PARAGRAPH3\".\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.2 - Functions shall not call themselves, either directly or indirectly. </li>\n  <li> MISRA C++:2008, 7-5-4 - Functions should not call themselves, either directly or indirectly. </li>\n  <li> MISRA C:2012, 17.2 - Functions shall not call themselves, either directly or indirectly </li>\n</ul>\n\n"
  }, {
    "summary": "\"COPY SUPPRESS\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3892",
    "tags": ["confusing"],
    "description": "<p><code>COPY ... SUPPRESS</code> suppresses the inclusion of the copybook contents from the source listing, making it very difficult to gain a\ncomplete understanding of what's happening in the code. This could hinder both maintenance and debugging.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCOPY XX001234 SUPPRESS.  &lt;* Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCOPY XX001234.\n</pre>\n\n"
  }, {
    "summary": "Copybooks should not contain keywords relating to the nature or structure of a program",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1683",
    "tags": ["bad-practice"],
    "description": "<p>Copybooks should be used only to share data definitions or logic. The following keywords relate to the nature or structure of a COBOL program, and\nshould be defined directly in the source code of the COBOL program:</p>\n<ul>\n  <li> <code>IDENTIFICATION DIVISION.</code> </li>\n  <li> <code>PROGRAM-ID xxxxxxxx.</code> </li>\n  <li> <code>AUTHOR. yyyyyyyyyyy.</code> </li>\n  <li> <code>INSTALLATION. zzzzzz.</code> </li>\n  <li> <code>DATE-WRITTEN. zzzzzz.</code> </li>\n  <li> <code>DATE-COMPILED. zzzzzz.</code> </li>\n  <li> <code>ENVIRONNEMENT DIVISION.</code> </li>\n  <li> <code>CONFIGURATION SECTION.</code> </li>\n  <li> <code>SOURCE-COMPUTER. xxxxxx.</code> </li>\n  <li> <code>OBJECT-COMPUTER. xxxxxx.</code> </li>\n  <li> <code>SPECIAL-NAMES. DECIMAL-POINT IS COMMA.</code> </li>\n  <li> <code>I-O CONTROL.</code> </li>\n  <li> <code>FILE-CONTROL.</code> </li>\n  <li> <code>SELECT \u2026</code> </li>\n  <li> <code>DATA DIVISION.</code> </li>\n  <li> <code>FILE SECTION.</code> </li>\n  <li> <code>WORKING-STORAGE SECTION.</code> </li>\n  <li> <code>SCREEN.</code> </li>\n  <li> <code>REPORT.</code> </li>\n  <li> <code>INPUT-OUTPUT SECTION.</code> </li>\n  <li> <code>LINKAGE SECTION.</code> </li>\n  <li> <code>PROCEDURE DIVISION.</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nLINKAGE SECTION.\nCOPY CSCEMOD1.\nMOVE A TO B\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLINKAGE SECTION.\nCOPY CSCEMOD1.\nPROCEDURE DIVISION\nCOPY CSCEMOD2.\nMOVE A TO B\n</pre>\n\n"
  }, {
    "summary": "Data used in a \"LINKAGE\" should be defined in a COPYBOOK",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1437",
    "tags": ["pitfall"],
    "description": "<p>The <code>LINKAGE</code> section describes data made available from another program through the CALL statement. The data structure defined in a\n<code>LINKAGE</code> section should be located in a COPYBOOK. Otherwise, at runtime multiple COBOL programs may try to share data structures which are\nnot similar.</p>\n<p>First level data items can also be defined in the main program as long as there are no structural pieces of information attached to this first\nlevel like the length, the format, and so on.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nLINKAGE SECTION.\n\n01 LK-DATA.  *&gt; Noncompliant\n  05 LK-LENGTH     PIC S9(04) COMP.\n   05 LK-VARIABLE  PIC X(08).\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLINKAGE SECTION.\n\nCOPY MY_COPYBOOK.\n</pre>\n<p>or</p>\n<pre>\nLINKAGE SECTION.\n\n01 LK-DATA.\n  COPY MY_COPYBOOK.\n</pre>\n\n"
  }, {
    "summary": "\"EVALUATE\" structures should end with \"WHEN OTHERS\" clauses",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-131",
    "tags": ["cwe", "misra", "cert"],
    "description": "<p>The <code>EVALUATE</code> statement allows implementing case structures in Cobol. Each case is managed by a <code>WHEN</code> phrase activated by\nspecific test of a variable.The <code>WHEN OTHER</code> phrase allows managing all the cases which have not been taken into account by the previous\n<code>WHEN</code> phrases. If the variable to be tested contains a new value that is not currently managed then the absence of the <code>WHEN\nOTHER</code> phrase will lead a situation in which no process will be performed for this value and the program may have uncontrolled or undefined\nbehavior.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n       A010-PRINCIPAL.\n         EVALUATE  Y5FTAR-PER-ECN-CTS\n           WHEN '01'\n             MOVE 'A' TO WS-CD-PER-CTS\n           WHEN '02'\n             MOVE 'S' TO WS-CD-PER-CTS\n           WHEN '04'\n             MOVE 'T' TO WS-CD-PER-CTS\n           WHEN '12'\n             MOVE 'M' TO WS-CD-PER-CTS\n         END-EVALUATE.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n       A010-PRINCIPAL.\n         EVALUATE  Y5FTAR-PER-ECN-CTS\n           WHEN '01'\n             MOVE 'A' TO WS-CD-PER-CTS\n           WHEN '02'\n             MOVE 'S' TO WS-CD-PER-CTS\n           WHEN '04'\n             MOVE 'T' TO WS-CD-PER-CTS\n           WHEN '12'\n             MOVE 'M' TO WS-CD-PER-CTS\n           WHEN OTHERS\n             MOVE 'O' TO WS-CD-PER-CTS\n         END-EVALUATE.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n</ul>\n\n"
  }, {
    "summary": "Sections should not be too complex",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1302",
    "tags": ["brain-overload"],
    "description": "<p>The cyclomatic complexity of a section should not exceed a defined threshold. Complex code is difficult to understand and therefore to\nmaintain.</p>\n\n"
  }, {
    "summary": "Paragraphs should not be too complex",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1288",
    "tags": ["brain-overload"],
    "description": "<p>The cyclomatic complexity of a paragraph should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult\nto understand and therefore to maintain.</p>\n\n"
  }, {
    "summary": "Cursors should not be opened inside loops",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1283",
    "tags": ["leak", "performance", "sql"],
    "description": "<p>You should avoid opening a cursor inside a <code>PERFORM</code> statement because doing so could impact performance, or lead to unexpected behavior\nif the the closing of the cursor is not defined in the same loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  PERFORM UNTIL (NOT DA-OK) OR (Y00CIA-CD-RET-PGM = ZERO)\n    EXEC SQL OPEN C2\n    END-EXEC\n  END-PERFORM.\n</pre>\n\n"
  }, {
    "summary": "Cursors should not be declared inside loops",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1277",
    "tags": ["performance", "sql"],
    "description": "<p>You should avoid declaring a cursor inside a <code>PERFORM</code> statement because doing so could impact performance. It could also lead to\nunexpected behavior if the opening and closing of the cursor are not defined in the same loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  PERFORM UNTIL (NOT DA-OK) OR (Y00CIA-CD-RET-PGM = ZERO)\n    EXEC SQL  DECLARE C2 CURSOR FOR\n      SELECT DEPTNO, DEPTNAME, MGRNO FROM DEPARTMENT WHERE ADMRDEPT = 'A00'\n    END-EXEC\n  END-PERFORM.\n</pre>\n\n"
  }, {
    "summary": "Cursors should not be closed inside loops",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1275",
    "tags": ["performance", "pitfall", "sql"],
    "description": "<p>You should avoid closing a <code>CURSOR</code> inside a <code>PERFORM</code> statement, because it could impact performance or lead to unexpected\nbehavior if the cursor was not opened in the same loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n PERFORM UNTIL (NOT DA-OK)\n       OR (Y00CIA-CD-RET-PGM = ZERO)\n    EXEC SQL CLOSE C2\n    END-EXEC\n  END-PERFORM.\n</pre>\n\n"
  }, {
    "summary": "String literals should not be duplicated",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1192",
    "tags": ["design"],
    "description": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\n       PROCEDURE DIVISION.\n\n       DISPLAY \"Firstname: \".\n      *...\n       DISPLAY \"Firstname: \".\n      *...\n       DISPLAY \"Firstname: \".\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n       WORKING-STORAGE SECTION.\n         01 FIRST-NAME-HEADER PIC X(42) VALUE \"Firstname: \".\n       PROCEDURE DIVISION.\n\n       DISPLAY FIRST-NAME-HEADER\n      *...\n       DISPLAY FIRST-NAME-HEADER\n      *...\n       DISPLAY FIRST-NAME-HEADER\n</pre>\n<h2>Exceptions</h2>\n<p>Literals with fewer than 7 characters are ignored.</p>\n<p>Only duplications located in a <code>PROCEDURE DIVISION</code>, not those contained in copybooks are reported.</p>\n\n"
  }, {
    "summary": "Copybooks should be used to share data structures, not procedural logic",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1184",
    "tags": ["pitfall"],
    "description": "<p>Changing procedural copybooks may potentially cause issues where many programs are pulled into a package for recompile and then a potential for\nbind issues during turnover. Having to edit procedural copybooks frequently causes delays in program maintenance as developers have to wait for\nanother developer to complete their work. This also causes double work when programs get out of sync and a recent change could potentially be lost in\na program.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPROCEDURE DIVISION.\n  ...\n  COPY MY_COPYBOOK.        &lt;- Noncompliant\n  ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPROCEDURE DIVISION.\n  ...\n  CALL MY_MACRO.        &lt;- Compliant\n  ...\n</pre>\n\n"
  }, {
    "summary": "All branches in a conditional structure should not have exactly the same implementation",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3923",
    "tags": [],
    "description": "<p>Having all branches in an <code>EVALUATE</code> or <code>IF</code> chain with the same implementation is an error. Either a copy-paste error was\nmade and something different should be executed, or there shouldn't be an <code>EVALUATE</code>/<code>IF</code> chain at all. Note that this rule does\nnot apply to <code>IF</code> chains without <code>ELSE</code>-s, or to <code>EVALUATE</code>-s without <code>WHEN OTHER</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEVALUATE X *&gt; Noncompliant\n  WHEN 1\n    PERFORM SECTION1\n  WHEN OTHER\n    PERFORM SECTION1\nEND-EVALUATE.\n\nIF X = 1 THEN *&gt; Noncompliant\n  PERFORM SECTION1\nELSE\n  PERFORM SECTION1\nEND-IF.\n</pre>\n\n"
  }, {
    "summary": "Strings should only be moved to variables large enough to hold them without truncation",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3921",
    "tags": ["cwe", "bug"],
    "description": "<p>Moving a large string into a small field will result in data truncation with data lost from the right side of the string.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n01 ALPHA   PIC X(4).\n*&gt; ...\n\n    MOVE \"Now is the time\" TO ALPHA *&gt; Noncompliant. Becomes \"Now \"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01 ALPHA   PIC X(15).\n*&gt; ...\n\n    MOVE \"Now is the time\" TO ALPHA\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/704\">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>\n</ul>\n<h3>See Also</h3>\n<ul>\n  <li> {rule:cobol:S1967} - for truncation of numeric values </li>\n</ul>\n\n"
  }, {
    "summary": "\"LIKE\" clauses should not be used without wildcards",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3643",
    "tags": ["sql"],
    "description": "<p>The use of <code>LIKE</code> in a SQL query without one or more wildcards in the sought value is surely a typo. Either <code>=</code> was meant\ninstead, or the wildcard has been unintentionally omitted. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT name\nFROM product\nWHERE name LIKE 'choc'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT name\nFROM product\nWHERE name LIKE 'choc%'\n</pre>\n<p>or </p>\n<pre>\nSELECT name\nFROM product\nWHERE name = 'choc'\n</pre>\n\n"
  }, {
    "summary": "\"WHERE\" clause conditions should not be contradictory",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3633",
    "tags": ["bug", "sql"],
    "description": "<p>Queries with contradictory <code>WHERE</code> clauses will always return empty result sets. This is clearly a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT *\nFROM fruit\nWHERE type='apple' AND type='orange'  -- Noncompliant\n</pre>\n\n"
  }, {
    "summary": "Selects should include null indicators for nullable columns",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3621",
    "tags": ["bug", "sql"],
    "description": "<p>When a <code>SELECT</code> returns <code>null</code> from a nullable column, the relevant host variable isn't updated; it simply retains its\nprevious value. The only way you'll ever know the column value was <code>null</code> is to check the relevant null indicator included in the\n<code>SELECT</code> for a negative (<code>null</code>) value.</p>\n<p>This rule raises an issue when a <code>SELECT</code> omits a <code>null</code> indicator for a nullable column. </p>\n<p><strong>Note</strong> that this rule raises issues only when a database catalog is provided during the SonarQube analysis.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the table <code>PRODUCT</code> having a nullable column <code>NAME</code>:</p>\n<pre>\nEXEC SQL\n  SELECT\n    PROD_ID,\n    NAME\n  INTO\n    :P-ID,\n    :P-NAME                 -- Noncompliant; No null indicator\n  FROM PRODUCT\nEND-EXEC\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEXEC SQL\n  SELECT\n    PROD_ID,\n    NAME\n  INTO\n    :P-ID,\n    :P-NAME :P-NAME-NULL  -- Compliant\n  FROM PRODUCT\nEND-EXEC\n</pre>\n\n"
  }, {
    "summary": "Fetches should not select more columns than their cursors",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3614",
    "tags": ["bug", "sql"],
    "description": "<p>The number of columns in a <code>FETCH</code> statement should match the number actually selected in the relevant cursor. Use more columns in the\n<code>FETCH</code> than the cursor, and you've got a data problem, because the variables you expect to be updated by the cursor are never actually\ntouched, and neither are their null indicators. Instead, they retain whatever value they had before the fetch. Meaning you're operating with bad data.\n</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n      EXEC SQL\n        DECLARE C-SQL-CURSOR CURSOR\n          SELECT COLUMN1\n                ,COLUMN2\n                ,COLUMN3\n            FROM TBLWTABLE\n          WITH UR\n      END-EXEC.\n\n      \u2026\n\n      EXEC SQL\n        FETCH C-SQL-CURSOR\n        INTO  :H-COLUMN1 :H-COLUMN1-IND  -- Noncompliant\n             ,:H-COLUMN2 :H-COLUMN2-IND\n             ,:H-COLUMN3 :H-COLUMN3-IND\n             ,:H-COLUMN4 :H-COLUMN4-IND  -- Not selected\n             ,:H-COLUMN5 :H-COLUMN5-IND  -- Not selected\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n      EXEC SQL\n        DECLARE C-SQL-CURSOR CURSOR\n          SELECT COLUMN1\n                ,COLUMN2\n                ,COLUMN3\n                ,COLUMN4\n                ,COLUMN5\n            FROM TBLWTABLE\n          WITH UR\n      END-EXEC.\n\n      \u2026\n\n      EXEC SQL\n        FETCH C-SQL-CURSOR\n        INTO  :H-COLUMN1 :H-COLUMN1-IND\n             ,:H-COLUMN2 :H-COLUMN2-IND\n             ,:H-COLUMN3 :H-COLUMN3-IND\n             ,:H-COLUMN4 :H-COLUMN4-IND\n             ,:H-COLUMN5 :H-COLUMN5-IND\n</pre>\n<p>or</p>\n<pre>\n      EXEC SQL\n        DECLARE C-SQL-CURSOR CURSOR\n          SELECT COLUMN1\n                ,COLUMN2\n                ,COLUMN3\n            FROM TBLWTABLE\n          WITH UR\n      END-EXEC.\n\n      \u2026\n\n      EXEC SQL\n        FETCH C-SQL-CURSOR\n        INTO  :H-COLUMN1 :H-COLUMN1-IND\n             ,:H-COLUMN2 :H-COLUMN2-IND\n             ,:H-COLUMN3 :H-COLUMN3-IND\n</pre>\n\n"
  }, {
    "summary": "Conditions should not unconditionally evaluate to \"TRUE\" or to \"FALSE\"",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2583",
    "tags": ["cwe", "bug", "misra", "cert"],
    "description": "<p>Conditional statements using a condition which cannot be anything but <code>FALSE</code> have the effect of making blocks of code non-functional.\nIf the condition cannot evaluate to anything but <code>TRUE</code>, the conditional statement is completely redundant, and makes the code less\nreadable.</p>\n<p>It is quite likely that the code does not match the programmer's intent.</p>\n<p>Either the condition should be removed or it should be updated so that it does not always evaluate to <code>TRUE</code> or <code>FALSE</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIF FOO IS NUMERIC AND FOO = \"a\"   *&gt; Noncompliant, FOO cannot be both numeric and equal to \"a\"\n  DISPLAY \"...\"\nEND-IF.\n\nIF BAR = 4\n  IF FOO = \"a\" AND BAR = 5        *&gt; Noncompliant, BAR cannot be equal to 5\n    DISPLAY \"...\"\n  END-IF.\n  ...\nEND-IF.\n\n01 BAR PIC 9.\nIF BAR &gt; 30                       *&gt; Noncompliant, BAR cannot be greater than 9\n  DISPLAY \"...\"\nEND-IF.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "\"NULL\" should not be compared directly",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2527",
    "tags": ["bug", "sql"],
    "description": "<p>In a Zen-like manner, \"NULL\" is never equal to anything, even itself. Therefore comparisons using equality operators will always return\n<code>False</code>, even when the value actually <code>IS NULL</code>.</p>\n<p>For that reason, comparison operators should never be used to make comparisons with <code>NULL</code>; <code>IS NULL</code> and <code>IS NOT\nNULL</code> should be used instead. This extends as well to empty string (\"\"), which is equivalent to <code>NULL</code> for some database engines.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nUPDATE books\nSET title = 'unknown'\nWHERE title = NULL -- Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nUPDATE books\nSET title = 'unknown'\nWHERE title IS NULL\n</pre>\n\n"
  }, {
    "summary": "Section names should be unique within a program",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1969",
    "tags": ["bug", "unused", "suspicious"],
    "description": "<p>The name of each section should be unique within a program because section names cannot be qualified. Often code with duplicate section names will\nnot compile. When it does, sections with duplicate names are ignored, meaning those sections are dead code. Even if dead code were not an anti-pattern\non its own, having two sections with the same name will inevitably lead to maintenance mistakes. Therefore duplicative section names should be\nchanged, or the extra sections should be removed.</p>\n\n"
  }, {
    "summary": "Conditions in related \"IF/ELSE IF\" statements and \"WHEN\" clauses in \"EVALUATE\" statements should not have the same condition",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1862",
    "tags": ["bug", "cert", "unused", "pitfall"],
    "description": "<p>A <code>EVALUATE</code> and a chain of <code>IF</code>/<code>ELSE IF</code> statements is evaluated from top to bottom. At most, only one branch\nwill be executed: the first one with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEVALUATE X\n   WHEN 1\n       ...\n   WHEN 5\n       ...\n   WHEN 3\n       ...\n   WHEN 1     *&gt; Noncompliant\n       ...\nEND-EVALUATE.\n\nIF X = 1\n  ...\nELSE\n  IF X = 2\n    ...\n  ELSE\n    IF X = 1    *&gt; Noncompliant\n      ...\n    END-IF\n  END-IF\nEND-IF.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEVALUATE X\n   WHEN 1\n       ...\n   WHEN 5\n       ...\n   WHEN 3\n       ...\nEND-EVALUATE.\n\nIF X = 1\n  ...\nELSE\n  IF X = 2\n    ...\n  ELSE\n    IF X = 3\n      ...\n    END-IF\n  END-IF\nEND-IF.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "Identical expressions should not be used on both sides of a binary operator",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1764",
    "tags": ["bug", "cert"],
    "description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of arithmetic operators, having the same value on both\nsides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code> and <code>+</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n* always true\n  IF X = X\n    PERFORM SECTION1.\n  END-IF.\n\n* always false\n  IF X &lt;&gt; X\n    PERFORM SECTION2.\n  END-IF.\n\n* if the first one is true, the second one is too\n  IF X = Y AND X = Y\n    PERFORM SECTION3.\n  END-IF.\n\n* if the first one is true, the second one is too\n  IF X = Y OR X = Y\n    PERFORM SECTION4.\n  END-IF.\n\n* always 1\n  COMPUTE X = Y / Y.\n\n* always 0\n  COMPUTE X = Y - Y.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "Paragraphs should not be redefined",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1723",
    "tags": ["bug", "pitfall"],
    "description": "<p>Having two paragraphs with the same name in the same section or in no section at all is bad practice. At best, each copy contains the same code,\nand the redefinition is simply useless, duplicated code. At worst, the paragraphs contain different logic, potentially leading to confusion and\nunexpected results as a programmer who was aware of the first paragraph definition inadvertently invokes the second. For these reasons, paragraphs\nwith duplicated names should be either removed or renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n LOAD-DATA.\n     EXEC SQL\n         INSERT INTO EMP (EMPNO, ENAME, DEPTNO)\n             VALUES (:EMP-NUMBER, :EMP-NAME, :DEPT-NUMBER)\n     END-EXEC.\n\n LOAD-DATA.\n     IF EMP-NUMBER = ZERO\n         MOVE FALSE TO VALID-DATA\n         PERFORM GET-EMP-NUM UNTIL VALID-DATA = TRUE\n     ELSE\n         EXEC SQL DELETE FROM EMP\n             WHERE EMPNO = :EMP-NUMBER\n         END-EXEC\n         ADD 1 TO DELETE-TOTAL.\n     END-IF.\n\n LOAD-DATA.\n     EXEC SQL\n         INSERT INTO EMP (EMPNO, ENAME, DEPTNO)\n             VALUES (:EMP-NUMBER, :EMP-NAME, :DEPT-NUMBER)\n     END-EXEC.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n LOAD-DATA.\n     EXEC SQL\n         INSERT INTO EMP (EMPNO, ENAME, DEPTNO)\n             VALUES (:EMP-NUMBER, :EMP-NAME, :DEPT-NUMBER)\n     END-EXEC.\n\n CLEAR-EMP.\n     IF EMP-NUMBER = ZERO\n         MOVE FALSE TO VALID-DATA\n         PERFORM GET-EMP-NUM UNTIL VALID-DATA = TRUE\n     ELSE\n         EXEC SQL DELETE FROM EMP\n             WHERE EMPNO = :EMP-NUMBER\n         END-EXEC\n         ADD 1 TO DELETE-TOTAL.\n     END-IF.\n</pre>\n\n"
  }, {
    "summary": "Variables should not be self-assigned",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1656",
    "tags": ["cert"],
    "description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET NAME TO NAME.    *&gt; Noncompliant\nMOVE NAME TO NAME.   *&gt; Noncompliant\nCOMPUTE NAME = NAME. *&gt; Noncompliant\nEXEC SQL\n  UPDATE PERSON\n    SET NAME = NAME  -- Noncompliant\n  WHERE ID = :PERSON_ID\nEND-EXEC.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSET NAME TO NEW_NAME.\nMOVE NEW_NAME TO NAME.\nCOMPUTE NAME = NEW_NAME.\nEXEC SQL\n  UPDATE PERSON\n    SET NAME = :NEW_NAME\n  WHERE ID = :PERSON_ID\nEND-EXEC.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "SQL statements should not join too many tables",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1631",
    "tags": ["performance", "bug", "brain-overload", "sql"],
    "description": "<p>When you need access to data from multiple tables, it is more efficient, effective, and understandable to use pre-built views than to select the\ndata from a large number of tables - effectively creating in-memory views - at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 3 joined tables:</p>\n<pre>\nSELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME\nFROM PERSONS\n  INNER JOIN COUNTRIES ON COUNTRIES.ID = PERSON.COUNTRY_ID\n  INNER JOIN GENRES ON GENRES.ID = PERSONS.GENRE_ID\n  INNER JOIN PROFESSIONS ON PROFESSIONS.ID = PERSONS.PROFESSIONS_ID  -- Noncompliant; this is table #4\nWHERE COUNTRIES.CODE = 'US'\n\nSELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME\nFROM PERSONS, COUNTRIES, GENRES, PROFESSIONS -- Noncompliant\nWHERE COUNTRIES.CODE = 'US' AND COUNTRIES.ID = PERSON.COUNTRY_ID AND GENRES.ID = PERSONS.GENRE_ID AND PROFESSIONS.ID = PERSONS.PROFESSIONS_ID\n</pre>\n\n"
  }, {
    "summary": "\"EXIT PROGRAM\" should be the last statement of a sequence",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1577",
    "tags": ["bug", "unused"],
    "description": "<p>There should not be any statements after <code>EXIT PROGRAM</code>. Such statements cannot be reached, and are therefore dead code. Dead code makes\na program more complex and therefore more difficult to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  PROCEDURE DIVISION.\n    PARAGRAPH1.\n      MOVE A TO B.\n      EXIT PROGRAM.   &gt;NOK as the following \"MOVE B TO C\" statement will never be called\n      MOVE B TO C.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  PROCEDURE DIVISION.\n    PARAGRAPH1.\n      MOVE A TO B.\n      EXIT PROGRAM.\n</pre>\n\n"
  }, {
    "summary": "\"SORT\" should not be used",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1569",
    "tags": ["performance", "bug"],
    "description": "<p>You should avoid using the <code>SORT</code> statement because it is inefficient. Use external tools to sort large numbers of records instead.</p>\n\n"
  }, {
    "summary": "\"MERGE\" should not be used",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1561",
    "tags": ["performance", "bug"],
    "description": "<p>You should avoid using the <code>MERGE</code> statement because it is inefficient. Instead, external tools should be used to merge.</p>\n\n"
  }, {
    "summary": "\"STOP RUN\" or \"GOBACK\" should be the last statement of a sequence",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1475",
    "tags": ["bug", "unused"],
    "description": "<p>Any statement after a <code>STOP RUN</code> or <code>GOBACK</code> is unreachable and therefore dead code which should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPARAGRAPH1.\n  MOVE A TO B.\n  STOP RUN.\n  MOVE B TO C.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPARAGRAPH1.\n  MOVE A TO B.\n  MOVE B TO C.\n  STOP RUN.\n</pre>\n\n"
  }, {
    "summary": "SQL EXISTS subqueries should not be used ",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1138",
    "tags": ["performance", "bug", "sql"],
    "description": "<p>SQL queries that use <code>EXISTS</code> subqueries are inefficient because the subquery is re-run for every row in the outer query's table. There\nare more efficient ways to write most queries, ways that do not use the <code>EXISTS</code> condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT e.name\nFROM employee e\nWHERE EXISTS (SELECT * FROM department d WHERE e.department_id = d.id AND d.name = 'Marketing')\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT e.name\nFROM employee e INNER JOIN department d\n  ON e.department_id = d.id AND d.name = 'Marketing'\n</pre>\n\n"
  }, {
    "summary": "\"BINARY\" variables should be used to declare variable-length table sizes",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3671",
    "tags": ["performance"],
    "description": "<p>When the size of a variable-length table is <code>DEPENDING ON</code> a non-<code>BINARY</code>/<code>COMP</code> variable, use of that table is\ninefficient because a conversion must be done every time the table is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n01 VARS\n    05 TABLE_SIZE   PIC 9(4).\n    05 MY_TABLE OCCURS 1 TO 10\n                        DEPENDING ON TABLE_SIZE  *&gt; Noncompliant; TABLE-SIZE isn't BINARY or COMP\n                        PIC X(10).\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01 VARS\n    05 TABLE_SIZE   PIC 9(4) BINARY.\n    05 MY_TABLE OCCURS 1 TO 10\n                        DEPENDING ON TABLE_SIZE\n                        PIC X(10).\n</pre>\n\n"
  }, {
    "summary": "Binary variables should be used for table subscript access",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3632",
    "tags": ["performance"],
    "description": "<p>In general, the clause <code>INDEXED BY</code> should be used whenever possible when handling COBOL tables. If it's not possible, then avoid using\na numeric display variable to access the table's elements. Instead, use a <code>BINARY</code>/<code>COMP</code> variable, which the processor can\nhandle more efficiently.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n       01 SUBS PIC 9(5).\n       01 INVENTORY-RECORD.\n          05 Field-A PIC X OCCURS 10000 TIMES.\n       ...\n       PERFORM VARYING SUBS FROM 1 BY 1 UNTIL SUBS &gt; 10000\n         MOVE ITEM1 TO Field-A (SUBS)      *&gt; Noncompliant\n       END-PERFORM.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n       01 SUBS PIC 9(5) COMP.\n       01 INVENTORY-RECORD.\n          05 Field-A PIC X OCCURS 10000 TIMES.\n       ...\n       PERFORM VARYING SUBS FROM 1 BY 1 UNTIL SUBS &gt; 10000\n         MOVE ITEM1 TO Field-A (SUBS)\n       END-PERFORM.\n</pre>\n<p>or </p>\n<pre>\n       01 INVENTORY-RECORD.\n          05 Field-A PIC X OCCURS 10000 TIMES INDEXED BY IDX1.\n       ...\n       PERFORM VARYING IDX1 FROM 1 BY 1 UNTIL IDX1 &gt; 10000\n         MOVE ITEM1 TO Field-A (IDX1)\n       END-PERFORM.\n</pre>\n\n"
  }, {
    "summary": "Conditional variables should not be compared with literals",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3582",
    "tags": ["clumsy"],
    "description": "<p>88-level variables, also known as \"condition name\" variables, each have a name, a value or set of values, and a \"parent\" variable. Those parent\nvariables are called \"conditional variables\".</p>\n<p>Each 88-level variable can be seen as a short-cut conditional for testing the value of the parent: <code>IF MY-88</code> will intrinsically return\n<code>true</code> if the parent value matches <code>MY-88</code>'s value, and <code>false</code> if it does not. </p>\n<p>Thus, testing a conditional variable against a literal value is redundant and confusing. Just use the 88-levels instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n01 COLOR PIC X\n  88 YELLOW VALUE 'Y'\n  88 GREEN VALUE 'G'\n  88 RED VALUE 'R'\n...\nIF COLOR = 'G' *&gt; Noncompliant\n...\nEND-IF\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01 COLOR PIC X\n  88 YELLOW VALUE 'Y'\n  88 GREEN VALUE 'G'\n  88 RED VALUE 'R'\n...\nIF GREEN\n...\nEND-IF\n</pre>\n\n"
  }, {
    "summary": "Variables of different numeric formats should not be compared",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3581",
    "tags": ["performance"],
    "description": "<p>The comparison of numeric values of different formats is inefficient. For instance, comparing a <code>COMP-3</code> with a <code>COMP-4</code>\ncauses a performance drag because conversions are required under the covers before the comparison.</p>\n<p>This rule raises an issue when variables with different <code>USAGE</code> clauses, or different numbers of decimal places are compared.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n01 SUB1 PIC 9999 BINARY\n01 WS-DISPLAY-1\tPIC 9(12)\n01 WS-PACKED-DEC PIC 9(12)V9(2) COMP-3\n01 WS-BIN PIC S9999 COMP-4\n01 WS-DISPLAY-2\tPIC 9(4)\n\nPERFORM VARYING SUB1 FROM WS-DISPLAY-1\nBY WS-PACKED-DEC\nUNTIL WS-BIN &gt; WS-DISPLAY-2  *&gt; Noncompliant\n* ...\nEND-PERFORM\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01 SUB1 PIC 9999 BINARY\n01 WS-DISPLAY-1\tPIC 9(12)\n01 WS-PACKED-DEC PIC 9(12)V9(2) COMP-4\n01 WS-BIN PIC S9999 COMP-4\n01 WS-DISPLAY-2\tPIC 9(4)\n\nPERFORM VARYING SUB1 FROM WS-DISPLAY-1\nBY WS-PACKED-DEC\nUNTIL WS-BIN &gt; WS-DISPLAY-2\n* ...\nEND-PERFORM\n</pre>\n\n"
  }, {
    "summary": "Conditions should not use too many distinct data items",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2982",
    "tags": ["brain-overload"],
    "description": "<p>The number of distinct data items used in a condition (<code>IF</code>, <code>EVALUATE</code>, ...) should not exceed a defined threshold.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default default threshold of 3:</p>\n<pre>\nIF WS-FOO(1) = 1 OR *&gt; 1st data item\nWS-FOO(2) = 2 OR\nWS-FOO(3) = 3 OR\nWS-BAR = 4 OR *&gt; 2nd data item\nWS-BAZ = 5 OR *&gt; 3rd data item\nWS-QUX = 42 *&gt; Noncompliant; 4th data item\nEND-IF.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIF WS-FOO(1) = 1 OR\nWS-FOO(2) = 2 OR\nWS-FOO(3) = 3 OR\nWS-BAR = 4 OR\nWS-BAZ = 42\nEND-IF.\n</pre>\n\n"
  }, {
    "summary": "Complex conditions should not contain redundant sub-conditions",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2589",
    "tags": ["cwe", "misra", "cert", "redundant"],
    "description": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n   IF BAR = 4\n*  Noncompliant: due to the nesting IF statement, we know that BAR = 4 here and so\n*  what's the point of testing again that BAR = 4 ?\n     IF FOO = \"a\" AND BAR = 4\n       DISPLAY \"something\"\n     END-IF.\n     ...\n   END-IF\n</pre>\n<pre>\n*  Noncompliant: by definition BAR is greater than 0 if BAR = 4,\n*  so the condition BAR &gt; 0 should be removed\n   IF BAR = 4 AND &gt; 0 THEN DISPLAY \"something\".\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n   IF BAR = 4\n     IF FOO = \"a\"\n       DISPLAY \"something\"\n     END-IF.\n     ...\n   END-IF\n</pre>\n<pre>\n   IF BAR = 4 THEN DISPLAY \"something\".\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "Two branches in a conditional structure should not have exactly the same implementation",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1871",
    "tags": ["design", "suspicious"],
    "description": "<p>Having two <code>WHEN</code> clauses in the same <code>EVALUATE</code> statement or two branches in the same <code>IF</code> structure with the\nsame implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then they should be\ncombined, for an <code>IF</code> structure or one should fall through to the other for an <code>EVALUATE</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEVALUATE X\n  WHEN 1\n    PERFORM SECTION1\n  WHEN 2\n    PERFORM SECTION2\n  WHEN 3              *&gt; Noncompliant; duplicates WHEN 1's implementation\n    PERFORM SECTION1\nEND-EVALUATE.\n\nIF X = 1\n  PERFORM SECTION1\nELSE\n  IF X &gt; 10\n    PERFORM SECTION2\n  ELSE                *&gt; Noncompliant\n    PERFORM SECTION1\n  END-IF\nEND-IF.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEVALUATE X\n  WHEN 1\n  WHEN 3\n    PERFORM SECTION1\n  WHEN 2\n    PERFORM SECTION2\nEND-EVALUATE.\n\nIF X = 1 OR X &lt;= 10\n  PERFORM SECTION1\nELSE\n  PERFORM SECTION2\nEND-IF.\n</pre>\n<p>or</p>\n<pre>\nEVALUATE X\n  WHEN 1\n    PERFORM SECTION1\n  WHEN 2\n    PERFORM SECTION2\n  WHEN 3\n    PERFORM SECTION3\nEND-EVALUATE.\n\nIF X = 1\n  PERFORM SECTION1\nELSE\n  IF X &gt; 10\n    PERFORM SECTION2\n  ELSE\n    PERFORM SECTION3\n  END-IF\nEND-IF.\n</pre>\n\n"
  }, {
    "summary": "SQL \"LIKE\" clauses should not start with wildcard characters",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1739",
    "tags": ["performance", "sql"],
    "description": "<p>When the value of a <code>LIKE</code> clause starts with '%' or '_', indexes on the searched column are ignored, and a full table scan is performed\ninstead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT FIRST_NAME, LAST_NAME FROM PERSONS\nWHERE LAST_NAME LIKE '%PONT'\n</pre>\n\n"
  }, {
    "summary": "Column names should be used in a SQL \"ORDER BY\" clause",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1735",
    "tags": ["sql"],
    "description": "<p>Even though the <code>ORDER BY</code> clause supports using column numbers, doing so makes the code difficult to read and maintain. Therefore the\nuse of column names is preferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT FIRST_NAME, LAST_NAME, REGION\nFROM PERSONS\nORDER BY 2, 1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT FIRST_NAME, LAST_NAME, REGION\nFROM PERSONS\nORDER BY LAST_NAME, FIRST_NAME\n</pre>\n\n"
  }, {
    "summary": "Declared files should be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1575",
    "tags": ["unused"],
    "description": "<p>You should avoid keeping in programs files that are declared but never used. This is visual pollution and makes the program less readable.</p>\n\n"
  }, {
    "summary": "Columns to be read with a \"SELECT\" statement should be clearly defined",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1499",
    "tags": ["performance", "sql"],
    "description": "<p><code>SELECT *</code> should be avoided because it releases control of the returned columns and could therefore lead to errors and potentially to\nperformance issues.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT *\n       FROM persons\n       INTO newyorkers\n       WHERE city = 'NEW YORK'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT firstname, lastname\n       FROM persons\n       INTO newyorkers\n       WHERE city = 'NEW YORK'\n</pre>\n\n"
  }, {
    "summary": "Ending words should be aligned with what they close",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1316",
    "tags": ["convention"],
    "description": "<p>Aligning opening and ending words of statements is critical to keep the code readable, especially when blocks contain nested statements.</p>\n<p>For <code>IF</code> statements, this rule also checks the alignment of the <code>ELSE</code> word.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIF SOME-STATUS = 1\n  DISPLAY something\n      END-IF.  *&gt; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIF SOME-STATUS = 1\n  DISPLAY something\nEND-IF.\n</pre>\n\n"
  }, {
    "summary": "\"PERFORM\" calls should not be nested too deeply",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1306",
    "tags": ["brain-overload"],
    "description": "<p>Call stacks containing lot of <code>PERFORM</code> statements is a key ingredient for making what's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<p>This rule supports both sections and paragraphs. </p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 3:</p>\n<pre>\nPERFORM FIRST.\n\nFIRST.\n  PERFORM SECOND.\n\nSECOND.\n  PERFORM THIRD.\n\nTHIRD.\n  PERFORM FOURTH.  *&gt; Noncompliant\n\nFOURTH.\n  DISPLAY something.\n</pre>\n\n"
  }, {
    "summary": "Sections should be documented",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1305",
    "tags": ["convention"],
    "description": "<p>Every section should be commented to explain its goal and how it works. This comment can be placed either just before or just after the section\nlabel.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n    UNCOMMENTED-SECTION SECTION.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n* Some comments\n    CORRECTLY-COMMENTED-SECTION SECTION.\n\n    ANOTHER-CORRECTLY-COMMENTED-SECTION SECTION.\n* Some comments\n</pre>\n\n"
  }, {
    "summary": "Sections should not be empty",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1303",
    "tags": ["unused"],
    "description": "<p>There is no good reason to keep an empty and therefore valueless section. Such sections should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFIRST SECTION.\n  MOVE A TO B.\n\nSECOND SECTION.  *&gt; Noncompliant; empty\n\nTHIRD SECTION.\n\nsomeParagraph.\n  DISPLAY B.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nFIRST SECTION.\n  MOVE A TO B.\n\nTHIRD SECTION.\n\nsomeParagraph.\n  DISPLAY B.\n</pre>\n\n"
  }, {
    "summary": "Nested SQL \"SELECT\" statements should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1282",
    "tags": ["performance", "brain-overload", "sql"],
    "description": "<p>Having several levels of nested SQL SELECT statements makes the code difficult to read and should therefore be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With an allowed nesting level of 2:</p>\n<pre>\n*&gt; Non-Compliant\nEXEC SQL\n  SELECT * FROM my_table1 WHERE\n    my_column1 IN\n      (SELECT my_column2 FROM my_table2\n        WHERE my_column3 IN\n          (SELECT my_column4 FROM my_table3))\nEND-EXEC.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEXEC SQL\n  SELECT * FROM my_table\nEND-EXEC.\n</pre>\n\n"
  }, {
    "summary": "Sections of code should not be \"commented out\"",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-125",
    "tags": ["misra", "unused"],
    "description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>\n\n"
  }, {
    "summary": "Statements should be on separate lines",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-122",
    "tags": ["convention"],
    "description": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMOVE '1' TO OCTET-1 MOVE '2' TO OCTET-2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMOVE '1' TO OCTET-1\nMOVE '2' TO OCTET-2\n</pre>\n<h2>Exceptions</h2>\n<p>Control flow statements with a single nested statement are ignored.</p>\n<pre>\nIF x &gt; 0 THEN DISPLAY \"positive\". *&gt; Compliant\n</pre>\n\n"
  }, {
    "summary": "Redundant pairs of parentheses should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1110",
    "tags": ["confusing"],
    "description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCOMPUTE x = (y / 2 + 1).  *&gt; Compliant even if the parenthesis are ignored by the compiler\nCOMPUTE y = 2 * ((x + 1)).  *&gt; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCOMPUTE x = (y / 2 + 1).\nCOMPUTE y = 2 * (x + 1).\n</pre>\n\n"
  }, {
    "summary": "Collapsible \"IF\" statements should be merged",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1066",
    "tags": ["clumsy"],
    "description": "<p>Merging collapsible <code>IF</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n       IF CONDITION1 THEN\n         IF CONDITION2 THEN\n           ...\n         END-IF\n       END-IF.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n       IF CONDITION1 AND CONDITION2 THEN\n         ...\n       END-IF.\n</pre>\n\n"
  }, {
    "summary": "\"WITH DEBUGGING MODE\" should not be used",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1685",
    "tags": ["cwe", "security"],
    "description": "<p>Debug statements (ones with 'D' or 'd' in the indicator area) should not be executed in production, but the <code>WITH DEBUGGING MODE</code> clause\nactivates all debug lines, which could expose sensitive information to attackers. Therefore the <code>WITH DEBUGGING MODE</code> clause should be\nremoved.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSOURCE-COMPUTER. IBM-370 WITH DEBUGGING MODE.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSOURCE-COMPUTER. IBM-370.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n</ul>\n\n"
  }, {
    "summary": "Unused \"TABLE\" declarations should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3625",
    "tags": ["unused", "sql"],
    "description": "<p>If a SQL <code>TABLE</code> is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEXEC SQL\n DECLARE DSN8B10.DEPT TABLE  -- Noncompliant\n   ( ...  )\nEND-EXEC.\n</pre>\n\n"
  }, {
    "summary": "Binary search should be used for large tables",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3595",
    "tags": ["performance"],
    "description": "<p>The binary algorithm used by <code>SEARCH ALL</code> is far more efficient for large tables than the one used by <code>SEARCH</code>. While it's\nnot always possible to use <code>SEARCH ALL</code>, it should be the preferred algorithm.</p>\n<p>This rule raises an issue when tables with more than the specified number of possible entries are searched using <code>SEARCH</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Using the default threshold of 500:</p>\n<pre>\n01  MY-TABLE.\n05 MY-TAB-ELEM OCCURS 300000\n     INDEXED BY MY-TAB-IND.\n  10 MY-ATTR1                        PIC X(07).\n  10 MY-ATTR2                        PIC X(07).\n  10 MY-ATTR3                        PIC X(07).\n\n01  MY-TAB2.\n05 MY-TAB2-ELEM          OCCURS 300000\n     ASCENDING MY-ATTR1  *&gt; Key is defined. Why not use it?\n     INDEXED BY MY-TAB-IND.\n  10 MY-ATTR1                        PIC X(07).\n  10 MY-ATTR2                        PIC X(07).\n  10 MY-ATTR3                        PIC X(07).\n\n01  MY-TAB-IND             PIC 9(08).\n\n\nSEARCH MY-TAB-ELEM.  *&gt; Noncompliant; define a key &amp; use binary search\n       AT END...\n\nSEARCH MY-TAB2-ELEM.  *&gt; Noncompliant\n       AT END...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01  MY-TABLE.\n05 MY-TAB-ELEM OCCURS 300000\n     ASCENDING MY-ATTR1\n     INDEXED BY MY-TAB-IND.\n  10 MY-ATTR1                        PIC X(07).\n  10 MY-ATTR2                        PIC X(07).\n  10 MY-ATTR3                        PIC X(07).\n\n01  MY-TAB2.\n05 MY-TAB2-ELEM          OCCURS 300000\n     ASCENDING MY-ATTR1\n     INDEXED BY MY-TAB-IND.\n  10 MY-ATTR1                        PIC X(07).\n  10 MY-ATTR2                        PIC X(07).\n  10 MY-ATTR3                        PIC X(07).\n\n01  MY-TAB-IND             PIC 9(08).\n\n\nSEARCH ALL MY-TAB-ELEM.\n       AT END...\n\nSEARCH ALL MY-TAB2-ELEM.\n       AT END...\n</pre>\n\n"
  }, {
    "summary": "Arithmetic expressions and scalar functions should not be used in \"WHERE\" conditions",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1740",
    "tags": ["performance", "sql"],
    "description": "<p>Using a scalar function or an arithmetic expression in a <code>WHERE</code> condition can prevent the database from using indexes on the relevant\ncolumn(s), and could therefore lead to performance issues. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT * FROM MY_TABE WHERE C2 = C3 + :HostVar1  -- Noncompliant\n\nSELECT * FROM MY_TABLE WHERE YEAR(BIRTHDATE) &gt; 2000  -- Noncompliant\n</pre>\n\n"
  }, {
    "summary": "\"OCCURS 1\" should not be used on data items",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1682",
    "tags": ["performance", "clumsy"],
    "description": "<p>The use of an array structure is useless when the array only has one element. Using an array structure anyway can impact performance and decrease\nthe readability of the source code. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n03 WS-LIBELLE OCCURS 1.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n03 WS-LIBELLE.\n</pre>\n\n"
  }, {
    "summary": "Program names should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1544",
    "tags": ["convention"],
    "description": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all [report/]program names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the regular expression <code>^([A-Z0-9_]*|[a-z0-9_]*)$</code>:</p>\n<pre>\n    IDENTIFICATION DIVISION.\n       PROGRAM-ID. MY-PROGRAM.      *&gt; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n    IDENTIFICATION DIVISION.\n       PROGRAM-ID. MY_PROGRAM.\n</pre>\n\n"
  }, {
    "summary": "\"UPDATE\" and \"DELETE\" statements should not impact multiple rows",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3481",
    "tags": ["bug", "suspicious", "sql"],
    "description": "<p>Since databases don't offer \"Are you sure?\" dialogs, it's best to be very certain of what you're changing before you do it. <code>UPDATE</code> and\n<code>DELETE</code> statements that don't precisely limit their effects to single rows risk changing more than was intended. That's why they should be\nreviewed carefully.</p>\n<p>This rule raises an issue when an <code>UPDATE</code> or <code>DELETE</code> statement's <code>WHERE</code> clause does not use precisely either a\nunique index or all parts of the table's primary key. That includes both cases where they are omitted in whole or in part, and when they are used but\ncould still describe multiple rows. E.G. <code>WHERE AGE = 34</code>, and <code>WHERE TABLE_ID &gt; 0 AND TABLE_ID &lt; 40</code>.</p>\n<p><strong>Note</strong> That this rule raises issues only when a database catalog is provided during the SonarQube analysis.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCREATE table my_table (\n     compound_a integer not null,\n     compound_b integer not null,\n     column_c varchar(50),\n     primary key (compound_a, compound_b)\n);\n\nDELETE FROM my_table\nWHERE compound_b=4;  -- Noncompliant\n</pre>\n<h2>Exceptions</h2>\n<p>Statements using a cursor and <code>WHERE CURRENT OF</code> are ignored.</p>\n\n"
  }, {
    "summary": "File data items should not exceed 63,488 characters",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1273",
    "tags": ["bug", "microfocus"],
    "description": "<p>This a limit of the Microfocus COBOL compiler.</p>\n<h2>See</h2>\n<ul>\n  <li> <a\n  href=\"http://supportline.microfocus.com/documentation/books/sx20books/prlimi.htm\">http://supportline.microfocus.com/documentation/books/sx20books/prlimi.htm</a> </li>\n</ul>\n\n"
  }, {
    "summary": "\"ALTER\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1555",
    "tags": ["brain-overload"],
    "description": "<p>The <code>ALTER</code> statement should not be used. Trying to understand a program where the instruction as it appears may not be the actual\ninstruction encountered by the program is very difficult, if not impossible.</p>\n<p>If you need to change the processing sequence due to a certain condition, use <code>PERFORM</code> or <code>GO TO</code> instead.</p>\n\n"
  }, {
    "summary": "Track lack of copyright and license headers",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1451",
    "tags": [],
    "description": "<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n *\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n</pre>\n\n"
  }, {
    "summary": "\"ACCEPT\" should not be used",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3394",
    "tags": ["security"],
    "description": "<p>The <code>ACCEPT</code> keyword does no editing or error checking of the data it stores, therefore its use can be dangerous. For this reason,\n<code>ACCEPT</code> should be avoided. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n 01 USER-INPUT PIC X(4).\n\n  GET-USER-INPUT.\n       MOVE 'N' TO WS-NUMERIC.\n       PERFORM UNTIL WS-NUMERIC = 'Y'\n           DISPLAY 'ENTER YOUR 4 DIGIT RECORD NUMBER: ' NO ADVANCING\n           ACCEPT USER-RECORD *&gt; Noncompliant\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores uses of <code>ACCEPT FROM</code> with date/time-related inputs.</p>\n\n"
  }, {
    "summary": "\"0 RECORDS\" should be specified for \"BLOCK CONTAINS\"",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3891",
    "tags": ["suspicious", "clumsy"],
    "description": "<p>The number of <code>RECORDS</code> or <code>CHARACTERS</code> specified in a <code>BLOCK CONTAINS</code> clause is used to determine block size.\nSpecify <code>10 RECORDS</code>, and the block will be exactly 10x the length of the record. But that may not be the right size, depending on the\nenvironment. Instead, it is considered a best practice to specify <code>0 RECORDS</code>, so the block size will be calculated automatically.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n       FD OUTFILE1\n           BLOCK CONTAINS 32760 RECORDS     &gt;* Noncompliant\n           RECORDING MODE V.\n       FD OUTFILE2\n           BLOCK CONTAINS 1024 CHARACTERS.  &gt;* Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n       FD OUTFILE1\n           BLOCK CONTAINS 0 RECORDS\n           RECORDING MODE V.\n       FD OUTFILE2\n           BLOCK CONTAINS 0 RECORDS.\n</pre>\n<h2>Exceptions</h2>\n<p><code>0 CHARACTERS</code> is compliant.</p>\n\n"
  }, {
    "summary": "SQL \"INSERT\" statements should explicitly list the columns to be set",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1745",
    "tags": ["bug", "sql"],
    "description": "<p>An <code>INSERT</code> statement that does not explicitly list the columns being inserted into, as well as the values being inserted, is dependent\nfor correct functioning on the structure of the table not changing. Additionally, not having the explicit column list degrades the readability and\nunderstandability of the code. Therefore, <code>INSERT</code> statements should always contain an explicit column list.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nINSERT INTO PERSONS VALUES (1, 'DUPONT', 'Marcel')\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nINSERT INTO PERSONS (ID, LAST_NAME, FIRST_NAME)\nVALUES (1, 'DUPONT', 'Marcel')\n</pre>\n\n"
  }, {
    "summary": "\"PROGRAM-ID\"s should match their file names",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1588",
    "tags": ["bug", "pitfall"],
    "description": "<p>The <code>PROGRAM-ID</code> declaration at the top of a program must exactly match the filename of the program. If these do not match, functions\nlike <code>CANCEL</code> may not be able to cancel the program, leaving it resident in memory. Debugging can also be affected because program\nbreakpoints may not match the program name.</p>\n\n"
  }, {
    "summary": "Data value clauses should not be used in linkage sections",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1570",
    "tags": ["bug", "suspicious"],
    "description": "<p>Using a data value clause in the <code>LINKAGE SECTION</code> can lead to unexpected behavior at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nLINKAGE SECTION.\n\n01 CAR-ID PIC X(20) VALUE IS \"VOLVO\".   *&gt; Noncompliant\n\n01  EMP-TYPE     PIC X.\n   88   FULL-TIME-EMPLOYEE VALUE \"F\".   *&gt; Compliant; this is a condition name\n   88   PART-TIME-EMPLOYEE VALUE \"P\".\n\n01 TRAIN-ID PIC X(20)\n</pre>\n\n"
  }, {
    "summary": "\"LOCK TABLE\" should not be used",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1554",
    "tags": ["bug", "bad-practice", "sql"],
    "description": "<p>The SQL <code>LOCK</code> command can be used to lock a DB table. Even if the use of the command can be fully justified, it should be done rarely,\nand very carefully.</p>\n\n"
  }, {
    "summary": "\"GOBACK\" should be used instead of \"STOP RUN\"",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1476",
    "tags": ["bug"],
    "description": "<p>When using some transaction managers like IBM IMS, each COBOL program is in fact considered a sub-program by the transaction manager. The\n<code>GOBACK</code> statement returns control to the transaction manager, but using <code>STOP RUN</code> might cause unpredictable results or\nabnormal termination.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSTOP RUN\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nGOBACK\n</pre>\n\n"
  }, {
    "summary": "\"PERFORM ... THRU ...\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1713",
    "tags": ["pitfall"],
    "description": "<p><code>PERFORM paragraph1</code> is preferred over <code>PERFORM paragraph1 THRU paragraph2</code> because it adheres more closely to the structured\nprogramming precepts of having a single entry point and a single exit point. Additionally, mixing the two approaches can lead to errors. </p>\n\n"
  }, {
    "summary": "\"COMMAREA\" length should be specified in \"CICS Link\" and \"CICS Xctl\" commands",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1591",
    "tags": ["bad-practice"],
    "description": "<p>When using <code>CICS XCTL</code> or <code>CICS LINK</code>, it is a bad practice not to specify the length of the communication area.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  EXEC CICS LINK PROGRAM ('SPI2TCV') COMMAREA (SPI-PARMCICS)  RESP (WS-RESP)  *&gt; Noncompliant\n\n  EXEC CICS XCTL PROGRAM ('P4DERROR') COMMAREA (Y4DERROR)  *&gt; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  EXEC CICS LINK PROGRAM ('SPI2TCV') COMMAREA (SPI-PARMCICS) LENGTH (SPI-LONG) RESP (WS-RESP)\n\n  EXEC CICS XCTL PROGRAM ('P4DERROR') COMMAREA (Y4DERROR) LENGTH (Y4FLFIC-Y4DERROR)\n</pre>\n\n"
  }, {
    "summary": "\"EVALUATE ... WHEN\" statements should not contain conditional logic",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1576",
    "tags": ["brain-overload"],
    "description": "<p>Having conditional logic within an <code>EVALUATE ... WHEN</code> statement often leads to large and difficult to read <code>EVALUATE</code>\nstatements. In many cases the presence of conditional logic indicates that the code block within the <code>WHEN</code> clause should be split.</p>\n\n"
  }, {
    "summary": "\"SECTION\" should not be used in a \"PROCEDURE DIVISION\"",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1568",
    "tags": ["brain-overload"],
    "description": "<p>Having <code>SECTION</code>s can lead to having paragraphs with the same name (one in each section), which could become confusing.</p>\n\n"
  }, {
    "summary": "\"REDEFINES\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1567",
    "tags": ["pitfall"],
    "description": "<p>The use of the <code>REDEFINES</code> clause introduces type safety and portability risks, and as such its usage should be avoided where\npossible.</p>\n<p>Redefines have traditionally been used to solve 2 types of problems:</p>\n<ol>\n  <li> Redefines are sometimes used to conserve memory or disk space by compacting many different data types into the same physical data block.\n  However, these days memory and disk size limitations are no longer key concerns, and the priority of this type of optimisation has declined\n  significantly. Where space optimisation is still important, normalisation of data schemas should be considered instead. </li>\n  <li> Redefines are sometimes used as a quick way of reinterpreting data. A good example would be a date which can be interpretted as a single\n  string, or separate day-month-year components. In high-performance areas this will give the fastest reformatting, though where performance is not a\n  concern, a more explicit function gives better long-term flexibility. For instance, if a future change required one of the elements to become\n  variable length rather than fixed length, the redefine approach would not be able to accomodate the change </li>\n</ol>\n\n"
  }, {
    "summary": "The number of \"PERFORM\" statements in a procedure, section, or paragraph should be limited",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1474",
    "tags": ["brain-overload"],
    "description": "<p>The worst nightmare of every COBOL maintenance programmer is a program where you have to follow 12 concatenated <code>PERFORM</code> statements\nbefore you get to the actual processing. This is considered to be the <code>GOTO</code>-less version of spaghetti programming. </p>\n<p>This situation can be avoided by having a mainline procedure at the beginning of the procedure division which concentrates all program control, and\nwhich reads like a map of the program. This mainline procedure should be free from detailed operations such as moving fields, calculations, I/O\noperations, and so on.</p>\n<p>This rule helps ensure that most program control is concentrated in the mainline procedure (the first one in the program) by preventing the other\nprocedures from having more than a predefined threshold of \"PERFORM\" statements.</p>\n\n"
  }, {
    "summary": "Control flow statements should not be nested too deeply",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-134",
    "tags": ["brain-overload"],
    "description": "<p>Nesting too many control flow statements (such as <code>IF</code>, <code>PERFORM</code>, <code>EVALUATE</code>...) should be avoided as it makes\nthe code complex and therefore difficult to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold (maximum allowed control flow statement nesting depth) of 3:</p>\n<pre>\nIF A = 1\n    PERFORM\n        MOVE A TO B\n        PERFORM\n            IF B = 1 *&gt; Noncompliant\n              MOVE \"HI\" TO S1\n            END-IF\n        END-PERFORM\n    END-PERFORM\nEND-IF.\n</pre>\n\n"
  }, {
    "summary": "\"GO TO\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1308",
    "tags": ["brain-overload"],
    "description": "<p>Unstructured programming has been strongly criticized for producing barely readable (spaghetti) code. It offers programmers great freedom, but is\nconsidered a bad approach for creating major projects.</p>\n<p>In COBOL, the use of <code>GO TO</code> statements can lead to unstructured control flows. Eliminating <code>GO TO</code> statements in favor of\n<code>PERFORM</code> statements will aid adherence to a procedural programming approach. However, this change could require heavy refactoring.</p>\n\n"
  }, {
    "summary": "The cyclomatic complexity of a program should not be too high",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1285",
    "tags": [],
    "description": "<p>The cyclomatic complexity of a program should not exceed a defined threshold, otherwise it will be too complex. Complex code can perform poorly,\nand will be difficult to understand and therefore to maintain.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>\n\n"
  }, {
    "summary": "Packed numeric fields should be defined with odd length",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1619",
    "tags": [],
    "description": "<p>The storage of a packed numeric field is most efficient when you code an odd number of digits in the PICTURE description, so that the leftmost byte\nis fully used. Packed-decimal items are handled as fixed-point numbers for arithmetic purposes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n 01 VAL PIC 9(6) COMP-3.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n 01 VAL PIC 9(5) COMP-3.\n</pre>\n\n"
  }, {
    "summary": "\"ORDER BY\" should be specified for cursors",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1592",
    "tags": ["bug", "sql"],
    "description": "<p>When performing cursor processing, the <code>ORDER BY</code> clause not only helps to process the cursor, but it also it insures reproducibility at\nruntime.</p>\n\n"
  }, {
    "summary": "\"CALL\" statement parameters should be initialized",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1586",
    "tags": [],
    "description": "<p>To prevent any unexpected behavior, data items must be initialized before being used by a <code>CALL</code> statement. A data item is considered to\nbe initialized in the three following cases :</p>\n<ul>\n  <li> One of its parents has been initialized </li>\n  <li> It has been defined in the <code>LINKAGE-SECTION</code> </li>\n  <li> The <code>MOVE SPACE[S] TO ...</code> and then the <code>INITIALIZE</code> statements have been sequentially executed on this data item. Both\n  statements are required in that order because the <code>INITIALIZE</code> statement doesn't initialize <code>FILLER</code>s and non-named fields.\n  </li>\n</ul>\n<p>Be aware that activating this rule will impact the overall performance of the analysis.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>\n\n"
  }, {
    "summary": "\"WHERE\" clauses should not contain too many lines",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1581",
    "tags": ["performance", "bug", "brain-overload", "sql"],
    "description": "<p>SQL queries with large <code>WHERE</code> clauses are complex. Complex queries are generally not performant, in addition to being difficult to\nunderstand and therefore to maintain.</p>\n\n"
  }, {
    "summary": "\"UNION\" should not be used in \"SELECT\" statements",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1571",
    "tags": ["performance", "bug", "sql"],
    "description": "<p>Using <code>UNION</code> in SQL <code>SELECT</code> statements should be avoided because it makes queries complex. Complex queries are generally\nnot performant and are difficult to understand and therefore to maintain.</p>\n\n"
  }, {
    "summary": "\"OPEN\" should not be used inside a loop",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1563",
    "tags": ["performance", "bug"],
    "description": "<p>Using the <code>OPEN</code> file statement is costly, and therefore be avoided inside loops. Instead, the file can be saved into a buffer to\nincrease performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  PERFORM UNTIL (NOT DA-OK) OR (Y00CIA-CD-RET-PGM = ZERO)\n     OPEN INPUT inventory-file\n  END-PERFORM.\n</pre>\n\n"
  }, {
    "summary": "\"GROUP BY\" should not be used in SQL \"SELECT\" statements",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1559",
    "tags": ["performance", "bug", "brain-overload", "sql"],
    "description": "<p>Using <code>GROUP BY</code> in SQL <code>SELECT</code> statements should be avoided because it makes queries complex. Complex queries are generally\nnot performant and are difficult to understand and therefore to maintain.</p>\n\n"
  }, {
    "summary": "\"DISTINCT\" should not be used in SQL \"SELECT\" statements",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1557",
    "tags": ["performance", "bug", "bad-practice", "sql"],
    "description": "<p>Using <code>DISTINCT</code> in SQL <code>SELECT</code> statements should be avoided. Not only is this command to remove duplicates not efficient,\nbut a <code>SELECT DISTINCT</code> query indicates that something is not quite right. That is because using the <code>DISTINCT</code> keyword means\nthat redundant data is being pulled from the database and then discarded.</p>\n\n"
  }, {
    "summary": "The \"LIKE\" operator should be used very carefully in SQL \"WHERE\" condition",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1498",
    "tags": ["performance", "bug", "sql"],
    "description": "<p>Using the <code>LIKE</code> operator in SQL <code>WHERE</code> conditions can highly impact the performance of the request. The use of this\noperator should be strongly indicated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT *\n       FROM doktl\n       INTO TABLE text_tab\n       WHERE doktext LIKE srch_str.\n</pre>\n\n"
  }, {
    "summary": "\"GO TO\" statements should not transfer control outside their modules",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1137",
    "tags": ["bug", "unpredictable"],
    "description": "<p><code>GO TO</code> should not be used to transfer control outside the current module, because any implied <code>EXIT</code> points will then be\nignored. A module is either a section, a paragraph, or a set of paragraphs called with the <code>PERFORM ... THRU ...</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n         PERFORM PARAGRAPH1 THRU PARAGRAPH3.     &gt; code contained between PARAGRAPH1 and PARAGRAPH3 is now considered as a module\n         EXIT PROGRAM.\n\n        PARAGRAPH1.\n         MOVE A TO B.\n         IF SOMETHING\n           GO TO PARAGRAPH3     &gt;OK\n         END-IF.\n         IF SOMETHING-ELSE\n           GO TO PARAGRAPH4     &gt;NOK as we leave the module called with \"PERFORM PARGRAPH1 THRU PARAGRAPH3\" statement\n         END-IF.\n\n        PARAGRAPH2.\n         MOVE A TO B.\n\n        PARAGRAPH3.\n         EXIT.\n\n        PARAGRAPH4.\n</pre>\n\n"
  }, {
    "summary": "Limited dependence should be placed on operator precedence rules in expressions",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-864",
    "tags": ["cwe", "misra", "cert"],
    "description": "<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements.</p>\n<p>This rule raises an issue when more than the allowed number of non-like operators are used in a statement without parentheses to make execution\norder explicit.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 2:</p>\n<pre>\nCOMPUTE WSRESULT = WS1 + 5 * WS2 - WS3**2 END-COMPUTE  *&gt; Noncompliant\nCOMPUTE WSRESULT2 = WS1 + 5 + WS2 + WS3 + WS4 END-COMPUTE\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCOMPUTE WSRESULT = WS1 + (5 * WS2) - (WS3**2) END-COMPUTE\nCOMPUTE WSRESULT2 = WS1 + 5 + WS2 + WS3 + WS4 END-COMPUTE\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions </li>\n  <li> MISRA C:2004, 12.2 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>\n  <li> MISRA C++:2008, 5-0-1 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions </li>\n  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_wI\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VoAyAQ\">CERT, EXP00-CPP.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9wHEAw\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/783.html\">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>\n</ul>\n\n"
  }, {
    "summary": "\"OCCURS DEPENDING ON\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3939",
    "tags": ["confusing"],
    "description": "<p><code>OCCURS DEPENDING ON</code> clauses are complicated to use correctly and do not provide any benefits with regard to memory consumption. It is\nbest to avoid them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n01&nbsp; MYTABLEACCOUNT PIC S9(4) BINARY.\n01&nbsp; MYTABLE.\n  05&nbsp; MYITEM OCCURS 1 to 1000 DEPENDING ON MYTABLEACCOUNT.\n&nbsp;&nbsp;  10&nbsp; MYFIELD1 PIC X(8).\n&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp; MYFIELD2 PIC S9(4) BINARY.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01&nbsp; MYTABLE.\n  05&nbsp; MYITEM OCCURS 1000.\n&nbsp;&nbsp;  10&nbsp; MYFIELD1 X(8).\n&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp; MYFIELD2 PIC S9(4) BINARY.\n</pre>\n\n"
  }, {
    "summary": "Condition names should be named for their conditional variables",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3592",
    "tags": ["confusing"],
    "description": "<p>88-level variables, also known as \"condition name\" variables, represent possible values of the \"conditional variables\" they're tied to. Because a\ncondition name can be used to test the value of its conditional variable without any other contextual references to the conditional variable being\ntested, it makes the code easier to understand if the name of the 88-level variable references its conditional variable.</p>\n<p>This rule raises an issue when the name of an 88-level variable does not start with the first characters of the name of its conditional\nvariable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default minimum of 3:</p>\n<pre>\n01 COLOR PIC X.\n  88 YELLOW VALUE 'Y'. *&gt; Noncompliant\n  88 GREEN VALUE 'G'. *&gt; Noncompliant\n  88 RED VALUE 'R'. *&gt; Noncompliant\n\n* ...\nIF GREEN  *&gt; What does this mean?\n* ...\nEND-IF\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01 COLOR PIC X.\n  88 COL-YELLOW VALUE 'Y'.\n  88 COL-GREEN VALUE 'G'.\n  88 COL-RED VALUE 'R'.\n\n* ...\nIF COL-GREEN\n* ...\nEND-IF\n</pre>\n\n"
  }, {
    "summary": "Math should only be performed on computational variables",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3580",
    "tags": ["performance"],
    "description": "<p>Performing math on variables that are declared - explicitly or implicitly - as <code>DISPLAY</code> or <code>NATIONAL</code> is much less efficient\nthan on <code>COMPUTATIONAL</code>, <code>COMP</code>, or <code>BINARY</code> variables. That's because <code>COMP</code> variables, for instance, are\ndefined for binary storage, which makes math on them more efficient. That's why values that are going to be used primarily for math should be declared\nwith a math type. When math isn't a primary use, it may not make sense to change the declared type, but <code>MOVE</code>ing the value to a\n<code>COMP</code> variable and performing the math on it instead would.</p>\n<p>It is important to note however, that <code>COMPUTATIONAL</code>, <code>COMP</code>, and <code>BINARY</code> formats should be used with caution if\nthe variable will be passed to other systems which may not use the same storage format.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n01 W-AMOUNT-VALUE PIC 9(17).\n01 W-AMOUNT-DECIMAL PIC 9.\n\nCOMPUTE W-CONV-AMOUNT = W-AMOUNT-VALUE * 10 ** W-AMOUNT-DECIMAL  *&gt; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01 W-AMOUNT-VALUE PIC 9(17) COMP-5.\n01 W-AMOUNT-DECIMAL PIC 9 COMP-5.\n\nCOMPUTE W-CONV-AMOUNT = W-AMOUNT-VALUE * 10 ** W-AMOUNT-DECIMAL\n</pre>\n\n"
  }, {
    "summary": "\"CALL\" programs should be specified dynamically",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3573",
    "tags": ["bad-practice"],
    "description": "<p>Because statically-called programs must be relinked before they reflect changes in the code, it makes sense to prefer dynamic calls instead.\nFurther, since statically-called programs are included in the caller's load module, those modules could require more main storage than if the calls\nwere dynamic, and the called programs could reside in memory multiple times - one for each caller.</p>\n<p>While static calls are faster, their other disadvantages make dynamic calls the preferred method. Thus, this rule raises an issue when the program\nto <code>CALL</code> is hard-coded, rather than specified in a variable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCALL 'MYPRGM01' USING PARAM1.  *&gt; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n77 PRGM-NAME      PIC X(8) VALUE 'MYPRGM01'.\n[...]\nCALL PRGM-NAME USING PARAM1.\n</pre>\n\n"
  }, {
    "summary": "\"SELECT\" statements should not lead to full table scans",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3483",
    "tags": ["performance", "sql"],
    "description": "<p>There can't be any good reason to do a full table scan on large database tables due to the cost of such operation and the scalability issue that\nmight raise. This rule raises an issue when a <code>SELECT</code> statement doesn't use at least one indexed column in its <code>WHERE</code>\nclause.</p>\n<p><strong>Note</strong> That this rule raises issues only when a database catalog is provided during the SonarQube analysis.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT * FROM USERS WHERE NAME = :name  -- non compliant when NAME column is not indexed\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>SELECT</code> statements not having any <code>WHERE</code> clauses; they are covered by other rules: S1590,\nSQL.SelectWithNoWhereClauseCheck</p>\n\n"
  }, {
    "summary": "Track parsing failures",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2260",
    "tags": ["suspicious"],
    "description": "<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files\nthat do not parse but also to easily find out why they do not parse.</p>\n\n"
  }, {
    "summary": "Files should not contain too many sections",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1755",
    "tags": ["brain-overload"],
    "description": "<p>COBOL files containing a large number of sections are by definition difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>Sections contained in copybooks are not taken into account when computing the total number of sections in a program.</p>\n\n"
  }, {
    "summary": "SQL \"OR\" clauses testing equality on the same identifier should be replaced by an \"IN\" clause",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1738",
    "tags": ["convention", "sql"],
    "description": "<p>The main motivation for this rule is to improve the readability of relevant SQL code. From one database optimiser to another, the performance of\n<code>IN</code> and <code>OR</code> clauses to specify a list of possible values for a column can be slightly different, but this difference is\nusually very minor. What is not minor is the difference in readability between the two styles, which is why an <code>IN</code> clause is preferred.\n</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT * FROM PERSONS\nWHERE AGE = 10 OR AGE = 13 OR AGE = 18 OR AGE &lt; 5\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT * FROM PERSONS\nWHERE AGE IN (10, 13, 18) OR AGE &lt; 5\n</pre>\n\n"
  }, {
    "summary": "A SQL \"BETWEEN\" clause should be used instead of \"X>=Y AND X<=Z\"",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1737",
    "tags": ["convention", "sql"],
    "description": "<p>According to SQL-92: </p>\n<blockquote>\n  <p> </p>\n  <p>\"X BETWEEN Y AND Z\" is equivalent to \"X&gt;=Y AND X&lt;=Z\" </p>\n  <p></p>\n</blockquote>\n<p></p>\n<p>Even if the <code>BETWEEN</code> predicate is simply syntactic sugar, using it can improve the readability of a SQL WHERE clause, and is therefore\npreferred. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT * FROM PERSONS\nWHERE AGE &gt;=18 and AGE &lt;=60\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT * FROM PERSONS\nWHERE AGE BETWEEN 18 and 60\n</pre>\n\n"
  }, {
    "summary": "\"FOR READ ONLY\" or \"FOR UPDATE\" should be specified for DB2 cursors",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1732",
    "tags": ["performance", "sql"],
    "description": "<p>Explicitly defining a cursor as read-only can improve performance by avoiding table locking. This allows other SQL requests to execute in parallel.\nTherefore when a cursor will only be used to read data, without modifying anything, the <code>FOR READ ONLY</code> clause or its synonyn, <code>FOR\nFETCH ONLY</code>, should be used.</p>\n<p>Conversely when a cursor will modify data, that too should be specified using the <code>FOR UPDATE</code> clause. </p>\n<p>In short, it's better to always explicitly define the purpose of the cursor with help of the <code>FOR READ ONLY</code>, <code>FOR FETCH\nONLY</code> or <code>FOR UPDATE</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEXEC SQL DECLARE CMAJ_0A CURSOR\n  FOR SELECT C_BQ\n    FROM       S1ORDCOU\n    WHERE C_BQ = :TORD-C-BQ\nEND-EXEC\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEXEC SQL DECLARE CMAJ_0A CURSOR\n  FOR SELECT C_BQ\n    FROM       S1ORDCOU\n    WHERE C_BQ = :TORD-C-BQ\n  FOR READ ONLY\nEND-EXEC\n</pre>\n\n"
  }, {
    "summary": "\"READ\" statements should have an \"AT END\" or an \"INVALID KEY\" clause if \"FILE-STATUS\" is not defined",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1731",
    "tags": ["suspicious"],
    "description": "<p>When the <code>FILE STATUS</code> is not specified on a file, any read operations on the file should handle the \"AT END\" or \"INVALID KEY\"\nconditions. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT MY_FILE\n  ASSIGN TO 'foobar.txt'\n  ORGANIZATION IS SEQUENTIAL.\n...\nREAD MY_FILE\n  NOT AT END PERFORM COMPUTE_LINE\nEND-READ.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT MY_FILE\n  ASSIGN TO 'foobar.txt'\n  ORGANIZATION IS SEQUENTIAL.\n...\nREAD MY_FILE\n  NOT AT END PERFORM COMPUTE_LINE\n  AT END MOVE 'Y' TO EOF-FLAG\nEND-READ.\n</pre>\n\n"
  }, {
    "summary": "The number of subprograms called in a program should be limited",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1693",
    "tags": ["brain-overload"],
    "description": "<p>Programs that depend on a lot of different subprograms tend to aggregate too many responsibilities, and inevitably become harder to understand and\ntherefore to maintain. Above a specific threshold, it is strongly advised to refactor the program into several smaller programs which focus on\nwell-defined topics.</p>\n\n"
  }, {
    "summary": "Files should not contain too many paragraphs",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1692",
    "tags": ["brain-overload"],
    "description": "<p>COBOL files containing a large number of paragraphs are by definition difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>Paragraphs contained in copybooks are ignored when computing the total number of paragraphs in a program.</p>\n\n"
  }, {
    "summary": "The number of COPY directives in a program should be limited",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1691",
    "tags": ["brain-overload"],
    "description": "<p>Programs that include a lot of copybooks tend to aggregate too many responsibilities and inevitably become harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor the program into smaller ones which focus on well-defined topics.</p>\n\n"
  }, {
    "summary": "The last paragraph of a \"PERFORM THRU\" should only contain an \"EXIT\" statement",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1594",
    "tags": ["pitfall"],
    "description": "<p>The <code>EXIT</code> statement is useful for documenting the end point in a series of paragraphs. It identifies the point at which control will be\ntransferred.</p>\n\n"
  }, {
    "summary": "Paragrahs should follow a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1589",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that paragrah names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a regular expression of <code>[A-Z-]+</code>:</p>\n<pre>\n PROCEDURE DIVISION.\n\n    Do_The_Thing.           *&gt; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n PROCEDURE DIVISION.\n\n    DO-THE-THING           *&gt; Noncompliant\n</pre>\n\n"
  }, {
    "summary": "Procedures used in \"PERFORM ... THRU ...\" should share a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1587",
    "tags": ["convention"],
    "description": "<p>In a <code>PERFORM prodecure1 THRU procedure2</code> statement, the two procedures should share a naming convention because they are strongly\nrelated and there should be a way to quickly see this relationship while reading the source code. Otherwise, the source code might quickly become very\ncomplex to maintain. To this end, procedure2 should contain the name of procedure1 and either a prefix or a suffix. For instance: <code>PERFORM\nmy-paragraph THRU end-my-paragraph</code>.</p>\n\n"
  }, {
    "summary": "Paragraphs should be documented",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1585",
    "tags": ["convention"],
    "description": "<p>Every paragraph should be commented to explain its goal and how it works. This comment can be placed either just before or just after the paragraph\nlabel. Moreover paragraphs used to close a module can be left uncommented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n PROCEDURE DIVISION.\n\n    PARAGRAPH1.           *&gt; Noncompliant\n    ...\n\n*-------\n    PARAGRAPH2.           *&gt; Noncompliant; the comment is empty\n    ...\n\n      PERFORM P1 THRU P2.\n    ...\n\n*Some comments                                  *&gt; Compliant\n    P1.\n      ....\n\n    P2.                                         *&gt; No violation as the this P2 paragraph close a module\n       MOVE A TO B.\n       ...\n       EXIT.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n PROCEDURE DIVISION.\n\n* Some comments\n    PARAGRAPH1.     *&gt;  Compliant; the comment is just before\n    ...\n\n    PARAGRAPH2.     *&gt;  Compliant; the comment is just after\n* Some comments\n    ...\n      PERFORM P1 THRU P2.\n    ...\n\n*Some comments\n    P1.\n      ....\n\n    P2.\n       MOVE A TO B.\n       ...\n       EXIT.\n</pre>\n\n"
  }, {
    "summary": "New types should be defined in copybooks",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1584",
    "tags": ["bad-practice"],
    "description": "<p>The <code>TYPEDEF</code> keyword creates new user-defined data types. It should only be used in copybooks, which can be shared among programs, not\nin the programs themselves.</p>\n\n"
  }, {
    "summary": "\"PERFORM SECTION\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1566",
    "tags": ["pitfall"],
    "description": "<p>Unless direct calls to paragraphs are forbidden, using <code>PERFORM section1</code> is usually error prone. Indeed, in that case, when creating a\nnew paragraph in the middle of an existing source code there is no easy way to know if an existing execution flow can go through this new\nparagraph.</p>\n\n"
  }, {
    "summary": "\"PERFORM PARAGRAPH\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1565",
    "tags": ["pitfall"],
    "description": "<p>In most companies the choice is done either to work with <code>PERFORM paragraph1</code> or with <code>PERFORM paragraph1 THRU paragraph2</code>.\nMixing the two approches is error prone when creating a new paragraph in the middle of an existing source code because there is no easy way to know if\nan existing execution flow might go through this new paragraph. This rule helps sustain the use of <code>PERFORM ... THRU...</code>.</p>\n\n"
  }, {
    "summary": "Paragraphs should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1564",
    "tags": ["pitfall"],
    "description": "<p>Sections should be used instead of paragraphs. Sections have better defined scopes for returning to the caller. Paragraphs have more flexible flow\ncontrol but this flexibility incurs additional risk.</p>\n\n"
  }, {
    "summary": "\"NEXT SENTENCE\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1562",
    "tags": ["pitfall"],
    "description": "<p>You should avoid using the <code>NEXT SENTENCE</code> statement because it breaks the process execution flow. Further, it maintainers may not\nunderstand where control flow picks up after <code>NEXT SENTENCE</code>. <code>CONTINUE</code> should be used instead.</p>\n\n"
  }, {
    "summary": "\"EXAMINE\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1558",
    "tags": ["lock-in"],
    "description": "<p>The COBOL <code>EXAMINE</code> statement is a specific OS/VS extension to the ANSI COBOL standard. To prevent portability issues, it should not be\nused anymore.</p>\n\n"
  }, {
    "summary": "The \"COMPUTATIONAL\" data value clause should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1556",
    "tags": ["lock-in"],
    "description": "<p>The way computational fields are managed varies greatly between platforms, so for portability reasons they should not be used. The\n<code>COMP-5</code> type is the only exception.</p>\n\n"
  }, {
    "summary": "Track uses of SQL",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1553",
    "tags": ["sql"],
    "description": "<p>Whatever is the reason like an abstraction layer over database, some organizations forbid using SQL inside COBOL source code. This rule raises an\nissue for each use of SQL.</p>\n\n"
  }, {
    "summary": "The OS/VS \"TRANSFORM\" statement should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1552",
    "tags": ["lock-in"],
    "description": "<p>The <code>TRANSFORM</code> statement is only supported by OS/VS COBOL, and should be replaced by the <code>INSPECT CONVERTING</code> statement to\nprevent portability issues.</p>\n\n"
  }, {
    "summary": "The OS/VS \"ON\" statement should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1551",
    "tags": ["lock-in"],
    "description": "<p>OS/VS COBOL accepted the <code>ON</code> statement, but IBM Enterprise COBOL does not accept it anymore. The <code>ON</code> statement allows the\nselective execution of statements it contains. Similar functions are provided in Enterprise COBOL by <code>EVALUATE</code> and <code>IF</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. foo.\n\n       PROCEDURE DIVISION.\n      * Non-Compliant\n         ON 1\n           DISPLAY 'First time'\n         ELSE\n           DISPLAY 'Other times'.\n       END PROGRAM foo.\n</pre>\n\n"
  }, {
    "summary": "Programs should not have too many lines of code",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1550",
    "tags": ["brain-overload"],
    "description": "<p>Because they are very difficult to maintain, programs with too many lines of code should be split into smaller programs or subprograms.</p>\n\n"
  }, {
    "summary": "Sections and paragraphs should not perform more than one SQL operation",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1473",
    "tags": ["brain-overload", "sql"],
    "description": "<p>To improve source code readability and reusability, SQL operations should be located in dedicated procedures (sections or paragraphs) and should\nnot be mixed with other SQL requests.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMAIN_PARAGRAPH.\n  ...\n  LOAD_SALARY.\n  ...\n\nLOAD_SALARY.\n  EXEC SQL CONNECT :UID IDENTIFIED BY :PASS END-EXEC.\n  EXEC SQL USE tempdb END-EXEC.   *&lt; Noncompliant\n  EXEC SQL\n    SELECT   SALARY\n        INTO  :HV-SALARY\n      FROM EMPLOYEE\n        WHERE EMPNAME = 'XXXXXXX'\n  END-EXEC.\n  EXIT.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMAIN_PARAGRAPH.\n  ...\n  CONNECT_TO_DB.\n  USE_TMP_DB_SCHEMA.\n  ...\n  LOAD_SALARY.\n  ...\nCONNECT_TO_DB.\n  EXEC SQL CONNECT :UID IDENTIFIED BY :PASS END-EXEC.\n  EXIT.\n\nUSE_TMP_DB_SCHEMA.\n  EXEC SQL USE tempdb END-EXEC.\n  EXIT.\n\nLOAD_SALARY.\n  EXEC SQL\n    SELECT   SALARY\n        INTO  :HV-SALARY\n      FROM EMPLOYEE\n        WHERE EMPNAME = 'XXXXXXX'\n  END-EXEC.\n  EXIT\n</pre>\n\n"
  }, {
    "summary": "Unused sections should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1461",
    "tags": ["unused"],
    "description": "<p>An unused section is never called explicitly with help of the GO TO or PERFORM statements.</p>\n<p>There can be only two reasons for having such a section:</p>\n<ul>\n  <li> It is really unused and should be removed </li>\n  <li> It is only used as a kind of comment to clearly delimit a block of code, which is a bad practice </li>\n</ul>\n<p>The remediation action should be:</p>\n<ul>\n  <li> Replace the section by a comment line </li>\n  <li> Refactor the code to make an explicit call to this section instead of letting the execution flow going through it implicitly </li>\n</ul>\n\n"
  }, {
    "summary": "Sections should not have too many lines",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1300",
    "tags": ["brain-overload"],
    "description": "<p>A section that grows too large tends to aggregate too many responsibilities.</p>\n<p>Such sections inevitably become harder to understand and therefore harder to maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller sections which focus on well-defined tasks. Those smaller sections will\nnot only be easier to understand, but also probably easier to test.</p>\n\n"
  }, {
    "summary": "Track uses of \"NOSONAR\" comments",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1291",
    "tags": ["bad-practice"],
    "description": "<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>\n\n"
  }, {
    "summary": "Unused paragraphs should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1290",
    "tags": ["unused"],
    "description": "<p>An unused paragraph is never called explicitly with help of the <code>GO TO</code> or <code>PERFORM</code> statements.</p>\n<p>There are only two reasons for such a paragraph:</p>\n<ul>\n  <li> It is really unused, and should be removed </li>\n  <li> It is used as a kind of comment to clearly delimit a block of code, which is bad practice </li>\n</ul>\n<p>The remediation action should be:</p>\n<ul>\n  <li> Replace the paragraph by a comment line </li>\n  <li> Refactor the code to make an explicit call to this paragraph instead of letting the execution flow going through it implicitly </li>\n</ul>\n\n"
  }, {
    "summary": "Unused data item blocks should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1289",
    "tags": ["unused"],
    "description": "<p>An unused data item block is dead code. Such data item blocks should be removed to increase the maintainability of the program.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIDENTIFICATION DIVISION.\nPROGRAM-ID. foo.\n\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n  01 PERSON PIC X(42).        *&gt; Compliant as sub data item FIRST_NAME is used\n    02 FIRST_NAME PIC X(21).\n    02 LAST_NAME PIC X(21).\n\n  01 ADDR PIC X(100).   *&gt; Noncompliant as no data item in this block is used\n    02 STREET PIC X(50).\n    02 TOWN PIC X(50).\n\nPROCEDURE DIVISION.\n\nMOVE \"John\" TO FIRST_NAME.\n</pre>\n<h2>Exceptions</h2>\n<p><code>FILLER</code> top level data items and top level data items which have sub data items with a <code>VALUE</code> clause are not checked by\nthis rule.</p>\n\n"
  }, {
    "summary": "Paragraphs should not have too many lines",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1287",
    "tags": ["brain-overload"],
    "description": "<p>A paragraph that grows too large tends to aggregate too many responsibilities. Such paragraphs inevitably become harder to understand and therefore\nharder to maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller paragraphs which focus on well-defined tasks. Those smaller paragraphs\nwill not only be easier to understand, but also probably easier to test.</p>\n\n"
  }, {
    "summary": "Paragraphs should not be empty",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1284",
    "tags": ["unused"],
    "description": "<p>You should avoid leaving paragraphs that contain no statements as this makes the program less readable.</p>\n\n"
  }, {
    "summary": "Modules should not have too many lines",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1281",
    "tags": ["brain-overload"],
    "description": "<p>A module (set of paragraphs called with PERFORM ... THRU ... statement) with too many lines of code should be split to smaller modules as they are\nvery difficult to maintain.</p>\n\n"
  }, {
    "summary": "Closable statements with nested statements should be closed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1274",
    "tags": ["confusing"],
    "description": "<p>When a closable statement contains nested statements, it can quickly become difficult to see which statements are nested and which are not. That's\nwhy ending a list of nested statements with <code>END-${STATEMENT-NAME}</code> is advised.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nREAD DF-PARAM-SPILOTE AT END\n  GO TO F-LECT-SPILOTE.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nREAD DF-PARAM-SPILOTE AT END\n  GO TO F-LECT-SPILOTE\nEND-READ.\n</pre>\n\n"
  }, {
    "summary": "Magic numbers should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-109",
    "tags": ["brain-overload"],
    "description": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n\n"
  }, {
    "summary": "\"DISPLAY\" should not be used",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1279",
    "tags": ["security"],
    "description": "<p>The <code>DISPLAY</code> statement outputs data to standard out or some other destination and could reveal sensitive information. Therefore, it\nshould be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDISPLAY \"hello world\"  *&gt; Noncompliant\n</pre>\n\n"
  }, {
    "summary": "Either \"RESP\" or \"NOHANDLE\" should be used with CICS commands",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1595",
    "tags": ["error-handling", "bug"],
    "description": "<p>When calling a CICS command other than <code>RETURN</code>, <code>ADDRESS</code>, or <code>ABEND</code>, either <code>RESP</code> should be used to\nspecify where the response code should be written, or <code>NOHANDLE</code> should be used to specify that abnormal conditions should be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n           EXEC CICS DELETEQ TS        *&gt; Noncompliant\n             QNAME(WS-TS5FTARF-NAME)\n           END-EXEC.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n           EXEC CICS DELETEQ TS\n             QNAME(WS-TS5FTARF-NAME)\n             RESP(WS-STATUS)\n           END-EXEC.\n</pre>\n\n"
  }, {
    "summary": "The return codes of CICS commands with \"RESP\" or \"NOHANDLE\" conditions should be tested",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1593",
    "tags": ["error-handling", "bug"],
    "description": "<p>After calling CICS commands with the <code>RESP</code> or <code>NOHANDLE</code> options, the return code should be tested.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  EXEC CICS DELETEQ TS        *&gt; Noncompliant; WS-STATUS should have been tested before the MOVE\n    QNAME(WS-TS5FTARF-NAME)\n    RESP(WS-STATUS)\n  END-EXEC.\n  MOVE WS-EIBTASKN (4:4) TO WS-TS5FTAR1-NAME-TSKID.\n</pre>\n<p> </p>\n<h2>Compliant Solution</h2>\n<pre>\n  EXEC CICS DELETEQ TS\n    QNAME(WS-TS5FTARF-NAME)\n    RESP(WS-STATUS)\n  END-EXEC.\n  IF WS-STATUS ...\n\n  MOVE WS-EIBTASKN (4:4) TO WS-TS5FTAR1-NAME-TSKID.\n</pre>\n\n"
  }, {
    "summary": "Explicitly opened cursors should be closed",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1573",
    "tags": ["cwe", "bug", "sql"],
    "description": "<p>If you do not explicitly close a cursor, it will be closed at the end of the task. But if you try to re-open this cursor to process it, you will\nget an error. That is why a cursor should be explicitly closed after it has been processed.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>\n\n"
  }, {
    "summary": "\"FILE STATUS\" should be checked after IO operations when it is available",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1572",
    "tags": ["error-handling", "bug"],
    "description": "<p>When a <code>FILE STATUS</code> is declared on a file, it should be tested immediately after IO operations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. foo.\n\n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n         SELECT TEST-FILE\n           ASSIGN TO 'foobar.txt'\n           ORGANIZATION IS SEQUENTIAL\n           FILE STATUS WS-TEST-FILE-STATUS.\n\n       DATA DIVISION.\n       FILE SECTION.\n       FD TEST-FILE\n         LABEL RECORDS ARE STANDARD.\n         01 TEST-RECORD.\n         05 USERNAME PIC XX.\n\n       WORKING-STORAGE SECTION.\n         01 WS-TEST-FILE-STATUS PIC X(42).\n\n       PROCEDURE DIVISION.\n\n      * Non-Compliant, TEST-FILE has a FILE STATUS variable which must be used\n        OPEN INPUT TEST-FILE.\n\n       END PROGRAM foo.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. foo.\n\n       ENVIRONMENT DIVISION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n         SELECT TEST-FILE\n           ASSIGN TO 'foobar.txt'\n           ORGANIZATION IS SEQUENTIAL\n           FILE STATUS WS-TEST-FILE-STATUS.\n\n       DATA DIVISION.\n       FILE SECTION.\n       FD TEST-FILE\n         LABEL RECORDS ARE STANDARD.\n         01 TEST-RECORD.\n         05 USERNAME PIC XX.\n\n       WORKING-STORAGE SECTION.\n         01 WS-TEST-FILE-STATUS PIC X(42).\n\n       PROCEDURE DIVISION.\n\n      * Compliant, errors of the IO operation are propery handled\n        OPEN INPUT TEST-FILE.\n        IF WS-TEST-FILE-STATUS &lt;&gt; \"00\" THEN\n          DISPLAY \"Error while opening foobar.txt as input.\".\n\n       END PROGRAM foo.\n</pre>\n\n"
  }, {
    "summary": "\"INITIALIZE\" should not be used",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1560",
    "tags": ["bug", "suspicious"],
    "description": "<p>The <code>INITIALIZE</code> statement should not be used because it does not properly manage the initialization of <code>REDEFINE</code> and\nfillers.</p>\n\n"
  }, {
    "summary": "\"CORRESPONDING\" should not be used in \"ADD\", \"SUBTRACT\", and \"MOVE\" statements",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1276",
    "tags": ["bug", "pitfall"],
    "description": "<p>Using the <code>CORRESPONDING</code> option in <code>MOVE</code>, <code>ADD</code>, and <code>SUBTRACT</code> statements may seem like a good way\nof sparing source code because this single statement will represent several actual statements. However, it can lead to unexpected behavior due to the\nfact that fields might not be named the same, or might be named the same but not have the same data type.</p>\n<p>It is therefore recommended to explicitly name the fields when using <code>ADD</code>, <code>SUBTRACT</code>, and <code>MOVE</code> statements.</p>\n\n"
  }, {
    "summary": "\"SQLCODE\" or \"SQLSTATE\" should be tested after each SQL statement",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3890",
    "tags": ["error-handling", "sql"],
    "description": "<p>After the execution of each SQL statement (other than <code>DECLARE CURSOR</code>, <code>DECLARE TABLE</code> and <code>DECLARE VARIABLE</code>),\nthe value of <code>SQLCODE</code> or <code>SQLSTATE</code> should be checked before proceeding. A 0 <code>SQLCODE</code> value means the statement\nsucceeded, a positive value means success with a warning, and a negative value indicates an error. Proceeding without checking could put your program\nor your data in a bad state.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nEXEC SQL\n  SELECT name INTO :username FROM user WHERE id = :userid\nEND-EXEC.\n\nDISPLAY username.    *&gt; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEXEC SQL\n  SELECT name INTO :username FROM user WHERE id = :userid\nEND-EXEC.\n\nIF SQLCODE = 0 THEN\n  DISPLAY username\nEND-IF.\n</pre>\n<h2>Exceptions</h2>\n<p>When the value of <code>SQLCODE</code> or <code>SQLSTATE</code> is not checked but transferred to another variable for later use, no issue is\nraised.</p>\n<pre>\nEXEC SQL\n  SELECT name INTO :username FROM user WHERE id = :userid\nEND-EXEC.\nMOVE SQLCODE TO SQL-RETURN-CODE\n</pre>\n\n"
  }, {
    "summary": "Default column values should not be set explicitly in inserts",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3620",
    "tags": ["clumsy", "sql"],
    "description": "<p>There's no point in including the default value of a column in an insert statement. It simply clutters the code to no additional benefit.</p>\n<p><strong>Note</strong> that this rule raises issues only when a database catalog is provided during the SonarQube analysis.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the table <code>PRODUCT</code> having a column <code>INV_COUNT</code> with default <code>0</code>:</p>\n<pre>\nEXEC SQL\n  INSERT INTO PRODUCT\n  (\n    NAME,\n    INV_COUNT  -- Noncompliant\n  )\n  VALUES\n  (\n    :PROD-NAME,\n    0  -- this is the default value\n  )\nEND-EXEC\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEXEC SQL\n  INSERT INTO PRODUCT\n  (\n    NAME\n  )\n  VALUES\n  (\n    :PROD-NAME\n  )\nEND-EXEC\n</pre>\n\n"
  }, {
    "summary": "Fetches should use all of the columns selected in their cursors",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3613",
    "tags": ["confusing", "sql"],
    "description": "<p>There's no point in selecting columns in a cursor that aren't actually referenced in the relevant <code>FETCH</code> statement. Instead, either\npare down the cursor to select only what you actually need, or <code>FETCH</code> the other columns.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n      EXEC SQL\n        DECLARE C-SQL-CURSOR CURSOR\n          SELECT COLUMN1\n                ,COLUMN2  -- Not fetched\n                ,COLUMN3  -- Not fetched\n            FROM TBLWTABLE\n          WITH UR\n      END-EXEC.\n\n      \u2026\n\n      EXEC SQL\n        FETCH C-SQL-CURSOR  -- Noncompliant\n        INTO  :H-COLUMN1\n      END-EXEC\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n      EXEC SQL\n        DECLARE C-SQL-CURSOR CURSOR\n          SELECT COLUMN1\n                ,COLUMN2\n                ,COLUMN3\n            FROM TBLWTABLE\n          WITH UR\n      END-EXEC.\n\n      \u2026\n\n      EXEC SQL\n        FETCH C-SQL-CURSOR\n        INTO  :H-COLUMN1, :H-COLUMN2, :H-COLUMN3\n      END-EXEC\n</pre>\n<p>or</p>\n<pre>\n      EXEC SQL\n        DECLARE C-SQL-CURSOR CURSOR\n          SELECT COLUMN1\n            FROM TBLWTABLE\n          WITH UR\n      END-EXEC.\n\n      \u2026\n\n      EXEC SQL\n        FETCH C-SQL-CURSOR\n        INTO  :H-COLUMN1\n      END-EXEC\n</pre>\n\n"
  }, {
    "summary": "Programs should begin with titles",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3606",
    "tags": ["convention"],
    "description": "<p>Program/file names offer only very limited space for indicating program function, which is why you should take advantage of the ability to specify\na program <code>TITLE</code>. Omitting the <code>TITLE</code> statement will result in a default, uncommunicative <code>TITLE</code> value being\nprinted at the top of each page of the source listing. Instead, you should write an expressive title that gives a clear impression of the program's\nfunction. </p>\n<p>This rule raises an issue when a there is no <code>TITLE</code> before the <code>IDENTIFICATION DIVISION</code>. Ideally, <code>TITLE</code> will\nbe the first line of a program, but it cannot be placed before compiler options.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n      * Copyright (c) 2012 MyCo. All rights reserved.  *&gt; Noncompliant\n       IDENTIFICATION DIVISION.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n       TITLE 'IntradayPosition.ExecutePostProcessing'\n      * Copyright (c) 2012 MyCo. All rights reserved.\n       IDENTIFICATION DIVISION.\n</pre>\n\n"
  }, {
    "summary": "SQL \"UPDATE\" statements should not impact columns included in partitioning indexes",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3515",
    "tags": ["performance", "sql"],
    "description": "<p>Updating the value of a column that is part of a partitioning index could force the database to move a row from one partition to another. The move\noperation itself might be costly, but even worse without regularly updating the DB statistics, many updates like this might impact the performance of\nsubsequent SQL requests that use the partitioning index.</p>\n<p><strong>Note</strong> This rule raises issues only when a database catalog is provided during the SonarQube analysis.</p>\n\n"
  }, {
    "summary": "Obsolete keywords should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2269",
    "tags": ["obsolete"],
    "description": "<p>To ensure future code portability, obsolete keywords should not be used. The following keywords were declared obsolete in the COBOL ANSI-85\nstandard and removed in the ISO/IEC 1989:2002 standard: </p>\n<ul>\n  <li> Paragraphs: <code>AUTHOR</code>, <code>INSTALLATION</code>, <code>DATE-WRITTEN</code>, <code>DATE-COMPILED</code>, <code>SECURITY</code> </li>\n  <li> Clauses: <code>DATA RECORD(S)</code>, <code>LABEL RECORD(S)</code>, <code>MEMORY SIZE</code>, <code>MULTIPLE FILE (TAPE)</code>,\n  <code>RERUN</code>, <code>VALUE OF</code>, </li>\n  <li> Statements: <code>ALTER</code>, <code>ENTER</code>, <code>STOP</code> <em>literal</em>, <code>GO TO</code> without an argument </li>\n  <li> Phrases: <code>REVERSED</code> phrase of the <code>OPEN</code> statement </li>\n  <li> Special registers: <code>DEBUG-ITEM</code> </li>\n  <li> Sections: Debugging sections </li>\n  <li> Declarative: <code>USE FOR DEBUGGING</code> </li>\n</ul>\n<p>The following keywords were declared obsolete in the ISO/IEC 1989:2002 standard:</p>\n<ul>\n  <li> Phrase: <code>DEBUGGING MODE</code> </li>\n  <li> Clause: <code>PADDING CHARACTER</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIDENTIFICATION DIVISION.\nPROGRAM-ID.  AcceptAndDisplay.\nAUTHOR.  Michael Coughlan.  *&gt; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIDENTIFICATION DIVISION.\nPROGRAM-ID.  AcceptAndDisplay.\n</pre>\n\n"
  }, {
    "summary": "Level 77 should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1747",
    "tags": ["convention"],
    "description": "<p>Level 77 identifies data items that are not subdivisions of other items, and that have no subdivisions. They are atomic by declaration. To make\nfuture subdivision possible, level 01 should be used instead of level 77.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n77 CAR            PIC 999.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01 CAR            PIC 999.\n</pre>\n\n"
  }, {
    "summary": "SQL \"WHERE\" clauses should use ANSI standard operators",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1742",
    "tags": ["lock-in", "sql"],
    "description": "<p>To prevent portability issues <code>!=</code>, <code>!&gt;</code> and <code>!&lt;</code> operators should be replaced by the ANSI standard\noperators: <code>&lt;&gt;</code>, <code>&lt;=</code> or <code>&gt;=</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT C1 FROM S1TESTMD WHERE BIRTHDATE != 2000\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT C1 FROM S1TESTMD WHERE BIRTHDATE &lt;&gt; 2000\n</pre>\n\n"
  }, {
    "summary": "SQL tables should be joined with the \"JOIN\" keyword",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1741",
    "tags": ["obsolete", "sql"],
    "description": "<p>Since ANSI SQL-92, explicit joins using the <code>JOIN</code> keyword have been possible, and are preferred. Therefore table joins should be done\nwith help of the one of the following clauses: <code>JOIN</code>, <code>INNER JOIN</code>, <code>LEFT OUTER JOIN</code>, <code>RIGHT OUTER\nJOIN</code>, and <code>FULL OUTER JOIN</code>. The old way to join tables is deprecated and should not be used anymore.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT *\nFROM PARTS, PRODUCTS\nWHERE PARTS.PROD = PRODUCTS.PROD\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT *\nFROM PARTS\nINNER JOIN PRODUCTS ON PARTS.PROD = PRODUCTS.PROD\n</pre>\n\n"
  }, {
    "summary": "Data items should never be accessed using more than one \"OF\" clause",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1729",
    "tags": ["convention"],
    "description": "<p>Using more than one <code>OF</code> clause to access a data item can quickly decrease the readability of the source code. Either some\n<code>OF</code> clauses are optional and should be removed, or there are too many intersections between several data structures and those\nintersections should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n01 EMPLOYEE.\n  05 MOTHER-IN-LAW.\n    10 NAME PIC X(20).\n  05 FATHER-IN-LAW.\n    10 NAME PIC X(20).\n...\n01 CUSTOMER.\n  05 MOTHER-IN-LAW.\n    10 NAME PIC X(20).\n  05 FATHER-IN-LAW.\n    10 NAME PIC X(20).\n...\n\nMOVE MY_VALUE TO NAME OF MOTHER-IN-LAW OF CUSTOMER\n</pre>\n\n"
  }, {
    "summary": "Data item declarations should be aligned ",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1728",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions allow teams to collaborate efficiently. For maximum readability, this rule checks that the levels, names and PICTURE\nclauses for all items of the same level and which are subordinate to the same item start in the same column.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n01  ZONE1.\n    03  ZONE2  PIC X(10).\n    03   ZONE3 PIC X(10).    *&gt; Noncompliant; name out of line\n     03 ZONE4  PIC X(10).    *&gt; Noncompliant; level out of line\n    03  ZONE5   PIC X(10).   *&gt; Noncompliant; PIC out of line\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n01  ZONE1.\n    03 ZONE2  PIC X(10).\n    03 ZONE3  PIC X(10).\n    03 ZONE4  PIC X(10).\n    03 ZONE5  PIC X(10).\n</pre>\n\n"
  }, {
    "summary": "\"TO\" keywords should be aligned in a sequence of \"MOVE\" statements",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1726",
    "tags": ["convention"],
    "description": "<p>Aligning common keywords in a series of statements makes the code easier to read. therefore, it is better to align the <code>TO</code> keywords in\na series of successive MOVE statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMOVE \"Hi There\" TO field\nMOVE temp TO b\nMOVE 123 TO item\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMOVE \"Hi There\" TO field\nMOVE temp       TO b\nMOVE 123        TO item\n</pre>\n\n"
  }, {
    "summary": "Logical files should follow a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1582",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that logical file names conform to a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given the regular expression <code>FILE-.*</code>:</p>\n<pre>\n INPUT-OUTPUT SECTION.\n FILE-CONTROL.\n\n     SELECT Y27MVTS       ASSIGN  TO     S1       &gt;Noncompliant\n                          FILE STATUS IS FS-S1.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n INPUT-OUTPUT SECTION.\n FILE-CONTROL.\n\n     SELECT FILE-X345      ASSIGN  TO     S1\n                          FILE STATUS IS FS-S1.\n</pre>\n\n"
  }, {
    "summary": "First level data items should follow a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1580",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that first level data item names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given an regular expression of <code>WS-.*</code>:</p>\n<pre>\n       WORKING-STORAGE SECTION.\n            01 WRONG.                                       &gt; Noncompliant; name doesn't match the pattern \"WS-.*\"\n              02  LINK.                                     &gt; Compliant; this is not first level\n\n       LINKAGE SECTION.\n             01     DFHCOMMAREA PIC X(1500).                &gt; Compliant; the data item is defined in the LINKAGE SECTION\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n       WORKING-STORAGE SECTION.\n            01 WS-LINK.\n              02  LINK.\n\n       LINKAGE SECTION.\n             01     DFHCOMMAREA PIC X(1500).\n</pre>\n\n"
  }, {
    "summary": "File-Codes should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1579",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that file-code names conform to a specified regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given a pattern of <code>FC-.*</code>:</p>\n<pre>\n INPUT-OUTPUT SECTION.\n FILE-CONTROL.\n\n     SELECT Y27MVTS       ASSIGN  TO     S1        &gt;Noncompliant; S1 doesn't match \"FC-.*\" pattern\n                          FILE STATUS IS S1.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n INPUT-OUTPUT SECTION.\n FILE-CONTROL.\n\n     SELECT Y27MVTS     ASSIGN  TO     FC-S1     &gt;OK as FC-S1 matches \"FC-.*\" pattern\n                          FILE STATUS IS FS-S1.\n</pre>\n\n"
  }, {
    "summary": "File names should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1578",
    "tags": ["convention", "cert"],
    "description": "<p>Shared coding conventions allow teams to collaborate effectively. For that reason, file names should conform to a defined standard. This rule\nraises an issue when the names of analyzed files don't match the provided regular expression.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/P4IyAQ\">CERT, MSC09-CPP.</a> - Character encoding: Use subset of ASCII for safety </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/lQAl\">CERT, MSC09-C.</a> - Character encoding: Use subset of ASCII for safety </li>\n</ul>\n\n"
  }, {
    "summary": "Disallowed characters should not be used in identifiers",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1471",
    "tags": ["lock-in"],
    "description": "<p>Portability issues may restrict which characters should be used in an identifier. </p>\n<p>This rule checks identifier names against a regular expression of disallowed characters. Due to a technical limitation, the COBOL analyzer is not\nable for the time-being to differentiate lowercase from uppercase characters.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>[^a-zA-Z0-9-]</code>:</p>\n<pre>\nMOVE DATA-1 TO DATA_2 *&gt; Noncompliant; '_' not allowed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMOVE DATA-1 TO DATA-2\n</pre>\n\n"
  }, {
    "summary": "Sections should end with an empty paragraph",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1307",
    "tags": ["convention"],
    "description": "<p>It is fairly normal for COBOL development teams to decide to work either with sections or with paragraphs and to make this choice a standard.</p>\n<p>When sections are used, it is also normal to define another standard: \"End every section definition with an empty paragraph definition, or a\nparagraph containing only a terminating statement\".</p>\n<p>This empty paragraph can then be jumped to with a <code>GO TO</code> statement to stop the execution of a section.</p>\n<p>Accepted terminating statements in the otherwise-empty ending paragraph are: <code>EXIT</code>, <code>EXIT PROGRAM</code>, <code>STOP RUN</code>,\nand <code>GO BACK</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<p>In this example, an empty paragraph is missing at the end of the first section definition.</p>\n<pre>\nFIRST_SECTION SECTION.\n  ...\n\nSECOND_SECTION SECTION.\n  ...\nSECOND_SECTION_END.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nFIRST_SECTION SECTION.\n  ...\nFIRST_SECTION_END.\n\nSECOND_SECTION SECTION.\n  ...\nSECOND_SECTION_END.\n</pre>\n\n"
  }, {
    "summary": "The OS/VS \"NOTE\" statement should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1293",
    "tags": ["lock-in"],
    "description": "<p>OS/VS COBOL accepted the <code>NOTE</code> statement, but IBM Enterprise COBOL does not. Therefore all <code>NOTE</code> statements should be\nreplaced by standard comment lines.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. foo.\n\n       PROCEDURE DIVISION.\n      * Non-Compliant\n         NOTE This is a comment.\n\n      * This is a compliant comment.\n       END PROGRAM foo.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. foo.\n\n       PROCEDURE DIVISION.\n      * Compliant\n      * This is a comment.\n       END PROGRAM foo.\n</pre>\n\n"
  }, {
    "summary": "\"OS/VS EXHIBIT\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1292",
    "tags": ["lock-in"],
    "description": "<p>OS/VS COBOL accepted the <code>EXHIBIT</code> statement, but IBM Enterprise COBOL does not. With IBM Enterprise COBOL, the <code>DISPLAY</code>\nstatement must be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. foo.\n\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n         01 WS-FOO PIC X(42).\n         01 WS-BAR PIC X(42).\n\n       PROCEDURE DIVISION.\n      * Non-Compliant\n         EXHIBIT NAMED WS-FOO WS-BAR.\n       END PROGRAM foo.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. foo.\n\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n         01 WS-FOO PIC X(42).\n         01 WS-BAR PIC X(42).\n\n       PROCEDURE DIVISION.\n      * Compliant\n         DISPLAY \"WS-FOO = \" WS-FOO\n             \"WS-BAR = \" WS-BAR.\n       END PROGRAM foo.\n</pre>\n\n"
  }, {
    "summary": "Paragraphs and statements should be indented consistently",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1280",
    "tags": ["convention"],
    "description": "<p>Paragraphs, sections and statements must be correctly indented for better code readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. foo.\n\n       PROCEDURE DIVISION.\n           IF \"foo\" = \"bar\" THEN\n           DISPLAY \"foo = bar!\"      *&gt; Noncompliant\n           ELSE\n           DISPLAY \"foo &lt;&gt; bar!\".      *&gt; Noncompliant\n       END PROGRAM foo.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. foo.\n\n       PROCEDURE DIVISION.\n           IF \"foo\" = \"bar\" THEN\n              DISPLAY \"foo = bar!\"\n           ELSE\n              DISPLAY \"foo &lt;&gt; bar!\".\n       END PROGRAM foo.\n</pre>\n\n"
  }, {
    "summary": "\"CURSORs\" should not be declared inside procedure divisions",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1278",
    "tags": ["sql"],
    "description": "<p>It is a bad practice to declare a cursor inside a procedure division, so you should avoid it.</p>\n\n"
  }, {
    "summary": "Tabulation characters should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-105",
    "tags": ["convention"],
    "description": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>\n\n"
  }, {
    "summary": "Track uses of forbidden statements",
    "type": "Code Smell",
    "defaultSeverity": "Info",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3938",
    "tags": [],
    "description": "<p>This rule allows banning certain statements. </p>\n<h2>Noncompliant Code Example</h2>\n<p>Given a parameter of <code>CANCEL</code> for this rule: </p>\n<pre>\nDISPLAY \"Cancelling action\".\nCANCEL PROGRAM1. *&gt; Noncompliant\n</pre>\n\n"
  }]
}