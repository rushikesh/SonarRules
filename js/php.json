{"types":{"Vulnerability":10,"Code Smell":105,"Bug":26},"standards":{},"tags":[{"name":"bad-practice","count":4},{"name":"convention","count":30},{"name":"brain-overload","count":19},{"name":"psr2","count":13},{"name":"clumsy","count":8},{"name":"cert","count":24},{"name":"unused","count":11},{"name":"suspicious","count":11},{"name":"confusing","count":5},{"name":"misra","count":17},{"name":"pitfall","count":10},{"name":"cwe","count":19},{"name":"error-handling","count":1},{"name":"redundant","count":1},{"name":"design","count":4},{"name":"style","count":2},{"name":"owasp-a3","count":2},{"name":"psr1","count":2},{"name":"performance","count":2},{"name":"obsolete","count":3},{"name":"user-experience","count":2},{"name":"sans-top25-porous","count":1},{"name":"owasp-a2","count":1},{"name":"finding","count":1},{"name":"php-ini","count":7},{"name":"owasp-a1","count":1},{"name":"sans-top25-risky","count":1},{"name":"owasp-a5","count":2},{"name":"sans-top25-insecure","count":1},{"name":"api-design","count":1},{"name":"duplicate","count":1}],"rules":[{"summary":"Credentials should not be hard-coded","type":"Vulnerability","defaultSeverity":"Blocker","inDefaultProfile":true,"ruleKey":"RSPEC-2068","tags":["cwe","cert","sans-top25-porous","owasp-a2"],"description":"<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$uname = \"steve\";\n$password = \"blue\";\nconnect($uname, $password);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$uname = getEncryptedUser();\n$password = getEncryptedPass();\nconnect($uname, $password);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/798\">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/259\">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>\n\n"},{"summary":"\"$this\" should not be used in a static context","type":"Bug","defaultSeverity":"Blocker","inDefaultProfile":true,"ruleKey":"RSPEC-2014","tags":[],"description":"<p><code>$this</code> refers to the current class instance. But static methods can be accessed without instantiating the class, and <code>$this</code>\nis not available to them. Using <code>$this</code> in a static context will result in a fatal error at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Clazz {\n  $name=NULL;  // instance variable\n\n  public static function foo(){\n    if ($this-&gt;name != NULL) {\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Clazz {\n  $name=NULL;  // instance variable\n\n  public static function foo($nameParam){\n    if ($nameParam != NULL) {\n      // ...\n    }\n  }\n}\n</pre>\n\n"},{"summary":"Variable variables should not be used","type":"Code Smell","defaultSeverity":"Blocker","inDefaultProfile":true,"ruleKey":"RSPEC-1599","tags":["brain-overload"],"description":"<p>PHP's \"variable variables\" feature (dynamically-named variables) is temptingly powerful, but can lead to unmaintainable code. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$var = 'foo';\n$$var = 'bar';      //Noncompliant\n$$$var = 'hello';  //Noncompliant\n\necho $foo; //will display 'bar'\necho $bar; //will display 'hello'\n</pre>\n\n"},{"summary":"Code should not be dynamically injected and executed","type":"Vulnerability","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-1523","tags":["cwe","owasp-a3"],"description":"<p>The <code>eval</code> function is a way to run arbitrary code at run-time. </p>\n<p>According to the PHP documentation</p>\n<blockquote>\n  <p>The eval() language construct is very dangerous because it allows execution of arbitrary PHP code. Its use thus is discouraged. If you have\n  carefully verified that there is no other option than to use this construct, pay special attention not to pass any user provided data into it\n  without properly validating it beforehand.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\neval($code_to_be_dynamically_executed)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/95.html\">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically\n  Evaluated Code ('Eval Injection') </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting\n  (XSS) </li>\n</ul>\n\n"},{"summary":"Conditionally executed code should be denoted by either indentation or curly braces","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-3973","tags":["confusing","suspicious"],"description":"<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($x &gt; 0)  // Noncompliant\ndoTheThing();\ndoTheOtherThing();\n\nfoo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($x &gt; 0) {\n  doTheThing();\n  doTheOtherThing();\n}\n\nfoo();\n</pre>\n<p>or</p>\n<pre>\nif ($x &gt; 0)\n    doTheThing();\ndoTheOtherThing();\n\nfoo();\n</pre>\n\n"},{"summary":"Conditionals should start on new lines","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-3972","tags":["suspicious"],"description":"<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding\n<code>else</code> or <code>elseif</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($condition1) {\n  // ...\n} if ($condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($condition1) {\n  // ...\n} elseif ($condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif ($condition1) {\n  // ...\n}\n\nif ($condition2) {\n  //...\n}\n</pre>\n\n"},{"summary":"Cognitive Complexity of functions should not be too high","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-3776","tags":["brain-overload"],"description":"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>\n\n"},{"summary":"Parentheses should not be used for calls to \"echo\"","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-2041","tags":["pitfall"],"description":"<p><code>echo</code> can be called with or without parentheses, but it is best practice to leave parentheses off the call because using parentheses\nwith multiple arguments will result in a parse error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\necho(\"Hello\");  // Noncompliant, but it works\necho(\"Hello\", \"World\"); // Noncompliant. Parse error\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\necho \"Hello\";\necho \"Hello\",\"World!\";\n</pre>\n\n"},{"summary":"Functions should not be nested too deeply","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-2004","tags":["brain-overload"],"description":"<p>Nesting functions can quickly turn your code into \"spaghetti code\". Such code is hard to read, refactor and therefore to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nfunction f () {\n  function f_inner () {\n    function f_inner_inner() {\n      function f_inner_inner_inner() { // Noncompliant\n      }\n    }\n  }\n}\n</pre>\n\n"},{"summary":"References should not be passed to function calls","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-1998","tags":["cwe","performance","obsolete","pitfall"],"description":"<p>Passing a reference to a function parameter means that any modifications the method makes to the parameter will be made to the original value as\nwell, since references have the effect of pointing two variables at the same memory space. This feature can be difficult to use correctly,\nparticularly if the callee is not expecting a reference, and the improper use of references in function calls can make code less efficient rather than\nmore efficient. </p>\n<p>Further, according to the PHP manual: </p>\n<blockquote>\n  As of PHP 5.3.0, you will get a warning saying that \"call-time pass-by-reference\" is deprecated... And as of PHP 5.4.0, call-time pass-by-reference\n  was removed, so using it will raise a fatal error.\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyfun(&amp;$name);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyfun($name);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/374\">MITRE, CWE-374</a> - Weakness Base Passing Mutable Objects to an Untrusted Method </li>\n</ul>\n\n"},{"summary":"Statements should end with a \"case default\" clause","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-131","tags":["cwe","misra","cert"],"description":"<p>The requirement for a final <code>case default</code> clause is defensive programming. The clause should either take appropriate action, or contain\na suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a default case\nshould still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($param) {  //missing default clause\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n}\n\nswitch ($param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($param) {\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n</ul>\n\n"},{"summary":"Control structures should use curly braces","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-121","tags":["misra","cert","pitfall"],"description":"<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>\n\n"},{"summary":"String literals should not be duplicated","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-1192","tags":["design"],"description":"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nfunction run() {\n  prepare('action1');                              // Non-Compliant - 'action1' is duplicated 3 times\n  execute('action1');\n  release('action1');\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nACTION_1 = 'action1';\n\nfunction run() {\n  prepare(ACTION_1);\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>\n\n"},{"summary":"Constant names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":true,"ruleKey":"RSPEC-115","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\ndefine(\"const1\", true);\n\nclass Foo {\n    const const2 = \"bar\";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndefine(\"CONST1\", true);\n\nclass Foo {\n    const CONST2 = \"bar\";\n}\n</pre>\n\n"},{"summary":"Non-empty statements should change control flow or have at least one side-effect","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-905","tags":["cwe","misra","cert","unused"],"description":"<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$a == 1; // Noncompliant; was assignment intended?\n$a &lt; $b; // Noncompliant; have we forgotten to assign the result to a variable?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/482\">MITRE, CWE-482</a> - Comparing instead of Assigning </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  </li>\n</ul>\n\n"},{"summary":"Variables should be initialized before use","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-836","tags":["cwe","misra"],"description":"<p>When a variable is not initialized before its use, it's a sign that the developer made a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction fun($condition) {\n  $res = 1;\n  if ($condition) {\n    $res++;\n  }\n  return $result; // Noncompliant, \"$result\" instead of \"$res\"\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun($condition) {\n  $res = 1;\n  if ($condition) {\n    $res++;\n  }\n  return $res;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/457.html\">MITRE, CWE-457</a> - Use of Uninitialized Variable </li>\n  <li> MISRA C:2004, 9.1 - All automatic variables shall have been assigned a value before being used. </li>\n  <li> MISRA C++:2008, 8-5-1 - All variables shall have a defined value before they are used. </li>\n</ul>\n\n"},{"summary":"Exception should not be created without being thrown","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-3984","tags":[],"description":"<p>Creating a new <code>Exception</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($x &lt; 0)\n  new Exception('$x must be nonnegative');\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($x &lt; 0)\n  throw new Exception('$x must be nonnegative');\n</pre>\n\n"},{"summary":"Array or Countable object count comparisons should make sense","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-3981","tags":[],"description":"<p>The count of elements from an array or Countable object is always greater than or equal to zero. So testing that the count is greater than or equal\nto zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the object or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (count($arr) &gt;= 0) { ... }\n\nif (count($arr) &lt; 0) { ... }\n\n$result = count($arr) &gt;= 0;\n\nif (0 &gt; count($arr)) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (count($arr) != 0) { ... }\n\nif (count($arr) &gt; 0) { ... }\n</pre>\n\n"},{"summary":"All branches in a conditional structure should not have exactly the same implementation","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-3923","tags":[],"description":"<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($b == 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\n$b = $a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch ($i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n\n"},{"summary":"The output of functions that don't return anything should not be used","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-3699","tags":[],"description":"<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n\"result\" to a variable is probably a bug because such functions return nothing, which is probably not what was intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$result = closedir($dir_handle); // Noncompliant, \"closedir\" does not return anything.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclosedir($dir_handle);\n</pre>\n\n"},{"summary":"\"=+\" should not be used instead of \"+=\"","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-2757","tags":[],"description":"<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$target = -5;\n$num = 3;\n\n$target =- $num;  // Noncompliant; target = -3. Is that really what's meant?\n$target =+ $num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$target = -5;\n$num = 3;\n\n$target = -$num;  // Compliant; intent to assign inverse value of num is clear\n$target += $num;\n</pre>\n\n"},{"summary":"A \"for\" loop update clause should move the counter in the right direction","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-2251","tags":["cert"],"description":"<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor ($i = 0; $i &lt; $length; $i--) { // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor ($i = 0; $i &lt; $length; $i++) {\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zYEzAg\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>\n\n"},{"summary":"Return values from functions without side effects should not be ignored","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-2201","tags":["misra","cert"],"description":"<p>When the call to a function doesn't have any side effect, what is the point of making the call if the results are ignored? In such cases, either\nthe function call is useless and should be dropped, or the source code doesn't behave as expected. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstrlen($name); // Noncompliant; \"strlen\" has no side effect\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$length = strlen($name);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>\n\n"},{"summary":"Values should not be uselessly incremented","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-2123","tags":["unused"],"description":"<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  $i = 0;\n  $i = $i++; // Noncompliant; i is still zero\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  $i = 0;\n  $i++;\n</pre>\n\n"},{"summary":"Related \"if/else if\" statements and \"cases\" in a \"switch\" should not have the same condition","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1862","tags":["cert","unused","pitfall"],"description":"<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse\nthere is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>\n<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice\nthat.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($param == 1)\n  openWindow();\nelse if ($param == 2)\n  closeWindow();\nelse if ($param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n\n\nswitch($i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  case 1:  // Noncompliant\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($param == 1)\n  openWindow();\nelse if ($param == 2)\n  closeWindow();\nelse if ($param == 3)\n  moveWindowToTheBackground();\n\nswitch($i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"},{"summary":"Objects should not be created to be dropped immediately without being used","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1848","tags":[],"description":"<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.</p>\n<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and\ncalled directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($x &lt; 0) {\n  new foo;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$var = NULL;\nif ($x &lt; 0) {\n  $var = new foo;\n}\n</pre>\n\n"},{"summary":"Identical expressions should not be used on both sides of a binary operator","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1764","tags":["cert"],"description":"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( $a == $a ) { // always true\n  doZ();\n}\nif ( $a != $a ) { // always false\n  doY();\n}\nif ( $a == $b &amp;&amp; $a == $b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( $a == $b || $a == $b ) { // if the first one is true, the second one is too\n  doW();\n}\n\n$j = 5 / 5; //always 1\n$k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>Left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\n$i = 1 &lt;&lt; 1; // Compliant\n$j = $a &lt;&lt; $a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:php:S1656} - Implements a check on <code>=</code>. </li>\n</ul>\n\n"},{"summary":"Jump statements should not be followed by other statements","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1763","tags":["cwe","misra","cert","unused"],"description":"<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>goto</code>) and <code>throw</code> expressions move\ncontrol flow out of the current code block. Typically, any statements in a block that come after a jump or <code>throw</code> are simply wasted\nkeystrokes lying in wait to confuse the unwary. </p>\n<p>Rarely, as illustrated below, code after a jump or <code>throw</code> is reachable. However, such code is difficult to understand, and should be\nrefactored. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction fun($a) {\n  $i = 10;\n  return $i + $a;\n  $i++;             // this is never executed\n}\n\nfunction foo($a) {\n  if ($a == 5) {\n    goto error;\n  } else {\n    // do the job\n  }\n  return;\n\n  error:\n    printf(\"don't use 5\"); // this is reachable but unreadable\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun($a) {\n  $i = 10;\n  return $i + $a;\n}\n\nfunction foo($a) {\n  if ($a == 5) {\n    handleError();\n  } else {\n    // do the job\n  }\n  return;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/561.html\">MITRE, CWE-561</a> - Dead Code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>\n\n"},{"summary":"Short-circuit logic should be used to prevent null pointer dereferences in conditionals","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1697","tags":[],"description":"<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($obj == null &amp;&amp; $obj-&gt;isOpen()) {\n  echo \"Object is open\";\n}\n\nif ($obj != null || $obj-&gt;isOpen()) {\n  echo \"Object is not open\";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($obj == null || $obj-&gt;isOpen()) {\n  echo \"Object is open\";\n}\n\nif ($obj != null &amp;&amp; !$obj-&gt;isOpen()) {\n  echo \"Object is not open\";\n}\n</pre>\n\n"},{"summary":"Variables should not be self-assigned","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1656","tags":["cert"],"description":"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic function setName($name) {\n    $name = $name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic function setName($name) {\n    $this-&gt;name = $name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"},{"summary":"Function argument names should be unique","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1536","tags":[],"description":"<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be\nerror prone. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction compute($a, $a, $c) { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction compute($a, $b, $c) { // Compliant\n}\n</pre>\n\n"},{"summary":"Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed","type":"Bug","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1145","tags":["cwe","misra"],"description":"<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {  // Noncompliant\n  doSomething();\n}\n...\nif (false) {  // Noncompliant\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>\n\n"},{"summary":"\"goto\" statement should not be used","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-907","tags":["brain-overload","misra"],"description":"<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$i = 0;\nloop:\n  echo(\"i = $i\");\n  $i++;\n  if ($i &lt; 10){\n    goto loop;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++){\n  echo(\"i = $i\");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>\n  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>\n</ul>\n\n"},{"summary":"Methods should not have identical implementations","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-4144","tags":["confusing","duplicate","suspicious"],"description":"<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n    private const CODE = \"bounteous\";\n\n    public function getCode() {\n        doTheThing();\n        return A::CODE;\n    }\n\n    public function getName() {  // Noncompliant\n        doTheThing();\n        return A::CODE;\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n    private const CODE = \"bounteous\";\n\n    public function getCode() {\n        doTheThing();\n        return A::CODE;\n    }\n\n    public function getName() {\n        return $this-&gt;getCode();\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>\n\n"},{"summary":"Ternary operators should not be nested","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-3358","tags":["confusing"],"description":"<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction get_title($gender, $is_married) {\n  return $gender == \"MALE\" ? \"Mr. \" : ($is_married ? \"Mrs. \" : \"Miss \");  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction get_title($gender, $is_married) {\n  if ($gender == \"MALE\") {\n    return \"Mr. \";\n  }\n  return $is_married ? \"Mrs. \" : \"Miss \";\n}\n</pre>\n\n"},{"summary":"Multiline blocks should be enclosed in curly braces","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-2681","tags":["cwe","cert"],"description":"<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif($condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif($condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\n$str = null;\nfor ($i = 0; $i &lt; count($array); $i++)\n  $str = $array[$i];\n  doTheThing($str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nif($condition) { firstActionInBlock(); secondAction(); }\n\nif($condition) {\n  firstActionInBlock();\n  secondAction();\n}\n\n$str = null;\nfor ($i = 0; $i &lt; count($array); $i++) {\n  $str = $array[$i];\n  doTheThing($str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>\n\n"},{"summary":"Two branches in a conditional structure should not have exactly the same implementation","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1871","tags":["design","suspicious"],"description":"<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n\nif ($b == 0) {\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing(); // Noncompliant; duplicates then-branch\n}\n\nvar b = a ? 12 &gt; 4 : 4;  // Noncompliant; always results in the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($i) {\n  case 1:\n  case 3:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif (($a &gt;= 0 &amp;&amp; $a &lt; 10) || ($a &gt;= 20 &amp;&amp; $a &lt; 50)) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n\ndoOneMoreThing();\n\nb = 4;\n</pre>\n<p>or </p>\n<pre>\nswitch ($i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n\nif ($b == 0) {\n  doOneMoreThing();\n}\nelse {\n  doTheRest();\n}\n\nint b = a ? 12 &gt; 4 : 8;\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n\n"},{"summary":"Method arguments with default values should be last","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1788","tags":["psr2"],"description":"<p>The ability to define default values for method arguments can make a method easier to use. Default argument values allow callers to specify as many\nor as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code. </p>\n<p>But all method arguments with default values should be declared after the method arguments without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values in order to \"get to\" the non-default arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction makeyogurt($type = \"acidophilus\", $flavor){...}  // Noncompliant\n\nmakeyogurt(\"raspberry\")}}  // Runtime error: Missing argument 2 in call to makeyogurt()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction makeyogurt($flavor, $type = \"acidophilus\", ){...}\n\nmakeyogurt(\"raspberry\")}} // Works as expected\n</pre>\n\n"},{"summary":"\"__construct\" functions should not make PHP 4-style calls to parent constructors","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1605","tags":["convention"],"description":"<p>In PHP 5 both the way to declare a constructor and the way to make a call to a parent constructor have evolved. When declaring constructors with\nthe PHP5 <code>__construct</code> name, nested calls to parent constructors should also use the new <code>__constructor</code> name.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo extends Bar {\n  function __construct() {\n    parent::Bar();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo extends Bar {\n  function __construct() {\n    parent::__construct();\n  }\n}\n</pre>\n\n"},{"summary":"PHP 4 constructor declarations should not be used ","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1603","tags":["pitfall"],"description":"<p>In PHP 4, any function with the same name as the nesting class was considered a class constructor. In PHP 5, this mechanism has been deprecated and\nthe \"__construct\" method name should be used instead. If both styles are present in the same class, PHP 5 will treat the function named \"__construct\"\nas the class constructor. </p>\n<p>This rule rule raises an issue for each method with the same name as the enclosing class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  function Foo(){...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  function __construct(){...}\n}\n</pre>\n\n"},{"summary":"Deprecated predefined variables should not be used","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1600","tags":["pitfall"],"description":"<p>The following predefined variables are deprecated and should be replaced by the new versions:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Replace</th>\n      <th>With</th>\n    </tr>\n    <tr>\n      <td>$HTTP_SERVER_VARS</td>\n      <td>$_SERVER</td>\n    </tr>\n    <tr>\n      <td>$HTTP_GET_VARS</td>\n      <td>$_GET</td>\n    </tr>\n    <tr>\n      <td>$HTTP_POST_VARS</td>\n      <td>$_POST</td>\n    </tr>\n    <tr>\n      <td>$HTTP_POST_FILES</td>\n      <td>$_FILES</td>\n    </tr>\n    <tr>\n      <td>$HTTP_SESSION_VARS</td>\n      <td>$_SESSION</td>\n    </tr>\n    <tr>\n      <td>$HTTP_ENV_VARS</td>\n      <td>$_ENV</td>\n    </tr>\n    <tr>\n      <td>$HTTP_COOKIE_VARS</td>\n      <td>$_COOKIE</td>\n    </tr>\n    <tr>\n      <td>$php_errormsg</td>\n      <td>error_get_last()</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\necho 'Name parameter value: ' . $HTTP_GET_VARS[\"name\"];\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\necho 'Name parameter value: ' . $_GET[\"name\"];\n</pre>\n\n"},{"summary":"\"switch\" statements should not have too many \"case\" clauses","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1479","tags":["brain-overload"],"description":"<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n\n"},{"summary":"Classes should not have too many methods","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1448","tags":["brain-overload"],"description":"<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>\n\n"},{"summary":"Functions should not have too many lines of code","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-138","tags":["brain-overload"],"description":"<p>A function that grows too large tends to aggregate too many responsibilities.</p>\n<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>\n<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>\n\n"},{"summary":"\"for\" loop stop conditions should be invariant","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-127","tags":["misra","pitfall"],"description":"<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++) {\n  echo $i;\n  if(condition) {\n    $i = 20;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++) {\n  echo $i;\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the\n  loop. </li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>\n</ul>\n\n"},{"summary":"Sections of code should not be \"commented out\"","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-125","tags":["misra","unused"],"description":"<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>\n\n"},{"summary":"Unused function parameters should be removed","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1172","tags":["misra","cert","unused"],"description":"<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething($a, $b) { // \"$a\" is unused\n  return compute($b);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething($b) {\n  return compute($b);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Functions in classes that override a class or implement interfaces are ignored.</p>\n<pre>\nclass C extends B {\n\n  function doSomething($a, $b) {     // no issue reported on $b\n    compute($a);\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"},{"summary":"Unused \"private\" methods should be removed","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1144","tags":["cert","unused"],"description":"<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  private function Foo() {}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n    ...\n  }\n\n  private function unusedPrivateFunction() {  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  private function Foo(){}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>\n\n"},{"summary":"Functions should not contain too many return statements","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1142","tags":["brain-overload"],"description":"<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nfunction myFunction(){ // Noncompliant as there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>\n\n"},{"summary":"Track uses of \"FIXME\" tags","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1134","tags":["cwe"],"description":"<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide($numerator, $denominator) {\n  return $numerator / $denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>\n\n"},{"summary":"Generic exceptions ErrorException, RuntimeException and Exception should not be thrown","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-112","tags":["cwe","error-handling","cert"],"description":"<p>If you throw a general exception type, such as ErrorException, RuntimeException, or Exception in a library or framework, it forces consumers to\ncatch all exceptions, including unknown exceptions that they do not know how to handle.</p>\n<p>Instead, either throw a subtype that already exists in the Standard PHP Library, or create your own type that derives from Exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nthrow new Exception();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nthrow new InvalidArgumentException();\n// or\nthrow new UnexpectedValueException();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>\n\n"},{"summary":"Local variables should not have the same name as class fields","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1117","tags":["cert","pitfall"],"description":"<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public $myField;\n\n  public function doSomething() {\n    $myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>\n\n"},{"summary":"Redundant pairs of parentheses should be removed","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1110","tags":["confusing"],"description":"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$x = ($y / 2 + 1); // Compliant even if the parenthesis are ignored by the compiler\n\nif ($a &amp;&amp; (($x + $y &gt; 0))) { // Noncompliant\n  //...\n}\n\nreturn (($x + 1)); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$x = ($y / 2 + 1);\n\nif ($a &amp;&amp; ($x + $y &gt; 0)) {\n  //...\n}\n\nreturn ($x + 1);\n</pre>\n\n"},{"summary":"Nested blocks of code should not be left empty","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-108","tags":["suspicious"],"description":"<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor ($i = 0; $i &lt; 42; $i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>\n\n"},{"summary":"Functions should not have too many parameters","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-107","tags":["brain-overload"],"description":"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4, $param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4) {\n...\n}\n</pre>\n\n"},{"summary":"Unused \"private\" fields should be removed","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1068","tags":["cert","unused"],"description":"<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private $foo = 4;                       //foo is unused\n\n  public function compute($a) {\n    return $a * 4;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  public function compute($a) {\n    return $a * 4;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"},{"summary":"Collapsible \"if\" statements should be merged","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":true,"ruleKey":"RSPEC-1066","tags":["clumsy"],"description":"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  if (condition2) {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1 &amp;&amp; condition2) {\n  ...\n}\n</pre>\n\n"},{"summary":"\"sleep\" should not be called","type":"Vulnerability","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-2964","tags":[],"description":"<p><code>sleep</code> is sometimes used in a mistaken attempt to prevent Denial of Service (DoS) attacks by throttling response rate. But because it\nties up a thread, each request takes longer to serve that it otherwise would, making the application <em>more</em> vulnerable to DoS attacks, rather\nthan less.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (is_bad_ip($requester)) {\n  sleep(5);  // Noncompliant\n}\n</pre>\n\n"},{"summary":"\"catch\" clauses should do more than rethrow","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-2737","tags":["cert","unused","finding","clumsy"],"description":"<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$s = \"\";\ntry {\n  $s = readMyFile($fileName);\n} catch (Exception $e)  {\n  throw $e;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$s = \"\";\ntry {\n  $s = readMyFile($fileName);\n} catch (Exception $e) {\n  error_log($e.getMessage());\n  throw $e;  // Compliant\n}\n</pre>\n<p>or</p>\n<pre>\n$s = \"\";\ntry {\n  $s = readMyFile($fileName);\n} catch (Exception $e) {\n  error_log($e.getMessage());\n  throw new MyException(\"an exception occurred\", 2, $e);  // Compliant\n}\n</pre>\n<p>or</p>\n<pre>\n$s = readMyFile($fileName);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"},{"summary":"\"&&\" and \"||\" should be used","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-2010","tags":["suspicious"],"description":"<p>PHP has two sets of logical operators: <code>&amp;&amp;</code> / <code>||</code>, and <code>and</code> / <code>or</code>. The difference between\nthe sets is precedence. Because <code>and</code> / <code>or</code> have a lower precedence than almost any other operator, using them instead of\n<code>&amp;&amp;</code> / <code>||</code> may not have the result you expect.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$have_time = true;\n$have_money = false;\n$take_vacation = $have_time and $have_money;  // Noncompliant. $take_vacation == true.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$have_time = true;\n$have_money = false;\n$take_vacation = $have_time &amp;&amp; $have_money;  // $take_vacation == false.\n</pre>\n\n"},{"summary":"Local variables should not be declared and then immediately returned or thrown","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1488","tags":["clumsy"],"description":"<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction computeDurationInMilliseconds() {\n  $duration = ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000 ;\n  return $duration;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction computeDurationInMilliseconds() {\n  return ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000;\n}\n</pre>\n\n"},{"summary":"Unused local variables should be removed","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1481","tags":["unused"],"description":"<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction numberOfMinutes($hours) {\n  $seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction numberOfMinutes($hours) {\n  return hours * 60;\n}\n</pre>\n\n"},{"summary":"\"switch\" statements should have at least 3 \"case\" clauses","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1301","tags":["misra","bad-practice"],"description":"<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($variable) {\n  case 0:\n    do_something();\n    break;\n  default:\n    do_something_else();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($variable == 0) {\n  do_something();\n} else {\n  do_something_else();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>\n\n"},{"summary":"A \"while\" loop should be used instead of a \"for\" loop","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1264","tags":["clumsy"],"description":"<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>\n\n"},{"summary":"Overriding methods should do more than simply call the same method in the super class ","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1185","tags":["redundant","clumsy"],"description":"<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Child extends Parent {\n\n  public function func($n,$m) {\n    parent::func($n$m);  // Noncompliant\n  }\n}\n\nclass Parent {\n  public function func($n, $m) {\n    // do something\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Child extends Parent {\n\n  public function func($n,$m) {\n    parent::func($n$m);\n    // do additional things...\n  }\n}\n\nclass Parent {\n  public function func($n, $m) {\n    // do something\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nclass Child extends Parent {\n  // function eliminated\n}\n\nclass Parent {\n  public function func($n, $m) {\n    // do something\n  }\n}\n</pre>\n\n"},{"summary":"Interface names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-114","tags":["convention"],"description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\ninterface myInterface {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ninterface MyInterface {...}\n</pre>\n\n"},{"summary":"Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1126","tags":["clumsy"],"description":"<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>\n\n"},{"summary":"Boolean literals should not be redundant","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1125","tags":["clumsy"],"description":"<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($booleanVariable == true) { /* ... */ }\nif ($booleanVariable != true) { /* ... */ }\nif ($booleanVariable || false) { /* ... */ }\ndoSomething(!false);\n\n$booleanVariable = condition ? true : exp;\n$booleanVariable = condition ? false : exp;\n$booleanVariable = condition ?  exp : true;\n$booleanVariable = condition ?  exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($booleanVariable) { /* ... */ }\nif (!$booleanVariable) { /* ... */ }\nif ($booleanVariable) { /* ... */ }\ndoSomething(true);\n\n$booleanVariable = condition || exp;\n$booleanVariable = !condition &amp;&amp; exp;\n$booleanVariable = !condition ||  exp;\n$booleanVariable = condition &amp;&amp; exp;\n</pre>\n<h2>Exceptions</h2>\n<p>The use of literal booleans in comparisons which use identity operators (<code>===</code> and <code>!==</code>) are ignored.</p>\n\n"},{"summary":"Empty statements should be removed","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1116","tags":["misra","cert","unused"],"description":"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  ;                                              // Noncompliant - was used as a kind of TODO marker\n}\n\nfunction doSomethingElse($p) {\n  echo $p;;                                      // Noncompliant - double ;\n}\n\nfor ($i = 1; $i &lt;= 10; doSomething($i), $i++);   // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething() {}\n\nfunction doSomethingElse($p) {\n  echo $p;\n\n  for ($i = 1; $i &lt;= 10; $i++) {\n    doSomething($i);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7gCTAw\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4FtAg\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>\n\n"},{"summary":"A close curly brace should be located at the beginning of a line","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1109","tags":["convention"],"description":"<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>\n\n"},{"summary":"URIs should not be hardcoded","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-1075","tags":["cert"],"description":"<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.</p>\n<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>\n<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>\n\n"},{"summary":"Tabulation characters should not be used","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-105","tags":["convention","psr2"],"description":"<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>\n\n"},{"summary":"Class names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":true,"ruleKey":"RSPEC-101","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>\n\n"},{"summary":"Track uses of \"TODO\" tags","type":"Code Smell","defaultSeverity":"Info","inDefaultProfile":true,"ruleKey":"RSPEC-1135","tags":["cwe"],"description":"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>\n\n"},{"summary":"\"file_uploads\" should be disabled","type":"Vulnerability","defaultSeverity":"Blocker","inDefaultProfile":false,"ruleKey":"RSPEC-3338","tags":["cwe","sans-top25-insecure","php-ini"],"description":"<p><code>file_uploads</code> is an on-by-default PHP configuration that allows files to be uploaded to your site. Since accepting <del>candy</del>\nfiles from strangers is inherently dangerous, this feature should be disabled unless it is absolutely necessary for your site.</p>\n<p>This rule raises an issue when <code>file_uploads</code> is not explicitly disabled.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n; php.ini\nfile_uploads=1  ; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n; php.ini\nfile_uploads=0\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/434.html\">MITRE, CWE-434</a> - Unrestricted Upload of File with Dangerous Type </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>\n\n"},{"summary":"\"enable_dl\" should be disabled","type":"Vulnerability","defaultSeverity":"Blocker","inDefaultProfile":false,"ruleKey":"RSPEC-3337","tags":["cwe","php-ini"],"description":"<p><code>enable_dl</code> is on by default and allows <code>open_basedir</code> restrictions, which limit the files a script can access, to be\nignored. For that reason, it's a dangerous option and should be explicitly turned off.</p>\n<p>This rule raises an issue when <code>enable_dl</code> is not explicitly set to 0 in <em>php.ini</em>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n; php.ini\nenable_dl=1  ; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n; php.ini\nenable_dl=0\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/23.html\">MITRE, CWE-23</a> - Relative Path Traversal </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/36.html\">MITRE, CWE-36</a> - Absolute Path Traversal </li>\n</ul>\n\n"},{"summary":"\"session.use_trans_sid\" should not be enabled","type":"Vulnerability","defaultSeverity":"Blocker","inDefaultProfile":false,"ruleKey":"RSPEC-3336","tags":["owasp-a5","php-ini"],"description":"<p>PHP's <code>session.use_trans_sid</code> automatically appends the user's session id to urls when cookies are disabled. On the face of it, this\nseems like a nice way to let uncookie-able users use your site anyway. In reality, it makes those users vulnerable to having their sessions hijacked\nby anyone who might:</p>\n<ul>\n  <li> see the URL over the user's shoulder </li>\n  <li> be sent the URL by the user </li>\n  <li> retrieve the URL from browser history </li>\n  <li> ... </li>\n</ul>\n<p>For that reason, it's better to practice a little \"tough love\" with your users and force them to turn on cookies.</p>\n<p>Since <code>session.use_trans_sid</code> is off by default, this rule raises an issue when it is explicitly enabled.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n; php.ini\nsession.use_trans_sid=1  ; Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration\">OWASP Top Ten 2013 Category A5</a> - Security\n  Misconfiguration </li>\n</ul>\n\n"},{"summary":"\"allow_url_fopen\" and \"allow_url_include\" should be disabled","type":"Vulnerability","defaultSeverity":"Blocker","inDefaultProfile":false,"ruleKey":"RSPEC-3334","tags":["cwe","owasp-a1","sans-top25-risky","php-ini"],"description":"<p><code>allow_url_fopen</code> and <code>allow_url_include</code> allow code to be read into a script from URL's. The ability to suck in executable\ncode from outside your site, coupled with imperfect input cleansing could lay your site bare to attackers. Even if your input filtering is perfect\ntoday, are you prepared to bet your site that it will always be perfect in the future?</p>\n<p>This rule raises an issue when either property is explicitly enabled in <em>php.ini</em> and when <code>allow_url_fopen</code>, which defaults to\nenabled, is not explicitly disabled.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n; php.ini  Noncompliant; allow_url_fopen not explicitly disabled\nallow_url_include=1  ; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n; php.ini\nallow_url_fopen=0\nallow_url_include=0\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/829.html\">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Risky Resource Management </li>\n</ul>\n\n"},{"summary":"\"open_basedir\" should limit file access","type":"Vulnerability","defaultSeverity":"Blocker","inDefaultProfile":false,"ruleKey":"RSPEC-3333","tags":["cwe","php-ini"],"description":"<p>The <code>open_basedir</code> configuration in <em>php.ini</em> limits the files the script can access using, for example, <code>include</code> and\n<code>fopen()</code>. Leave it out, and there is no default limit, meaning that any file can be accessed. Include it, and PHP will refuse to access\nfiles outside the allowed path.</p>\n<p><code>open_basedir</code> should be configured with a directory, which will then be accessible recursively. However, the use of <code>.</code>\n(current directory) as an <code>open_basedir</code> value should be avoided since it's resolved dynamically during script execution, so a\n<code>chdir('/')</code> command could lay the whole server open to the script.</p>\n<p>This is not a fool-proof configuration; it can be reset or overridden at the script level. But its use should be seen as a minimum due diligence\nstep. This rule raises an issue when <code>open_basedir</code> is not present in <em>php.ini</em>, and when <code>open_basedir</code> contains root,\nor the current directory (<code>.</code>) symbol.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n; php.ini try 1\n; open_basedir=\"${USER}/scripts/data\"  Noncompliant; commented out\n\n; php.ini try 2\nopen_basedir=\"/:${USER}/scripts/data\"  ; Noncompliant; root directory in the list\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n; php.ini try 1\nopen_basedir=\"${USER}/scripts/data\"\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/23.html\">MITRE, CWE-23</a> - Relative Path Traversal </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/36.html\">MITRE, CWE-36</a> - Absolute Path Traversal </li>\n</ul>\n\n"},{"summary":"\"exit(...)\" and \"die(...)\" statements should not be used","type":"Bug","defaultSeverity":"Blocker","inDefaultProfile":false,"ruleKey":"RSPEC-1799","tags":[],"description":"<p>The <code>exit(...)</code> and <code>die(...)</code> statements should absolutely not be used in Web PHP pages as this might lead to a very bad\nuser experience. In such case, the end user might have the feeling that the web site is down or has encountered a fatal error. </p>\n<p>But of course PHP can also be used to develop command line application and in such case use of <code>exit(...)</code> or <code>die(...)</code>\nstatement can be justified but must remain limited and not spread all over the application. We expect exceptions to be used to handle errors and those\nexceptions should be caught just before leaving the application to specify the exit code with help of <code>exit(...)</code> or <code>die(...)</code>\nstatements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n    public function bar($param)  {\n        if ($param === 42) {\n            exit(23);\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n    public function bar($param)  {\n        if ($param === 42) {\n            throw new Exception('Value 42 is not expected.');\n        }\n    }\n}\n</pre>\n\n"},{"summary":"Functions and variables should not be defined outside of classes","type":"Code Smell","defaultSeverity":"Blocker","inDefaultProfile":false,"ruleKey":"RSPEC-2007","tags":["design"],"description":"<p>Defining and using global variables and global functions, when the convention dictates OOP can be confusing and difficult to use properly for\nmultiple reasons:</p>\n<ul>\n  <li> You run the risk of name clashes. </li>\n  <li> Global functions must be stateless, or they can cause difficult-to-track bugs. </li>\n  <li> Global variables can be updated from anywhere and may no longer hold the value you expect. </li>\n  <li> It is difficult to properly test classes that use global functions. </li>\n</ul>\n<p>Instead of being declared globally, such variables and functions should be moved into a class, potentially marked <code>static</code>, so they can\nbe used without a class instance. </p>\n<p>This rule checks that only object-oriented programming is used and that no functions or procedures are declared outside of a class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n\n$name = \"Bob\"; // Noncompliant\n\nfunction doSomething($arg) {   // Noncompliant\n  //...\n}\n\nclass MyClass {\n    //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\nclass MyClass {\n\n  public static $name = \"Bob\"; // Compliant\n\n  public static function doSomething($arg) {              // Compliant\n    //...\n  }\n  //...\n}\n</pre>\n\n"},{"summary":"Track lack of copyright and license headers","type":"Code Smell","defaultSeverity":"Blocker","inDefaultProfile":false,"ruleKey":"RSPEC-1451","tags":[],"description":"<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>\n\n"},{"summary":"Switch cases should end with an unconditional \"break\" statement","type":"Code Smell","defaultSeverity":"Blocker","inDefaultProfile":false,"ruleKey":"RSPEC-128","tags":["cwe","misra","cert","suspicious"],"description":"<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    do_something();\n  default:\n    do_something_else();\n   break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    do_something();\n    break;\n  default:\n    do_something_else();\n   break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in following cases:</p>\n<pre>\nswitch ($myVariable) {\n  case 0:                  // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    do_something();\n    break;\n  case 2:                  // Use of continue statement\n    continue;\n  case 3:                  // Case includes a jump statement (exit, return, break &amp;etc)\n    exit(0);\n  case 4:\n    echo 'Second case, which falls through';\n    // no break        &lt;- comment is used when fall-through is intentional in a non-empty case body\n  default:                 // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZoFLAQ\">CERT, MSC18-CPP.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ewHAAQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>\n\n"},{"summary":"Session-management cookies should not be persistent","type":"Vulnerability","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-3332","tags":["php-ini","owasp-a3"],"description":"<p>Cookies without fixed lifetimes or expiration dates are known as non-persistent, or \"session\" cookies, meaning they last only as long as the\nbrowser session, and poof away when the browser closes. Cookies with expiration dates, \"persistent\" cookies, are stored/persisted until those\ndates.</p>\n<p>Non-persistent cookies should be used for the management of logged-in sessions on web sites. To make a cookie non-persistent, simply omit the\n<code>expires</code> attribute.</p>\n<p>This rule raises an issue when <code>expires</code> is set for a session cookie, either programmatically or via configuration, such as\n<code>session.cookie_lifetime</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting\n  (XSS) </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Expire_and_Max-Age_Attributes\">OWASP, Session Management Cheat\n  Sheet</a> - Expire and Max-Age Attributes </li>\n</ul>\n\n"},{"summary":"\"global\" should not be used","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-2011","tags":["convention"],"description":"<p>Global variables are a useful construct, but they should not be abused. Functions can access the global scope either through the\n<code>global</code> keyword or though the <code>$GLOBALS</code> array, but these practices considerably reduce the function's readability and\nreusability. Instead, the global variable should be passed as a parameter to the function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$myGlobalVariable;\n\nfunction foo()\n{\n  global $myGlobalVariable; // Noncompliant\n  $GLOBALS['myGlobalVariable']; // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo($myStateVariable)\n{\n  // ...\n}\n</pre>\n\n"},{"summary":"Functions should not be too complex","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-1541","tags":["brain-overload"],"description":"<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>\n\n"},{"summary":"Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-134","tags":["brain-overload"],"description":"<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\n  if (condition1) {                  // Compliant - depth = 1\n    ...\n    if (condition2) {                // Compliant - depth = 2\n      ...\n      for($ = 0; $i &lt; 10; $i++) {  // Compliant - depth = 3, not exceeding the limit\n        ...\n        if (condition4) {            // Non-Compliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            ...\n          }\n          return;\n        }\n      }\n    }\n  }\n</pre>\n\n"},{"summary":"Classes should not be too complex","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-1311","tags":[],"description":"<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to\nunderstand and therefore to maintain.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>\n\n"},{"summary":"\"if ... else if\" constructs should end with \"else\" clauses","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-126","tags":["misra","cert"],"description":"<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  do_something();\n} else if (condition2) {\n  do_something_else();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  do_something();\n} else if (condition2) {\n  do_something_else();\n} else {\n  throw new InvalidArgumentException('message');\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PQHRAw\">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>\n\n"},{"summary":"Expressions should not be too complex","type":"Code Smell","defaultSeverity":"Critical","inDefaultProfile":false,"ruleKey":"RSPEC-1067","tags":["brain-overload"],"description":"<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3</p>\n<pre>\nif ((($condition1 &amp;&amp; $condition2) || ($condition3 &amp;&amp; $condition4)) &amp;&amp; $condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (my_first_condition() || my_second_condition()) &amp;&amp; my_last_condition()) { ... }\n</pre>\n\n"},{"summary":"\"cgi.force_redirect\" should be enabled","type":"Vulnerability","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-3335","tags":["cwe","owasp-a5","php-ini"],"description":"<p>The <code>cgi.force_redirect</code> <em>php.ini</em> configuration is on by default, and it prevents unauthenticated access to scripts when PHP is\nrunning as a CGI. Unfortunately, it must be disabled on IIS, OmniHTTPD and Xitami, but in all other cases it should be on.</p>\n<p>This rule raises an issue when when <code>cgi.force_redirect</code> is explicitly disabled.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n; php.ini\ncgi.force_redirect=0  ; Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/305\">MITRE, CWE-305</a> - Authentication Bypass by Primary Weakness </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration\">OWASP Top Ten 2013 Category A5</a> - Security\n  Misconfiguration </li>\n</ul>\n\n"},{"summary":"Files that define symbols should not cause side-effects","type":"Bug","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-2036","tags":["psr1","user-experience"],"description":"<p>Files that define symbols such as classes and variables may be included into many files. Simply performing that inclusion should have no effect on\nthose files other than declaring new symbols. For instance, a file containing a class definition should not also contain side-effects such as\n<code>print</code> statements that will be evaluated automatically on inclusion. Logic should be segregated into symbol-only files and\nside-effect-only files. The type of operation which is not allowed in a symbol-definition file includes but is not limited to: </p>\n<ul>\n  <li> generating output </li>\n  <li> modifying <code>ini</code> settings </li>\n  <li> emitting errors or exceptions </li>\n  <li> modifying global or static variables </li>\n  <li> reading/writing files </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n\nprint \"Include worked!\";\n\nclass foo {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\n\nclass foo {\n\n  public function log() {\n    print \"Include worked!\";\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://www.php-fig.org/psr/psr-1/\">PHP-FIG Basic Coding Standard PSR1</a>, 2.3 - Side Effects </li>\n</ul>\n\n"},{"summary":"Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-881","tags":["misra","cert"],"description":"<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$u8a = ++$u8b + $u8c--;\n$foo = $bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++$u8b;\n$u8a = $u8b + $u8c;\n$u8c--;\n$foo = $bar / 4;\n$bar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>\n\n"},{"summary":"Duplicate values should not be passed as arguments","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-4142","tags":["suspicious"],"description":"<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was\nintended for one of the arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (compare($a+$x, $a+$x) != 0) { // Noncompliant\n&nbsp;&nbsp;//...\n}\n\nif (compare(getValue($a), getValue($a)) != 0) { // Noncompliant\n&nbsp;&nbsp;// ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (compare($a+$y, $a+$x) != 0) {\n&nbsp;&nbsp;//...\n}\n\n$v1 = getValue($a);\n$v2 = getValue($a);\nif (compare($v1, $v2) != 0) {\n&nbsp;&nbsp;// ...\n}\n</pre>\n\n"},{"summary":"Functions should use \"return\" consistently","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-3801","tags":["api-design","confusing"],"description":"<p>Because it is dynamically typed, PHP does not enforce a return type on a function. This means that different paths through a function can return\ndifferent types of values, which can be very confusing to the user and significantly harder to maintain.</p>\n<p>In particular, it is consequently also possible to mix empty <code>return</code> statements (implicitly returning <code>null</code>) with some\nreturning an expression. This rule verifies that all the <code>return</code> statements from a function are consistent.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo($a) { // Noncompliant, function will return \"true\" or null\n  if ($a == 1) {\n    return true;\n  }\n  return;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo($a) {\n  if ($a == 1) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<p>or </p>\n<pre>\nfunction foo($a) {\n  if ($a == 1) {\n    return true;\n  }\n  return null;\n}\n</pre>\n\n"},{"summary":"Configuration should not be changed dynamically","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-2918","tags":["suspicious"],"description":"<p><code>ini_set</code> changes the value of the given configuration option for the duration of the script's execution. While there may be a reason to\ndo this, you should make sure that it's a very good reason indeed, because this is the sort of \"magic\" change which can cause severe teeth-gnashing\nand hair tearing when the script needs to be debugged. </p>\n<p>For instance, if the user explicitly turns logging on for a script, but then the script itself uses <code>ini_set('display_errors', 0);</code> to\nturn logging back off, it is likely that every other aspect of the environment will be examined before, in desperation, the script is read to figure\nout where the logging is going.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nini_set('display_errors', 0);  // Noncompliant\n</pre>\n\n"},{"summary":"Class constructors should not create other objects","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-2830","tags":["design"],"description":"<p>Dependency injection is a software design pattern in which one or more dependencies (or services) are injected, or passed by reference, into a\ndependent object (or client) and are made part of the client's state. The pattern separates the creation of a client's dependencies from its own\nbehavior, which allows program designs to be loosely coupled and to follow the dependency inversion and single responsibility principles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass SomeClass {\n\n  public function __construct() {\n    $this-&gt;object = new SomeOtherClass();  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass SomeClass {\n\n  public function __construct(SomeOtherClass $object) {\n    $this-&gt;object = $object;\n  }\n}\n</pre>\n\n"},{"summary":"PHP parser failure","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-2260","tags":["suspicious"],"description":"<p>When the PHP parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>\n\n"},{"summary":"The names of methods with boolean return values should start with \"is\" or \"has\"","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-2047","tags":["convention"],"description":"<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean property should have names that start with \"is\" or \"has\" rather than with \"get\".</p>\n<p>Note that this rule will only apply to functions that are documented to return a boolean.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @return boolean\n */\npublic function getFoo() // Noncompliant\n{\n  return foo;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * @return boolean\n */\npublic function isFoo()\n{\n  return true;\n}\n</pre>\n\n"},{"summary":"\"php_sapi_name()\" should not be used","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-2044","tags":["performance"],"description":"<p>Both <code>php_sapi_name()</code> and the <code>PHP_SAPI</code> constant give the same value. But calling the method is less efficient that simply\nreferencing the constant. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (php_sapi_name() == 'test') { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (PHP_SAPI == 'test') { ... }\n</pre>\n\n"},{"summary":"Classes should not have too many lines of code","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-2042","tags":["brain-overload"],"description":"<p>A class that grows too much tends to aggregate too many responsibilities, and inevitably becomes harder to understand and to maintain. Above a\nspecific threshold, it is strongly advised to refactor the class into smaller ones which focus on well-defined topics.</p>\n\n"},{"summary":"Deprecated functions should not be used","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-2001","tags":["obsolete"],"description":"<p>Deprecated language features are those that have been retained temporarily for backward compatibility, but which will eventually be removed from\nthe language. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no\nuse of the deprecated features should be added to the code, and all existing uses should be gradually removed.</p>\n<p>The following functions were deprecated in PHP 5:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Deprecated</th>\n      <th>Use Instead</th>\n    </tr>\n    <tr>\n      <td><code>call_user_method()</code></td>\n      <td><code>call_user_func()</code></td>\n    </tr>\n    <tr>\n      <td><code>call_user_method_array()</code></td>\n      <td><code>call_user_func_array()</code></td>\n    </tr>\n    <tr>\n      <td><code>define_syslog_variables()</code></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>dl()</code></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>ereg()</code></td>\n      <td><code>preg_match()</code></td>\n    </tr>\n    <tr>\n      <td><code>ereg_replace()</code></td>\n      <td><code>preg_replace()</code> (note that this is deprecated in PHP 5.5)</td>\n    </tr>\n    <tr>\n      <td><code>eregi()</code></td>\n      <td><code>preg_match()</code> with 'i' modifier</td>\n    </tr>\n    <tr>\n      <td><code>eregi_replace()</code></td>\n      <td><code>preg_replace()</code> with 'i' modifier</td>\n    </tr>\n    <tr>\n      <td><code>set_magic_quotes_runtime()</code> and its alias, <code>magic_quotes_runtime()</code></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>session_register()</code></td>\n      <td><code>$_SESSION</code> superglobal</td>\n    </tr>\n    <tr>\n      <td><code>session_unregister()</code></td>\n      <td><code>$_SESSION</code> superglobal</td>\n    </tr>\n    <tr>\n      <td><code>session_is_registered()</code></td>\n      <td><code>$_SESSION</code> superglobal</td>\n    </tr>\n    <tr>\n      <td><code>set_socket_blocking()</code></td>\n      <td><code>stream_set_blocking()</code></td>\n    </tr>\n    <tr>\n      <td><code>split()</code></td>\n      <td><code>preg_split()</code></td>\n    </tr>\n    <tr>\n      <td><code>spliti()</code></td>\n      <td><code>preg_split()</code> with 'i' modifier</td>\n    </tr>\n    <tr>\n      <td><code>sql_regcase()</code></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>mysql_db_query()</code></td>\n      <td><code>mysql_select_db()</code> and <code>mysql_query()</code></td>\n    </tr>\n    <tr>\n      <td><code>mysql_escape_string()</code></td>\n      <td><code>mysql_real_escape_string()</code></td>\n    </tr>\n    <tr>\n      <td>Passing locale category names as strings</td>\n      <td>Use the LC_* family of constants</td>\n    </tr>\n  </tbody>\n</table>\n<p>The following functions were deprecated in PHP 7:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Deprecated</th>\n      <th>Use Instead</th>\n    </tr>\n    <tr>\n      <td><code>__autoload()</code></td>\n      <td><code>spl_autoload_register()</code></td>\n    </tr>\n    <tr>\n      <td><code>create_function()</code></td>\n      <td>anonymous function</td>\n    </tr>\n    <tr>\n      <td><code>parse_str()</code> without second argument</td>\n      <td><code>parse_str()</code> with second argument</td>\n    </tr>\n    <tr>\n      <td><code>gmp_random()</code></td>\n      <td><code>gmp_random_bits()</code> or <code>gmp_random_range()</code></td>\n    </tr>\n    <tr>\n      <td><code>each()</code></td>\n      <td><code>foreach</code></td>\n    </tr>\n    <tr>\n      <td><code>assert()</code> with string argument</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n\n"},{"summary":"Files should not contain inline HTML","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-1997","tags":["convention","brain-overload"],"description":"<p>Shared coding conventions allow teams to collaborate efficiently. To avoid the confusion that can be caused by tangling two coding languages in the\nsame file, inline HTML should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n$name = \"George\";\n?&gt;\n&lt;p&gt; Hello &lt;?php echo $name ?&gt;!&lt;/p&gt;\n</pre>\n<h2>Exceptions</h2>\n<p>File having the extension <code>.phtml</code> are ignored by this rule because they are expected to have mixed PHP and HTML.</p>\n\n"},{"summary":"Files should contain only one top-level class or interface each","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-1996","tags":["brain-overload"],"description":"<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.</p>\n\n"},{"summary":"Classes should not have too many fields","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-1820","tags":["brain-overload"],"description":"<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>\n\n"},{"summary":"Track uses of \"NOSONAR\" comments","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-1291","tags":["bad-practice"],"description":"<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>\n\n"},{"summary":"Statements should be on separate lines","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-122","tags":["psr2","style"],"description":"<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Anonymous functions containing a single statement are ignored.</p>\n<pre>\n$max_comparator = function ($v) { return $v &gt; 2; };           // Compliant\n$max_comparator = function ($v) { echo $v; return $v &gt; 2; };  // Noncompliant\n</pre>\n\n"},{"summary":"Classes should not be coupled to too many other classes (Single Responsibility Principle)","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-1200","tags":["brain-overload"],"description":"<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  class Foo {            // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n    /**\n     * @var T1\n     */\n    public $a1;          // Foo is coupled to T1\n    /**\n     * @var T2\n     */\n    protected $a2;       // Foo is coupled to T2\n    /**\n     * @var T3\n     */\n    private $a3;         // Foo is coupled to T3\n\n    /**\n     * @param T5\n     * @param T6\n     *\n     * @return T4\n     */\n    public function compute(T5 $a, $b) { // Foo is coupled to T4, T5 and T6\n      $result = new T7();     // Foo is coupled to T7\n      return $result;\n  }\n}\n</pre>\n\n"},{"summary":"\"switch case\" clauses should not have too many lines of code","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-1151","tags":["brain-overload"],"description":"<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nswitch ($var) {\n  case 0:  // 6 lines till next case\n    methodCall1();\n    methodCall2();\n    methodCall3();\n    methodCall4();\n    break;\n  default:\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($var) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    break;\n}\n\nfunction doSomething(){\n  methodCall1(\"\");\n  methodCall2(\"\");\n  methodCall3(\"\");\n  methodCall4(\"\");\n}\n</pre>\n\n"},{"summary":"Assignments should not be made from within sub-expressions","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-1121","tags":["cwe","misra","cert","suspicious"],"description":"<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($val = value() &amp;&amp; check()) { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$val = value();\nif ($val &amp;&amp; check()) {\n}\n</pre>\n<p>or </p>\n<pre>\nif ($val == value() &amp;&amp; check()) { // Perhaps in fact the assignment operator was expected\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>\n<pre>\nwhile (($line = next_line()) != NULL) {...}\n\nwhile ($line = next_line()) {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/nYFtAg\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1gCTAw\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KQvhAg\">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KYIyAQ\">CERT, MSC02-CPP.</a> - Avoid errors of omission </li>\n</ul>\n\n"},{"summary":"Files should not have too many lines of code","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-104","tags":["brain-overload"],"description":"<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>\n\n"},{"summary":"Lines should not be too long","type":"Code Smell","defaultSeverity":"Major","inDefaultProfile":false,"ruleKey":"RSPEC-103","tags":["convention"],"description":"<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>\n\n"},{"summary":"Static members should be referenced with \"static::\"","type":"Bug","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2037","tags":["pitfall"],"description":"<p>References in a class to static class members (fields or methods) can be made using either <code>self::$var</code> or <code>static::$var</code>\n(introduced in 5.3). The difference between the two is one of scope. Confusingly, in subclasses, the use of <code>self::</code> references the\noriginal definition of the member, i.e. the superclass version, rather than any override at the subclass level. <code>static::</code>, on the other\nhand, references the class that was called at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n\nclass Toy {\n\n    public static function status() {\n        self::getStatus();  // Noncompliant; will always print \"Sticks are fun!\" even when called from a subclass which overrides this method;\n    }\n\n    protected static function getStatus() {\n        echo \"Sticks are fun!\";\n    }\n}\n\nclass Ball extends Toy {\n\n    protected static function getStatus() {  // Doesn't actually get called\n        echo \"Balls are fun!\";\n    }\n}\n\n$myBall = new Ball();\n$myBall::status();  // Prints \"Sticks are fun!\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\n\nclass Toy {\n\n    public static function status() {\n        static::getStatus();  // Compliant\n    }\n\n    protected static function getStatus() {\n        echo \"Sticks are fun!\";\n    }\n}\n\nclass Ball extends Toy {\n\n    protected static function getStatus() {\n        echo \"Balls are fun!\";\n    }\n}\n\n$myBall = new Ball();\n$myBall::status();  // Prints \"Balls are fun!\"\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is raised when <code>self</code> is used on a constant field, a private field or a private method.</p>\n<pre>\nclass A\n{\n    private static $somevar = \"hello\";\n    const CONSTANT = 42;\n\n    private static function foo()\n    {\n        $var = self::$somevar . self::CONSTANT;  // Should be OK\n        self::foo();                               // Should be OK\n    }\n}\n</pre>\n\n"},{"summary":"\"require_once\" and \"include_once\" should be used instead of \"require\" and \"include\"","type":"Bug","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2003","tags":[],"description":"<p>At root, <code>require</code>, <code>require_once</code>, <code>include</code>, and <code>include_once</code> all perform the same task of\nincluding one file in another. However, the way they perform that task differs, and they should not be used interchangeably.</p>\n<p><code>require</code> includes a file but generates a fatal error if an error occurs in the process.</p>\n<p><code>include</code> also includes a file, but generates only a warning if an error occurs.</p>\n<p>Predictably, the difference between <code>require</code> and <code>require_once</code> is the same as the difference between <code>include</code>\nand <code>include_once</code> - the \"_once\" versions ensure that the specified file is only included once. </p>\n<p>Because including the same file multiple times could have unpredictable results, the \"once\" versions are preferred.</p>\n<p>Because <code>include_once</code> generates only warnings, it should be used only when the file is being included conditionally, i.e. when all\npossible error conditions have been checked beforehand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninclude 'code.php';  //Noncompliant; not a \"_once\" usage and not conditional\ninclude $user.'_history.php'; // Noncompliant\nrequire 'more_code.php';  // Noncompliant; not a \"_once\" usage\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nrequire_once 'code.php';\nif (is_member($user)) {\n  include_once $user.'_history.php';\n}\nrequire_once 'more_code.php';\n</pre>\n\n"},{"summary":"Errors should not be silenced","type":"Bug","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2002","tags":["pitfall"],"description":"<p>Just as pain is your body's way of telling you something is wrong, errors are PHP's way of telling you there's something you need to fix. Neither\npain, nor PHP errors should be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@doSomethingDangerous($password);  // Noncompliant; '@' silences errors from function call\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomethingDangerous($password);\n</pre>\n\n"},{"summary":"Files should not contain characters before \"<?php\"","type":"Bug","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2000","tags":["user-experience"],"description":"<p>Having characters before <code>&lt;?php</code> can cause \"Cannot modify header information\" errors and similar problems with Ajax requests.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntest&lt;?php  //Noncompliant\n// ...\n</pre>\n<p>and</p>\n<pre>\n// Noncompliant; newline before opening tag\n&lt;?php\n// ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\n// ...\n</pre>\n\n"},{"summary":"Method visibility should be explicitly declared","type":"Bug","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1784","tags":["convention","psr2"],"description":"<p>Class methods may be defined as public, private, or protected. Methods declared without any explicit visibility keyword are defined as public. To\nprevent any misunderstanding, this visibility should always be explicitly declared.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic function foo(){...}\n</pre>\n\n"},{"summary":"Alias functions should not be used","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2050","tags":["obsolete"],"description":"<p>Certain functions exist in PHP only as aliases of other functions. These aliases have been made available for backward compatibility, but should\nreally be removed from code. </p>\n<p>This rule looks for uses of the following aliases:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Alias</th>\n      <th>Replacement</th>\n    </tr>\n    <tr>\n      <td><code>chop</code></td>\n      <td><code>rtrim</code></td>\n    </tr>\n    <tr>\n      <td><code>close</code></td>\n      <td><code>closedir</code></td>\n    </tr>\n    <tr>\n      <td><code>doubleval</code></td>\n      <td><code>floatval</code></td>\n    </tr>\n    <tr>\n      <td><code>fputs</code></td>\n      <td><code>fwrite</code></td>\n    </tr>\n    <tr>\n      <td><code>ini_alter</code></td>\n      <td><code>ini_set</code></td>\n    </tr>\n    <tr>\n      <td><code>is_double</code></td>\n      <td><code>is_float</code></td>\n    </tr>\n    <tr>\n      <td><code>is_integer</code></td>\n      <td><code>is_int</code></td>\n    </tr>\n    <tr>\n      <td><code>is_long</code></td>\n      <td><code>is_int</code></td>\n    </tr>\n    <tr>\n      <td><code>is_real</code></td>\n      <td><code>is_float</code></td>\n    </tr>\n    <tr>\n      <td><code>is_writeable</code></td>\n      <td><code>is_writable</code></td>\n    </tr>\n    <tr>\n      <td><code>join</code></td>\n      <td><code>implode</code></td>\n    </tr>\n    <tr>\n      <td><code>key_exists</code></td>\n      <td><code>array_key_exists</code></td>\n    </tr>\n    <tr>\n      <td><code>magic_quotes_runtime</code></td>\n      <td><code>set_magic_quotes_runtime</code></td>\n    </tr>\n    <tr>\n      <td><code>pos</code></td>\n      <td><code>current</code></td>\n    </tr>\n    <tr>\n      <td><code>show_source</code></td>\n      <td><code>highlight_file</code></td>\n    </tr>\n    <tr>\n      <td><code>sizeof</code></td>\n      <td><code>count</code></td>\n    </tr>\n    <tr>\n      <td><code>strchr</code></td>\n      <td><code>strstr</code></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$arr=array(\"apple\", \"pear\",\"banana\");\necho sizeof($arr);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$arr=array(\"apple\", \"pear\",\"banana\");\necho count($arr);\n</pre>\n\n"},{"summary":"Perl-style comments should not be used","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2046","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate effectively. This rule flags all Perl-style comments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$myvar; # Noncompliant; this comment should have started with \"//\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$myvar; // Compliant; this comment started with \"//\"\n</pre>\n\n"},{"summary":"Superglobals should not be accessed directly","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2043","tags":["bad-practice"],"description":"<p>Superglobal variables are predefined variables available in all scopes throughout a script. However, accessing them directly is considered bad\npractice. Instead, they should be accessed through an object or framework that handles sanitation and validation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$name = $_POST['name'];\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$name = $this-&gt;params()-&gt;fromPost('name');\n</pre>\n\n"},{"summary":"Colors should be defined in upper case","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2038","tags":["convention"],"description":"<p>Shared coding conventions allow teams to collaborate effectively. Writing colors in upper case makes them stand out at such, thereby making the\ncode easier to read.</p>\n<p>This rule checks that hexadecimal color definitions are written in upper case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$white = '#ffffff';  // Noncompliant\n$dkgray = '#006400';\n$aqua = '#00ffff';  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$white = '#FFFFFF';  // Compliant\n$dkgray = '#006400';\n$aqua = '#00FFFF';  // Compliant\n</pre>\n\n"},{"summary":"String literals should not be concatenated","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-2005","tags":["clumsy"],"description":"<p>There is no reason to concatenate literal strings. Doing so is an exercise in reducing code readability. Instead, the strings should be\ncombined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$msg = \"Hello \" . \"${name}\" . \"!\";  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$msg = \"Hello ${name}!\";\n</pre>\n\n"},{"summary":"\"final\" should not be used redundantly","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1990","tags":["convention"],"description":"<p>There is no need to use the <code>final</code> modifier inside a <code>final</code> class. Everything in it is <code>final</code> by default.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal class MyClass {\n\n  public final String getName() {  // Noncompliant\n    return name;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfinal class MyClass {\n\n  public String getName() {  // Compliant\n    return name;\n  }\n}\n</pre>\n\n"},{"summary":"Source code should comply with formatting standards","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1808","tags":["psr2","style"],"description":"<p>Shared coding conventions make it possible for a team to collaborate efficiently. This rule raises issues for failures to comply with formatting\nstandard. The default parameter values conform to the PSR2 standard.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default PSR2 parameter values:</p>\n<pre>\nuse FooClass;\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002  // Noncompliant; the \"use\" declaration should be placed after the \"namespace\" declaration\n\nnamespace Vendor\\Package;\nuse FooClass;\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002  // Noncompliant; the \"namespace\" declaration should be followed by a blank line\n$foo = 1;\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002  // Noncompliant; the \"use\" declaration should be followed by a blank line\n\nclass ClassA {\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002 \u2002 \u2002// Noncompliant; an open curly brace should be at the beginning of a new line for classes and functions\n\u2002\u2002function my_function(){ \u2002// Noncompliant; curly brace on wrong line\n\u2002\u2002\u2002\u2002if ($firstThing)\u2002\u2002\u2002\u2002\u2002\u2002\u2002// Noncompliant; an open curly brace should be at the end of line for a control structure\n\u2002\u2002\u2002\u2002{\n\u2002\u2002\u2002\u2002\u2002\u2002...\n\u2002\u2002\u2002\u2002}\n\n\u2002\u2002\u2002\u2002if ($secondThing)\u2002   {\u2002// Noncompliant; there should be exactly one space between the closing parenthesis and the opening curly brace\n\u2002\u2002\u2002\u2002\u2002\u2002...\n\u2002\u2002\u2002\u2002}\n\n    if($thirdThing) {      // Noncompliant; there should be exactly one space between the control structure keyword and the opening parenthesis\n      ...\n    }\n    else {                 // Noncompliant; the close curly brace and the next \"else\" (or \"catch\" or \"finally\") keyword should be located on the same line\n      ...\n    }\n\n    try{                   // Noncompliant; there should be exactly one space between the control structure keyword and the curly brace\n      ...\n    } catch (Exception $e) {\n\u2002\u2002  }\n\n    analyse( $fruit ) ;    // Noncompliant; there should not be any space after the opening parenthesis and before the closing parenthesis\n\n    for ($i = 0;$i &lt; 10;   $i++) { // Nomcompliant; there should be exactly one space after each \";\" in the {{for}} statement\n      ...\n    }\n\n    pressJuice($apply ,$orange);    // Noncompliant; the comma should be followed by one space and not preceded by any\n\n    do_something ();       // Noncompliant; there should not be any space after the method name\n\n    foreach ($fruits    as $fruit_key =&gt;     $fruit) {  // Noncompliant; in the foreach statement there should be one space before and after \"as\" keyword and \"=&gt;\" operator\n      ...\n    }\n  }\n}\n\nclass ClassB\nextends ParentClass  // Noncompliant; the class name and the \"extends\" / \"implements\" keyword should be on the same line\n{\n  ...\n}\n\nclass ClassC extends ParentClass implements \\ArrayAccess, \\Countable,\n    \\Serializable    // Noncompliant; the list of implemented interfaces should be correctly indented\n{\n\n  public function aVeryLongMethodName(ClassTypeHint $arg1, // Noncompliant; the arguments in a method declaration should be correctly indented\n    &amp;$arg2, array $arg3 = []) {\n\n    $noArgs_longVars = function () use ($longVar1,         // Noncompliant; the arguments in a function declaration should be correctly indented\n        $longerVar2,\n        $muchLongerVar3\n    ) {\n      ...\n    };\n\n    $foo-&gt;bar($longArgument,    // Noncompliant; the arguments in a method call should be correctly indented\n      $longerArgument,\n      $muchLongerArgument);     // Noncompliant; the closing parenthesis should be placed on the next line\n\n    $closureWithArgsAndVars = function($arg1, $arg2)use   ($var1, $var2) {  // Noncompliant; the closure declaration should be correctly spaced - see (5)\n      ...\n    };\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace Vendor\\Package; // Compliant; the \"namespace\" declaration is followed by a blank line\n\nuse FooClass;             // Compliant; the \"use\" declaration is placed after the \"namespace\" declaration\n                          // Compliant; the \"use\" declaration is followed by a blank line\n$foo = 1;\n\nclass ClassA\n{\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002           \u2002// Compliant; the open curly brace is at the beginning of a new line for the class\n\u2002\u2002function my_function()\n  {\u2002\u2002\u2002\u2002                   // Compliant; the open curly brace is at the beginning of a new line for the function\n\u2002\u2002\u2002\u2002if ($firstThing)\u2002{\u2002\u2002\u2002\u2002// Compliant; the open curly brace is at the end of line for the control structure\n\u2002\u2002\u2002\u2002\u2002\u2002...\n\u2002\u2002\u2002\u2002}\n\n\u2002\u2002\u2002\u2002if ($secondThing)\u2002{\u2002\u2002 // Compliant; there is exactly one space between the closing parenthesis and the opening curly brace\n\u2002\u2002\u2002\u2002\u2002\u2002...\n\u2002\u2002\u2002\u2002}\n\n    if ($thirdThing) {    // Compliant; there is exactly one space between the control structure keyword and the opening parenthesis\n      ...\n    } else {              // Compliant; the close curly brace and the next \"else\" (or \"catch\" or \"finally\") keyword are located on the same line\n      ...\n    }\n\n    try {                 // Compliant; there is exactly one space between the control structure keyword and the curly brace\n      ...\n    } catch (Exception $e) {\n      ...\n    }\n\n    analyse($fruit);      // Compliant: there is no space after the opening parenthesis, nor before the closing parenthesis\n\n    for ($i = 0; $i &lt; 10; $i++) { // Compliant: there is exactly one space after each \";\" in the {{for}} statement\n      ...\n    }\n\n    pressJuice($apply, $orange);   // Compliant; the comma is followed by one space and is not preceded by any\n\n    do_something();       // Compliant; there is no space after the method name\n\n    foreach ($fruits as $fruit_key =&gt; $fruit) {  // Compliant; in the foreach statement there is one space before and after \"as\" keyword and \"=&gt;\" operator\n      ...\n    }\n  }\n}\n\n/* The idea here is to make it obvious at first glance that a class extends\n * some other classes and/or implements some interfaces. The names of\n * extended classes or implemented interfaces can be located on subsequent lines.\n */\nclass ClassB1 extends ParentClass // Compliant; the class name and the \"extends\" (or \"implements\") keyword are located on the same line\n{\n  ...\n}\n\nclass ClassB2 extends             // Compliant; the class name and the \"extends\" (or \"implements\") keyword are located on the same line\nParentClass {\n  ...\n}\n\n/* Lists of implements may be split across multiple lines, where each subsequent line\n * is indented once. When doing so, the first item in the list should be on the next line,\n * and there should be only one interface per line.\n */\nclass ClassC extends ParentClass implements\n    \\ArrayAccess,         // Compliant; the list of implemented interfaces is correctly indented\n    \\Countable,\n    \\Serializable\n{\n  /* Argument lists may be split across multiple lines, where each subsequent line\n   * is indented once. When doing so, the first item in the list should be on the next line,\n   * and there should be only one argument per line. Also, when the argument list is\n   * split across multiple lines, the closing parenthesis and opening brace should be\n   * placed together on their own line with one space between them.\n   */\n  public function aVeryLongMethodName(\n    ClassTypeHint $arg1,  // Compliant; the arguments in a method/function declaration are correctly indented\n      &amp;$arg2,\n      array $arg3 = []\n    ) {\n      $noArgs_longVars = function () use (\n        $longVar1,        // Compliant; the arguments in a method/function declaration are correctly indented\n        $longerVar2,\n        $muchLongerVar3\n      ) {\n        ...\n      };\n\n\n    /* Argument lists may be split across multiple lines, where each subsequent line is\n     * indented once. When doing so, the first item in the list should be on the next line,\n     * and there should be only one argument per line.\n     */\n    $foo-&gt;bar(\n      $longArgument,       // Compliant; the arguments in the method call are be correctly indented\n      $longerArgument,\n      $muchLongerArgument\n    );                     // Compliant; the closing parenthesis is placed on a separate line\n\n    /* Closures should be declared with a space after the \"function\" keyword,\n     * and a space before and after the \"use\" keyword.\n     */\n    $closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) { // Compliant; the closure declaration is correctly spaced\n      ...\n    };\n  }\n}\n</pre>\n\n"},{"summary":"\"elseif\" keyword should be used in place of \"else if\" keywords","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1793","tags":["convention","psr2"],"description":"<p>According to the PSR2 coding standard:</p>\n<blockquote>\n  <p>The keyword <code>elseif</code> SHOULD be used instead of <code>else if</code> so that all control keywords look like single words.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($expr1) {\n  ...\n} else if ($expr2) {\n  ...\n} else {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($expr1) {\n  ...\n} elseif ($expr2) {\n  ...\n} else {...}\n</pre>\n\n"},{"summary":"PHP keywords and constants \"true\", \"false\", \"null\" should be lower case","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1781","tags":["convention","psr2"],"description":"<p>Using indifferently lower or upper case for PHP keywords and constants \"true\", \"false\" and \"null\" can impact the readability of PHP source\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php ECHO 'Hello World'; ?&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php echo 'Hello World'; ?&gt;\n</pre>\n\n"},{"summary":"Closing tag \"?>\" should be omitted on files containing only PHP","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1780","tags":["psr2","bad-practice"],"description":"<p>According to the PSR2 coding standard:</p>\n<blockquote>\n  <p>The closing <code>?&gt;</code> tag should be omitted from files containing only PHP.</p>\n</blockquote>\n<p>According to the PHP manual:</p>\n<blockquote>\n  <p>in some cases omitting it is helpful when using include or require, so unwanted whitespace will not occur at the end of files, and you will still\n  be able to add headers to the response later. It is also handy if you use output buffering, and would not like to see added unwanted whitespace at\n  the end of the parts generated by the included files.</p>\n</blockquote>\n\n"},{"summary":"Only LF character (Unix-like) should be used to end lines","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1779","tags":["convention","psr2"],"description":"<p>All developers should use the same end-line character(s) to prevent polluting the history changelog of source files in the SCM engine. Moreover\nsome SCM engines like Git might sometimes badly support use of Windows 'CRLF' end of line characters.</p>\n\n"},{"summary":"More than one property should not be declared per statement","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1766","tags":["convention","psr2"],"description":"<p>For better readability, do not put multiple property declarations in the same statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\nclass Foo\n{\n   private $bar = 1, $bar2 = 2;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\nclass Foo\n{\n   private $bar1 = 1;\n   private $bar2 = 2;\n}\n</pre>\n\n"},{"summary":"The \"var\" keyword should not be used","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1765","tags":["convention","psr2"],"description":"<p>The PHP 4 method of declaring a variable, using the <code>var</code> keyword, was deprecated in early versions of PHP 5. Even though it's not\nconsidered deprecated in the most recent versions, it's nonetheless not best practice to use it. When <code>var</code> does appear, it is interpreted\nas a synonym for <code>public</code> and treated as such. Therefore <code>public</code> should be used instead.</p>\n<p>From the PHP Manual:</p>\n<blockquote>\n  <p>The PHP 4 method of declaring a variable with the var keyword is still supported for compatibility reasons (as a synonym for the public keyword).\n  In PHP 5 before 5.1.3, its usage would generate an E_STRICT warning.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\nclass Foo\n{\n    var $bar = 1;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\nclass Foo\n{\n    public $bar = 1;\n}\n</pre>\n\n"},{"summary":"\"<?php\" and \"<?=\" tags should be used","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1757","tags":["convention","psr1"],"description":"<p>Coding conventions allow teams to collaborate effectively. For maximum standardization and readability, PHP code should use the long <code>&lt;?php\n?&gt;</code> tags or the short-echo <code>&lt;?= ?&gt;</code> tags; it should not use the other tag variations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?\n$foo = 1;\n?&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\n$foo = 1;\n?&gt;\n</pre>\n\n"},{"summary":"File names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1578","tags":["convention","cert"],"description":"<p>Shared coding conventions allow teams to collaborate effectively. For that reason, file names should conform to a defined standard. This rule\nraises an issue when the names of analyzed files don't match the provided regular expression.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/P4IyAQ\">CERT, MSC09-CPP.</a> - Character encoding: Use subset of ASCII for safety </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/lQAl\">CERT, MSC09-C.</a> - Character encoding: Use subset of ASCII for safety </li>\n</ul>\n\n"},{"summary":"Comments should not be located at the end of lines of code","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-139","tags":["convention"],"description":"<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$a = $b + $c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\n$a = $b + $c;\n</pre>\n\n"},{"summary":"Local variable and function parameter names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-117","tags":["convention"],"description":"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic function doSomething($my_param){\n  $LOCAL;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic function doSomething($myParam){\n  $local;\n  ...\n}\n</pre>\n\n"},{"summary":"Field names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-116","tags":["convention"],"description":"<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n  $my_field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  $myField;\n}\n</pre>\n\n"},{"summary":"Lines should not end with trailing whitespaces","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1131","tags":["convention","psr2"],"description":"<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. </p>\n\n"},{"summary":"Files should contain an empty newline at the end","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-113","tags":["convention"],"description":"<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>\n\n"},{"summary":"Modifiers should be declared in the correct order","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1124","tags":["convention","psr2"],"description":"<p>The PSR2 standard recommends listing modifiers in the following order to improve the readability of PHP source code:</p>\n<ol>\n  <li> final or abstract </li>\n  <li> public or protected or private </li>\n  <li> static </li>\n</ol>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic protected $foo;\n...\npublic static final function bar(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected static $foo;\n...\nfinal public static function bar(){...}\n</pre>\n\n"},{"summary":"An open curly brace should be located at the beginning of a line","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1106","tags":["convention"],"description":"<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction myMethod() {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  //Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction myMethod()\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>\n\n"},{"summary":"An open curly brace should be located at the end of a line","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-1105","tags":["convention"],"description":"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>\n\n"},{"summary":"Function names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","inDefaultProfile":false,"ruleKey":"RSPEC-100","tags":["convention"],"description":"<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression: <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nfunction DoSomething(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(){...}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with an <code>@inheritdoc</code> annotation, as well as magic methods (<code>__construct()</code>, <code>__destruct()</code>,\n<code>__call()</code>, <code>__callStatic()</code>, <code>__get()</code>, <code>__set()</code>, <code>__isset()</code>, <code>__unset()</code>,\n<code>__sleep()</code>, <code>__wakeup()</code>, <code>__toString()</code>, <code>__invoke()</code>, <code>__set_state()</code>,\n<code>__clone()</code>, <code>__debugInfo()</code>) are ignored.</p>\n<pre>\nfunction __construct(){...}\nfunction __destruct(){...}\n\n/**\n * {@inheritdoc}\n */\nfunction myFunc(){...}\n</pre>\n\n"}]}