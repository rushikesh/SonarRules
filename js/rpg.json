{
  "types": {
    "Code Smell": 55,
    "Vulnerability": 1,
    "Bug": 7
  },
  "standards": [{
      "name": "CWE",
      "count": 2
    },
    {
      "name": "MISRA",
      "count": 3
    },
    {
      "name": "CERT",
      "count": 5
    }
  ],
  "tags": [{
      "name": "convention",
      "count": 7
    },
    {
      "name": "obsolete",
      "count": 2
    },
    {
      "name": "cert",
      "count": 5
    },
    {
      "name": "suspicious",
      "count": 2
    },
    {
      "name": "error-reporting",
      "count": 1
    },
    {
      "name": "sql",
      "count": 2
    },
    {
      "name": "pitfall",
      "count": 3
    },
    {
      "name": "error-handling",
      "count": 2
    },
    {
      "name": "cwe",
      "count": 2
    },
    {
      "name": "tests",
      "count": 1
    },
    {
      "name": "performance",
      "count": 3
    },
    {
      "name": "brain-overload",
      "count": 11
    },
    {
      "name": "misra",
      "count": 3
    },
    {
      "name": "design",
      "count": 2
    },
    {
      "name": "bad-practice",
      "count": 2
    },
    {
      "name": "unused",
      "count": 5
    },
    {
      "name": "confusing",
      "count": 2
    },
    {
      "name": "clumsy",
      "count": 2
    }
  ],
  "rules": [{
      "ruleKey": "RSPEC-1630",
      "type": "Bug",
      "summary": "All opened \"USROPN\" files should be explicitly closed",
      "description": "<p>If a file is defined without the <tt>USROPN</tt> statement then the natural RPG logic will deal with opening and closing it. However, files defined with <tt>USROPN</tt>, must be both explicitly <tt>OPEN</tt>ed and {{CLOSE}}d.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nFEWPCCR1   O    E             PRINTER USROPN           \r\nF                                     INFDS(WSFD01)   \r\nF                                     INFSR(*PSSR)     \r\n\r\nC                   OPEN      EWPCCR1   \r\n\r\nC                   CLOSE     *ALL\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nFEWPCCR1   O    E             PRINTER USROPN           \r\nF                                     INFDS(WSFD01)   \r\nF                                     INFSR(*PSSR)     \r\n\r\nC                   OPEN      EWPCCR1   \r\n\r\nC                   CLOSE     EWPCCR1   \r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/459.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-459</a> - Incomplete Cleanup</li>\n</ul>\n",
      "standards": [
        "CWE"
      ],
      "tags": [
        "cwe"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1617",
      "type": "Code Smell",
      "summary": "Error handling should be defined in F specs",
      "description": "<p>Error handling should be defined on file operations to ensure correct processing of program failures rather than defaulting to an abnormal program end. This rule checks two things: </p>\n<ul>\n\t<li><tt>INFSR</tt> error handling is defined on file operations.</li>\n\t<li>error handling is delegated to an appropriately named routine.</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>Given the default parameter value, <tt>^&#42;PSSR$</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     F* Noncompliant\r\n     FIPBDCCP   IF   E           K DISK\r\n\r\n     FEP210     CF   E             WORKSTN\r\n     F                                     SFILE(EP21003S:RELN03)     \r\n     \r\n     FEP471R1   O    E             PRINTER \r\n     F                                     USROPN\r\n     F                                     INFDS(W1SF01)\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     FIPBDCCP   IF   E           K DISK    INFSR(*PSSR)\r\n\r\n     FEP210     CF   E             WORKSTN INFSR(*PSSR)\r\n     F                                     SFILE(EP21003S:RELN03)\r\n    \r\n     FEP471R1   O    E             PRINTER INFSR(*PSSR)\r\n     F                                     USROPN\r\n     F                                     INFDS(W1SF01)\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "error-handling"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1477",
      "type": "Code Smell",
      "summary": "Source files should not have any duplicated blocks",
      "description": "<p>An issue is created on a file as soon as there is at least one block of duplicated code on this file.</p>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1192",
      "type": "Code Smell",
      "summary": "String literals should not be duplicated",
      "description": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.<br/>\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC                   MOVEL     'CLEAR'       W1CLR                           Noncompliant\r\nC                   MOVEL     '*DECOD'      W1DCDE\r\nC                   MOVEL     '*ERROR'      W1ERR \r\nC                   MOVEL     '*EXIT '      W1EXIT\r\nC                   MOVEL     'CLEAR'       W1FIRT                         \r\nC                   MOVEL     'CLEAR'       W1HELP                         \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nD W0Clr         C                   CONST('ERR1')   \r\nC                   MOVEL     W0Clr         W1CLR\r\nC                   MOVEL     '*DECOD'      W1DCDE\r\nC                   MOVEL     '*ERROR'      W1ERR \r\nC                   MOVEL     '*EXIT '      W1EXIT\r\nC                   MOVEL     W0Clr         W1FIRT\r\nC                   MOVEL     W0Clr         W1HELP\r\n</pre>\n</div></div><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
      "standards": [],
      "tags": [
        "design"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1902",
      "type": "Code Smell",
      "summary": "Subprocedures should not reference global variables",
      "description": "<p>Global variables can seem like a handy way to pass state information around in a program, but the use of global variables only works well in very small programs. As the code base grows, you'll need to understand every subprocedure's impact on the global state in order to understand how the program works. This is a task that quickly becomes impossible.</p>\n\n<p>To control the situation, only the main procedure should be allowed access to global variables; it can then pass that state information to subprocedures as parameters. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     D FirstName       S             20A     \r\n     D LastName        S             20A   \r\n     \r\n      /free\r\n       FirstName = 'John';\r\n       LastName = 'Smith';\r\n       DSPLY FullName();\r\n      /end-free\r\n\r\n     P FullName        B\r\n     D FullName        PI            41A\r\n      /free\r\n       <span class=\"code-keyword\">return</span> FirstName + ' ' + LastName;\r\n      /end-Free\r\n     P                 E\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n      /free\r\n       DSPLY FullName('John':'Smith');\r\n      /end-free\r\n\r\n     P FullName        B\r\n     D FullName        PI            41A\r\n     D  FirstName                    20A   Const\r\n     D  LastName                     20A   Const\r\n      /free\r\n       <span class=\"code-keyword\">return</span> FirstName + ' ' + LastName;\r\n      /end-Free\r\n     P                 E\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1618",
      "type": "Code Smell",
      "summary": "\"E\" should be found in F-spec lines",
      "description": "<p>Externally described files standardize file access, and result in simpler, easier to read code.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     FEPBLMSL2  IF   F  100        DISK    INFSR(*PSSR)                                                                                         \r\n     F*                                                                                                                                                                                                              \r\n     F*                                                                                                                    \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n\r\n     F*                                                                                                                    \r\n     FIPBDCCP   IF   E           K DISK    INFSR(*PSSR)                                                                    \r\n     F*                                                                                                                                                                                          \r\n     \r\n     FEP210     CF   E             WORKSTN INFSR(*PSSR)                                                                 \r\n     F                                     SFILE(EP21003S:RELN03)                                                       \r\n                                                                                                                         \r\n\r\n     FEP471R1   O    E             PRINTER INFSR(*PSSR)                                                              \r\n     F                                     USROPN                                                                    \r\n     F                                     INFDS(W1SF01)                                                             \r\n</pre>\n</div></div>\n",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-907",
      "type": "Code Smell",
      "summary": "\"GOTO\" statements should not be used",
      "description": "<p><tt>GOTO</tt> is an unstructured control flow statement. It makes code less readable and maintainable, and should only be used to branch to defined <tt>ENDSR</tt> points within the source. For normal loop functions use <tt>ITER</tt> or <tt>LEAVE</tt> instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC     LOOP1         TAG \r\n... \r\nC                   GOTO      LOOP1 \r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.4 - The goto statement shall not be used.</li>\n\t<li>MISRA C:2012, 15.1 - The goto statement should not be used</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "brain-overload",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1621",
      "type": "Code Smell",
      "summary": "\"IF\" statements should not be conditioned on Indicators",
      "description": "<p>Indicators should not be used on \"IF\" statements because they foster poor logic flow and result in code that is difficult to read and maintain.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC   99FLD1          IFEQ      FLD2\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC     FLD1          IFEQ      FLD2\r\nC     *IN99         ANDEQ     *ON\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1499",
      "type": "Code Smell",
      "summary": "Columns to be read with a \"SELECT\" statement should be clearly defined",
      "description": "<p><tt>SELECT *</tt> should be avoided because it releases control of the returned columns and could therefore lead to errors and potentially to performance issues.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT * \r\n       FROM persons \r\n       INTO newyorkers \r\n       WHERE city = 'NEW YORK'\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT firstname, lastname \r\n       FROM persons \r\n       INTO newyorkers\r\n       WHERE city = 'NEW YORK'\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1764",
      "type": "Bug",
      "summary": "Identical expressions should not be used on both sides of a binary operator",
      "description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n\n<p>This rule ignores <tt>*</tt> and <tt>+</tt>. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n      /free\r\n        <span class=\"code-keyword\">if</span> a = a; <span class=\"code-comment\">// always <span class=\"code-keyword\">true</span>\r\n</span>          doZ();\r\n        endif;\r\n        <span class=\"code-keyword\">if</span> a &lt;&gt; a; <span class=\"code-comment\">// always <span class=\"code-keyword\">false</span>\r\n</span>          doY();\r\n        endif;\r\n        <span class=\"code-keyword\">if</span> a = b and a = b; <span class=\"code-comment\">// <span class=\"code-keyword\">if</span> the first one is <span class=\"code-keyword\">true</span>, the second one is too\r\n</span>          doX();\r\n        endif;\r\n        <span class=\"code-keyword\">if</span> a = b or a = b; <span class=\"code-comment\">// <span class=\"code-keyword\">if</span> the first one is <span class=\"code-keyword\">true</span>, the second one is too\r\n</span>          doV();\r\n        endif;\r\n        \r\n        j = 5 / 5; <span class=\"code-comment\">//always 1\r\n</span>        k = 5 - 5; <span class=\"code-comment\">//always 0\r\n</span>      /end-free\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n\t<li>S1656 - Implements a check on <tt>=</tt>.</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1627",
      "type": "Bug",
      "summary": "Line count data should be retrieved from the file information data structure",
      "description": "<p>When using a <tt>PRINTER</tt> defined file, an <tt>INFDS</tt> keyword should be used to read the file's line count from <tt>*PSSR</tt> positions 367-368.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n FCSO602R1  O    E             PRINTER USROPN \r\n or ... \r\n FCSO602R1  O    E             PRINTER USROPN \r\n F                                     INFDS(WSFD01) \r\n F                                     INFSR(*PSSR) \r\n\r\n D WSFD01          DS \r\n D  W1ST01           *STATUS \r\n D  W1SPNO               123    124B 0 \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n FCSO602R1  O    E             PRINTER USROPN \r\n F                                     INFDS(WSFD01) \r\n F                                     INFSR(*PSSR) \r\n\r\n D WSFD01          DS \r\n D  W1ST01           *STATUS \r\n D  W1SPNO               123    124B 0 \r\n D  W1LNCT               367    368B 0 \r\n D  W1PGNO               369    372B 0 \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-108",
      "type": "Code Smell",
      "summary": "Nested blocks of code should not be left empty",
      "description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     C   99W1SCNO        IFEQ      1\r\n     C                   EXSR      SR201\r\n     C                   ELSE\r\n     C* Empty on purpose or missing a piece of code?\r\n     C                   END\r\n</pre>\n</div></div><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1619",
      "type": "Code Smell",
      "summary": "Numeric fields should be defined as odd length packed fields",
      "description": "<p>When storing numeric fields, using an odd number of digits allows the sign to be included in the storage area without wasting any space. <br/>\nFor example the number -1234567, when packed as 7 digits is stored as follows. </p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n1357\r\n246- \r\n</pre>\n</div></div>\n<p>thus taking up only 4 data slots. but when packed as 8 characters it uses 5 data slots </p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n02467 \r\n0135- \r\n</pre>\n</div></div>\n<p>or when 7 digits, non-packed, it will be stored as 8 data slots, including the sign. </p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nFFFFFFF6 \r\n12345670 \r\n</pre>\n</div></div>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     D NUMFLD          S              8P 0 \r\n     D NUMFLD          S              7S 0 \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     D NUMFLD          S              7P 0\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1862",
      "type": "Bug",
      "summary": "Related \"IF/ELSEIF\" statements and \"WHEN\" clauses in a \"SELECT\" should not have the same condition",
      "description": "<p>A <tt>Select</tt> or a chain of <tt>If</tt>/<tt>Elseif</tt> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <tt>true</tt>. </p>\n\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n/free\r\n     IF param = 1;\r\n        doX();\r\n     ELSEIF param = 2;\r\n        doY();\r\n     ELSEIF param = 1; <span class=\"code-comment\">// Noncompliant\r\n</span>        doZ();\r\n     ENDIF;\r\n\r\n     SELECT;\r\n       WHEN param = 1;\r\n         doX();\r\n       WHEN param = 2;\r\n         doY();\r\n       WHEN param = 1; <span class=\"code-comment\">// Noncompliant\r\n</span>         doZ();\r\n     ENDSL;\r\n/end-free\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n/free\r\n     IF param = 1;\r\n        doX();\r\n     ELSEIF param = 2;\r\n        doY();\r\n     ELSEIF param = 3;\r\n        doZ();\r\n     ENDIF;\r\n\r\n     SELECT;\r\n       WHEN param = 1;\r\n         doX();\r\n       WHEN param = 2;\r\n         doY();\r\n       WHEN param = 3; \r\n         doZ();\r\n     ENDSL;\r\n/end-free\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "pitfall",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1631",
      "type": "Code Smell",
      "summary": "SQL statements should not join too many tables",
      "description": "<p>When you need access to data from multiple tables, it is more efficient, effective, and understandable to use pre-built views than to select the data from a large number of tables - effectively creating in-memory views - at runtime.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<p>With a maximum number of 3 joined tables:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME\r\nFROM PERSONS \r\n  INNER JOIN COUNTRIES ON COUNTRIES.ID = PERSON.COUNTRY_ID\r\n  INNER JOIN GENRES ON GENRES.ID = PERSONS.GENRE_ID\r\n  INNER JOIN PROFESSIONS ON PROFESSIONS.ID = PERSONS.PROFESSIONS_ID  -- Noncompliant; <span class=\"code-keyword\">this</span> is table #4\r\nWHERE COUNTRIES.CODE = 'US'\r\n\r\nSELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME\r\nFROM PERSONS, COUNTRIES, GENRES, PROFESSIONS -- Noncompliant\r\nWHERE COUNTRIES.CODE = 'US' AND COUNTRIES.ID = PERSON.COUNTRY_ID AND GENRES.ID = PERSONS.GENRE_ID AND PROFESSIONS.ID = PERSONS.PROFESSIONS_ID\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload",
        "performance",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-125",
      "type": "Code Smell",
      "summary": "Sections of code should not be \"commented out\"",
      "description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.<br/>\nUnused code should be deleted and can be retrieved from source control history if required.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 2.4 - Sections of code should not be \"commented out\".</li>\n\t<li>MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments.</li>\n\t<li>MISRA C+<ins>:2008, 2-7-3 - Sections of code should not be \"commented out\" using C</ins>+ comments.</li>\n\t<li>MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\"</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1608",
      "type": "Code Smell",
      "summary": "Standard figurative constants *ON, *OFF and *BLANK should be used in place of '1', '0' and ' '",
      "description": "<p>Initializing an alphanumeric field with the literal character <tt>' '</tt>, <tt>'1'</tt>, or <tt>'0'</tt> has the same effect as using the equivalent figurative constant <tt>*BLANK</tt>, <tt>*ON</tt>, or <tt>*OFF</tt>, but the constant version removes ambiguity and makes the code more readable.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC                   MOVE      ' '           FLD1\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC                   MOVE      *BLANK        FLD1\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1629",
      "type": "Code Smell",
      "summary": "The correct \"ENDxx\" statement should be used",
      "description": "<p>While <tt>END</tt> will adequately close a statement, it is less clear than the use of the relevant, statement-specific <tt>ENDxx</tt>. Thus, the statement-specific version is preferred to facilitate code maintenance and enhance clarity.</p>\n\n<p>This rule is applied to the following operations: <tt>CASxx</tt>, <tt>DO</tt>, <tt>DOU</tt>, <tt>DOUxx</tt>, <tt>DOW</tt>, <tt>DOWxx</tt>, <tt>FOR</tt>, <tt>IF</tt>, <tt>IFxx</tt> and <tt>SELECT</tt> groups.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC     W0PKEX        DOUEQ     W0ON   \r\n...\r\nC                   END     \r\n\r\nC     W0PKEX        IFEQ      W0ON   \r\n...\r\nC                   END  \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC     W0PKEX        DOUEQ     W0ON   \r\n...\r\nC                   ENDDO     \r\n\r\nC     W0PKEX        DOWEQ     W0ON   \r\n...\r\nC                   ENDDO     \r\n\r\nC     W0PKEX        IFEQ      W0ON   \r\n...\r\nC                   ENDIF     \r\n\r\nC                   FOR       W0ON\r\n...\r\nC                   ENDFOR \r\n\r\nC                   SELECT \r\nC     W0PKEX        WHENGT    W0ON\r\n...\r\nC     W0PKEX        WHENEQ    W0ON \r\n...\r\nC                   ENDSL     \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1633",
      "type": "Code Smell",
      "summary": "The data area structure for \"IN\" should be defined in D spec lines.",
      "description": "<p>Both the name and the field definitions of a parameter 2 data area used in an <tt>IN</tt> should be coded in the <tt>D</tt> specification. This ensures that all definition data is kept together, and the specific data is not manually extracted in the code, thus making the code easier to read and maintain.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nD WSFD08          S             30A 0                 \r\n\r\nC                   IN        WSFD08   \r\nC                   MOVEL     WSFD08        VAR9S   \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nD WSFD08          DS    30             DTAARA(HEPDTAR005) \r\nD  W3SPNO               123    124B 0 \r\nD  W3LNCT               367    368B 0 \r\n\r\nC                   IN        WSFD08   \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1624",
      "type": "Code Smell",
      "summary": "The first parameter of a \"CHAIN/READx\" statement should be a \"KLIST\"",
      "description": "<p>Using a unique <tt>KLIST</tt> to access files ensures that the correct key is used at all times and creates a standard method of accessing the data throughout the code, simplifying maintenance and improving readability. </p>\n\n<p>This rule flags non-compliant instances of <tt>CHAIN</tt>, <tt>DELETE</tt>, <tt>READE</tt>, <tt>READPE</tt>, <tt>SETGT</tt>, and <tt>SETLL</tt> operations.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC     'D001 B'      CHAIN     KYCUSTN                            20\r\n... \r\nC     DEPT          CHAIN     KYCUSTN                            20\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC     DEPTKY        KLIST\r\nC                   KFLD                    DEPT\r\nC                   KFLD                    SHIFT \r\n\r\nC     DEPTKY        CHAIN     KYCUSTN                            20\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1622",
      "type": "Code Smell",
      "summary": "The parameters of a \"CALL\" or \"CALLB\" statement should be defined as a \"PLIST\"",
      "description": "<p>Using a unique symbolic <tt>PLIST</tt> name provides a single definition point for the parameters used by any external routine being called. This ensures that the same information is passed every time the external routine is called, reducing the potential for mistakes in operation. </p>\n\n<p>This rule flags non-compliant instances of <tt>CALL</tt> and <tt>CALLB</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC                   CALLB(D)  'XR01'\r\nC                   PARM                    WSXR07\r\nC                   PARM                    WSFLD1\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC     P0XR07        PLIST                               \r\nC                   PARM                    WSXR07       \r\nC                   PARM                    WSFLD1 \r\n\r\nC                   CALLB     'XR07'        P0XR07  \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1871",
      "type": "Code Smell",
      "summary": "Two branches in a conditional structure should not have exactly the same implementation",
      "description": "<p>Having two <tt>WHEN</tt> in the same <tt>SELECT</tt> statement or branches in the same <tt>IF</tt> structure  with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, they should be combined.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nselect;\r\n  when i = 1; \r\n    doSomething();\r\n  when i = 2; \r\n    doSomethingDifferent();\r\n  when i = 3:  <span class=\"code-comment\">// Noncompliant; duplicates first when's implementation\r\n</span>    doSomething(); \r\nendsl;\r\n\r\n<span class=\"code-keyword\">if</span> (a &gt;= 0 and a &lt; 10);\r\n  doTheThing();\r\nelseif (a &gt;= 10 and a &lt; 20);\r\n  doTheOtherThing();\r\nelseif (a &gt;= 20 and a &lt; 50);\r\n  doTheThing();  <span class=\"code-comment\">// Noncompliant; duplicates first condition\r\n</span><span class=\"code-keyword\">else</span>;\r\n  doTheRest(); \r\nendif;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nselect;\r\n  when i = 1 or i = 3; \r\n    doSomething();\r\n  when i = 2;\r\n    doSomethingDifferent();\r\nendsl;\r\n\r\n<span class=\"code-keyword\">if</span> ((a &gt;= 0 and a &lt; 10) or (a &gt;= 20 and a &lt; 50));\r\n  doTheThing();\r\nelseif (a &gt;= 10 &amp;&amp; a &lt; 20);\r\n  doTheOtherThing();\r\n<span class=\"code-keyword\">else</span>;\r\n  doTheRest(); \r\nendif;\r\n\r\n</pre>\n</div></div>\n<p>or </p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nselect;\r\n  when i = 1; \r\n    doSomething();\r\n  when i = 2; \r\n    doSomethingDifferent();\r\n  when i = 3: \r\n    doThirdThing(); \r\nendsl;\r\n\r\n<span class=\"code-keyword\">if</span> (a &gt;= 0 and a &lt; 10);\r\n  doTheThing();\r\nelseif (a &gt;= 10 and a &lt; 20);\r\n  doTheOtherThing();\r\nelseif (a &gt;= 20 and a &lt; 50);\r\n  doTheThirdThing(); \r\n<span class=\"code-keyword\">else</span>;\r\n  doTheRest(); \r\nendif;\r\n</pre>\n</div></div><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Blocks in an <tt>if</tt> chain that contain a single line of code are ignored, as are blocks in a <tt>switch</tt> statement that contain a single line of code with or without a following <tt>break</tt>.</p>",
      "standards": [],
      "tags": [
        "design",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1816",
      "type": "Code Smell",
      "summary": "Unused subprocedures should be removed",
      "description": "<p>Subprocedures that aren't called from anywhere in the codebase are dead code, which can only distract and possibly confuse developers during maintenance.  Therefore, unused subprocedures should be removed.</p>",
      "standards": [],
      "tags": [
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1068",
      "type": "Code Smell",
      "summary": "Unused variables should be removed",
      "description": "<p>If a variable is declared but not used in the program, it can be considered dead code and should therefore be removed. This will improve maintainability because developers will not wonder what the variable is used for.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nD I               S              5P 0      INZ\r\nD* Noncompliant; X is not used in C-Specs\r\nD X               S              5P 0      INZ\r\n\r\nC                   EVAL      I = I + 1\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nD I               S              5P 0      INZ\r\n\r\nC                   EVAL      I = I + 1\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1656",
      "type": "Bug",
      "summary": "Variables should not be self-assigned",
      "description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n      /free\r\n        name = name;\r\n      /end-free\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n      /free\r\n        customer.name = name;\r\n      /end-free\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1899",
      "type": "Code Smell",
      "summary": "Variables used in only one subprocedure should not be global",
      "description": "<p>Global variables that are only used by a single subprocedure should be declared in that subprocedure, thus limiting both their scope and other procedures' ability to modify the variable unexpectedly.</p>\n\n<p>If the variable has been declared in the global scope to preserve its value between calls, add the <tt>STATIC</tt> keyword to the new local declaration. It will be added to the global heap and retained until the program ends, but only accessible by the subprocedure in which it was declared.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     D SUBPROC1        PR\r\n     D  Parm1                         5  0 Const\r\n\r\n     D X               S              5  0    <span class=\"code-comment\">// Noncompliant; only used in one subproc\r\n</span>\r\n      /Free\r\n       SUBPROC1(1234);\r\n       *inlr = *on;\r\n       <span class=\"code-keyword\">return</span>;\r\n       /End-free\r\n\r\n     P SUBPROC1        B\r\n     D SUBPROC1        PI\r\n     D  Parm1                         5  0 Const\r\n      /Free\r\n       X = Parm1 + 1;                        <span class=\"code-comment\">// X is only used here\r\n</span>       DSPLY(E) X;\r\n      /End-Free\r\n     P                 E\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     D SUBPROC1        PR\r\n     D  Parm1                         5  0 Const\r\n\r\n      /Free\r\n       SUBPROC1(1234);\r\n       *inlr = *on;\r\n       <span class=\"code-keyword\">return</span>;\r\n       /End-free\r\n\r\n     P SUBPROC1        B\r\n     D SUBPROC1        PI\r\n     D  Parm1                         5  0 Const\r\n     D X               S              5  0\r\n      /Free\r\n       X = Parm1 + 1;\r\n       DSPLY(E) X;\r\n      /End-Free\r\n     P                 E\r\n</pre>\n</div></div> ",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1628",
      "type": "Vulnerability",
      "summary": "Debugging statements \"DEBUG(*YES)\" and \"DUMP\" should not be used",
      "description": "<p>The <tt>DEBUG(*YES)</tt> and <tt>DUMP</tt> statements are useful during development and debugging, but could expose sensitive information to attackers and should not be included in production code. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n   H*------------------------------------------------------------------------- \r\n   H   DATEDIT(*YMD) DEBUG(*YES)                                               \r\n   H**************************************************************************\r\n\r\n   C     SR990         BegSR                                                                   \r\n   C     'CVTERR'      DUMP                                                   DUMP <span class=\"code-keyword\">for</span> error\r\n   C                   Move      *on           *INLR                                          \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n   H*------------------------------------------------------------------------- \r\n   H   DATEDIT(*YMD) \r\n   H**************************************************************************\r\n\r\n   C     SR990         BegSR                                                                   \r\n   C                   Move      *on           *INLR                                          \r\n</pre>\n</div></div>\n\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/489.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-489</a> - Leftover Debug Code</li>\n</ul>\n",
      "standards": [
        "CWE"
      ],
      "tags": [
        "cwe"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1625",
      "type": "Code Smell",
      "summary": "Indicators should be used on \"CHAIN\" statements",
      "description": "<p>A results indicator should be used on a <tt>CHAIN</tt> statement because it leads to cleaner, more readable, and more correct code. Using an indicator results in the conditions <tt>record not found</tt>, and <tt>end of file</tt> being automatically handled correctly, without the need for further error handling. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC     K0GMCP        CHAIN     SSGMCPR\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC     K0GMCP        CHAIN     SSGMCPR                            81 \r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Free-form <tt>CHAIN</tt> statements cannot have indicators, and are ignored.</p>",
      "standards": [],
      "tags": [
        "error-handling"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1634",
      "type": "Bug",
      "summary": "Non-input files should be accessed with the no lock option",
      "description": "<p>When accessing a non-input-only file with a <tt>CHAIN</tt>/<tt>READx</tt> operation, the record is locked and becomes inaccessible to the system, and unreadable other programs. This is fine if you are about to update the record immediately, but if you have data processing to do following the read, it can leave the record unavailable for too long. Therefore, non-input files using the <tt>CHAIN</tt>, <tt>READ</tt>, <tt>READE</tt>, <tt>READP</tt>, and <tt>READPE</tt> operation codes should always be accessed with the no lock option, <tt>(N)</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nFDDDLJNL7  UF   E           K DISK    INFSR(*PSSR) \r\n... \r\nC                   READ      DDDLJNL7\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nFDDDLJNL7  UF   E           K DISK    INFSR(*PSSR) \r\n... \r\nC                   READ(N)   DDDLJNL7 \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-100",
      "type": "Code Smell",
      "summary": "Subroutine names should comply with a naming convention",
      "description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all subroutine names match a provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With default provided regular expression <tt>^SR<span class=\"error\">&#91;a-zA-Z0-9&#93;</span>*$</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC     XXXXX         BEGSR\r\n...\r\nC                   ENDSR\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC     SR102         BEGSR\r\n...\r\nC                   ENDSR\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1601",
      "type": "Code Smell",
      "summary": "Unused subroutines should be removed",
      "description": "<p>Unused subroutines are dead code and there isn't any good argument to leave them in the source code. </p>",
      "standards": [],
      "tags": [
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1606",
      "type": "Code Smell",
      "summary": "Failed unit tests should be fixed",
      "description": "<p>Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.</p>",
      "standards": [],
      "tags": [
        "tests"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1451",
      "type": "Code Smell",
      "summary": "Track lack of copyright and license headers",
      "description": "<p>Each program should contain an initial section of <tt>H*</tt> comments lines, which includes a copyright and/or license statement. This rule must be fed with the header text that is expected in the header.</p>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     H*  Copyright (C) 2008-2013 SonarSource\r\n     H*  mailto:contact AT sonarsource DOT com\r\n     H*  \r\n     H*  SonarQube is free software; you can redistribute it and/or\r\n     H*  modify it under the terms of the GNU Lesser General Public\r\n     H*  License as published by the Free Software Foundation; either\r\n     H*  version 3 of the License, or (at your option) any later version.\r\n     H*  \r\n     H*  SonarQube is distributed in the hope that it will be useful,\r\n     H*  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n     H*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n     H*  Lesser General Public License <span class=\"code-keyword\">for</span> more details.\r\n     H*  \r\n     H*  You should have received a copy of the GNU Lesser General Public License\r\n     H*  along with <span class=\"code-keyword\">this</span> program; <span class=\"code-keyword\">if</span> not, write to the Free Software Foundation,\r\n     H*  Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.                                         \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-126",
      "type": "Code Smell",
      "summary": "\"IF ... ELSEIF\" constructs should end with \"ELSE\" clauses",
      "description": "<p>This rule applies whenever an <tt>IF</tt> statement is followed by one or more <tt>ELSEIF</tt> statements; the final <tt>ELSEIF</tt> should be followed by an <tt>ELSE</tt> statement.<br/>\nThe requirement for a final <tt>ELSE</tt> statement is defensive programming. <br/>\nThe <tt>ELSE</tt> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is consistent with the requirement to have a final <tt>OTHER</tt> clause in a <tt>SELECT</tt> statement. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC                   IF         RESULT = 0\r\nC                   ...\r\nC                   ELSEIF     RESULT &gt; 0\r\nC                   ...\r\nC                   ENDIF\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC                   IF         RESULT = 0\r\nC                   ...\r\nC                   ELSEIF     RESULT &gt; 0\r\nC                   ...\r\nC                   ELSE\r\nC                   EXSR       ERRO\r\nC                   ENDIF\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause.</li>\n\t<li>MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause.</li>\n\t<li>MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/YgE\" class=\"external-link\" rel=\"nofollow\">CERT, MSC01-C.</a> - Strive for logical completeness</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC01-CPP.</a> - Strive for logical completeness</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/PQHRAw\" class=\"external-link\" rel=\"nofollow\">CERT, MSC57-J.</a> - Strive for logical completeness</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1482",
      "type": "Code Smell",
      "summary": "Branches should have sufficient coverage by unit tests",
      "description": "<p>An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.</p>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-134",
      "type": "Code Smell",
      "summary": "Control flow statements \"IF\", \"FOR\", \"DO\", ... should not be nested too deeply",
      "description": "<p>Nested <tt>CASxx</tt>, <tt>DO</tt>, <tt>DOU</tt>, <tt>DOW</tt>, <tt>DOUxx</tt>, <tt>DOWxx</tt>, <tt>FOR</tt>, <tt>IF</tt>, <tt>IFxx</tt>, <tt>MONITOR</tt> and <tt>SELECT</tt> statements is a key ingredient for making what's known as \"Spaghetti code\".<br/>\nSuch code is hard to read, refactor and therefore maintain.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF        A &lt;&gt; B\r\nIF        B &lt;&gt; C\r\nDOW       B &lt;&gt; A\r\nIF        A &lt;&gt; D\r\n...\r\nENDIF\r\nENDDO\r\nENDIF\r\nENDIF\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1067",
      "type": "Code Smell",
      "summary": "Expressions should not be too complex",
      "description": "<p>The complexity of an expression is defined by the number of <tt>AND</tt>, <tt>OR</tt>.<br/>\nA single expression's complexity should not become too high to keep the code readable.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC                   IF        (condition1 AND condition2)\r\nC                             OR (condition2 AND condition2)\r\nC                             OR (condition3 AND condition4)\r\n...\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1483",
      "type": "Code Smell",
      "summary": "Lines should have sufficient coverage by unit tests",
      "description": "<p>An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.</p>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1880",
      "type": "Bug",
      "summary": "Record formats  should be cleared before each use",
      "description": "<p>The format used to write a record to a file should be cleared before each use. Otherwise stale data left in the format from previous records may be saved into the current record if it does not have data for all the fields in the format.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC                   IF        X &lt;&gt; Y\r\n...\r\nC                   ENDIF       \r\nC                   WRITE     RECFMT                             \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC                   CLEAR                   RECFMT\r\nC                   IF        X &lt;&gt; Y\r\n...\r\nC                   ENDIF\r\nC                   WRITE     RECFMT                             \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2016",
      "type": "Code Smell",
      "summary": "Subprocedures should be used instead of subroutines",
      "description": "<p>Subprocedures and subroutines are both mechanisms to segregate logic, but subprocedures are preferred for three reasons:</p>\n<ul>\n\t<li>their local files and variables make maintenance faster and cleaner. They allow you to create variables without worrying about name clashes, and to change fields without worrying about negatively impacting other parts of the program.</li>\n\t<li>their local files and variables make code reuse easy.</li>\n\t<li>they can be called with parameters as functions, yielding clearer more readable code.</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     D  FirstName      S             20A   \r\n     D  Initial        S              1A   \r\n     D  LastName       S             20A   \r\n     D  FullName       S             43A     \r\n\r\n      /free\r\n       FirstName = 'John';\r\n       Initial = 'A';\r\n       LastName = 'Smith';\r\n       EXSR SPFullName;\r\n       DSPLY FullName;\r\n       ...\r\n\t   \r\n       begsr SPFullName;\r\n         FullName = FirstName + ' ' + Initial + ' ' + LastName;\r\n       endsr;\r\n      /end-free\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n      /free\r\n       DSPLY FullName('John':'A':'Smith');\r\n       ...\r\n      /end-free\r\n\r\n     P FullName        B\r\n     D FullName        PI            43A\r\n     D  FirstName                    20A   Const\r\n     D  Initial                       1A   Const\r\n     D  LastName                     20A   Const\r\n      /free\r\n       <span class=\"code-keyword\">return</span> FirstName + ' ' + Initial + ' ' + LastName;\r\n      /end-Free\r\n     P                 E\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1541",
      "type": "Code Smell",
      "summary": "Subroutines should not be too complex",
      "description": "<p>The cyclomatic complexity of subroutines should not exceed a defined threshold.<br/>\nComplex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1632",
      "type": "Code Smell",
      "summary": "\"/COPY\" should be avoided",
      "description": "<p>Historically <tt>/COPY</tt> procedures contained all of the specifications required for each procedure, so for example <tt>xxxxF /COPY</tt> would be used to copy the F lines from another <tt>F</tt> spec. However, this practice results in code that is difficult to understand and maintain. Instead, the use of <tt>/COPY</tt> statements should be replaced with explicit declarations.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>Given the default list of specs, H,F,I,D,C,O:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nF/COPY HRSILERPG,RSX36 \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nFSSINRTP   IF   E           K DISK    INFSR(*PSSR) \r\nF*                                                 \r\nF*  Interest Rates File                             \r\nF*                                                 \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1752",
      "type": "Code Smell",
      "summary": "\"DO\" blocks should not have too many lines of code",
      "description": "<p><tt>DO</tt> blocks that contain too many lines are difficult to read and understand. </p>\n\n<p>Above a specific threshold, it is strongly advised to refactor the contents of the <tt>DO</tt> block into multiple, well-named subroutines or subfunctions, each of which focuses on a well-defined task. Those smaller subroutines will not only be easier to understand, but probably also easier to test.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1753",
      "type": "Code Smell",
      "summary": "\"IF\" blocks should not have too many lines of code",
      "description": "<p><tt>IF</tt> blocks that contain too many lines are difficult to read and understand. </p>\n\n<p>Above a specific threshold, it is strongly advised to refactor the contents of the <tt>IF</tt> block into multiple, well-named subroutines or subfunctions, each of which focuses on a well-defined task. Those smaller subroutines will not only be easier to understand, but probably also easier to test.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2793",
      "type": "Code Smell",
      "summary": "\"QUALIFIED\" data structures should be used",
      "description": "<p><tt>QUALIFIED</tt> data structures result in cleaner code because you can't reference the fields without using the qualifying name. They also  allow you to have multiple sub-fields with the same name, meaning subfield names don't have to be convoluted for uniqueness, and can be expressive instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n      * Noncompliant\r\n     D Employee        DS\r\n     D  EmpId                         7P 0\r\n     D  EFName                       30A\r\n     D  ELName                       30A\r\n     D  EPhone                       11P 0\r\n\r\n      * Noncompliant\r\n     D Contractor      DS\r\n     D  CntId                         7P 0\r\n     D  CFName                       30A\r\n     D  CLName                       30A\r\n     D  CPhone                       11P 0\r\n\r\n      /free\r\n        EmpId = '000220';\r\n      /end-free\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     D Employee        DS                  QUALIFIED\r\n     D  Id                            7P 0\r\n     D  FName                        30A\r\n     D  LName                        30A\r\n     D  Phone                        11P 0\r\n\r\n     D Contractor      DS                  QUALIFIED\r\n     D  Id                            7P 0\r\n     D  FName                        30A\r\n     D  LName                        30A\r\n     D  Phone                        11P 0\r\n\r\n      /free\r\n        Employee.Id = '000220';\r\n      /end-free\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1151",
      "type": "Code Smell",
      "summary": "\"SELECT WHEN\" clauses should not have too many lines",
      "description": "<p>The <tt>SELECT</tt> statement should be used only to clearly define some new branches in the control flow. As soon as a <tt>WHEN</tt> clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of <tt>WHEN</tt> clause should be extracted in a dedicated subroutine.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC                   SELECT\r\nC                   WHEN      X=1\r\nC                   MOVE      A             B\r\nC                   MOVE      C             D\r\nC                   MOVE      E             F\r\nC                   MOVE      J             K\r\nC                   MOVE      L             M\r\nC                   WHEN      X=2\r\nC                   ....\r\nC                   ENDSL\r\n</pre>\n</div></div> \n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC                   SELECT\r\nC                   WHEN      X=1\r\nC                   EXSR      SR011 \r\nC                   WHEN      X=2\r\nC                   ....\r\nC                   ENDSL\r\nC                   ...\r\nC     SR011         BEGSR\r\nC                   MOVE      A             B\r\nC                   MOVE      C             D\r\nC                   MOVE      E             F\r\nC                   MOVE      J             K\r\nC                   MOVE      L             M\r\nC                   ENDSR\r\n</pre>\n</div></div> ",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2798",
      "type": "Code Smell",
      "summary": "Compile-time arrays should not be used",
      "description": "<p>Having all the pieces in front of you makes it easier to understand and debug or maintain a piece of code. Unfortunately, that's often not the case with compile-time arrays, since they are often separated from the code that uses them by many, many lines. Instead, data structures are often a better option.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     D directions      S              5  0 dim(4) ctdata perrcd(1)\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\t \r\n     D dirData         DS\r\n     D                                5    Inz('North')\r\n     D                                5    Inz('South')\r\n     D                                5    Inz('East')\r\n     D                                5    Inz('West')\r\n     D directions                     5    Dim(4) Overlay(dirData)\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-104",
      "type": "Code Smell",
      "summary": "Files should not have too many lines of code",
      "description": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those smaller files will not only be easier to understand but also probably easier to test.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1620",
      "type": "Code Smell",
      "summary": "LIKE keyword should be used to define work fields",
      "description": "<p>Use of the LIKE statement for fields with the same specification that are being used together in the same statements makes the relevance of individual fields more understandable, and gives easy reference information, and makes relationships between those fields more obvious. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example </h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nD NAME            S             20A\r\nD PNAM            S             20A\r\n</pre>\n</div></div> \n\n<h2><a name=\"CompliantSolutions\"></a>Compliant Solutions </h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nD NAME            S             20A\r\nD PNAM            S             LIKE(NAME)\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2803",
      "type": "Code Smell",
      "summary": "Multiple occurrence data structures should not be used",
      "description": "<p>While the <tt>OCCURS</tt> keyword still works, it is slower than its more modern replacement: <tt>DIM</tt>, which should be used instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nD cussls          ds                  Occurs(200)  \r\nD CustNo                         7p 0                     \r\nD MonthlySls                    11P 2\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nD cussls          ds                  dim(200)   \r\nD CustNo                         7p 0                      \r\nD MonthlySls                    11P 2 \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2202",
      "type": "Code Smell",
      "summary": "Prototypes should be used",
      "description": "<p>Specifying the parameters to a procedure with a <tt>PLIST</tt> makes that procedure unusable from free-format code. Instead, prototypes should be used - both when defining a procedure and when calling it. They have the additional benefit of allowing you to use keywords such as <tt>Const</tt> to better-specify how parameters are passed to a procedure. Further, the use of a prototype instead of a <tt>PLIST</tt> is cleaner and  more consistent with the code required for subprocedures. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n      * Noncompliant; PLIST specified\r\n     C     *ENTRY        PLIST\r\n     C                   PARM                    ZipCode           5 0\r\n     C                   PARM                    City             20\r\n...\r\n      * Noncompliant; PLIST used in call\r\n     C                   CALL      'OTHERPROG'\r\n     C                   PARM                    ZipCode\r\n     C                   PARM                    City\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     D MYPROG          PR                 \r\n     D  ZipCode                       5I   Const\r\n     D  City                         20A   Const\r\n     D MYPROG          PI                 \r\n     D  ZipCode                       5I   Const\r\n     D  City                         20A   Const     \r\n...\r\n     D OTHERPROG       PR                  ExtPgm('OtherProgram')\r\n     D  ZipCode                       5I   Const\r\n     D  City                         20A   Const\r\n      /free\r\n        OTHERPROG(ZipCode:City);\r\n      /end-free\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention",
        "obsolete"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1548",
      "type": "Code Smell",
      "summary": "Subroutines should be documented",
      "description": "<p>Every subroutine should be commented to explain its goal and how it works. This non-empty comment must be located before or after the subroutine definition.</p>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC     SR012         BEGSR\r\nC                         ...\r\nC                   ENDSR\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nC********************************************************************\r\nC* SR012- Here is my comment         \r\nC********************************************************************\r\nC     SR012         BEGSR\r\nC                         ...\r\nC                   ENDSR\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-138",
      "type": "Code Smell",
      "summary": "Subroutines should not have too manylines",
      "description": "<p>A subroutine that grows too large tends to aggregate too many responsibilities. Such subroutine inevitably become harder to understand and therefore harder to maintain. Above a specific threshold, it is strongly advised to refactor into smaller subroutines which focus on well-defined tasks. Those smaller subroutines will not only be easier to understand, but also probably easier to test.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1895",
      "type": "Code Smell",
      "summary": "The \"*srcstmt\" header option should be used",
      "description": "<p>Turning on the <tt>*srcstmt</tt> header option means that any line numbers cited in error statements will actually correspond correctly to the code. Otherwise, object line numbers will be shown, making errors difficult to debug.</p>\n\n<p>The <tt>*srcstmt</tt> option is also recommended for accurate line numbers during debugging, particularly in combination with <tt>*nodebugio</tt>, (<tt>H option(*srcstmt:*nodebugio)</tt>) which prevents debug operations from stopping on I/O.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nH*\r\nH* AMENDED BY : G. Ann Campbell\r\nH* DATE       : 16JUL2014      \r\nH* H24 - Miscellaneous Online Maintenance/Enquiry/Printing\r\nH*\r\nF/EJECT\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nH*\r\nH* AMENDED BY : G. Ann Campbell\r\nH* DATE       : 16JUL2014      \r\nH* H24 - Miscellaneous Online Maintenance/Enquiry/Printing\r\nH*\r\nH option(*srcstmt)\r\nF/EJECT\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing",
        "error-reporting"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1626",
      "type": "Code Smell",
      "summary": "Track uses of disallowed operation codes",
      "description": "<p>Certain operation codes are proscribed by company policy.</p>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2025",
      "type": "Code Smell",
      "summary": "\"/COPY\" statements should include specification letters",
      "description": "<p>Shared coding conventions allow teams to collaborate effectively. While it is possible to omit the specification letter before a <tt>/COPY</tt> statement, it is advisable not to do so because including a specification on the line indicates to other developers what type of statements will be added to the program by the copybook. Further, using a specification letter on the line makes it clearer to those who might be skimming the file that the line is not just a comment, but does contain code.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n      /COPY MBR1\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     I/COPY MBR1\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1901",
      "type": "Code Smell",
      "summary": "\"/EJECT\" should be used after \"F\", \"D\" and \"C\" specification sections",
      "description": "<p>The <tt>/EJECT</tt> compiler directive adds a page break when the code is printed, and should be used at the end of each <tt>F</tt>, <tt>D</tt>, and <tt>C</tt> specification section to make the structure of the code clearer and to enhance overall readability.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nF* Conversion Job Activity File (CV)                   \r\nF*                                                     \r\nFCVJBAVP   IF   E           K DISK                     \r\nF* Conversion Job Dependency File (CZ)                 \r\nF*                                                     \r\nFCVJBDPP   IF   E           K DISK                     \r\nF*                                           \r\nDP0RTCD           S              1                     \r\nDP0JBNM           S             10A                     \r\nDP0ERMG           S            100A                     \r\nDK0JBNM           S                   LIKE(CVJBNM)     \r\nDK1JBNM           S                   LIKE(CVJBNM)     \r\nDJST              S             10A   DIM(10)           \r\nDI                S              3  0 INZ               \r\nC                                                       \r\nC                   EXSR      SR999                     \r\nC                                                       \r\nC                   EXSR      SR100                     \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nF* Conversion Job Activity File (CV)                   \r\nF*                                                     \r\nFCVJBAVP   IF   E           K DISK                     \r\nF* Conversion Job Dependency File (CZ)                 \r\nF*                                                     \r\nFCVJBDPP   IF   E           K DISK                     \r\nF*                                           \r\nF/EJECT           \r\nDP0RTCD           S              1                     \r\nDP0JBNM           S             10A                     \r\nDP0ERMG           S            100A                     \r\nDK0JBNM           S                   LIKE(CVJBNM)     \r\nDK1JBNM           S                   LIKE(CVJBNM)     \r\nDJST              S             10A   DIM(10)           \r\nDI                S              3  0 INZ               \r\nD/EJECT \r\nC                                                       \r\nC                   EXSR      SR999                     \r\nC                                                       \r\nC                   EXSR      SR100                     \r\nC/EJECT  \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1900",
      "type": "Code Smell",
      "summary": "\"CONST\" should be used for parameters that are not modified",
      "description": "<p>The <tt>CONST</tt> keyword on a subprocedure's parameter indicates that the parameter value will not be changed by the subprocedure. This is not just a nice way to communicate with the programmers who will call the procedure. It also offers performance benefits, because it allows the compiler to produce more optimized code. Further, using <tt>CONST</tt> means that a field of a similar data type will automatically be converted to the correct type and size for the parameter.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     D X               S             15A   INZ('ABC')\r\n     \r\n     P SubProc1        B\r\n     D SubProc1        PI\r\n     D  Parm1                        15A    <span class=\"code-comment\">// Noncompliant; read-only. Should be CONST\r\n</span>     D  Parm2                        15A\r\n      /Free\r\n       X = Parm1;\r\n       Parm2 = X;\r\n       <span class=\"code-keyword\">return</span>;\r\n      /End-free\r\n     P SubProc1        E\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     D X               S             15A   INZ('ABC')\r\n     \r\n     P SubProc1        B\r\n     D SubProc1        PI\r\n     D  Parm1                        15A   CONST\r\n     D  Parm2                        15A\r\n      /Free\r\n       X = Parm1;\r\n       Parm2 = X;\r\n       <span class=\"code-keyword\">return</span>;\r\n      /End-free\r\n     P SubProc1        E\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2031",
      "type": "Code Smell",
      "summary": "Comment lines should not be too long",
      "description": "<p>Shared coding conventions allow teams to collaborate effectively. This rule ensures that comments end at or before the last line position which is easily viewable at the default screen resolution.</p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2795",
      "type": "Code Smell",
      "summary": "Optional operation codes should be omitted",
      "description": "<p><tt>Eval</tt> and <tt>Callp</tt> are the only two exceptions to the rule that each free-format line must start with an operation code. Since you can leave these two opcodes out, you should for cleaner, more readable code.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nEval Regpay = hours * perHour;\r\nCallp calcTax();\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nRegpay = hours * perHour;\r\ncalcTax();\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3424",
      "type": "Code Smell",
      "summary": "Skipped unit tests should be either removed or fixed",
      "description": "<p>Skipped unit tests are considered dead code. Either they should be activated again (and updated) or they should be removed.</p>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2024",
      "type": "Code Smell",
      "summary": "Standard language features should be in upper case",
      "description": "<p>Shared coding conventions allow teams to collaborate effectively. Typing operation codes, keywords, specification codes, compiler directives and built-in functions in upper case makes them more immediately recognizable as such, thereby making the code easier to read.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     c     test12        plist\r\n     c                   parm                    asdf01\r\n     c                   parm                    asdf02\r\n     c                   parm                    @pdq\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n     C     test12        PLIST\r\n     C                   PARM                    asdf01\r\n     C                   PARM                    asdf02\r\n     C                   PARM                    @pdq\r\n</pre>\n</div></div>\n",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1484",
      "type": "Code Smell",
      "summary": "Track instances of below-threshold comment line density",
      "description": "<p>An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.</p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    }
  ]
}