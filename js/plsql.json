{
  "types": {
    "Code Smell": 5,
    "Vulnerability": 1,
    "Code Smell": 117,
    "Bug": 37
  },
  "standards": [
    {
      "name": "CWE",
      "count": 7
    },
    {
      "name": "MISRA",
      "count": 14
    },
    {
      "name": "CERT",
      "count": 10
    }
  ],
  "tags": [
    {
      "name": "convention",
      "count": 22
    },
    {
      "name": "lock-in",
      "count": 3
    },
    {
      "name": "obsolete",
      "count": 5
    },
    {
      "name": "cert",
      "count": 10
    },
    {
      "name": "suspicious",
      "count": 8
    },
    {
      "name": "error-reporting",
      "count": 1
    },
    {
      "name": "pitfall",
      "count": 14
    },
    {
      "name": "sql",
      "count": 25
    },
    {
      "name": "cwe",
      "count": 7
    },
    {
      "name": "error-handling",
      "count": 6
    },
    {
      "name": "tests",
      "count": 1
    },
    {
      "name": "performance",
      "count": 15
    },
    {
      "name": "bug",
      "count": 2
    },
    {
      "name": "brain-overload",
      "count": 15
    },
    {
      "name": "design",
      "count": 8
    },
    {
      "name": "misra",
      "count": 14
    },
    {
      "name": "bad-practice",
      "count": 6
    },
    {
      "name": "unused",
      "count": 7
    },
    {
      "name": "style",
      "count": 5
    },
    {
      "name": "confusing",
      "count": 6
    },
    {
      "name": "clumsy",
      "count": 9
    }
  ],
  "rules": [
    {
      "ruleKey": "RSPEC-1590",
      "type": "Bug",
      "summary": "\"DELETE\" and \"UPDATE\" statements should contain \"WHERE\" clauses",
      "description": "<p><tt>UPDATE</tt> and <tt>DELETE</tt> statements should contain <tt>WHERE</tt> clauses to keep the modification of records under control. Otherwise unexpected data loss could result.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  maxAge PLS_INTEGER := 60;\r\nBEGIN\r\n  UPDATE employee SET status = 'retired'; -- Noncompliant - the WHERE was forgotten\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  maxAge PLS_INTEGER := 60;\r\nBEGIN\r\n  UPDATE employee SET status = 'retired' WHERE age &gt; maxAge;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2483",
      "type": "Bug",
      "summary": "\"END LOOP\" should be followed by a semicolon",
      "description": "<p>Labeled loops are useful, especially when the code is badly indented, to match the begin and end of each loop. However, those labels, if used, must appear on the same line as the \"END\" keyword in order to avoid any confusion. Indeed, the label might otherwise be seen as a procedure call.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  PROCEDURE foo AS\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE('foo was called!');\r\n  END;\r\nBEGIN\r\n  LOOP\r\n    EXIT;\r\n  END LOOP -- The semicolon was forgotten\r\n\r\n  foo; -- Noncompliant, This is interpreted as a label of the previous FOR loop, not as a procedure call to foo!\r\n\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  PROCEDURE foo AS\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE('foo was called!');\r\n  END;\r\nBEGIN\r\n\r\n  &lt;&lt;myLoopLabel&gt;&gt;\r\n  LOOP\r\n    EXIT;\r\n  END LOOP myLoopLabel;\r\n\r\n  foo; -- Correctly interpreted as a procedure call to foo\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2449",
      "type": "Bug",
      "summary": "\"FETCH ... BULK COLLECT INTO\" should not be used without a \"LIMIT\" clause",
      "description": "<p>A <tt>FETCH ... BULK COLLECT INTO</tt> without a <tt>LIMIT</tt> clause will load all the records returned by the cursor at once. This may lead to memory exhaustion. Instead, it is better to process the records in chunks using the <tt>LIMIT</tt> clause.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\n-- Fetches all records at once, requiring lots of memory\r\nDECLARE\r\n  TYPE largeTableRowArrayType IS TABLE OF largeTable%ROWTYPE;\r\n  largeTableRowArray largeTableRowArrayType;\r\n  CURSOR myCursor IS SELECT * FROM largeTable;\r\nBEGIN\r\n  OPEN myCursor;\r\n\r\n  FETCH myCursor BULK COLLECT INTO largeTableRowArray; -- Non-compliant\r\n\r\n  DBMS_OUTPUT.PUT_LINE('Alternative 1: ' || largeTableRowArray.COUNT || ' records');\r\n\r\n  CLOSE myCursor;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\n-- fetches one chunk at a time, requiring constant memory\r\nDECLARE\r\n  TYPE largeTableRowArrayType IS TABLE OF largeTable%ROWTYPE;\r\n  largeTableRowArray largeTableRowArrayType;\r\n  CURSOR myCursor IS SELECT * FROM largeTable;\r\n  counter PLS_INTEGER := 0;\r\nBEGIN\r\n  OPEN myCursor;\r\n\r\n  LOOP\r\n    FETCH myCursor BULK COLLECT INTO largeTableRowArray LIMIT 1000; -- Compliant\r\n\r\n    counter := counter + largeTableRowArray.COUNT;\r\n\r\n    EXIT WHEN myCursor%NOTFOUND;\r\n  END LOOP;\r\n\r\n  DBMS_OUTPUT.PUT_LINE('Alternative 1: ' || counter || ' records');\r\n\r\n  CLOSE myCursor;\r\nEND;\r\n/\r\n\r\nDROP TABLE largeTable;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1074",
      "type": "Bug",
      "summary": "\"FORALL\" statements should use the \"SAVE EXCEPTIONS\" clause",
      "description": "<p>When the <tt>FORALL</tt> statement is used without the <tt>SAVE EXCEPTIONS</tt> clause and an exception is raised by a DML query, the whole operation is rolled back and the exception goes unhandled. Instead of relying on this default behavior, it is better to always use the <tt>SAVE EXCEPTIONS</tt> clause and explicitly handle exceptions in a <tt>ORA-24381</tt> handler.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TABLE my_table(\r\n  id NUMBER(10) NOT NULL\r\n);\r\n\r\nDECLARE\r\n  TYPE my_table_id_type IS TABLE OF my_table.id%TYPE;\r\n  my_table_ids my_table_id_type := my_table_id_type();\r\nBEGIN\r\n  FOR i IN 1 .. 10 LOOP\r\n    my_table_ids.EXTEND;\r\n    my_table_ids(my_table_ids.LAST) := i;\r\n  END LOOP;\r\n\r\n  -- Cause the failure\r\n  my_table_ids(10) := NULL;\r\n\r\n  FORALL i IN my_table_ids.FIRST .. my_table_ids.LAST  -- Noncompliant\r\n    INSERT INTO my_table\r\n    VALUES (my_table_ids(i));\r\nEND;\r\n/\r\n\r\nSELECT COUNT(*) FROM my_table;\r\n\r\nDROP TABLE my_table;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n-- ...\r\n\r\nDECLARE\r\n  TYPE my_table_id_type IS TABLE OF my_table.id%TYPE;\r\n  my_table_ids my_table_id_type := my_table_id_type();\r\n\r\n  bulk_errors EXCEPTION;\r\n  PRAGMA EXCEPTION_INIT(bulk_errors, -24381);\r\nBEGIN\r\n  FOR i IN 1 .. 10 LOOP\r\n    my_table_ids.EXTEND;\r\n    my_table_ids(my_table_ids.LAST) := i;\r\n  END LOOP;\r\n\r\n  -- Cause the failure\r\n  my_table_ids(10) := NULL;\r\n\r\n  FORALL i IN my_table_ids.FIRST .. my_table_ids.LAST SAVE EXCEPTIONS\r\n    INSERT INTO my_table\r\n    VALUES (my_table_ids(i));\r\nEXCEPTION\r\n  WHEN bulk_errors THEN\r\n    -- Explicitly rollback the whole transaction,\r\n    -- or handle each exception individually by looping over SQL%BULK_EXCEPTIONS\r\n    ROLLBACK;\r\nEND;\r\n/\r\n\r\n-- ...\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2522",
      "type": "Bug",
      "summary": "\"NCHAR\" and \"NVARCHAR2\" size should not be specified in bytes",
      "description": "<p><tt>NCHAR</tt> and <tt>NVARCHAR2</tt> lengths must be given in characters, not bytes. This is partly because a single character may occupy more than a single byte in memory. Specify the field length in bytes, and theoretically your value could overrun the field, but instead Oracle simply refuses to run the code. Specify it in characters, and Oracle will allocate the appropriate number of bytes to store the requested number of characters. Trying to specify the length semantics in bytes will result in the <tt>PLS-00639: NCHAR/NVARCHAR2 cannot be byte length semantics</tt> exception being raised.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo NCHAR(42 BYTE); -- Noncompliant - raises PLS-00639\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo NCHAR(42);      -- Compliant\r\n  bar NCHAR(42 CHAR); -- Also compliant, as an alternative\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2526",
      "type": "Bug",
      "summary": "\"NOT NULL\" variables should be initialized",
      "description": "<p>Variables and fields declared as <tt>NOT NULL</tt> must be immediately initialized, since they cannot be implicitly initialized to <tt>NULL</tt>. This rule prevents <tt>PLS-00218</tt> exceptions from being raised at runtime.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  test PLS_INTEGER; -- This variable is implicitly initialized to NULL\r\n\r\n  foo PLS_INTEGER NOT NULL; -- Noncompliant PLS-00218 a variable declared NOT NULL must have an initialization assignment\r\n\r\n  TYPE myType IS RECORD(\r\n    foo PLS_INTEGER NOT NULL, -- Non-Compliant PLS-00218 a variable declared NOT NULL must have an initialization assignment\r\n    bar PLS_INTEGER NULL\r\n  );\r\nBEGIN\r\n  IF test IS NULL\r\n    DBMS_OUTPUT.PUT_LINE('test is NULL');\r\n  ELSE\r\n    DBMS_OUTPUT.PUT_LINE('test is NOT NULL');\r\n  END IF;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  test PLS_INTEGER; -- This variable is implicitly initialized to NULL\r\n\r\n  foo PLS_INTEGER NOT NULL := 42; -- Compliant\r\n\r\n  TYPE myType IS RECORD(\r\n    foo PLS_INTEGER NOT NULL := 42, -- Compliant\r\n    bar PLS_INTEGER NULL\r\n  );\r\nBEGIN\r\n  IF test IS NULL\r\n    DBMS_OUTPUT.PUT_LINE('test is NULL');\r\n  ELSE\r\n    DBMS_OUTPUT.PUT_LINE('test is NOT NULL');\r\n  END IF;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2450",
      "type": "Bug",
      "summary": "\"RAISE_APPLICATION_ERROR\" should only be used with error codes from -20,000 to -20,999",
      "description": "<p><tt>RAISE_APPLICATION_ERROR</tt> may only be called with an error code from -20,000 to -20,999, which is the range reserved for application errors. When called with another value, Oracle raises the exception: <tt>ORA-21000: error number argument to raise_application_error of 0 is out of range.</tt></p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  RAISE_APPLICATION_ERROR(0, 'This is an application error'); -- Non-Compliant - raises ORA-21000\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  RAISE_APPLICATION_ERROR(-20000, 'This is an application error'); -- Compliant\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "error-handling"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2448",
      "type": "Bug",
      "summary": "Anchored types should not be constrained",
      "description": "<p>Anchored types, i.e. those specified using either <tt>%TYPE</tt> or <tt>%ROWTYPE</tt>, cannot be constrained. Trying to do so results in the exception <tt>PLS-00573: cannot constrain scale, precision, or range of an anchored type being raised.</tt></p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo DUAL.DUMMY%TYPE(42); -- Non-Compliant - raises PLS-00573\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo DUAL.DUMMY%TYPE; -- Compliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2475",
      "type": "Code Smell",
      "summary": "Block start and end labels should match",
      "description": "<p>Labeled blocks are useful, especially when the code is badly indented, to match the begin and end of each block. This rule verifies that block start and end labels match, when both are specified.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  NULL;\r\nEND; -- Compliant, no labels at all\r\n/\r\n\r\n&lt;&lt;myBlockLabel1&gt;&gt;\r\nBEGIN\r\n  NULL;\r\nEND; -- Compliant, only starting label\r\n/\r\n\r\nBEGIN\r\n  NULL;\r\nEND myBlockLabel2; -- Compliant, only ending label\r\n/\r\n\r\n&lt;&lt;myBlockLabel3&gt;&gt;\r\nBEGIN\r\n  NULL;\r\nEND myBlockLabel4; -- Noncompliant, labels mismatch\r\n/\r\n\r\n&lt;&lt;myBlockLabel6&gt;&gt;\r\n&lt;&lt;myBlockLabel6&gt;&gt;\r\nBEGIN\r\n  NULL;\r\nEND myBlockLabel6; -- Noncompliant, several starting labels\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n\r\n&lt;&lt;myBlockLabel1&gt;&gt;\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  NULL;\r\nEND myBlockLabel2;\r\n/\r\n\r\n&lt;&lt;myBlockLabel3&gt;&gt;\r\nBEGIN\r\n  NULL;\r\nEND myBlockLabel3;\r\n/\r\n\r\n&lt;&lt;myBlockLabel6&gt;&gt;\r\nBEGIN\r\n  NULL;\r\nEND myBlockLabel6;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2455",
      "type": "Bug",
      "summary": "Constant declarations should contain initialization assignments",
      "description": "<p>Constants must be immediately initialized at declaration. They cannot be reassigned any value after the declaration, as they are constant. This rule prevents PLS-00322 exceptions from being raised at runtime.<br/>\nThe following code snippet illustrates this rule:</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo CONSTANT PLS_INTEGER NULL; -- Noncompliant PLS-00322\r\n  bar CONSTANT PLS_INTEGER NOT NULL; -- Noncompliant PLS-00322\r\n  aa CONSTANT PLS_INTEGER; -- Noncompliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo CONSTANT PLS_INTEGER NULL :=42;\r\n  bar CONSTANT PLS_INTEGER NOT NULL := 42;\r\n  aa CONSTANT PLS_INTEGER := 42; -- Compliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2473",
      "type": "Bug",
      "summary": "Constraints should not be applied to types that cannot be constrained",
      "description": "<p>Some types cannot be constrained, and attempting to do so results in the exception <tt>PLS-00566: type name \"...\" cannot be constrained</tt> being raised.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo BLOB(42); -- Noncompliant - raises PLS-00566: type name <span class=\"code-quote\">\"BLOB\"</span> cannot be constrained\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo BLOB;\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-999",
      "type": "Code Smell",
      "summary": "GOTO should not be used to jump backwards",
      "description": "<p>Jumping back to a previous statement using &lt;code&gt;GOTO&lt;/code&gt; is a way to reimplement loops, which PL/SQL already provides in much more readable forms.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  result PLS_INTEGER := 0;\r\n  counter PLS_INTEGER := 1;\r\nBEGIN\r\n  &lt;&lt;loop&gt;&gt;\r\n  result := result + counter;\r\n  counter := counter + 1;\r\n\r\n  IF counter &lt;= 9 THEN\r\n    GOTO loop;                    -- Noncompliant\r\n  END IF;\r\n\r\n  DBMS_OUTPUT.PUT_LINE('Sum from 1 to 9 is ' || result); -- Displays 1 + 2 + ... + 8 + 9 = 45\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  result PLS_INTEGER := 0;\r\nBEGIN\r\n  FOR counter IN 1 .. 9 LOOP\r\n    result := result + counter;\r\n  END LOOP;\r\n\r\n  DBMS_OUTPUT.PUT_LINE('Sum from 1 to 9 is ' || result); -- Displays 1 + 2 + ... + 8 + 9 = 45\r\nEND;\r\n/\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 6-6-2 - The goto statement shall jump to a label declared later in the same function body</li>\n\t<li>MISRA C:2012, 15.2 - The goto statement shall jump to a label declared later in the same function</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2470",
      "type": "Bug",
      "summary": "Improper constraint forms should not be used",
      "description": "<p>Not every data type supports the <tt>RANGE</tt> or scale constraints. Using these constraints on incompatible types results in an <tt>PLS-00572: improper constraint form used</tt> exception being raised.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo INTEGER RANGE 0 .. 42; -- Non-Compliant - raises PLS-00572 as NUMBER does not support the RANGE constraint\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo INTEGER; -- Compliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2476",
      "type": "Code Smell",
      "summary": "Loop start and end labels should match",
      "description": "<p>Labeled loops are useful, especially when the code is badly indented, to match the begin and end of each loop. This rule verifies that loop start and end labels match, when both are specified.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  LOOP\r\n    EXIT;\r\n  END LOOP; -- Compliant, <span class=\"code-keyword\">this</span> loop has no label at all\r\n\r\n  &lt;&lt;myLoopLabel1&gt;&gt;\r\n  LOOP\r\n    EXIT;\r\n  END LOOP; -- Compliant, <span class=\"code-keyword\">this</span> loop only has a start label\r\n\r\n  LOOP\r\n    EXIT;\r\n  END LOOP myLoopLabel2; -- Compliant, <span class=\"code-keyword\">this</span> loop only has an end label\r\n\r\n  &lt;&lt;myLoopLabel4&gt;&gt;\r\n  LOOP\r\n    EXIT;\r\n  END LOOP myLoopLabel5; -- Noncompliant, label mismatch\r\n\r\n  &lt;&lt;myLoopLabel6&gt;&gt;\r\n  &lt;&lt;myLoopLabel7&gt;&gt;\r\n  LOOP\r\n    EXIT;\r\n  END LOOP myLoopLabel7; -- Noncompliant, several start labels mismatch\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  LOOP\r\n    EXIT;\r\n  END LOOP;\r\n\r\n  &lt;&lt;myLoopLabel1&gt;&gt;\r\n  LOOP\r\n    EXIT;\r\n  END LOOP;\r\n\r\n  LOOP\r\n    EXIT;\r\n  END LOOP myLoopLabel2;\r\n\r\n  &lt;&lt;myLoopLabel4&gt;&gt;\r\n  LOOP\r\n    EXIT;\r\n  END LOOP myLoopLabel4;\r\n\r\n  &lt;&lt;myLoopLabel7&gt;&gt;\r\n  LOOP\r\n    EXIT;\r\n  END LOOP myLoopLabel7;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1058",
      "type": "Bug",
      "summary": "Pipelined functions should have at least one \"PIPE ROW\" statement and not return an expression (PLS-00633)",
      "description": "<p>Pipelined functions offers the ability to create programmatically generated tables.<br/>\nOne of the benefits of such functions is that they reduce memory consumption as results are not all kept in memory before being returned.<br/>\nInstead of relying on &lt;code&gt;RETURN&lt;/code&gt;, &lt;code&gt;PIPE ROW&lt;/code&gt; must be used to return the results, one row at a time.</p>\n\n<p>Trying to return an expression from a pipelined function raises &lt;code&gt;PLS-00633: RETURN statement in a pipelined function cannot contain an expression&lt;/code&gt;</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE OR REPLACE TYPE myScalarType AS OBJECT\r\n(\r\n  dummy   VARCHAR2(42)\r\n)\r\n/\r\nCREATE OR REPLACE TYPE myTableType AS TABLE OF myScalarType;\r\n/\r\n\r\nCREATE OR REPLACE FUNCTION foo RETURN myTableType PIPELINED AS  -- Noncompliant, should contain at least one PIPE ROW\r\n  result myTableType := myTableType();\r\nBEGIN\r\n  FOR i IN 1 .. 3 LOOP\r\n    result.EXTEND;\r\n    result(i) := myScalarType('Dummy ' || i);\r\n  END LOOP;\r\n\r\n  RETURN result;  -- Noncompliant, will raise PLS-00633\r\nEND;\r\n/\r\n\r\nSELECT * FROM TABLE(foo());\r\n\r\nDROP FUNCTION foo;\r\nDROP TYPE myTableType;\r\nDROP TYPE myScalarType;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n-- ...\r\n\r\nCREATE OR REPLACE FUNCTION foo RETURN myTableType PIPELINED AS\r\nBEGIN\r\n  FOR i IN 1 .. 3 LOOP\r\n    PIPE ROW(myScalarType('Dummy ' || i));\r\n  END LOOP;\r\n\r\n  RETURN;\r\nEND;\r\n/\r\n\r\n-- ...\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2531",
      "type": "Bug",
      "summary": "Predefined exceptions should not be overridden",
      "description": "<p>Naming custom exceptions the same as predefined ones, while technically acceptable, is not a good practice.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  no_data_found EXCEPTION; -- Noncompliant, overrides an Oracle predefined exception\r\n\r\n  d VARCHAR2(1);\r\nBEGIN\r\n  SELECT dummy INTO d FROM DUAL WHERE dummy = 'Y'; -- Will raise STANDARD.NO_DATA_FOUND\r\nEXCEPTION\r\n  WHEN NO_DATA_FOUND THEN\r\n    DBMS_OUTPUT.PUT_LINE('No data found!'); -- Won't be executed, as NO_DATA_FOUND was overriden, confusing!\r\n  WHEN OTHERS THEN\r\n    DBMS_OUTPUT.PUT_LINE('Unknown error!'); -- *Will* be executed\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  my_own_exception EXCEPTION; -- Compliant\r\n\r\n  d VARCHAR2(1);\r\nBEGIN\r\n  SELECT dummy INTO d FROM DUAL WHERE dummy = 'Y'; \r\nEXCEPTION\r\n  WHEN NO_DATA_FOUND THEN\r\n    DBMS_OUTPUT.PUT_LINE('No data found!'); -- *Will* be executed\r\n  WHEN OTHERS THEN\r\n    DBMS_OUTPUT.PUT_LINE('Unknown error!');\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2537",
      "type": "Code Smell",
      "summary": "Quoted identifiers should not be used",
      "description": "<p>Quoted identifiers are confusing to many programmers, as they look similar to string literals. Moreover, for maximum portability, identifiers should be self-descriptive and should not contain accents. Quoted identifiers can contain any character, which can be confusing.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  <span class=\"code-quote\">\"x + y\"</span> PLS_INTEGER := 0; -- Noncompliant, quoted identifiers are confusing\r\n  x PLS_INTEGER := 40;\r\n  y PLS_INTEGER := 2;\r\n  <span class=\"code-quote\">\"hello\"</span> VARCHAR2(42) := 'world';  -- Noncompliant\r\n\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE(<span class=\"code-quote\">\"x + y\"</span>); -- Noncompliant, displays 0\r\n  DBMS_OUTPUT.PUT_LINE(<span class=\"code-quote\">\"hello\"</span>); -- Noncompliant, confusing, displays <span class=\"code-quote\">\"world\"</span> and not <span class=\"code-quote\">\"hello\"</span>\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  my_int PLS_INTEGER := 0;\r\n  x PLS_INTEGER := 40;\r\n  y PLS_INTEGER := 2;\r\n  greeting VARCHAR2(42) := 'hello';\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE(my_int);\r\n  DBMS_OUTPUT.PUT_LINE(x + y); -- Compliant, displays 42\r\n\r\n  DBMS_OUTPUT.PUT_LINE(greeting);\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2463",
      "type": "Bug",
      "summary": "Scale should not be specified for float types",
      "description": "<p>Float data types, such as <tt>FLOAT</tt>, <tt>DOUBLE PRECISION</tt>, and <tt>REAL</tt> cannot have a scale constraint. Trying to specify a scale results in the exception <tt>PLS-00510: Float cannot have scale being raised.</tt></p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo FLOAT(10, 3); -- Noncompliant - raises PLS-00510\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo FLOAT(10); -- Compliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2545",
      "type": "Bug",
      "summary": "Size should be specified for string variables",
      "description": "<p>String data types, such as <tt>VARCHAR2</tt> or <tt>NVARCHAR2</tt> require a size constraint. Omitting the size results in the exception <tt>PLS-00215: String length constraints must be in range (1 .. 32767)</tt> being raised.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo VARCHAR2; -- Noncompliant - raises PLS-00215\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo VARCHAR2(42); -- Compliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2567",
      "type": "Bug",
      "summary": "Variables should be declared only once in a scope",
      "description": "<p>At most one declaration of a variable in a given scope is allowed in PL/SQL. The <tt>PLS-00371</tt> error will be raised at runtime when attempting to reference a variable declared more than once.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  foo VARCHAR2(42) := 'foo';\r\n  foo VARCHAR2(42) := 'bar'; -- Non-Compliant\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE(foo); -- Raises PLS-00371: at most one declaration <span class=\"code-keyword\">for</span> 'FOO' is permitted\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  foo VARCHAR2(42) := 'foo';\r\n  bar VARCHAR2(42) := 'bar'; -- Compliant\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE(foo);\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2558",
      "type": "Bug",
      "summary": "\"COMMIT\" and \"ROLLBACK\" should not be called from non-autonomous transaction triggers",
      "description": "<p>Calling <tt>COMMIT</tt> or <tt>ROLLBACK</tt> from within a trigger will lead to an <tt>ORA-04092</tt> exception, unless the trigger has its own autonomous transaction.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE accounts(\r\n  balance NUMBER\r\n);\r\n\r\nINSERT INTO accounts VALUES(0);\r\n\r\nCREATE TABLE log(\r\n  message VARCHAR2(100)\r\n);\r\n\r\nCREATE TRIGGER beforeLogger\r\n  BEFORE UPDATE ON accounts\r\n  FOR EACH ROW\r\nBEGIN\r\n  INSERT INTO log VALUES('Attempt to update the value from ' || :OLD.balance || ' to ' || :NEW.balance);\r\n  COMMIT; -- Noncompliant, will fail with a ORA-04092\r\nEND;\r\n/\r\n\r\n-- We want to be able to log any attempt to update the <span class=\"code-quote\">\"accounts\"</span> table\r\nBEGIN\r\n  UPDATE accounts SET balance = 100;\r\n  ROLLBACK; -- Ultimately, <span class=\"code-keyword\">this</span> update is rolled back, however we still want to log it\r\nEND;\r\n/\r\n\r\nSELECT * FROM log;\r\n\r\nDROP TRIGGER beforeLogger;\r\n\r\nDROP TABLE log;\r\n\r\nDROP TABLE accounts;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE accounts(\r\n  balance NUMBER\r\n);\r\n\r\nINSERT INTO accounts VALUES(0);\r\n\r\nCREATE TABLE log(\r\n  message VARCHAR2(100)\r\n);\r\n\r\nCREATE TRIGGER beforeLogger\r\n  BEFORE UPDATE ON accounts\r\n  FOR EACH ROW\r\nDECLARE\r\n  PRAGMA AUTONOMOUS_TRANSACTION;\r\nBEGIN\r\n  INSERT INTO log VALUES('Attempt to update the value from ' || :OLD.balance || ' to ' || :NEW.balance);\r\n  COMMIT; -- Compliant, commits the trigger's autonomous transaction, not the main one\r\nEND;\r\n/\r\n\r\n-- We want to be able to log any attempt to update the <span class=\"code-quote\">\"accounts\"</span> table\r\nBEGIN\r\n  UPDATE accounts SET balance = 100;\r\n  ROLLBACK; -- Ultimately, <span class=\"code-keyword\">this</span> update is rolled back, however we still want to log it\r\nEND;\r\n/\r\n\r\nSELECT * FROM log;\r\n\r\nDROP TRIGGER beforeLogger;\r\n\r\nDROP TABLE log;\r\n\r\nDROP TABLE accounts;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-3830",
      "type": "Bug",
      "summary": "\"COMMIT\" should not be used inside a loop",
      "description": "<p>Frequent commits are widely understood to negatively impact performance. Thus, committing inside a loop (even when only executed conditionally once every n iterations) is highly likely to cause unwanted performance impacts. </p>\n\n<p>Further, in general use <tt>COMMIT</tt> should only be used at the end of a transaction. Code that is not structured to have one transaction per loop iteration could yield unexpected results if <tt>COMMIT</tt> is nonetheless used inside the loop. Code that <em>is</em> structured to have one transaction per loop iteration should probably be reconsidered.</p>\n\n<p>Note that when dealing with very large data sets, a <tt>COMMIT</tt> may be required every n iterations, but the goal should be to avoid <tt>COMMIT</tt>s inside loops.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nFOR item IN itemlist\r\nLOOP\r\n  -- ...   \r\n  COMMIT;  -- Noncompliant\r\nEND LOOP;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nFOR item IN itemlist\r\nLOOP\r\n  -- ...   \r\nEND LOOP;\r\nCOMMIT;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2456",
      "type": "Code Smell",
      "summary": "\"CREATE OR REPLACE\" should be used instead of \"CREATE\"",
      "description": "<p>When creating a function, procedure, package, package body, type, type body, trigger or library, it is a good practice replace the existing one to avoid errors.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE FUNCTION my_function RETURN PLS_INTEGER AS -- Noncompliant\r\nBEGIN\r\n  RETURN 42;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE OR REPLACE FUNCTION my_function RETURN PLS_INTEGER AS -- Compliant, no error even <span class=\"code-keyword\">if</span> the function already exists\r\nBEGIN\r\n  RETURN 42;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2458",
      "type": "Code Smell",
      "summary": "\"EXCEPTION_INIT -20,NNN\" calls should be centralized",
      "description": "<p>Centralizing the definitions of custom exceptions comes with two major benefits:</p>\n<ul>\n\t<li>The duplication of the exceptions declarations and <tt>PRAGMA EXCEPTION_INIT</tt> is avoided</li>\n\t<li>The risk of associating multiple different exceptions to the same number is reduced</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  user_not_found EXCEPTION;\r\n  PRAGMA EXCEPTION_INIT(user_not_found, -20000); -- Noncompliant, user_not_found is bound to -20000\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n\r\nDECLARE\r\n  user_not_found EXCEPTION;\r\n  PRAGMA EXCEPTION_INIT(user_not_found, -20000); -- Noncompliant, user_not_found is again bound to -20000, duplication\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n\r\nDECLARE\r\n  wrong_password EXCEPTION;\r\n  PRAGMA EXCEPTION_INIT(wrong_password, -20000); -- Noncompliant, wrong_password is bound to -20000, conflicting with user_not_found\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE PACKAGE exceptions AS\r\n user_not_found EXCEPTION;\r\n wrong_password EXCEPTION;\r\n\r\n PRAGMA EXCEPTION_INIT(user_not_found, -20000); -- Non-Compliant (flag as <span class=\"code-keyword\">false</span>-positive)\r\n PRAGMA EXCEPTION_INIT(wrong_password, -20001); -- Non-Compliant (flag as <span class=\"code-keyword\">false</span>-positive), conflicts are easier to avoid\r\nEND;\r\n/\r\n\r\nDROP PACKAGE exceptions;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "design"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-134",
      "type": "Code Smell",
      "summary": "\"IF\" statements should not be nested too deeply",
      "description": "<p>Nested <tt>IF</tt> statements are a key ingredient for making what's known as \"Spaghetti code\".<br/>\nSuch code is hard to read, refactor and therefore maintain.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2340",
      "type": "Code Smell",
      "summary": "\"LOOP ... END LOOP;\" constructs should be avoided",
      "description": "<p>Simple loops, of the form <tt>LOOP ... END LOOP</tt>, behave by default as infinite ones, since they do not have a loop condition. They can often be replaced by other, safer, loop constructs.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  i PLS_INTEGER;\r\nBEGIN\r\n  i := 1;\r\n  LOOP -- Noncompliant, an infinite loop by <span class=\"code-keyword\">default</span> and therefore dangerous\r\n    DBMS_OUTPUT.PUT_LINE('First loop i: ' || i);\r\n\r\n    i := i + 1;\r\n    EXIT WHEN i &gt; 10;\r\n  END LOOP;\r\n\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  i PLS_INTEGER;\r\nBEGIN\r\n  FOR i IN 1..10 LOOP -- Compliant, much safer equivalent alternative\r\n    DBMS_OUTPUT.PUT_LINE('Second loop i: ' || i);\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2452",
      "type": "Code Smell",
      "summary": "Block labels should appear on the same lines as \"END\" ",
      "description": "<p>Labeled blocks are useful to help maintainers match-up the beginning and ending of each section of code, especially when that code is badly indented. However, if used, those labels must appear on the same line as the \"END\" keyword in order to avoid confusion. Otherwise, the label might be misread by maintainers as a procedure call.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  PROCEDURE foo AS\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE('foo was called!');\r\n  END;\r\nBEGIN\r\n  BEGIN\r\n    NULL;\r\n  END -- Semicolon was forgotten?\r\n\r\n  foo; -- Noncompliant; looks like a procedure call, but is actually END block label\r\n\r\n  &lt;&lt;myBlockLabel&gt;&gt;\r\n  BEGIN\r\n    NULL;\r\n  END \r\n  myBlockLabel; -- Noncompliant\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  PROCEDURE foo AS\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE('foo was called!');\r\n  END;\r\nBEGIN\r\n  BEGIN\r\n    NULL;\r\n  END; \r\n\r\n  foo; -- The method <span class=\"code-quote\">\"foo\"</span> was actually meant to be called\r\n\r\n  &lt;&lt;myBlockLabel&gt;&gt;\r\n  BEGIN\r\n    NULL;\r\n  END myBlockLabel;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2461",
      "type": "Code Smell",
      "summary": "Blocks containing \"EXECUTE IMMEDIATE\" should trap all exceptions",
      "description": "<p>Since the purpose of the <tt>EXECUTE IMMEDIATE</tt> statement is to execute dynamic SQL queries - which by definition can contain unexpected errors - properly handling exceptions becomes critical. Therefore, care should be taken to trap all possible exceptions.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  result      VARCHAR2(42);\r\n  column      VARCHAR2(42);\r\nBEGIN\r\n  column := 'DUMMY_2';\r\n  EXECUTE IMMEDIATE 'SELECT ' || column || ' FROM DUAL' INTO result; -- Non-Compliant\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  result      VARCHAR2(42);\r\n  column      VARCHAR2(42);\r\nBEGIN\r\n  column := 'DUMMY_2';\r\n  EXECUTE IMMEDIATE 'SELECT ' || column || ' FROM DUAL' INTO result; -- Compliant\r\nEXCEPTION\r\n  WHEN OTHERS THEN\r\n    DBMS_OUTPUT.PUT_LINE ('Execute immediate error: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "error-handling"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2464",
      "type": "Bug",
      "summary": "Collections should not be iterated in \"FOR\" loops",
      "description": "<p>The <tt>FOR</tt> loop at first seems like a convenient way of iterating over the elements of a collection, but doing so will raise a <tt>VALUE_ERROR</tt> exception if the collection is empty. Looping instead from 1 to <tt>COUNT</tt> doesn't work either if the collection is sparse; that leads to a <tt>ORA-01403: no data found</tt> error. </p>\n\n<p>Instead, a <tt>WHILE</tt> loop should be used.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  TYPE fooType IS TABLE OF VARCHAR2(42);\r\n  foo fooType := <span class=\"code-keyword\">new</span> fooType('Strawberry', 'Apple', 'Banana');\r\nBEGIN\r\n  foo.DELETE(2);                                -- The collection is now sparse\r\n\r\n  FOR i IN 1 .. foo.COUNT                       -- Noncompliant - leads to ORA-01403: no data found\r\n  LOOP\r\n    DBMS_OUTPUT.PUT_LINE(i || ' = ' || foo(i));\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  TYPE fooType IS TABLE OF VARCHAR2(42);\r\n  foo fooType := <span class=\"code-keyword\">new</span> fooType('Strawberry', 'Apple', 'Banana');\r\n  i PLS_INTEGER;\r\nBEGIN\r\n  foo.DELETE(2);                                -- The collection is now sparse\r\n\r\n  i := foo.FIRST;\r\n\r\n  WHILE (i IS NOT NULL)                         -- Compliant - works as expected\r\n  LOOP\r\n    DBMS_OUTPUT.PUT_LINE(i || ' = ' || foo(i));\r\n    i := foo.NEXT(i);\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-115",
      "type": "Code Smell",
      "summary": "Constant names should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression <tt><span class=\"error\">&#91;a-zA-Z&#93;</span>(<span class=\"error\">&#91;a-zA-Z0-9_&#93;</span>*<span class=\"error\">&#91;a-zA-Z0-9&#93;</span>)?</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  constant_ CONSTANT PLS_INTEGER := 42; -- Noncompliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  constant CONSTANT PLS_INTEGER := 42; -- Compliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2466",
      "type": "Bug",
      "summary": "Functions should end with \"RETURN\" statements",
      "description": "<p>Always having a <tt>RETURN</tt> as the last statement in a function is a good practice for two reasons:</p>\n<ul>\n\t<li>It prevents the <tt>ORA-06503 PL/SQL: Function returned without value</tt> error.</li>\n\t<li>It prevents unreachable code from being added after the <tt>RETURN</tt>.</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE FUNCTION incorrectFunction1 RETURN PLS_INTEGER IS -- Non-Compliant\r\nBEGIN\r\n  RETURN 42;\r\n\r\n   -- This is unreachable code\r\n   NULL;\r\nEND;\r\n/\r\n\r\nDROP FUNCTION incorrectFunction1;\r\n\r\nCREATE FUNCTION incorrectFunction2 RETURN PLS_INTEGER IS -- Non-Compliant\r\nBEGIN\r\n   NULL; -- This function was expected to <span class=\"code-keyword\">return</span> a PLS_INTEGER, but did not. Will lead to ORA-06503\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE('Ret = ' || incorrectFunction2); -- ORA-06503 PL/SQL: Function returned without value\r\nEND;\r\n/\r\n\r\nDROP FUNCTION incorrectFunction2;\r\n\r\nCREATE FUNCTION correctFunction RETURN PLS_INTEGER IS -- Compliant\r\nBEGIN\r\n  RETURN 42;\r\nEND;\r\n/\r\n\r\nDROP FUNCTION correctFunction;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2534",
      "type": "Bug",
      "summary": "Positional and named arguments should not be mixed in invocations",
      "description": "<p>For better readability, and to prevent the <tt>PLS-00312: a positional parameter association may not follow a named association</tt> exception from being raised, do not mix named and positional argument invocations.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  PROCEDURE sub(op1 PLS_INTEGER, op2 PLS_INTEGER) AS\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE('Sub = ' || (op1 - op2));\r\n  END;\r\nBEGIN\r\n\r\n  sub(10, op2 =&gt; 2); -- Noncompliant\r\n  sub(op1 =&gt; 10, 2); -- Noncompliant - raises PLS-00312: a positional parameter association may not follow a named association\r\n\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  PROCEDURE sub(op1 PLS_INTEGER, op2 PLS_INTEGER) AS\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE('Sub = ' || (op1 - op2));\r\n  END;\r\nBEGIN\r\n\r\n  sub(10, 2); -- Compliant\r\n  sub(op1 =&gt; 10, op2 =&gt; 2); -- Compliant\r\n\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1477",
      "type": "Code Smell",
      "summary": "Source files should not have any duplicated blocks",
      "description": "<p>An issue is created on a file as soon as there is at least one block of duplicated code on this file.</p>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1192",
      "type": "Code Smell",
      "summary": "String literals should not be duplicated",
      "description": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.<br/>\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  prepare('action1');\r\n  execute('action1');\r\n  release('action1');\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  action CONSTANT VARCHAR2(7) := 'action1';\r\nBEGIN\r\n  prepare(action);\r\n  execute(action);\r\n  release(action);\r\nEND;\r\n/\r\n</pre>\n</div></div><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
      "standards": [],
      "tags": [
        "design"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1524",
      "type": "Code Smell",
      "summary": "Variables should not be shadowed",
      "description": "<p>Overriding a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  foo VARCHAR2(42) := 'foo';\r\nBEGIN\r\n  DECLARE\r\n    foo VARCHAR2(42) := 'bar'; -- Noncompliant - <span class=\"code-keyword\">this</span> variable hides the one above and should be renamed\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE(foo); -- Displays <span class=\"code-quote\">\"bar\"</span>, which is confusing\r\n  END;\r\n\r\n  DBMS_OUTPUT.PUT_LINE(foo); -- Displays <span class=\"code-quote\">\"foo\"</span>\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  foo VARCHAR2(42) := 'foo';\r\nBEGIN\r\n  DECLARE\r\n    bar VARCHAR2(42) := 'bar'; -- Compliant\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE(bar); -- Displays <span class=\"code-quote\">\"bar\"</span>\r\n  END;\r\n\r\n  DBMS_OUTPUT.PUT_LINE(foo); -- Displays <span class=\"code-quote\">\"foo\"</span>\r\nEND;\r\n/\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 5.2 - Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier</li>\n\t<li>MISRA C++:2008, 2-10-2 - Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope</li>\n\t<li>MISRA C:2012, 5.3 - An identifier declared in an inner scope shall not hide an identifier declared in an outer scope</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/VwE\" class=\"external-link\" rel=\"nofollow\">CERT, DCL01-C.</a> - Do not reuse variable names in subscopes</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/cwAhAQ\" class=\"external-link\" rel=\"nofollow\">CERT, DCL01-CPP.</a> - Do not reuse variable names in subscopes</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2570",
      "type": "Code Smell",
      "summary": "Weak \"REF CURSOR\" types should not be used",
      "description": "<p>Weak <tt>REF CURSOR</tt> types are harder to work with than ones with a return type. Indeed, the compiler's type-checker is unable to make some verifications, which are then delayed till runtime.</p>\n\n<p>When the use of weak <tt>REF CURSOR</tt> is required, it is best to use the <tt>SYS_REFCURSOR</tt> built-in type instead of defining a new one.<br/>\nThis rule's sysRefCursorAllowed parameter can be used to control whether or not the usage of <tt>SYS_REFCURSOR</tt> is allowed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  TYPE dualCursorType IS REF CURSOR;                      -- Noncompliant\r\n  dualCursor dualCursorType;\r\n\r\n  otherCursor SYS_REFCURSOR;                              -- Compliant or non-compliant, depending on the <span class=\"code-quote\">\"sysRefCursorAllowed\"</span> parameter\r\nBEGIN\r\n  otherCursor := dualCursor;                              -- Works\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  TYPE dualCursorType IS REF CURSOR RETURN DUAL%ROWTYPE;\r\n  dualCursor dualCursorType;\r\n\r\n  TYPE otherCursorType IS REF CURSOR RETURN a%ROWTYPE;\r\n  otherCursor otherCursorType;\r\nBEGIN\r\n  otherCursor := dualCursor;                              -- raises PLS-00382: expression is of wrong type, which makes debugging easier\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "design"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2460",
      "type": "Code Smell",
      "summary": "\"CASE\" should be used rather than \"DECODE\"",
      "description": "<p><tt>DECODE</tt> is an old function that has been replaced by the easier to understand and more common <tt>CASE</tt>. Unlike <tt>DECODE</tt>, <tt>CASE</tt> may also be used directly within PL/SQL.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  operand CHAR(1) := 'B';\r\n  l_result PLS_INTEGER;\r\nBEGIN\r\n  -- Noncompliant\r\n  SELECT DECODE(operand, 'A', 1\r\n                       , 'B', 2\r\n                       , 'C', 3\r\n                       , 'D', 4\r\n                       , 'E', 5\r\n                       , 'F', 6\r\n                       , 7)\r\n  INTO l_result\r\n  FROM dual;\r\n\r\n  DBMS_OUTPUT.PUT_LINE('l_result = ' || l_result); -- 2\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  operand CHAR(1) := 'B';\r\n  l_result PLS_INTEGER;\r\nBEGIN\r\n\r\n  l_result := CASE operand\r\n                WHEN 'A' THEN 1\r\n                WHEN 'B' THEN 2\r\n                WHEN 'C' THEN 3\r\n                WHEN 'D' THEN 4\r\n                WHEN 'E' THEN 5\r\n                WHEN 'F' THEN 6\r\n                ELSE 7\r\n              END;\r\n\r\n  DBMS_OUTPUT.PUT_LINE('l_result = ' || l_result); -- 2\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1479",
      "type": "Code Smell",
      "summary": "\"CASE\" structures should not have too many \"WHEN\" clauses",
      "description": "<p><tt>CASE</tt> structures with a large set of <tt>WHEN</tt> clauses are difficult to understand and maintain, and should be refactored to include fewer <tt>WHEN</tt> clauses.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2457",
      "type": "Code Smell",
      "summary": "\"CROSS JOIN\" queries should not be used",
      "description": "<p>A <tt>CROSS JOIN</tt> query will return all records where each row from the first table is combined with each row from the second table. This means that such a query returns the Cartesian product of the sets of rows from the joined tables, which is why it is also know as \"Cartesian product query\".</p>\n\n<p>Such a query can return a huge amount of data, and therefore should be used only with great caution and only when really needed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  -- Standard ANSI syntax\r\n  SELECT *\r\n    INTO employeeArray\r\n    FROM employee CROSS JOIN department; -- Noncompliant; explicit cross join\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  -- Old syntax\r\n  SELECT *\r\n    INTO employeeArray\r\n    FROM employee, department; -- Noncompliant; also a cross join\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2451",
      "type": "Code Smell",
      "summary": "\"END\" statements of labeled blocks should be labeled",
      "description": "<p>Labeled blocks are useful, especially when the code is badly indented, to match the begin and end of each block. This check detects labeled blocks which are missing an ending label.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n&lt;&lt;myBlockLabel1&gt;&gt;\r\nBEGIN\r\n  NULL;\r\nEND; -- Noncompliant; <span class=\"code-keyword\">this</span> labeled loop has no ending label\r\n/\r\n\r\nBEGIN\r\n  NULL; -- Compliant; not a labeled block\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n&lt;&lt;myBlockLabel2&gt;&gt;\r\nBEGIN\r\n  NULL;\r\nEND myBlockLabel2;\r\n/\r\n\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "style"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2484",
      "type": "Code Smell",
      "summary": "\"END\" statements of labeled loops should be labeled",
      "description": "<p>Labeled loops are useful, especially when the code is badly indented, to match the begin and end of each loop. This rule raises an issue when the end of a labeled loop is unlabeled.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  &lt;&lt;myLoopLabel1&gt;&gt;\r\n  LOOP\r\n    EXIT;\r\n  END LOOP; -- Noncompliant; <span class=\"code-keyword\">this</span> labeled loop has no ending label\r\n\r\n  LOOP\r\n    EXIT;\r\n  END LOOP; -- Compliant; not a labeled loop\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  &lt;&lt;myLoopLabel1&gt;&gt;\r\n  LOOP\r\n    EXIT;\r\n  END LOOP myLoopLabel1;\r\n\r\n  LOOP\r\n    EXIT;\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall",
        "style"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2535",
      "type": "Code Smell",
      "summary": "\"EXECUTE IMMEDIATE\" should be used instead of DBMS_SQL procedure calls",
      "description": "<p><tt>EXECUTE IMMEDIATE</tt> is easier to use and understand than the DBMS_SQL package's procedures. It should therefore be preferred, when possible.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE myTable(\r\n  foo VARCHAR2(42)\r\n);\r\n\r\nCREATE PROCEDURE drop_table(tableName VARCHAR2) AS\r\n  cursorIdentifier INTEGER;\r\nBEGIN\r\n  cursorIdentifier := DBMS_SQL.OPEN_CURSOR; -- Compliant; <span class=\"code-keyword\">this</span> is not a procedure call\r\n  DBMS_SQL.PARSE(cursorIdentifier, 'DROP TABLE ' || tableName, DBMS_SQL.NATIVE); -- Noncompliant\r\n  DBMS_SQL.CLOSE_CURSOR(cursorIdentifier); -- Noncompliant\r\n\r\n  DBMS_OUTPUT.PUT_LINE('Table ' || tableName || ' dropped.');\r\nEXCEPTION\r\n  WHEN OTHERS THEN\r\n    DBMS_SQL.CLOSE_CURSOR(cursorIdentifier); -- Noncompliant\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  drop_table('myTable');\r\nEND;\r\n/\r\n\r\nDROP PROCEDURE drop_table;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE myTable(\r\n  foo VARCHAR2(42)\r\n);\r\n\r\nCREATE PROCEDURE drop_table(tableName VARCHAR2) AS\r\n  cursorIdentifier INTEGER;\r\nBEGIN\r\n  EXECUTE IMMEDIATE 'DROP TABLE ' || tableName;\r\n  DBMS_OUTPUT.PUT_LINE('Table ' || tableName || ' dropped.');\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  drop_table('myTable');\r\nEND;\r\n/\r\n\r\nDROP PROCEDURE drop_table;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2481",
      "type": "Code Smell",
      "summary": "\"EXIT WHEN\" should be used rather than \"IF ... THEN EXIT; END IF;\"",
      "description": "<p>The <tt>EXIT WHEN</tt> syntax can exit a loop depending on a condition. It should be preferred to the more verbose and error-prone <tt>IF ... THEN EXIT; END IF;</tt> syntax.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  i PLS_INTEGER;\r\nBEGIN\r\n\r\n  i := 0;\r\n  LOOP\r\n    IF i &gt; 10 THEN -- Noncompliant\r\n       EXIT;\r\n    END IF;\r\n\r\n    DBMS_OUTPUT.PUT_LINE('i = ' || i);\r\n    i := i + 1;\r\n  END LOOP;\r\n\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  i PLS_INTEGER;\r\nBEGIN\r\n\r\n  i := 0;\r\n  LOOP\r\n    EXIT WHEN i &gt; 10;\r\n\r\n    DBMS_OUTPUT.PUT_LINE('i = ' || i);\r\n    i := i + 1;\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2563",
      "type": "Code Smell",
      "summary": "\"FETCH ... BULK COLLECT INTO\" should be used",
      "description": "<p>The <tt>FETCH ... INTO</tt> statement is inefficient when used in a loop (where many records are expected). It leads to many context-switches between the SQL and PL/SQL engines. Instead, the <tt>FETCH ... BULK COLLECT INTO</tt> statement will issue the SQL requests in bulk, minimizing context switches.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE largeTable AS SELECT ROWNUM AS id FROM all_objects;\r\n\r\nSET TIMING ON\r\nDECLARE\r\n  x PLS_INTEGER;\r\n  CURSOR largeCursor IS SELECT ROWNUM FROM largeTable;\r\n  largeTableRowId BINARY_INTEGER;\r\nBEGIN\r\n  OPEN largeCursor;\r\n\r\n  x := 0;\r\n  LOOP\r\n    FETCH largeCursor INTO largeTableRowId; -- Noncompliant\r\n    EXIT WHEN largeCursor%NOTFOUND;\r\n\r\n    x := x + largeTableRowId;\r\n  END LOOP;\r\n\r\n  DBMS_OUTPUT.PUT_LINE('Sum of rownums using alternative 1: ' || x);\r\n\r\n  CLOSE largeCursor;\r\nEND;\r\n/\r\nSET TIMING OFF\r\n\r\nDECLARE\r\n  r largeTable%ROWTYPE;\r\n  CURSOR myCursor IS SELECT * FROM largeTable;\r\nBEGIN\r\n  OPEN myCursor;\r\n  FETCH myCursor INTO r; -- Compliant, outside of a loop\r\n  CLOSE myCursor;\r\nEND;\r\n/\r\n\r\nDROP TABLE largeTable;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE largeTable AS SELECT ROWNUM AS id FROM all_objects;\r\n\r\nSET TIMING ON\r\nDECLARE\r\n  x PLS_INTEGER;\r\n  CURSOR largeCursor IS SELECT * FROM largeTable;\r\n  TYPE largeTableRowIdArrayType IS TABLE OF BINARY_INTEGER INDEX BY BINARY_INTEGER;\r\n  largeTableRowIdArray largeTableRowIdArrayType;\r\nBEGIN\r\n  OPEN largeCursor;\r\n\r\n  x := 0;\r\n  LOOP\r\n    FETCH largeCursor BULK COLLECT INTO largeTableRowIdArray LIMIT 1000; -- Compliant\r\n\r\n    FOR i IN largeTableRowIdArray.FIRST .. largeTableRowIdArray.LAST LOOP\r\n      x := x + largeTableRowIdArray(i);\r\n    END LOOP;\r\n\r\n    EXIT WHEN largeCursor%NOTFOUND;\r\n  END LOOP;\r\n\r\n  DBMS_OUTPUT.PUT_LINE('Sum of rownums using alternative 2: ' || x);\r\n\r\n  CLOSE largeCursor;\r\nEND;\r\n/\r\nSET TIMING OFF\r\n\r\nDECLARE\r\n  r largeTable%ROWTYPE;\r\n  CURSOR myCursor IS SELECT * FROM largeTable;\r\nBEGIN\r\n  OPEN myCursor;\r\n  FETCH myCursor INTO r; -- Compliant, outside of a loop\r\n  CLOSE myCursor;\r\nEND;\r\n/\r\n\r\nDROP TABLE largeTable;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2480",
      "type": "Code Smell",
      "summary": "\"FOR\" loop end conditions should not be hard-coded",
      "description": "<p>Hard-coding bounds in FOR loops is a bad practice, just as magic numbers in general are. Often, those magic bounds can be replaced by dynamic values. If that is not possible, replacing the literal number with a constant is still better.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  TYPE myCollectionType IS VARRAY(3) OF VARCHAR2(42);\r\n  myCollection myCollectionType := myCollectionType('David', 'John', 'Richard');\r\n\r\nBEGIN\r\n\r\n  FOR i IN 2 .. 3 -- Noncompliant; magic numbers used <span class=\"code-keyword\">for</span> the loop bounds\r\n  LOOP\r\n    DBMS_OUTPUT.PUT_LINE('name = ' || myCollection(i));\r\n  END LOOP;\r\n\r\n  FOR i IN 2 .. myCollection.LAST -- Noncompliant, better but still magic\r\n  LOOP\r\n    DBMS_OUTPUT.PUT_LINE('name = ' || myCollection(i));\r\n  END LOOP;\r\n\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  TYPE myCollectionType IS VARRAY(3) OF VARCHAR2(42);\r\n  myCollection myCollectionType := myCollectionType('David', 'John', 'Richard');\r\n\r\nBEGIN\r\n  FOR i IN myCollection.FIRST .. myCollection.LAST\r\n  LOOP\r\n    DBMS_OUTPUT.PUT_LINE('name = ' || myCollection(i));\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2564",
      "type": "Code Smell",
      "summary": "\"FORALL\" should be used",
      "description": "<p>The performance of DML queries in loops can be improved by placing them in a <tt>FORALL</tt> statement. This way, queries will be sent in bulk, minimizing the number of context switches between PL/SQL and SQL.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE largeTable(\r\n  foo VARCHAR2(42)\r\n);\r\n\r\nBEGIN\r\n  FOR i IN 1 .. 100000 LOOP\r\n    INSERT INTO largeTable VALUES('bar' || i); -- Non-compliant\r\n  END LOOP;\r\nEND;\r\n/\r\n\r\nSET TIMING ON\r\nDECLARE\r\n  TYPE largeTableRowArrayType IS TABLE OF largeTable%ROWTYPE;\r\n  largeTableRowArray largeTableRowArrayType;\r\nBEGIN\r\n  SELECT * BULK COLLECT INTO largeTableRowArray FROM largeTable;\r\n\r\n  EXECUTE IMMEDIATE 'TRUNCATE TABLE largeTable';\r\n  FOR i IN largeTableRowArray.FIRST .. largeTableRowArray.LAST LOOP\r\n    INSERT INTO largeTable (foo) VALUES (largeTableRowArray(i).foo); -- Non-compliant\r\n  END LOOP;\r\nEND;\r\n/\r\nSET TIMING OFF\r\n\r\nDROP TABLE largeTable;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE largeTable(\r\n  foo VARCHAR2(42)\r\n);\r\n\r\nBEGIN\r\n  FOR i IN 1 .. 100000 LOOP\r\n    INSERT INTO largeTable VALUES('bar' || i); -- Non-compliant\r\n  END LOOP;\r\nEND;\r\n/\r\n\r\nSET TIMING ON\r\nDECLARE\r\n  TYPE largeTableRowArrayType IS TABLE OF largeTable%ROWTYPE;\r\n  largeTableRowArray largeTableRowArrayType;\r\nBEGIN\r\n  SELECT * BULK COLLECT INTO largeTableRowArray FROM largeTable;\r\n\r\n  EXECUTE IMMEDIATE 'TRUNCATE TABLE largeTable';\r\n  FORALL i IN largeTableRowArray.FIRST .. largeTableRowArray.LAST\r\n    INSERT INTO largeTable (foo) VALUES (largeTableRowArray(i).foo); -- Compliant\r\n\r\n  INSERT INTO largeTable (foo) VALUES ('baz'); -- Compliant, not in a loop\r\nEND;\r\n/\r\nSET TIMING OFF\r\n\r\nDROP TABLE largeTable;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2465",
      "type": "Code Smell",
      "summary": "\"FULL OUTER JOINS\" should be used with caution",
      "description": "<p>Full outer joins aren't in common use, and as a result many developers don't really understand them. Therefore, each use of this language feature should be reviewed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT *\r\n  BULK COLLECT INTO result\r\n  FROM DUAL d1\r\n  FULL OUTER JOIN DUAL d2 ON d1.dummy != d2.dummy; -- Noncompliant\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3874",
      "type": "Code Smell",
      "summary": "\"FUNCTIONS\" should not have \"OUT\" parameters",
      "description": "<p>Functions with <tt>OUT</tt> parameters are complex to understand. Indeed, it is impossible to tell, just by looking at the function call, whether an argument is a input or output. Moreover, functions with <tt>OUT</tt> parameters cannot be called from SQL. It is better to either break such functions up into smaller ones, which each return a single value, or to return several values at once, by combining them in a collection, record, type, or table row.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE employee(\r\n  firstName VARCHAR2(42),\r\n  name VARCHAR2(42),\r\n  phone VARCHAR2(42)\r\n);\r\n\r\nINSERT INTO employee VALUES ('John', 'Smith', '+1');\r\n\r\nDECLARE\r\n  firstName VARCHAR2(42);\r\n  name VARCHAR2(42);\r\n  phone VARCHAR2(42);\r\n\r\n  -- This DOES NOT <span class=\"code-keyword\">return</span> the employee name\r\n  FUNCTION getEmployeeInfos(firstName OUT VARCHAR2, phone OUT VARCHAR2) RETURN VARCHAR2 AS -- Non-Compliant, confusing\r\n    name VARCHAR2(42);\r\n  BEGIN\r\n    SELECT firstName, name, phone INTO firstName, name, phone FROM employee;\r\n    RETURN name;\r\n  END;\r\nBEGIN\r\n  name := getEmployeeInfos(firstName, phone);\r\n\r\n  DBMS_OUTPUT.PUT_LINE('firstName: ' || firstName);\r\n  DBMS_OUTPUT.PUT_LINE('name: ' || name);\r\n  DBMS_OUTPUT.PUT_LINE('phone: ' || phone);\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE employee(\r\n  firstName VARCHAR2(42),\r\n  name VARCHAR2(42),\r\n  phone VARCHAR2(42)\r\n);\r\n\r\nINSERT INTO employee VALUES ('John', 'Smith', '+1');\r\n\r\nDECLARE\r\n  emp employee%ROWTYPE;\r\n\r\n  FUNCTION getEmployeeInfos RETURN employee%ROWTYPE AS -- Compliant\r\n    emp employee%ROWTYPE;\r\n  BEGIN\r\n    SELECT * INTO emp FROM employee;\r\n    RETURN emp;\r\n  END;\r\nBEGIN\r\n  emp := getEmployeeInfos;\r\n\r\n  DBMS_OUTPUT.PUT_LINE('firstName: ' || emp.firstName);\r\n  DBMS_OUTPUT.PUT_LINE('name: ' || emp.name);\r\n  DBMS_OUTPUT.PUT_LINE('phone: ' || emp.phone);\r\nEND;\r\n/\r\n\r\nDROP TABLE employee;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "suspicious",
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2469",
      "type": "Code Smell",
      "summary": "\"GOTO\" should not be used within loops",
      "description": "<p>The use of <tt>GOTO</tt> in general is arguable. However, when used within loops, <tt>GOTO</tt> statements are even more evil, and they can often be replaced by other constructs.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  i PLS_INTEGER := 0;\r\nBEGIN\r\n  LOOP\r\n    IF i = 3 THEN\r\n      GOTO loopEnd; -- Noncompliant\r\n    END IF;\r\n\r\n    DBMS_OUTPUT.PUT_LINE('i = ' || i);\r\n\r\n    i := i + 1;\r\n  END LOOP;\r\n\r\n  &lt;&lt;loopEnd&gt;&gt;\r\n  DBMS_OUTPUT.PUT_LINE('Loop end');\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  i PLS_INTEGER := 0;\r\nBEGIN\r\n  LOOP\r\n    EXIT WHEN i = 3; -- Compliant\r\n\r\n    DBMS_OUTPUT.PUT_LINE('i = ' || i);\r\n\r\n    i := i + 1;\r\n  END LOOP;\r\n\r\n  DBMS_OUTPUT.PUT_LINE('Loop end');\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-907",
      "type": "Code Smell",
      "summary": "\"GOTO\" statements should not be used",
      "description": "<p>A <tt>GOTO</tt> statement is an unstructured change in the control flow. They should be avoided and replaced by structured constructs.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  i PLS_INTEGER := 42;\r\nBEGIN\r\n  IF i &lt; 0 THEN\r\n    GOTO negative; -- Noncompliant\r\n  END IF;\r\n\r\n  DBMS_OUTPUT.PUT_LINE('positive');\r\n  <span class=\"code-keyword\">goto</span> cleanup; -- Noncompliant\r\n\r\n  &lt;&lt;negative&gt;&gt;\r\n  DBMS_OUTPUT.PUT_LINE('negative!');\r\n\r\n  &lt;&lt;cleanup&gt;&gt;\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  i PLS_INTEGER := 42;\r\nBEGIN\r\n  IF i &lt; 0 THEN\r\n    DBMS_OUTPUT.PUT_LINE('negative!'); -- Compliant\r\n  ELSE\r\n    DBMS_OUTPUT.PUT_LINE('positive');\r\n  END IF;\r\nEND;\r\n/\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.4 - The goto statement shall not be used.</li>\n\t<li>MISRA C:2012, 15.1 - The goto statement should not be used</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "brain-overload",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1145",
      "type": "Bug",
      "summary": "\"IF\" statement conditions should not evaluate unconditionally to \"TRUE\" or to \"FALSE\"",
      "description": "<p><tt>IF</tt> statements with conditions that are always false have the effect of making blocks of code non-functional. This can be useful during debugging, but should not be checked in. <tt>IF</tt> statements with conditions that are always true are completely redundant, and make the code less readable. In either case, unconditional <tt>IF</tt> statements should be removed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF TRUE THEN\r\n  do_something;\r\nEND IF;\r\n\r\nIF FALSE THEN\r\n  do_something_else;\r\nEND IF;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndo_something;\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/489.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-489</a> - Leftover Debug Code</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/570.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-570</a> - Expression is Always False</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/571.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-571</a> - Expression is Always True</li>\n\t<li>MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted.</li>\n\t<li>MISRA C:2012, 14.3 - Controlling expressions shall not be invariant</li>\n</ul>\n",
      "standards": [
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cwe",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3643",
      "type": "Bug",
      "summary": "\"LIKE\" clauses should not be used without wildcards",
      "description": "<p>The use of <tt>LIKE</tt> in a SQL query without one or more wildcards in the sought value is surely a typo. Either <tt>=</tt> was meant instead, or the wildcard has been unintentionally omitted. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT name\r\nFROM product\r\nWHERE name LIKE 'choc'\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT name\r\nFROM product\r\nWHERE name LIKE 'choc%'\r\n</pre>\n</div></div>\n<p>or </p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT name\r\nFROM product\r\nWHERE name = 'choc'\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1739",
      "type": "Code Smell",
      "summary": "\"LIKE\" clauses should not start with wildcard characters",
      "description": "<p>When the value of a <tt>LIKE</tt> clause starts with '%' or '_', indexes on the searched column are ignored, and a full table scan is performed instead. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT FIRST_NAME, LAST_NAME FROM PERSONS\r\nWHERE LAST_NAME LIKE '%PONT'\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2487",
      "type": "Bug",
      "summary": "\"MLSLABEL\" should not be used",
      "description": "<p>The deprecated MLSLABEL datatype is still supported only for backwards compatibility with Trusted Oracle, and since Oracle8, the only valid value it can hold is NULL. Thus, the usage of this type should be progressively removed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo MLSLABEL; -- Noncompliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2521",
      "type": "Code Smell",
      "summary": "\"NATURAL JOIN\" queries should not be used",
      "description": "<p><tt>NATURAL JOIN</tt> is a type of equi-join which implicitly compares all identically-named columns of the two tables. While this a feature which may seem convenient at first, it becomes hard to maintain over time.</p>\n\n<p>Consider an EMPLOYEE table with the columns FULL_NAME, and DEPT_ID, and a DEPARTMENT table with the columns DEPT_ID, and NAME. A natural join between those tables will join on the DEPT_ID column, which is the only identically-named column.</p>\n\n<p>But, if a new NAME column is later added to the EMPLOYEE table, then the join will be done on both DEPT_ID and NAME. Natural joins make simple changes such as adding a column complicated and are therefore better avoided.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT *\r\n  INTO employeeArray\r\n  FROM employee\r\n  NATURAL JOIN departement; -- Non-Compliant, the join predicate is implicit\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT *\r\n  INTO employeeArray\r\n  FROM employee\r\n  JOIN departement\r\n  USING (dept_id);  -- Compliant, explicit join predicate\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "design",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2527",
      "type": "Bug",
      "summary": "\"NULL\" should not be compared directly",
      "description": "<p>In a Zen-like manner, \"NULL\" is never equal to anything, even itself. Therefore comparisons using equality operators will always return <tt>False</tt>, even when the value actually <tt>IS NULL</tt>.</p>\n\n<p>For that reason, comparison operators should never be used to make comparisons with <tt>NULL</tt>; <tt>IS NULL</tt> and <tt>IS NOT NULL</tt> should be used instead. This extends as well to empty string (\"\"), which is equivalent to <tt>NULL</tt> for some database engines.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  name VARCHAR2(42) := ''; /* This is equivalent to name := NULL; */\r\nBEGIN\r\n  IF name = '' THEN /* Noncompliant; equivalent to name = NULL &amp; therefore always FALSE*/\r\n    DBMS_OUTPUT.PUT_LINE('True'); /* Unreachable */\r\n  ELSE\r\n    DBMS_OUTPUT.PUT_LINE('False');\r\n  END IF;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  name VARCHAR2(42) := ''; /* This is equivalent to name := NULL; */\r\nBEGIN\r\n  IF name IS NULL THEN /* Compliant */\r\n    DBMS_OUTPUT.PUT_LINE('True');\r\n  ELSE\r\n    DBMS_OUTPUT.PUT_LINE('False');\r\n  END IF;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2539",
      "type": "Bug",
      "summary": "\"PACKAGE BODY\" initialization sections should not contain \"RETURN\" statements",
      "description": "<p>In a CREATE PACKAGE BODY, the purpose of the initialization section is to set the initial values of the package's global variables. It is therefore surprising to find a RETURN statement there, as all its following statements will be unreachable.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE OR REPLACE PACKAGE foo AS\r\n  FUNCTION getBar RETURN PLS_INTEGER;\r\n  bar PLS_INTEGER;\r\nEND;\r\n/\r\n\r\nCREATE OR REPLACE PACKAGE BODY foo AS\r\n  FUNCTION getBar RETURN PLS_INTEGER AS\r\n  BEGIN\r\n    RETURN bar; -- Compliant\r\n  END;\r\nBEGIN\r\n  bar := 42;\r\n  DBMS_OUTPUT.PUT_LINE('<span class=\"code-keyword\">package</span> loaded');\r\n  RETURN; -- Noncompliant\r\n  DBMS_OUTPUT.PUT_LINE('<span class=\"code-keyword\">this</span> is unreachable code');\r\nEND;\r\n/\r\n\r\nDROP PACKAGE BODY foo;\r\n\r\nDROP PACKAGE foo;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-4062",
      "type": "Bug",
      "summary": "\"ROWNUM\" should not be used at the same query level as \"ORDER BY\"",
      "description": "<p>Oracle's <tt>ROWNUM</tt> is a pseudo column that numbers the rows in a result set. Unfortunately, it numbers the rows in the set <em>before</em> ordering is applied. So combining the two in the same query won't get you the results you expect. Instead, you should move your selection and ordering into a subquery, and use <tt>ROWNUM</tt> only on the outer query.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT fname, lname, deptId\r\nFROM employee\r\nWHERE rownum &lt;= 10\r\nORDER BY salary  -- Noncompliant\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT * \r\nFROM ( SELECT fname, lname, deptId\r\n    FROM employee\r\n    ORDER BY salary\r\n  )\r\nWHERE rownum &lt;= 10\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2453",
      "type": "Bug",
      "summary": "\"VARCHAR2\" and \"NVARCHAR2\" should be used",
      "description": "<p>For fixed-length values, a <tt>CHAR</tt> field occupies the same amount of disk space as a <tt>VARCHAR2</tt> field, but for variable-length values <tt>CHAR</tt> fields use more storage space and make searching more difficult by right-padding values with whitespaces. Therefore <tt>VARCHAR2</tt> fields are preferred. Similarly, <tt>NCHAR</tt> should be replaced by <tt>NVARCHAR2</tt>.</p>\n\n<p>Note that for 1-character fields, <tt>CHAR</tt> is naturally equivalent to <tt>VARCHAR2</tt>, but the latter is still preferred for consistency.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  var1 CHAR; -- Noncompliant\r\n\r\n  var2 CHAR(42); -- Noncompliant\r\n\r\n  var3 NCHAR; -- Noncompliant\r\n\r\n  var4 NCHAR(42); -- Noncompliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">DECLARE\r\n  var1 VARCHAR2(42); \r\n\r\n  var2 VARCHAR2(42);\r\n\r\n  var3 NVARCHAR2(42); \r\n\r\n  var4 NVARCHAR2(42);\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2566",
      "type": "Code Smell",
      "summary": "\"VARCHAR2\" should be used",
      "description": "<p>Currently, <tt>VARCHAR</tt> and <tt>VARCHAR2</tt> are identical data types. But to prevent future changes in behavior, Oracle recommends the use of <tt>VARCHAR2</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  <span class=\"code-keyword\">var</span> VARCHAR(42);  -- Noncompliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  <span class=\"code-keyword\">var</span> VARCHAR2(42);  -- Noncompliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "lock-in"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3633",
      "type": "Bug",
      "summary": "\"WHERE\" clause conditions should not be contradictory",
      "description": "<p>Queries with contradictory <tt>WHERE</tt> clauses will always return empty result sets. This is clearly a bug.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT *\r\nFROM fruit\r\nWHERE type='apple' AND type='orange'  -- Noncompliant\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3923",
      "type": "Bug",
      "summary": "All branches in a conditional structure should not have exactly the same implementation",
      "description": "<p>Having all branches in a <tt>CASE</tt> or <tt>IF</tt>/<tt>ELSIF</tt> chain with the same implementation is an error. Either a copy-paste error was made and something different should be executed, or there shouldn't be a <tt>CASE</tt>/<tt>IF</tt>/<tt>ELSIF</tt> chain at all. Note that this rule does not apply to <tt>IF</tt>/<tt>CASE</tt> chains without <tt>ELSE</tt> clauses.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF param == 1 THEN\r\n  result := 'A';\r\nELSIF param == 2 THEN\r\n  result := 'A';\r\nELSE\r\n  result := 'A';\r\nEND IF;\r\n\r\nresult := CASE param\r\n   WHEN 1 THEN 'A'\r\n   WHEN 2 THEN 'A'\r\n   ELSE 'A'\r\nEND;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF param == 1 THEN\r\n  result := 'A';\r\nELSIF param == 2 THEN\r\n  result := 'B';\r\nELSE\r\n  result := 'C';\r\nEND IF;\r\n\r\nresult := CASE param\r\n   WHEN 1 THEN 'A'\r\n   WHEN 2 THEN 'B'\r\n   ELSE 'C'\r\nEND;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1066",
      "type": "Code Smell",
      "summary": "Collapsible \"if\" statements should be merged",
      "description": "<p>Merging collapsible <tt>if</tt> statements increases the code's readability.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF something THEN\r\n  IF something_else THEN\r\n    -- ...\r\n  END IF;\r\nEND IF;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF something AND something_else THEN\r\n  -- ...\r\nEND IF;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2562",
      "type": "Code Smell",
      "summary": "Column aliases should be defined using \"AS\"",
      "description": "<p>For better readability, column aliases should be used with the <tt>AS</tt> keyword. If it is missing, it could be misread as another column being selected.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  result DUAL.dummy%TYPE;\r\nBEGIN\r\n  SELECT\r\n    dummy d -- Non-Compliant - could be misread as selecting both <span class=\"code-quote\">\"dummy\"</span> and a column <span class=\"code-quote\">\"d\"</span>\r\n  INTO\r\n    result\r\n  FROM\r\n    DUAL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  result DUAL.dummy%TYPE;\r\nBEGIN\r\n  SELECT\r\n    dummy AS d -- Compliant\r\n  INTO\r\n    result\r\n  FROM\r\n    DUAL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1735",
      "type": "Code Smell",
      "summary": "Column names should be used in a SQL \"ORDER BY\" clause",
      "description": "<p>Even though the <tt>ORDER BY</tt> clause supports using column numbers, doing so makes the code difficult to read and maintain. Therefore the use of column names is preferred.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT col2, col3\r\n  BULK COLLECT INTO result\r\n  FROM my_table\r\n  ORDER BY\r\n    1 ASC;           -- Noncompliant - <span class=\"code-keyword\">if</span> col1 is added to the selected fields, <span class=\"code-keyword\">this</span> may <span class=\"code-keyword\">break</span>\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT col2, col3\r\n  BULK COLLECT INTO result\r\n  FROM my_table\r\n  ORDER BY\r\n    col2 ASC;  \r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1499",
      "type": "Code Smell",
      "summary": "Columns to be read with a \"SELECT\" statement should be clearly defined",
      "description": "<p><tt>SELECT *</tt> should be avoided because it releases control of the returned columns and could therefore lead to errors and potentially to performance issues.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  myvar CHAR;\r\nBEGIN\r\n  SELECT * INTO myvar FROM DUAL; -- Noncompliant\r\n END;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  myvar CHAR;\r\nBEGIN\r\n  SELECT dummy INTO myvar FROM DUAL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Wrapper queries using <tt>ROWNUM</tt> are ignored.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT *\r\nFROM ( SELECT fname, lname, deptId\r\n    FROM employee\r\n    ORDERBY salary\r\n  )\r\nWHERE rownum &lt;= 10\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1056",
      "type": "Code Smell",
      "summary": "Compound triggers should define at least two triggers",
      "description": "<p>Compound triggers were introduced to ease the implementation of multiple triggers which need to work in cooperation.</p>\n\n<p>Typically, a <tt>FOR EACH ROW</tt> trigger accumulates facts, and an <tt>AFTER STATEMENT</tt> trigger performs the actual changes.</p>\n\n<p>The compound trigger can hold a state common to all the triggers it defines, thereby removing the need to use package variables. This approach is sometimes the only possible one, as when avoiding a mutating table <tt>ORA-04091</tt> error, or it can be used to get better performance.</p>\n\n<p>However, there is no point in defining a compound trigger which contains only a single trigger, since there is no state to be shared. In such cases, a simple trigger should be used instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE OR REPLACE TRIGGER my_trigger  -- Noncompliant; defines a single trigger\r\nFOR INSERT ON my_table\r\nCOMPOUND TRIGGER\r\n\r\nAFTER EACH ROW IS\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE('New row inserted!');\r\nEND AFTER EACH ROW;\r\n\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE OR REPLACE TRIGGER my_trigger\r\n  AFTER INSERT\r\n  ON my_table\r\n  FOR EACH ROW\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE('New row inserted!');\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2560",
      "type": "Bug",
      "summary": "DML events clauses should not include multiple \"OF\" clauses",
      "description": "<p>The DML events clause of a trigger is not meant to be used with multiple <tt>OF</tt> conditions. When it is, only the last one will actually be taken into account, without any error message being produced. This can lead to counter-intuitive code.</p>\n\n<p>Only the <tt>UPDATE</tt> event should have an <tt>OF</tt> condition, and there should be at most one occurence of it.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE OR REPLACE TRIGGER myTrigger\r\n  BEFORE UPDATE OF firstName OR UPDATE OF lastName -- Noncompliant - will *only* be triggered on updates of lastName!\r\n  ON myTable\r\n  FOR EACH ROW\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE OR REPLACE TRIGGER myTrigger\r\n  BEFORE UPDATE OF firstName, lastName             -- Compliant - triggered on updates of firstName or/and lastName\r\n  ON myTable\r\n  FOR EACH ROW\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1478",
      "type": "Code Smell",
      "summary": "Deprecated LONG and LONG RAW datatypes should no longer be used",
      "description": "<p>The <tt>LONG</tt> and <tt>LONG RAW</tt> datatypes are deprecated and Oracle recommends to migrate them to the LOB datatypes <tt>CLOB</tt>, <tt>NCLOB</tt> or <tt>BLOB</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TABLE images(\r\n  data LONG RAW\r\n);\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TABLE images(\r\n  data BLOB\r\n);\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1542",
      "type": "Code Smell",
      "summary": "Function and procedure names should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE FUNCTION my_function_ RETURN PLS_INTEGER AS -- Noncompliant\r\nBEGIN\r\n  RETURN 42;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE FUNCTION my_function RETURN PLS_INTEGER AS\r\nBEGIN\r\n  RETURN 42;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-107",
      "type": "Code Smell",
      "summary": "Functions and procedures should not have too many parameters",
      "description": "<p>Having functions and procedures which take too many parameters decreases the code's readability and usability. It is likely that such a function/procedure is not modular enough, and should be split into several smaller ones.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default threshold of 10:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE FUNCTION sumWithTooManyParameters( -- Noncompliant, too many parameters\r\n  a1 PLS_INTEGER,\r\n  a2 PLS_INTEGER,\r\n  a3 PLS_INTEGER,\r\n  a4 PLS_INTEGER,\r\n  a5 PLS_INTEGER,\r\n  a6 PLS_INTEGER,\r\n  a7 PLS_INTEGER,\r\n  a8 PLS_INTEGER,\r\n  a9 PLS_INTEGER,\r\n  a10 PLS_INTEGER,\r\n  a11 PLS_INTEGER\r\n  )\r\n  RETURN PLS_INTEGER AS\r\nBEGIN\r\n  RETURN a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11;\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE('Sum is ' || sumWithTooManyParameters(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11));\r\nEND;\r\n/\r\n\r\nDROP FUNCTION sumWithTooManyParameters;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE FUNCTION sumCorrected(n PLS_INTEGER) RETURN PLS_INTEGER AS -- Compliant\r\nBEGIN\r\n  RETURN (1 + n)*(n / 2);\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE('Sum is ' || sumCorrected(11));\r\nEND;\r\n/\r\n\r\nDROP FUNCTION sumCorrected;\r\n</pre>\n</div></div>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\"></pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1764",
      "type": "Bug",
      "summary": "Identical expressions should not be used on both sides of a binary operator",
      "description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified.</p>\n\n<p>This rule ignores operators <tt>+</tt>, <tt>*</tt> and <tt>||</tt>, and expressions: <tt>1=1</tt>, <tt>1&lt;&gt;1</tt>, <tt>1!=1</tt>, <tt>1~=1</tt> and <tt>1^=1</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT code\r\n  FROM Person\r\n  WHERE first_name IS NULL OR first_name IS NULL; -- Noncompliant\r\n\r\nSELECT * FROM Users\r\n  INNER JOIN Clients ON Clients.id = Clients.id; -- Noncompliant\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT code\r\n  FROM Person\r\n  WHERE first_name IS NULL OR last_name IS NULL;\r\n\r\nSELECT * FROM Users\r\n  INNER JOIN Clients ON Clients.id = Users.id;\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n\t<li>S1656 - Implements a check on <tt>=</tt>.</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2482",
      "type": "Code Smell",
      "summary": "In labeled loops \"EXIT\" should exit the label",
      "description": "<p>Labeled loops are useful, especially when the code is badly indented, to match the begin and end of each loop. Within a labeled loop, the code's maintainability is increased by explicitly providing the loop's label in every <tt>EXIT</tt> statement. Indeed, if a nested loop is added afterwards, it is clear which loop has to be exited.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  &lt;&lt;myLoopLabel1&gt;&gt;\r\n  LOOP\r\n    EXIT; -- Noncompliant, the loop label is missing\r\n  END LOOP myLoopLabel1;\r\n\r\n  LOOP\r\n    EXIT; -- Compliant, <span class=\"code-keyword\">this</span> EXIT is not in a labeled loop\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n &lt;&lt;myLoopLabel1&gt;&gt;\r\n  LOOP\r\n    EXIT myLoopLabel1;\r\n  END LOOP myLoopLabel1;\r\n\r\n  LOOP\r\n    EXIT;\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1763",
      "type": "Bug",
      "summary": "Jump statements should not be followed by other statements",
      "description": "<p>Jump statements (<tt>EXIT</tt>, <tt>CONTINUE</tt>, <tt>RETURN</tt>, <tt>RAISE</tt>, and <tt>RAISE_APPLICATION_ERROR</tt>), move control flow out of the current code block. Typically, any statements in a block that come after a jump are simply wasted keystrokes lying in wait to confuse the unwary. </p>\n\n<p>This rule detects for statements that follow:</p>\n<ul>\n\t<li><tt>EXIT</tt> without a <tt>WHEN</tt></li>\n\t<li><tt>CONTINUE</tt> without a <tt>WHEN</tt></li>\n\t<li><tt>RETURN</tt></li>\n\t<li><tt>RAISE</tt></li>\n\t<li><tt>RAISE_APPLICATION_ERROR</tt></li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nBEGIN\r\n  LOOP\r\n    DBMS_OUTPUT.PUT_LINE('This will be printed out');\r\n    EXIT;\r\n\r\n    DBMS_OUTPUT.PUT_LINE('This will NEVER be printed out'); -- Non-Compliant\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nBEGIN\r\n  LOOP\r\n    DBMS_OUTPUT.PUT_LINE('This will be printed out');\r\n    EXIT;\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.1 - There shall be no unreachable code</li>\n\t<li>MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code</li>\n\t<li>MISRA C++:2008, 0-1-9 - There shall be no dead code</li>\n\t<li>MISRA C:2012, 2.1 - A project shall not contain unreachable code</li>\n\t<li>MISRA C:2012, 2.2 - There shall be no dead code</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/561.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-561</a> - Dead Code</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\" class=\"external-link\" rel=\"nofollow\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC07-CPP.</a> - Detect and remove dead code</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1751",
      "type": "Code Smell",
      "summary": "Jump statements should not be used unconditionally",
      "description": "<p>Having an unconditional <tt>EXIT</tt>, <tt>RAISE</tt> or <tt>GOTO</tt> in a loop renders it useless; the loop will only execute once and the loop structure itself is simply wasted keystrokes.</p>\n\n<p>Having an unconditional <tt>CONTINUE</tt> in a loop can render the loop meaningless, or is itself wasted keystrokes, depending on where in the loop it occurs.</p>\n\n<p>Having an unconditional <tt>RETURN</tt> anywhere other than at the end of a function or method simply renders all the rest of the code in the method useless.</p>\n\n<p>For these reasons, unconditional jump statements should never be used except for the final <tt>RETURN</tt> in a function or method.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n  LOOP\r\n    foo := foo + 1;\r\n    EXIT; -- Noncompliant\r\n  END LOOP;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n  LOOP\r\n    foo := foo + 1;\r\n    IF foo &gt; 10 THEN\r\n      EXIT;\r\n    END IF;\r\n  END LOOP;\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.1 - There shall be no unreachable code.</li>\n\t<li>MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>.</li>\n\t<li>MISRA C++:2008, 0-1-9 - There shall be no dead code.</li>\n\t<li>MISRA C:2012, 2.2 - There shall be no dead code</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2472",
      "type": "Code Smell",
      "summary": "Large item lists should not be used with \"IN\" clauses",
      "description": "<p>Oracle supports at most 1000 items in a SQL query's <tt>IN</tt> clause. When more items are given, the exception <tt>ORA-01795 maximum number of expressions in a list is 1000</tt> is raised. Thus, <tt>IN</tt> clauses are not as scalable as joins.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT *\r\n  INTO result\r\n  FROM my_table\r\n  WHERE col1 IN (1, 2, 3, ..., 1001);       -- Noncompliant - raises ORA-01795\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT my_table.*\r\n  INTO result\r\n  FROM my_table\r\n  JOIN new_in_table\r\n  WHERE my_table.col1 = new_in_table.value; -- Compliant\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2565",
      "type": "Code Smell",
      "summary": "Native SQL joins should be used",
      "description": "<p>SQL is an extremely powerful and hard to master language. It may be tempting to emulate SQL joins in PL/SQL using nested cursor loops, but those are not optimized by Oracle at all. In fact, they lead to numerous context switches between the SQL and PL/SQL engines, and those switches have a highly negative impact on performance. It is therefore much better to replace nested PL/SQL cursor loops with native SQL joins.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE countriesTable(\r\n  countryName VARCHAR2(42)\r\n);\r\n\r\nCREATE TABLE citiesTable(\r\n  cityName VARCHAR2(42)\r\n);\r\n\r\nINSERT INTO countriesTable VALUES('India');\r\nINSERT INTO countriesTable VALUES('Switzerland');\r\nINSERT INTO countriesTable VALUES('United States');\r\n\r\nINSERT INTO citiesTable VALUES('Berne');\r\nINSERT INTO citiesTable VALUES('Delhi');\r\nINSERT INTO citiesTable VALUES('Bangalore');\r\nINSERT INTO citiesTable VALUES('New York');\r\n\r\nBEGIN\r\n  FOR countryRecord IN (SELECT countryName FROM countriesTable) LOOP\r\n    FOR cityRecord IN (SELECT cityName FROM citiesTable) LOOP -- Non-Compliant\r\n      DBMS_OUTPUT.PUT_LINE('Country: ' || countryRecord.countryName || ', City: ' || cityRecord.cityName);\r\n    END LOOP;\r\n  END LOOP;\r\nEND;\r\n/\r\n\r\nDROP TABLE citiesTable;\r\n\r\nDROP TABLE countriesTable;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE countriesTable(\r\n  countryName VARCHAR2(42)\r\n);\r\n\r\nCREATE TABLE citiesTable(\r\n  cityName VARCHAR2(42)\r\n);\r\n\r\nINSERT INTO countriesTable VALUES('India');\r\nINSERT INTO countriesTable VALUES('Switzerland');\r\nINSERT INTO countriesTable VALUES('United States');\r\n\r\nINSERT INTO citiesTable VALUES('Berne');\r\nINSERT INTO citiesTable VALUES('Delhi');\r\nINSERT INTO citiesTable VALUES('Bangalore');\r\nINSERT INTO citiesTable VALUES('New York');\r\n\r\nBEGIN\r\n  FOR myRecord IN (SELECT * FROM countriesTable CROSS JOIN citiesTable) LOOP -- Compliant\r\n    DBMS_OUTPUT.PUT_LINE('Country: ' || myRecord.countryName || ', City: ' || myRecord.cityName);\r\n  END LOOP;\r\nEND;\r\n/\r\n\r\nDROP TABLE citiesTable;\r\n\r\nDROP TABLE countriesTable;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2479",
      "type": "Code Smell",
      "summary": "Newline and control characters should not be used in string literals",
      "description": "<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren't visible to maintainers, so whether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the tabulation character.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nBEGIN\r\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\r\nworld!');\r\n\r\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, <span class=\"code-keyword\">this</span> is preferred\r\n  DBMS_OUTPUT.PUT_LINE('world!');\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1638",
      "type": "Code Smell",
      "summary": "Procedures and functions should be documented",
      "description": "<p>Each function and procedure should be documented with a comment either just before or right after the <tt>IS</tt> or <tt>AS</tt> keyword it to explain its goal and how it works. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE FUNCTION my_function RETURN PLS_INTEGER AS\r\nBEGIN\r\n  RETURN 42;\r\nEND;\r\n/\r\n\r\nCREATE PACKAGE my_package AS\r\n\r\nPROCEDURE my_procedure;\r\n\r\nFUNCTION my_function RETURN PLS_INTEGER;\r\n\r\nEND my_package;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE FUNCTION my_function RETURN PLS_INTEGER AS\r\n-- Computes the meaning of life\r\nBEGIN\r\n  RETURN 42;\r\nEND;\r\n/\r\n\r\nCREATE PACKAGE my_package AS\r\n\r\n-- This is documentation\r\nPROCEDURE my_procedure;\r\n\r\n/*\r\n  This is documentation\r\n*/\r\nFUNCTION my_function RETURN PLS_INTEGER;\r\n\r\nEND my_package;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Functions are procedures declared in package bodies, and anonymous PL/SQL blocks do not have to be documented.</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  PROCEDURE helper_procedure AS\r\n  BEGIN\r\n    NULL;\r\n  END;\r\nBEGIN\r\n  helper_procedure;\r\nEND;\r\n/\r\n\r\nCREATE PACKAGE my_package AS\r\n\r\n-- This is documentation\r\nPROCEDURE public_procedure;\r\n\r\nEND my_package;\r\n/\r\n\r\nCREATE PACKAGE BODY my_package AS\r\n\r\nPROCEDURE helper_procedure AS\r\nBEGIN\r\n  NULL;\r\nEND;\r\n\r\nPROCEDURE public_procedure AS\r\nBEGIN\r\n  helper_procedure;\r\nEND;\r\n\r\nEND my_package;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2547",
      "type": "Code Smell",
      "summary": "Procedures and functions should be encapsulated in packages",
      "description": "<p>Having a bunch of standalone functions or procedures reduces maintainability because it becomes harder to find them and to see how they are related. Instead, they should be logically grouped into meaningful packages.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE PROCEDURE show_name(name VARCHAR2) AS -- Non-Compliant\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE('Name: ' || name);\r\nEND;\r\n/\r\n\r\nDROP PROCEDURE show_name;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE PACKAGE employee AS\r\n  PROCEDURE show_name;\r\nEND;\r\n/\r\n\r\nCREATE PACKAGE BODY employee AS\r\n  name VARCHAR2(42);\r\n\r\n  PROCEDURE show_name AS  -- Compliant\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE('Name: ' || name);\r\n  END;\r\nEND;\r\n/\r\n\r\nDROP PACKAGE employee;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2536",
      "type": "Code Smell",
      "summary": "Procedures should have parameters",
      "description": "<p>Procedures which don't accept parameters are likely to either not be reused that often or to depend on global variables instead. Refactoring those procedures to take parameters will make them both more flexible and reusable.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  name VARCHAR2(42) := 'John';\r\n\r\n  PROCEDURE print_name; -- Noncompliant\r\n\r\n  PROCEDURE print_name AS -- Noncompliant\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE('Name: ' || name);\r\n  END;\r\n\r\nBEGIN\r\n  print_name;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  PROCEDURE print_name(name VARCHAR2) AS -- Compliant\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE('Name: ' || name);\r\n  END;\r\nBEGIN\r\n  print_name('John');\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "design"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1110",
      "type": "Code Smell",
      "summary": "Redundant pairs of parentheses should be removed",
      "description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But redundant pairs of parentheses could be misleading, and should be removed. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nx := (y / 2 + 1); -- Compliant even <span class=\"code-keyword\">if</span> the parentheses are ignored\r\nIF (x &gt; 0) AND ((x+y &gt; 0)) THEN -- Noncompliant\r\n  -- ...\r\nEND IF;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nx := (y / 2 + 1);\r\nIF (x &gt; 0) AND (x+y &gt; 0) THEN\r\n  -- ...\r\nEND IF;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1862",
      "type": "Bug",
      "summary": "Related \"IF/ELSIF\" statements and \"WHEN\" clauses in a \"CASE\" should not have the same condition",
      "description": "<p>A <tt>CASE</tt> and a chain of <tt>IF</tt>/<tt>ELSIF</tt> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <tt>true</tt>. </p>\n\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF param == 1 THEN\r\n  x := 'A';\r\nELSIF param == 2 THEN\r\n  x := 'B';\r\nELSIF param == 1 THEN -- Noncompliant, <span class=\"code-keyword\">for</span> sure <span class=\"code-keyword\">this</span> is a bug\r\n  x := 'C';\r\nEND IF;\r\n\r\nresult := CASE param\r\n   WHEN 1 THEN 'A'\r\n   WHEN 2 THEN 'B'\r\n   WHEN 1 THEN 'C'  -- Noncompliant\r\n   ELSE 'D'\r\nEND;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF param == 1 THEN\r\n  result := 'A';\r\nELSIF param == 2 THEN\r\n  result := 'B';\r\nELSIF param == 3 THEN\r\n  result := 'C';\r\nEND IF;\r\n\r\nresult := CASE param\r\n   WHEN 1 THEN 'A'\r\n   WHEN 2 THEN 'B'\r\n   WHEN 3 THEN 'C'\r\n   ELSE 'D'\r\nEND;\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "pitfall",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1138",
      "type": "Code Smell",
      "summary": "SQL EXISTS subqueries should not be used ",
      "description": "<p>SQL queries that use <tt>EXISTS</tt> subqueries are inefficient because the subquery is re-run for every row in the outer query's table. There are more efficient ways to write most queries, ways that do not use the <tt>EXISTS</tt> condition.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT e.name\r\nFROM employee e\r\nWHERE EXISTS (SELECT * FROM department d WHERE e.department_id = d.id AND d.name = 'Marketing');\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT e.name\r\nFROM employee e INNER JOIN department d\r\n  ON e.department_id = d.id AND d.name = 'Marketing';\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1631",
      "type": "Code Smell",
      "summary": "SQL statements should not join too many tables",
      "description": "<p>When you need access to data from multiple tables, it is more efficient, effective, and understandable to use pre-built views than to select the data from a large number of tables - effectively creating in-memory views - at runtime.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<p>With a maximum number of 3 joined tables:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME\r\nFROM PERSONS \r\n  INNER JOIN COUNTRIES ON COUNTRIES.ID = PERSON.COUNTRY_ID\r\n  INNER JOIN GENRES ON GENRES.ID = PERSONS.GENRE_ID\r\n  INNER JOIN PROFESSIONS ON PROFESSIONS.ID = PERSONS.PROFESSIONS_ID  -- Noncompliant; <span class=\"code-keyword\">this</span> is table #4\r\nWHERE COUNTRIES.CODE = 'US'\r\n\r\nSELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME\r\nFROM PERSONS, COUNTRIES, GENRES, PROFESSIONS -- Noncompliant\r\nWHERE COUNTRIES.CODE = 'US' AND COUNTRIES.ID = PERSON.COUNTRY_ID AND GENRES.ID = PERSONS.GENRE_ID AND PROFESSIONS.ID = PERSONS.PROFESSIONS_ID\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload",
        "performance",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-125",
      "type": "Code Smell",
      "summary": "Sections of code should not be \"commented out\"",
      "description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.<br/>\nUnused code should be deleted and can be retrieved from source control history if required.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 2.4 - Sections of code should not be \"commented out\".</li>\n\t<li>MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments.</li>\n\t<li>MISRA C+<ins>:2008, 2-7-3 - Sections of code should not be \"commented out\" using C</ins>+ comments.</li>\n\t<li>MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\"</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1070",
      "type": "Bug",
      "summary": "The \"result_cache\" hint should be avoided ",
      "description": "<p>The &lt;code&gt;result_cache&lt;/code&gt; Oracle hint can vastly improve performance, but it comes at the cost of extra memory consumption, so one should double-check that the gain in performance is significant, and avoid overusing this feature in general.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT /*+ result_cache */ * FROM DUAL;  -- Noncompliant\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1871",
      "type": "Code Smell",
      "summary": "Two branches in a conditional structure should not have exactly the same implementation",
      "description": "<p>Having two branches in an <tt>IF</tt>/<tt>ELSIF</tt> chain with the same implementation is at best duplicate code, and at worst a coding error.<br/>\nIf the same logic is truly needed for both instances, then in an <tt>IF</tt> chain they should be combined.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF sort_order = 1 THEN\r\n    SELECT LastName, FirstName\r\n      FROM Employees\r\n      ORDER BY LastName\r\nELSIF sort_order = 2 THEN\r\n    SELECT LastName, FirstName\r\n      FROM Employees\r\n      ORDER BY LastName -- Noncompliant\r\nELSE\r\n    SELECT LastName, FirstName\r\n      FROM Employees\r\nEND IF;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF sort_order = 1 OR sort_order = 2 THEN\r\n    SELECT LastName, FirstName\r\n      FROM Employees\r\n      ORDER BY LastName\r\nELSE\r\n    SELECT LastName, FirstName\r\n      FROM Employees\r\nEND IF;\r\n\r\n-- ----\r\n--  OR\r\n-- ----\r\n\r\nIF sort_order = 1 THEN\r\n    SELECT LastName, FirstName\r\n      FROM Employees\r\n      ORDER BY LastName\r\nELSIF sort_order = 2 THEN\r\n    SELECT LastName, FirstName\r\n      FROM Employees\r\n      ORDER BY FirstName\r\nELSE\r\n    SELECT LastName, FirstName\r\n      FROM Employees\r\nEND IF;\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Branches in an <tt>IF</tt>/<tt>ELSIF</tt> chain with implementation that contains a single line of code are ignored.</p>",
      "standards": [],
      "tags": [
        "design",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1065",
      "type": "Code Smell",
      "summary": "Unused labels should be removed",
      "description": "<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.<br/>\nThis will improve maintainability as developers will not wonder what this label is used for.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n&lt;&lt;foo&gt;&gt; -- Noncompliant\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE('Hello, world!');\r\nEND;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n-- Compliant\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE('Hello, world!');\r\nEND;\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2012, 2.6 - A function should not contain unused label declarations</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1656",
      "type": "Bug",
      "summary": "Variables and columns should not be self-assigned",
      "description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nUPDATE person\r\nSET name = name;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nUPDATE person\r\nSET name = UPPER(name);\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2568",
      "type": "Code Smell",
      "summary": "Variables should be nullable",
      "description": "<p>Declaring a variable with the NOT NULL constraint incurs a small performance cost - while this constraint may not really be required. Using such a constraint should be avoided.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  counter PLS_INTEGER NOT NULL := 0; -- Noncompliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  counter PLS_INTEGER := 0; -- Compliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1059",
      "type": "Code Smell",
      "summary": "\"DBMS_UTILITY.FORMAT_ERROR_STACK\" and \"FORMAT_ERROR_BACKTRACE\" should be used together",
      "description": "<p>Since Oracle 10g, <tt>DBMS_UTILITY.FORMAT_ERROR_BACKTRACE</tt> is available to get an exception's stack trace, i.e. files and lines that lead up to the exception. When combined with <tt>DBMS_UTILITY.FORMAT_ERROR_STACK</tt>, which contains the exception error code and message, developers are able quickly identify defects.</p>\n\n<p>This rule verifies that whenever either is used in an exception handler, the other is used as well.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  RAISE_APPLICATION_ERROR(-20000, 'This is an error example');\r\nEXCEPTION\r\n  WHEN OTHERS THEN  -- Noncompliant; only FORMAT_ERROR_STACK is used\r\n    DBMS_OUTPUT.PUT(DBMS_UTILITY.FORMAT_ERROR_STACK);           -- <span class=\"code-quote\">\"ORA-20000: This is an error example\"</span>\r\n    DBMS_OUTPUT.PUT_LINE('');\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  RAISE_APPLICATION_ERROR(-20000, 'This is an error example');\r\nEXCEPTION\r\n  WHEN OTHERS THEN\r\n    DBMS_OUTPUT.PUT(DBMS_UTILITY.FORMAT_ERROR_STACK);           -- <span class=\"code-quote\">\"ORA-20000: This is an error example\"</span>\r\n    DBMS_OUTPUT.PUT(DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);       -- <span class=\"code-quote\">\"ORA-06512: at line 2\"</span>\r\n    DBMS_OUTPUT.PUT_LINE('');\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "error-reporting"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-909",
      "type": "Code Smell",
      "summary": "\"EXIT\" should not be used in loops",
      "description": "<p>FOR and WHILE loops are structured control flow statements.<br/>\nA FOR loop will iterate once for each element in the range, and the WHILE iterates for as long as a condition holds.<br/>\nHowever, inserting an <tt>EXIT</tt> statement within the loop breaks this structure, reducing the code's readability and making it harder to debug.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  TYPE myCollectionType IS VARRAY(10) OF VARCHAR2(42);\r\n  myCollection myCollectionType := myCollectionType('Foo', 'Bar', NULL, 'Baz', 'Qux');\r\n\r\n  i PLS_INTEGER;\r\nBEGIN\r\n  i := 1;\r\n  WHILE i &lt;= myCollection.LAST LOOP\r\n    EXIT WHEN myCollection(i) IS NULL; -- Noncompliant, breaks the structure of the WHILE\r\n\r\n    DBMS_OUTPUT.PUT_LINE('Got: ' || myCollection(i));\r\n    i := i + 1;\r\n  END LOOP;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  TYPE myCollectionType IS VARRAY(10) OF VARCHAR2(42);\r\n  myCollection myCollectionType := myCollectionType('Foo', 'Bar', NULL, 'Baz', 'Qux');\r\n\r\n  i PLS_INTEGER;\r\nBEGIN\r\n  i := 1;\r\n  WHILE i &lt;= myCollection.LAST AND myCollection(i) IS NOT NULL LOOP\r\n    DBMS_OUTPUT.PUT_LINE('Got: ' || myCollection(i));\r\n    i := i + 1;\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.5 - The continue statement shall not be used.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "bad-practice",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2525",
      "type": "Code Smell",
      "summary": "\"cursor%NOTFOUND\" should be used instead of \"NOT cursor%FOUND\"",
      "description": "<p><tt>cursor%NOTFOUND</tt> is clearer and more readable than <tt>NOT cursor%FOUND</tt>, and is preferred.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  CURSOR c IS SELECT DUMMY FROM DUAL;\r\n  x VARCHAR2(1);\r\nBEGIN\r\n  OPEN c;\r\n  FETCH c INTO x;\r\n  IF NOT c%FOUND THEN  -- Noncompliant\r\n    DBMS_OUTPUT.PUT_LINE('uh?');\r\n  ELSE\r\n    DBMS_OUTPUT.PUT_LINE('all good: ' || x);\r\n  END IF;\r\n  CLOSE c;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  CURSOR c IS SELECT DUMMY FROM DUAL;\r\n  x VARCHAR2(1);\r\nBEGIN\r\n  OPEN c;\r\n  FETCH c INTO x;\r\n  IF c%NOTFOUND THEN \r\n    DBMS_OUTPUT.PUT_LINE('uh?');\r\n  ELSE\r\n    DBMS_OUTPUT.PUT_LINE('all good: ' || x);\r\n  END IF;\r\n  CLOSE c;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2530",
      "type": "Code Smell",
      "summary": "An \"ORDER BY\" direction should be specified explicitly",
      "description": "<p><tt>ASC</tt> or <tt>DESC</tt> should be specified for every column of an <tt>ORDER BY</tt> clause to improve readability.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT col1, col2, col3\r\n  BULK COLLECT INTO result\r\n  FROM my_table\r\n  ORDER BY\r\n    col1 ASC,\r\n    col2,            -- Noncompliant - ASC or DESC should be specified\r\n    col3 DESC;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT col1, col2, col3\r\n  BULK COLLECT INTO result\r\n  FROM my_table\r\n  ORDER BY\r\n    col1 ASC,\r\n    col2 ASC,\r\n    col3 DESC;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1125",
      "type": "Code Smell",
      "summary": "Boolean literals should not be redundant",
      "description": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  foo BOOLEAN := TRUE;\r\nBEGIN\r\n  IF foo = FALSE THEN                     -- Noncompliant\r\n    DBMS_OUTPUT.PUT_LINE('foo = <span class=\"code-keyword\">false</span>!');\r\n  ELSIF foo = TRUE THEN                   -- Noncompliant\r\n    DBMS_OUTPUT.PUT_LINE('foo = <span class=\"code-keyword\">true</span>!');\r\n  END IF;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  foo BOOLEAN := TRUE;\r\nBEGIN\r\n  IF NOT foo THEN                         -- Compliant\r\n    DBMS_OUTPUT.PUT_LINE('foo = <span class=\"code-keyword\">false</span>!');\r\n  ELSIF foo THEN                          -- Compliant\r\n    DBMS_OUTPUT.PUT_LINE('foo = <span class=\"code-keyword\">true</span>!');\r\n  END IF;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1103",
      "type": "Code Smell",
      "summary": "Comments should not be nested",
      "description": "<p>PL/SQL does not support nested C-style (<tt>/* ... */</tt>) comments.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n/*\r\n  This is a comment block, <span class=\"code-keyword\">for</span> which the ending tag was omitted\r\n  It may be difficult to figure out that the following line of code is actually commented\r\n\r\n\r\nvariable = function_call();\r\n/* variable contains the result, <span class=\"code-keyword\">this</span> is not allowed, as it is an attempt to create an <span class=\"code-keyword\">inner</span> comment */\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 2.3 - The character sequence /* shall not be used within a comment.</li>\n\t<li>MISRA C++:2008, 2-7-1 - The character sequence /* shall not be used within a C-style comment.</li>\n\t<li>MISRA C:2012, 3.1 - The character sequences /* and // shall not be used within a comment</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "confusing",
        "misra",
        "bug"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2491",
      "type": "Code Smell",
      "summary": "Cursor parameters should follow a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that cursor parameters match the provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression <tt><span class=\"error\">&#91;a-zA-Z&#93;</span>(<span class=\"error\">&#91;a-zA-Z0-9_&#93;</span>*<span class=\"error\">&#91;a-zA-Z0-9&#93;</span>)?</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TABLE employee(\r\n  name VARCHAR2(42)\r\n);\r\n\r\nDECLARE\r\n  CURSOR mycursor2(Employee-name-parameter_ VARCHAR2) RETURN employee%ROWTYPE; -- Noncompliant\r\n\r\n  CURSOR mycursor2(Employee-name-parameter_ VARCHAR2) RETURN employee%ROWTYPE IS SELECT * FROM employee WHERE name = Employee-name-parameter_; -- Noncompliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n\r\nDROP TABLE employee;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TABLE employee(\r\n  name VARCHAR2(42)\r\n);\r\n\r\nDECLARE\r\n  CURSOR mycursor2(employeeNameParameter VARCHAR2) RETURN employee%ROWTYPE;\r\n\r\n  CURSOR mycursor2(employeeNameParameter VARCHAR2) RETURN employee%ROWTYPE IS SELECT * FROM employee WHERE name = employeeNameParameter;\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n\r\nDROP TABLE employee;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2517",
      "type": "Code Smell",
      "summary": "Cursors should follow a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all cursor names match the provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression, <tt><span class=\"error\">&#91;a-zA-Z&#93;</span>(<span class=\"error\">&#91;a-zA-Z0-9_&#93;</span>*<span class=\"error\">&#91;a-zA-Z0-9&#93;</span>)?</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TABLE employee(\r\n  name VARCHAR2(42)\r\n);\r\n\r\nDECLARE\r\n  CURSOR myCursor_ RETURN employee%ROWTYPE; -- Noncompliant\r\n\r\n  CURSOR myCursor_ RETURN employee%ROWTYPE IS SELECT * FROM employee; -- Noncompliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n\r\nDROP TABLE employee;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TABLE employee(\r\n  name VARCHAR2(42)\r\n);\r\n\r\nDECLARE\r\n  CURSOR myCursor RETURN employee%ROWTYPE;\r\n\r\n  CURSOR myCursor RETURN employee%ROWTYPE IS SELECT * FROM employee;\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n\r\nDROP TABLE employee;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2490",
      "type": "Code Smell",
      "summary": "Exceptions should follow a naming convention",
      "description": "<p>Naming conventions allow teams to collaborate effectively. This rule checks that exception names match a given regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression <tt><span class=\"error\">&#91;a-zA-Z&#93;</span>(<span class=\"error\">&#91;a-zA-Z0-9_&#93;</span>*<span class=\"error\">&#91;a-zA-Z0-9&#93;</span>)?</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  my-Exception_ EXCEPTION; -- Noncompliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  myException EXCEPTION;\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2486",
      "type": "Code Smell",
      "summary": "Exceptions should not be ignored",
      "description": "<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  d VARCHAR2(1);\r\nBEGIN\r\n  SELECT dummy INTO d FROM DUAL WHERE dummy = 'Y'; -- Will raise NO_DATA_FOUND\r\n  DBMS_OUTPUT.PUT_LINE('d = ' || d);\r\nEXCEPTION\r\n  WHEN NO_DATA_FOUND THEN -- Noncompliant, did we really want to mask <span class=\"code-keyword\">this</span> exception?\r\n    NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  d VARCHAR2(1);\r\nBEGIN\r\n  SELECT dummy INTO d FROM DUAL WHERE dummy = 'Y'; -- Will raise NO_DATA_FOUND\r\n  DBMS_OUTPUT.PUT_LINE('d = ' || d);\r\nEXCEPTION\r\n  WHEN NO_DATA_FOUND THEN\r\n    DBMS_OUTPUT.PUT_LINE('Error: No data found');\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/391.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-391</a> - Unchecked Error Condition</li>\n</ul>\n",
      "standards": [
        "CWE"
      ],
      "tags": [
        "cwe",
        "error-handling",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2520",
      "type": "Code Smell",
      "summary": "Object attributes should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that object attribute names match the provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression <tt><span class=\"error\">&#91;a-zA-Z&#93;</span>(_?<ins><span class=\"error\">&#91;a-zA-Z0-9&#93;</span>)*</ins></tt> :</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TYPE my_type AS OBJECT(\r\n  foo__bar INTEGER             -- Non-Compliant\r\n);\r\n/\r\n\r\nDROP TYPE my_type;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TYPE my_type AS OBJECT(\r\n  foo_bar INTEGER              -- Compliant\r\n);\r\n/\r\n\r\nDROP TYPE my_type;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2529",
      "type": "Code Smell",
      "summary": "Oracle's join operator (+) should not be used",
      "description": "<p>Developers should use the <tt>FROM ... OUTER JOIN</tt> syntax rather than the Oracle join operator ({<ins>}). The reason is that outer join queries that use {</ins>} are subject to several restrictions which do not apply to the <tt>FROM ... OUTER JOIN</tt> syntax. For instance, a <tt>WHERE</tt> condition containing the <tt>+</tt> operator cannot be combined with another condition using the <tt>OR</tt> logical operator.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  -- Noncompliant\r\n  SELECT *\r\n    INTO employeesArray\r\n    FROM employee, department\r\n    WHERE employee.DepartmentID = department.ID(+);\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  -- Compliant\r\n  SELECT *\r\n    INTO employeesArray\r\n    FROM employee LEFT OUTER JOIN department\r\n    ON employee.DepartmentID = department.ID;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "lock-in",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-120",
      "type": "Code Smell",
      "summary": "Package names should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1005",
      "type": "Code Smell",
      "summary": "Procedures should not contain \"RETURN\" statements",
      "description": "<p>Procedures, unlike functions, do not return values. The <tt>RETURN</tt> statement therefore, when used within a procedure, is used to prematurely end the procedure. However, having multiple exit points (i.e. more than the <tt>END</tt> of the procedure itself), increases the complexity of the procedure and makes it harder to understand and debug.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  PROCEDURE prcoedureWithReturn AS\r\n  BEGIN\r\n    RETURN; -- Noncompliant\r\n\r\n    DBMS_OUTPUT.PUT_LINE('prcoedureWithReturn called'); -- This is actually unreachable\r\n  END;\r\nBEGIN\r\n  prcoedureWithReturn;\r\nEND;\r\n/\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.7 - A function shall have a single point of exit at the end of the function.</li>\n\t<li>MISRA C++:2008, 6-6-5 - A function shall have a single point of exit at the end of the function</li>\n\t<li>MISRA C:2012, 15.5 - A function should have a single point of exit at the end</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "brain-overload",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2519",
      "type": "Code Smell",
      "summary": "Record fields should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all record field names match the provided regular rexpression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression <tt><span class=\"error\">&#91;a-zA-Z&#93;</span>(_?<ins><span class=\"error\">&#91;a-zA-Z0-9&#93;</span>)*</ins></tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  TYPE my_type IS RECORD(\r\n    foo__bar PLS_INTEGER   -- Non-Compliant\r\n  );\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  TYPE my_type IS RECORD(\r\n    foo_bar PLS_INTEGER    -- Compliant\r\n  );\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1126",
      "type": "Code Smell",
      "summary": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
      "description": "<p>Return of boolean literal statements wrapped into <tt>if-then-else</tt> ones should be simplified.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF expression THEN\r\n  RETURN TRUE;\r\nELSE\r\n  RETURN FALSE;\r\nEND IF;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nRETURN expression;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2544",
      "type": "Code Smell",
      "summary": "Single line comments should start with \"--\"",
      "description": "<p>The multi-line comment syntax <tt>/* ... */</tt> should not be used for single line comments; the <tt>--</tt> syntax is more appropriate.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n/*\r\n These comment lines are Compliant\r\n comment 1\r\n comment 2\r\n*/\r\n\r\n/*\r\n This comment is also Compliant\r\n */\r\n\r\n/* This comment is Noncompliant */\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n/*\r\n These comment lines are Compliant\r\n comment 1\r\n comment 2\r\n*/\r\n\r\n/*\r\n This comment is also Compliant\r\n */\r\n\r\n-- This comment is compliant \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2492",
      "type": "Code Smell",
      "summary": "Types should follow a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that type names match the provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression <tt><span class=\"error\">&#91;a-zA-Z&#93;</span>(<span class=\"error\">&#91;a-zA-Z0-9_&#93;</span>*<span class=\"error\">&#91;a-zA-Z0-9&#93;</span>)?</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  TYPE Collection-type_ IS VARRAY(42) OF PLS_INTEGER; -- Noncompliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  TYPE collectionType IS VARRAY(42) OF PLS_INTEGER;\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/ </pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1481",
      "type": "Code Smell",
      "summary": "Unused local variables should be removed",
      "description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.</p>",
      "standards": [],
      "tags": [
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-117",
      "type": "Code Smell",
      "summary": "Variables should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all variable names match the provided regular expression. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression <tt><span class=\"error\">&#91;a-zA-Z&#93;</span>(<span class=\"error\">&#91;a-zA-Z0-9_&#93;</span>*<span class=\"error\">&#91;a-zA-Z0-9&#93;</span>)?</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  goodVariable PLS_INTEGER; -- Compliant\r\n  badVariable_ PLS_INTEGER; -- Non-Compliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2471",
      "type": "Code Smell",
      "summary": "Variables should not be initialized with \"NULL\"",
      "description": "<p>Explicit variable initializations with null values are superfluous, since unassigned variables are implicitly initialized to null.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  foo PLS_INTEGER := NULL; -- Noncompliant, the <span class=\"code-keyword\">null</span> assignation is superfluous\r\n  bar VARCHAR2(100) := ''; -- Noncompliant, the <span class=\"code-keyword\">null</span> assignation is superfluous\r\n  correctInitializedString VARCHAR2(100) := 'Hello world!';\r\n\r\nBEGIN\r\n  IF foo IS NULL THEN\r\n    DBMS_OUTPUT.PUT_LINE('foo is NULL');\r\n  ELSE\r\n    DBMS_OUTPUT.PUT_LINE('foo is NOT NULL');\r\n  END IF;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  foo PLS_INTEGER;\r\n  bar VARCHAR2(100);\r\n  correctInitializedString VARCHAR2(100) := 'Hello world!';\r\n\r\nBEGIN\r\n  IF foo IS NULL THEN\r\n    DBMS_OUTPUT.PUT_LINE('foo is NULL');\r\n  ELSE\r\n    DBMS_OUTPUT.PUT_LINE('foo is NOT NULL');\r\n  END IF;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1614",
      "type": "Code Smell",
      "summary": "A primary key should be specified during table creation",
      "description": "<p>Tables without primary keys are largely unusable in a relational database because they cannot be joined to. A primary key should be specified at table creation to guarantee that all its records have primary key values.</p>\n\n<h2><a name=\"NoncompliantExample\"></a>Noncompliant Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TABLE employee\r\n(\r\n  employee_id INTEGER NOT NULL,\r\n  first_name VARCHAR2(42) NOT NULL,\r\n  last_name VARCHAR2(42) NOT NULL  \r\n);\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TABLE employee\r\n(\r\n  employee_id INTEGER PRIMARY KEY,\r\n  first_name VARCHAR2(42) NOT NULL,\r\n  last_name VARCHAR2(42) NOT NULL  \r\n);\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1606",
      "type": "Code Smell",
      "summary": "Failed unit tests should be fixed",
      "description": "<p>Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.</p>",
      "standards": [],
      "tags": [
        "tests"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2007",
      "type": "Code Smell",
      "summary": "Global public variables should not be defined",
      "description": "<p>When data structures (scalar variables, collections, cursors) are declared in the package specification (not within any specific program), they can be referenced directly by any program running in a session with <tt>EXECUTE</tt> rights to the package.</p>\n\n<p>Instead, declare all package-level data in the package body and provide getter and setter functions in the package specification. Developers can then access the data using these methods and will automatically follow all rules you set upon data modification.</p>\n\n<p>By doing so you can guarantee data integrity, change your data structure implementation, and also track access to those data structures.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n-- Package specification\r\nCREATE PACKAGE employee AS\r\n   name VARCHAR2(42); -- Non-Compliant\r\nEND employee;\r\n/\r\n\r\nDROP PACKAGE employee;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n-- Package specification\r\nCREATE PACKAGE employee AS\r\n   PROCEDURE setName (newName VARCHAR2);\r\n   FUNCTION getName RETURN VARCHAR2;\r\nEND employee;\r\n/\r\n\r\n-- Package body\r\nCREATE PACKAGE BODY employee AS\r\n   name VARCHAR2(42);\r\n\r\n   PROCEDURE setName (newName VARCHAR2) IS\r\n   BEGIN\r\n     name := newName;\r\n   END;\r\n\r\n   FUNCTION getName RETURN VARCHAR2 IS\r\n   BEGIN\r\n     RETURN name;\r\n   END;\r\nEND employee;\r\n/\r\n\r\nDROP PACKAGE BODY employee;\r\n\r\nDROP PACKAGE employee;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "design"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2459",
      "type": "Code Smell",
      "summary": "\"DBMS_OUTPUT.PUT_LINE\" should not be used",
      "description": "<p>The output of <tt>DBMS_OUTPUT.PUT_LINE</tt> is not always visible, for example when <tt>SERVEROUTPUT</tt> is set to <tt>OFF</tt>. Moreover, there is no standardized way to specify the importance of the message. It is better to use a logging mechanism instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE('An error occured'); -- Noncompliant\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-126",
      "type": "Code Smell",
      "summary": "\"IF ... ELSEIF\" constructs should end with \"ELSE\" clauses",
      "description": "<p>This rule applies whenever an <tt>IF</tt> statement is followed by one or <br/>\nmore <tt>ELSEIF</tt> statements; the final <tt>ELSEIF</tt> should be followed by an <tt>ELSE</tt> statement.</p>\n\n<p>The requirement for a final <tt>ELSE</tt> statement is defensive programming. <br/>\nThe <tt>ELSE</tt> statement should either take appropriate action or contain <br/>\na suitable comment as to why no action is taken. This is consistent with the <br/>\nrequirement to have a final <tt>ELSE</tt> clause in a <tt>CASE</tt><br/>\nstatement. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF my_variable = 0 THEN\r\n  do_something;\r\nELSIF my_variable = 1 THEN\r\n  do_something_else;\r\nEND IF;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nIF my_variable = 0 THEN\r\n  do_something;\r\nELSIF my_variable = 1 THEN\r\n  do_something_else;\r\nELSE\r\n  -- Nothing has to be done.\r\n  NULL;\r\nEND IF;\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause.</li>\n\t<li>MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause.</li>\n\t<li>MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/YgE\" class=\"external-link\" rel=\"nofollow\">CERT, MSC01-C.</a> - Strive for logical completeness</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC01-CPP.</a> - Strive for logical completeness</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/PQHRAw\" class=\"external-link\" rel=\"nofollow\">CERT, MSC57-J.</a> - Strive for logical completeness</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1041",
      "type": "Code Smell",
      "summary": "\"WHEN OTHERS\" clauses should be used for exception handling",
      "description": "<p>Ensure that every possible exception is caught by using a <tt>WHEN OTHERS</tt> clause.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  result PLS_INTEGER;\r\n  custom_exception EXCEPTION;\r\nBEGIN\r\n  result := 42 / 0;                            -- <span class=\"code-quote\">\"Unexpected\"</span> division by 0\r\n\r\n  RAISE custom_exception;\r\nEXCEPTION                                      -- Non-Compliant\r\n  WHEN custom_exception THEN\r\n    DBMS_OUTPUT.PUT_LINE ('custom_exception: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  result PLS_INTEGER;\r\n  custom_exception EXCEPTION;\r\nBEGIN\r\n  result := 42 / 0;                            -- <span class=\"code-quote\">\"Unexpected\"</span> division by 0\r\n\r\n  RAISE custom_exception;\r\nEXCEPTION                                      -- Compliant\r\n  WHEN custom_exception THEN\r\n    DBMS_OUTPUT.PUT_LINE ('custom_exception: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);\r\n  WHEN OTHERS THEN\r\n    DBMS_OUTPUT.PUT_LINE ('other: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);\r\nEND;\r\n/\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 15-3-2</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/391.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-391</a> - Unchecked Error Condition</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "error-handling",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2221",
      "type": "Code Smell",
      "summary": "\"WHEN OTHERS\" should not be the only exception handler",
      "description": "<p>Before trapping all possible exceptions, it is best to try to trap the specific ones and try to recover from those.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE hitCounter\r\n(\r\n  page VARCHAR2(42),\r\n  hits NUMBER,\r\n  CONSTRAINT pk PRIMARY KEY (page)\r\n);\r\n\r\nCREATE PROCEDURE hitPage(pageIn VARCHAR2) AS\r\nBEGIN\r\n  INSERT INTO hitCounter VALUES (pageIn, 1);\r\nEXCEPTION -- Noncompliant, the only exception handler is WHEN OTHERS\r\n  WHEN OTHERS THEN\r\n    IF SQLCODE = -1 THEN\r\n      UPDATE hitCounter SET hits = hits + 1 WHERE page = pageIn;\r\n    ELSE\r\n      DBMS_OUTPUT.PUT_LINE('An unknown error occured!');\r\n    END IF;\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  hitPage('index.html');\r\n  hitPage('index.html');\r\nEND;\r\n/\r\n\r\nSELECT * FROM hitCounter;\r\n\r\nDROP PROCEDURE hitPage;\r\nDROP TABLE hitCounter;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nCREATE TABLE hitCounter\r\n(\r\n  page VARCHAR2(42),\r\n  hits NUMBER,\r\n  CONSTRAINT pk PRIMARY KEY (page)\r\n);\r\n\r\nCREATE PROCEDURE hitPage(pageIn VARCHAR2) AS\r\nBEGIN\r\n  INSERT INTO hitCounter VALUES (pageIn, 1);\r\nEXCEPTION\r\n  WHEN DUP_VAL_ON_INDEX THEN\r\n    UPDATE hitCounter SET hits = hits + 1 WHERE page = pageIn;\r\n  WHEN OTHERS THEN\r\n    DBMS_OUTPUT.PUT_LINE('An unknown error occured!');\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  hitPage('index.html');\r\n  hitPage('index.html');\r\nEND;\r\n/\r\n\r\nSELECT * FROM hitCounter;\r\n\r\nDROP PROCEDURE hitPage;\r\nDROP TABLE hitCounter;\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/396.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception</li>\n</ul>\n",
      "standards": [
        "CWE"
      ],
      "tags": [
        "cwe",
        "error-handling",
        "bug"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1482",
      "type": "Code Smell",
      "summary": "Branches should have sufficient coverage by unit tests",
      "description": "<p>An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.</p>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1541",
      "type": "Code Smell",
      "summary": "Functions and procedures should not be too complex",
      "description": "<p>The cyclomatic complexity of functions and procedures should not exceed a defined threshold.</p>\n\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1483",
      "type": "Code Smell",
      "summary": "Lines should have sufficient coverage by unit tests",
      "description": "<p>An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.</p>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1057",
      "type": "Vulnerability",
      "summary": "Sensitive \"SYS\" owned functions should not be used",
      "description": "<p>Some Oracle packages contain powerful SYS-owned functions that can be used to perform malicious operations. For instance, <tt>DBMS_SYS_SQL.PARSE_AS_USER</tt> can be used to execute a statement as another user.</p>\n\n<p>Most programs do not need those functions and this rule helps identify them in order to prevent security risks.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  c INTEGER;\r\n  sqltext VARCHAR2(100) := 'ALTER USER system IDENTIFIED BY hacker'; -- Might be injected by the user\r\nBEGIN\r\n  c := SYS.DBMS_SYS_SQL.OPEN_CURSOR();                               -- Noncompliant\r\n\r\n   -- Will change 'system' user's password to 'hacker'\r\n  SYS.DBMS_SYS_SQL.PARSE_AS_USER(c, sqltext, DBMS_SQL.NATIVE, UID);  -- Non-Compliant\r\n\r\n  SYS.DBMS_SYS_SQL.CLOSE_CURSOR(c);                                  -- Noncompliant\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://cwe.mitre.org/data/definitions/269.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-269</a> - Improper Privilege Management</li>\n\t<li><a href=\"https://cwe.mitre.org/data/definitions/270.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-270</a> - Privilege Context Switching Error</li>\n</ul>\n",
      "standards": [
        "CWE"
      ],
      "tags": [
        "cwe"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1559",
      "type": "Code Smell",
      "summary": "\"GROUP BY\" should not be used in SQL \"SELECT\" statements",
      "description": "<p>Using <tt>GROUP BY</tt> in SQL <tt>SELECT</tt> statements should be avoided because it makes queries complex. Complex queries are generally not performant and are difficult to understand and therefore to maintain.</p>",
      "standards": [],
      "tags": [
        "brain-overload",
        "performance",
        "sql"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2528",
      "type": "Code Smell",
      "summary": "\"NUMBER\" variables should be declared with precision",
      "description": "<p>Declaring a <tt>NUMBER</tt> variable without any precision wastes memory because Oracle supports up to 38 decimal digits by default (or the maximum supported by your system, whichever is less). If you don't need that large a value, you should specify whatever matches your needs. This will save memory and provide extra integrity checking on input.</p>\n\n<p>This rule also applies to some <tt>NUMBER</tt> subtypes as well: <tt>NUMERIC</tt>, <tt>DEC</tt>, and <tt>DECIMAL</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  var1 NUMBER; -- Noncompliant\r\n  var2 NUMERIC; -- Noncompliant\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  var1 NUMBER(9,2);\r\n  var2 NUMERIC(4,0);\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2468",
      "type": "Code Smell",
      "summary": "\"RESULT_CACHE\" should not be used",
      "description": "<p>Because <tt>RESULT_CACHE</tt>-enabled functions increase memory consumption, one should double-check that the gain in performances is significant, and avoid over-using this feature in general.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE FUNCTION myFastFunction RETURN PLS_INTEGER RESULT_CACHE AS -- Noncompliant\r\nBEGIN\r\n  RETURN 42;\r\nEND;\r\n/\r\n\r\nDROP FUNCTION myFastFunction;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2538",
      "type": "Code Smell",
      "summary": "\"RETURN\" should not be used from within a loop",
      "description": "<p><tt>RETURN</tt> should not be used from within a <tt>FOR</tt> or <tt>WHILE</tt> loop. Doing so can quickly turn your code into \"spaghetti code\". Such code is hard to read, refactor and therefore to maintain.</p>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2541",
      "type": "Code Smell",
      "summary": "\"ROWID\" and \"UROWID\" data types should not be used",
      "description": "<p>Be careful about your use of Oracle-specific data types like <tt>ROWID</tt> and <tt>UROWID</tt>. They might offer a slight improvement in performance over other means of identifying a single row (primary key or unique index value), but that is by no means guaranteed.<br/>\nOn the other hand, the use of <tt>ROWID</tt> or <tt>UROWID</tt> means that your SQL statement will not be portable to other SQL databases. Further, many developers are not familiar with these data types, which can make the code harder to maintain.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  id rowid; -- Non-Compliant\r\n  universeId urowid; -- Non-Compliant\r\nBEGIN\r\n  SELECT rowid INTO id FROM DUAL;\r\n  SELECT rowid INTO universeId FROM DUAL;\r\n\r\n  DBMS_OUTPUT.PUT_LINE('id = ' || id);\r\n  DBMS_OUTPUT.PUT_LINE('universe id = ' || universeId);\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "lock-in",
        "sql"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2543",
      "type": "Code Smell",
      "summary": "\"SIMPLE_INTEGER\" should be used instead of \"PLS_INTEGER\"",
      "description": "<p>ORACLE 11g introduced the <tt>SIMPLE_INTEGER</tt> data type, which is a sub-type of <tt>PLS_INTEGER</tt>, and covers the same range. There are three main differences between the two types:</p>\n<ul>\n\t<li><tt>SIMPLE_INTEGER</tt> is always <tt>NOT NULL</tt>. So when the value of the declared variable is never going to be null, you can declare it as <tt>SIMPLE_INTEGER</tt>.</li>\n\t<li>You will never face a numeric overflow using <tt>SIMPLE_INTEGER</tt> because this data type wraps around without giving any error.</li>\n\t<li>The <tt>SIMPLE_INTEGER</tt> data type gives a major performance boost over <tt>PLS_INTEGER</tt> when the code is compiled in \"NATIVE\" mode, because arithmetic operations on <tt>SIMPLE_INTEGER</tt> type are performed directly at the hardware level.</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  v1 PLS_INTEGER; -- Noncompliant\r\n  v2 VARCHAR2(10);\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  v1 SIMPLE_INTEGER := 42;\r\n  v2 VARCHAR2(10);\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "error-handling",
        "performance"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1571",
      "type": "Code Smell",
      "summary": "\"UNION\" should not be used in \"SELECT\" statements",
      "description": "<p>Using <tt>UNION</tt> in SQL <tt>SELECT</tt> statements should be avoided because it makes queries complex. Complex queries are generally not performant and are difficult to understand and therefore to maintain.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT DUMMY FROM DUAL\r\nUNION                           -- Noncompliant\r\nSELECT DUMMY FROM DUAL@dblink;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance",
        "sql"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1151",
      "type": "Code Smell",
      "summary": "\"WHEN\" clauses should not have too many lines",
      "description": "<p>The <tt>CASE</tt> statement should be used only to clearly define some new branches in the control flow. As soon as a <tt>WHEN</tt> clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of <tt>WHEN</tt> clause should be extracted in a dedicated function.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCASE my_variable\r\n  WHEN 0 THEN -- 6 lines till next WHEN\r\n    procedure1;\r\n    procedure2;\r\n    procedure3;\r\n    procedure4;\r\n    procedure5;\r\n  WHEN 1 THEN\r\n-- ...\r\nEND CASE;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  PROCEDURE do_something AS\r\n  BEGIN\r\n    procedure1;\r\n    procedure2;\r\n    procedure3;\r\n    procedure4;\r\n    procedure5;\r\n  END;\r\nBEGIN\r\n  CASE my_variable\r\n    WHEN 0 THEN\r\n      do_something;\r\n    WHEN 1 THEN\r\n-- ...\r\n  END CASE;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2454",
      "type": "Code Smell",
      "summary": "Columns should be aliased",
      "description": "<p>Consistently using aliases for column names is useful for several reasons. The main one is that the code is independant from potential database modifications - when a column has been renamed to comply with standards for instance. Another reason is to remove ambiguity when querying several tables that may have equivalent column names.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT\r\n    emp.name, -- Noncompliant - should be aliased\r\n    dpt.name -- Noncompliant - should be aliased\r\n  INTO employeesArray\r\n  FROM employee emp INNER JOIN department dpt\r\n  ON emp.DepartmentID = dpt.ID;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT\r\n    emp.name employee_name, -- Compliant\r\n    dpt.name departement_name -- Compliant\r\n  INTO employeesArray\r\n  FROM employee emp INNER JOIN department dpt\r\n  ON emp.DepartmentID = dpt.ID;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "design",
        "sql"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1908",
      "type": "Code Smell",
      "summary": "Files should not be too complex",
      "description": "<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1654",
      "type": "Code Smell",
      "summary": "Function and procedure parameters should comply with a naming convention",
      "description": "<p>Each function and procedure parameter name must match a given regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  FUNCTION myfunction2(parameter_ PLS_INTEGER) RETURN PLS_INTEGER; -- Noncompliant\r\n\r\n  PROCEDURE myprocedure2(parameter_ PLS_INTEGER); -- Noncompliant\r\n\r\n  FUNCTION myfunction2(parameter_ PLS_INTEGER) RETURN PLS_INTEGER AS -- Noncompliant\r\n  BEGIN\r\n    RETURN 42;\r\n  END;\r\n\r\n  PROCEDURE myprocedure2(parameter_ PLS_INTEGER) AS -- Noncompliant\r\n  BEGIN\r\n    NULL;\r\n  END;\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  FUNCTION myfunction1(parameter PLS_INTEGER) RETURN PLS_INTEGER; -- Compliant\r\n\r\n  PROCEDURE myprocedure1(parameter PLS_INTEGER); -- Compliant\r\n\r\n  FUNCTION myfunction1(parameter PLS_INTEGER) RETURN PLS_INTEGER AS -- Compliant\r\n  BEGIN\r\n    RETURN 42;\r\n  END;\r\n\r\n  PROCEDURE myprocedure1(parameter PLS_INTEGER) AS -- Compliant\r\n  BEGIN\r\n    NULL;\r\n  END;\r\n\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-801",
      "type": "Code Smell",
      "summary": "Identifiers in an inner scope should not be the same name as identifiers in an outer scope",
      "description": "<p>When a variable in a nested scope has the same name as one in an outer scope, it hides the outer scope's variable, which can no longer be accessed in the inner scope. Thus all uses of that variable name in the inner scope will reference the variable declared in the inner scope. However, that may not be clear to everyone. particularly in large code blocks. Therefore identifiers in inner scopes should never hide those from outer scopes.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid fn1 ( void )\r\n{\r\n  int16_t i;\r\n  {\r\n    int8_t i; /* Non-compliant - hides previous <span class=\"code-quote\">\"i \"</span> */\r\n    i = 3;       /* Could be confusing as to which <span class=\"code-quote\">\"i\"</span> <span class=\"code-keyword\">this</span> is */\r\n  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid fn1 ( void )\r\n{\r\n  int16_t i;\r\n  {\r\n    int8_t j;\r\n    j = 3;\r\n  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 5.2 - Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that identifier</li>\n\t<li>MISRA C++:2008, 2-10-2 - Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope</li>\n\t<li>MISRA C:2012, 5.3 - An identifier declared in an inner scope shall not hide an identifier declared in an outer scope</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/VwE\" class=\"external-link\" rel=\"nofollow\">CERT, DCL01-C</a> - Do not reuse variable names in subscopes</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/cwAhAQ\" class=\"external-link\" rel=\"nofollow\">CERT, DCL01-CPP</a> - Do not reuse variable names in subscopes</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-103",
      "type": "Code Smell",
      "summary": "Lines should not be too long",
      "description": "<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1583",
      "type": "Code Smell",
      "summary": "Magic literals should not be used",
      "description": "<p>Literals should not be hard-coded, but externalized instead. Exceptions can be parameterized using the below parameters.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-109",
      "type": "Code Smell",
      "summary": "Magic numbers should not be used",
      "description": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the number of iterations of a loops, to test the value of a property, etc.</p>\n\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at debugging time.<br/>\nThat is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n\n<p>By default, -1, 0 and 1 are not considered magic numbers.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2474",
      "type": "Code Smell",
      "summary": "Nested blocks should be labeled",
      "description": "<p>Labeled blocks are useful, especially when the code is badly indented, to help maintainers match the beginning and ending of each block. When blocks are nested, labeling them can improve the code's readability. This rule detects nested block which do not have a start label.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN -- Compliant, <span class=\"code-keyword\">this</span> is not a nested block\r\n  NULL;\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  BEGIN -- Noncompliant; <span class=\"code-keyword\">this</span> nested block has no label\r\n    NULL;\r\n  END;\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  BEGIN -- Noncompliant; <span class=\"code-keyword\">this</span> nested block has only an end label\r\n    NULL;\r\n  END myBlockLabel1;\r\n\r\n  &lt;&lt;myBlockLabel2&gt;&gt; -- Compliant\r\n  BEGIN\r\n    NULL;\r\n  END;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN \r\n  NULL;\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  BEGIN myBlockLabel0\r\n    NULL;\r\n  END myBlockLabel0;\r\nEND;\r\n/\r\n\r\nBEGIN\r\n  BEGIN myBlockLabel1\r\n    NULL;\r\n  END myBlockLabel1;\r\n\r\n  &lt;&lt;myBlockLabel2&gt;&gt;\r\n  BEGIN\r\n    NULL;\r\n  END;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "style"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2477",
      "type": "Code Smell",
      "summary": "Nested loops should be labeled",
      "description": "<p>Labeled loops are useful, especially when the code is badly indented, to match the begin and end of each loop. When loops are nested, labeling them can improve the code's readability. This rule detects nested loops which do not have a start label.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  LOOP\r\n    LOOP -- Noncompliant, <span class=\"code-keyword\">this</span> nested loop is not labeled\r\n      EXIT;\r\n    END LOOP;\r\n\r\n    EXIT;\r\n  END LOOP;\r\n\r\n  FOR i IN 1..10  LOOP\r\n    WHILE <span class=\"code-keyword\">true</span> LOOP -- Noncompliant, <span class=\"code-keyword\">this</span> nested loop has no start label\r\n      EXIT;\r\n    END LOOP nestedLoopLabel1;\r\n\r\n    EXIT;\r\n  END LOOP;\r\n\r\n  WHILE <span class=\"code-keyword\">true</span> LOOP\r\n    &lt;&lt;nestedLoopLabel2&gt;&gt;\r\n    LOOP -- Compliant, but better with an end label\r\n      EXIT;\r\n    END LOOP;\r\n\r\n    EXIT;\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  LOOP\r\n    &lt;&lt;nestedLoopLabel0&gt;&gt;\r\n    LOOP\r\n      EXIT;\r\n    END LOOP nestedLoopLabel0;\r\n\r\n    EXIT;\r\n  END LOOP;\r\n\r\n  FOR i IN 1..10  LOOP\r\n    &lt;&lt;nestedLoopLabel1&gt;&gt;\r\n    WHILE <span class=\"code-keyword\">true</span> LOOP\r\n      EXIT;\r\n    END LOOP nestedLoopLabel1;\r\n\r\n    EXIT;\r\n  END LOOP;\r\n\r\n  WHILE <span class=\"code-keyword\">true</span> LOOP\r\n    &lt;&lt;nestedLoopLabel2&gt;&gt;\r\n    LOOP\r\n      EXIT;\r\n    END LOOP nestedLoopLabel2;\r\n\r\n    EXIT;\r\n  END LOOP;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing",
        "style"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2524",
      "type": "Code Smell",
      "summary": "Nested subqueries should be avoided",
      "description": "<p>Subqueries are nested when they appear in the <tt>WHERE</tt> clause of the parent statement. When an Oracle database evaluates a statement with a nested subquery, it must evaluate the subquery portion multiple times and may overlook some efficient access paths or joins.</p>\n\n<p>Subquery unnesting unnests and merges the body of the subquery into the body of the statement that contains it, allowing the optimizer to consider the queries together when evaluating access paths and joins. The optimizer can unnest most subqueries, with some exceptions. Those exceptions include:</p>\n<ul>\n\t<li>hierarchical subqueries</li>\n\t<li>subqueries that contain a <tt>ROWNUM</tt> pseudocolumn</li>\n\t<li>subqueries that contain one of the set operators</li>\n\t<li>subqueries that contain a nested aggregate function</li>\n\t<li>subqueries that contain a correlated reference to a query block that is not the immediate outer query block of the subquery.</li>\n</ul>\n\n\n<p>Assuming no restrictions exist, the optimizer automatically unnests some (but not all) of the following nested subqueries:</p>\n<ul>\n\t<li>Uncorrelated <tt>IN</tt> subqueries</li>\n\t<li><tt>IN</tt> and <tt>EXISTS</tt> correlated subqueries, as long as they do not contain aggregate functions or a <tt>GROUP BY</tt> clause</li>\n</ul>\n\n\n<p>You can enable extended subquery unnesting by instructing the optimizer to unnest additional types of subqueries:</p>\n<ul>\n\t<li>You can unnest an uncorrelated <tt>NOT IN</tt> subqueries by specifying the <tt>HASH_AJ</tt> or <tt>MERGE_AJ</tt> hint in the subquery.</li>\n\t<li>You can unnest other subqueries by specifying the <tt>UNNEST</tt> hint in the subquery.</li>\n</ul>\n\n\n<p>Because these optimizations are dependant on the version of Oracle used, it is best to avoid using nested subqueries in the first place when possible.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT col1\r\n  BULK COLLECT INTO result\r\n  FROM table1\r\n  WHERE col2 IN (SELECT col3 FROM table2); -- Noncompliant\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT col1                              -- Compliant\r\n  BULK COLLECT INTO result\r\n  FROM table1\r\n  JOIN table2 ON col2 = col3;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance",
        "sql"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2542",
      "type": "Code Smell",
      "summary": "Queries should not \"SELECT\" too many columns",
      "description": "<p><tt>SELECT</tt> queries that return too many columns may be complex or difficult to maintain. </p>\n\n<p>This rule identifies queries that <tt>SELECT</tt> more than the specified number of columns.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With a threshold of 6:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT id, name, firstname, gender, height, weight, age -- Noncompliant\r\n    INTO peopleArray\r\n    FROM people\r\n    WHERE age &gt; 60;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload",
        "sql"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-122",
      "type": "Code Smell",
      "summary": "Statements should be on separate lines",
      "description": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE('Hello!'); DBMS_OUTPUT.PUT_LINE('This is unreadable!'); -- Noncompliant\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nBEGIN\r\n  DBMS_OUTPUT.PUT_LINE('Hello!');\r\n  DBMS_OUTPUT.PUT_LINE('This is much better!');\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "style"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2548",
      "type": "Code Smell",
      "summary": "Tables should be aliased",
      "description": "<p>When multiple tables are involved in a query, using table aliases helps to make it more understandable and keeps it short. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT\r\n    name,\r\n    firstname,\r\n    location\r\n  INTO employeesArray\r\n  FROM employee -- Noncompliant - should be aliased\r\n  INNER JOIN department -- Noncompliant - should be aliased\r\n  ON employee.DepartmentID = department.ID;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  SELECT\r\n    empl.name,\r\n    empl.firstname,\r\n    dpt.location\r\n  INTO employeesArray\r\n  FROM employee empl\r\n  INNER JOIN department dpt\r\n  ON empl.DepartmentID = dpt.ID;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload",
        "sql"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2260",
      "type": "Code Smell",
      "summary": "Track parsing failures",
      "description": "<p>When the PL/SQL parser fails, it is possible to record the failure as an issue on the file. This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.</p>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1291",
      "type": "Code Smell",
      "summary": "Track uses of \"NOSONAR\" comments",
      "description": "<p>Any issue to quality rule can be deactivated with the <tt>NOSONAR</tt> marker. This marker is pretty useful to exclude false-positive results but it can also be used abusively to hide real quality flaws.</p>\n\n<p>This rule raises an issue when <tt>NOSONAR</tt> is used.</p>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-4081",
      "type": "Code Smell",
      "summary": "\"PLS_INTEGER\" types should be used",
      "description": "<p>Using a <tt>NUMBER</tt> to store an integer is less performant than using a <tt>PLS_INTEGER</tt>. <tt>PLS_INTEGER</tt>s require less storage than <tt>NUMBER</tt>s, and benefit from the use of hardware math, as opposed to the library math required for <tt>NUMBER</tt>s. Even more performant is the <tt>SIMPLE_INTEGER</tt> subtype of <tt>PLS_INTEGER</tt>. However, changing to either of these types is only appropriate under certain circumstances.</p>\n\n<p><tt>PLS_INTEGER</tt> is only a candidate for <tt>NUMBER</tt> with a scale of up to 9.<br/>\n<tt>SIMPLE_INTEGER</tt> has the same size limitation, in addition to it's <tt>NOT NULL</tt> constraint and lack of overflow checking.</p>\n\n<p>This rule raises an issue when a <tt>NUMBER</tt> is declared with a scale of 9 or less.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n    son NUMBER(1);      -- Noncompliant\r\n    rumbo NUMBER(9);  -- Noncompliant\r\n    conga <span class=\"code-object\">Number</span>(10);   -- Ignored; falls outside the PLS_INTEGER range\r\n    compalsa PLS_INTEGER;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n    son SIMPLE_INTEGER;\r\n    rumbo PLS_INTEGER;\r\n    conga <span class=\"code-object\">Number</span>(10);   -- Ignored; falls outside the PLS_INTEGER range\r\n    compalsa PLS_INTEGER;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2145",
      "type": "Code Smell",
      "summary": "CASE should be used for sequences of simple tests",
      "description": "<p>When a single primitive is tested against three or more values in an <tt>IF</tt>, <tt>ELSIF</tt> chain, it should be converted to a <tt>CASE</tt> instead for greater readability.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  x PLS_INTEGER := 0;\r\nBEGIN\r\n  IF x = 0 THEN                     -- Noncompliant\r\n    DBMS_OUTPUT.PUT_LINE('x = 0');\r\n  ELSIF x = 1 THEN\r\n    DBMS_OUTPUT.PUT_LINE('x = 1');\r\n  ELSE\r\n    DBMS_OUTPUT.PUT_LINE('x &gt; 1');\r\n  END IF;\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  x PLS_INTEGER := 0;\r\nBEGIN\r\n  CASE x\r\n    WHEN 0 THEN\r\n      DBMS_OUTPUT.PUT_LINE('x = 0');\r\n    WHEN 1 THEN\r\n      DBMS_OUTPUT.PUT_LINE('x = 1');\r\n    ELSE\r\n      DBMS_OUTPUT.PUT_LINE('x &gt; 1');\r\n  END CASE;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-139",
      "type": "Code Smell",
      "summary": "Comments should not be located at the end of lines of code",
      "description": "<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable. Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\na := b + c; -- This is a trailing comment that can be very very <span class=\"code-object\">long</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n-- This very <span class=\"code-object\">long</span> comment is better placed before the line of code\r\na := b + c;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1615",
      "type": "Code Smell",
      "summary": "Constraint names should comply with a naming convention",
      "description": "<p>Sharing some naming conventions is a key factory in efficient team collaboration. This rule checks that all constraint names match a provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With <tt>format_primary_key</tt> set to \"pk_<span class=\"error\">&#91;a-z&#93;</span>++ \" and <tt>format_foreign_key</tt> to \"fk_<span class=\"error\">&#91;a-z&#93;</span>++ \".</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TABLE employee(\r\n  first_name VARCHAR2(42),\r\n  last_name VARCHAR2(42)\r\n  department_id INTEGER CONSTRAINT department_fk REFERENCES department,\r\n  CONSTRAINT fullname_pk PRIMARY KEY (first_name, last_name);\r\n);\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE TABLE employee(\r\n  first_name VARCHAR2(42),\r\n  last_name VARCHAR2(42)\r\n  department_id INTEGER CONSTRAINT fk_department REFERENCES department,\r\n  CONSTRAINT pk_fullname PRIMARY KEY (first_name, last_name);\r\n);\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1573",
      "type": "Bug",
      "summary": "Explicitly opened cursors should be closed",
      "description": "<p>If you do not explicitly close a cursor, it will be closed at the end of the task. But if you try to re-open this cursor to process it, you will get an error. That is why a cursor should be explicitly closed after it has been processed.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/459.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-459</a> - Incomplete Cleanup</li>\n</ul>\n",
      "standards": [
        "CWE"
      ],
      "tags": [
        "cwe",
        "sql"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2488",
      "type": "Code Smell",
      "summary": "Lines in a multiline comment should start with \"*\"",
      "description": "<p>Multi-line comments are more readable when each line is aligned using the \"*\" character. At most one violation is created for each comment</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n/*\r\n<span class=\"code-keyword\">this</span> line is not aligned and ugly Non-Compliant\r\nno violation is created on <span class=\"code-keyword\">this</span> line, even though is it also bad\r\n */\r\n\r\n/* <span class=\"code-keyword\">this</span> is Compliant */\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n/*\r\n * <span class=\"code-keyword\">this</span> is much better Compliant\r\n */\r\n\r\n/* <span class=\"code-keyword\">this</span> is Compliant */\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1131",
      "type": "Code Smell",
      "summary": "Lines should not end with trailing whitespaces",
      "description": "<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same file.</p>\n\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the opportunity to do so. </p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nDECLARE\r\n  -- The following line has many trailing whitespaces\r\n  foo VARCHAR2(42) := 'a     \r\nb';\r\nBEGIN\r\n  -- Will misleadingly show 3, counting only the characters 'a', 'b', and the line terminator, but none of the trailing whitespaces\r\n  DBMS_OUTPUT.PUT_LINE(LENGTH(foo));\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2532",
      "type": "Code Smell",
      "summary": "Parameter \"IN\" mode should be specified explicitly",
      "description": "<p>By default, the parameter mode is <tt>IN</tt>. However, specifying it explicitly makes the code easier to read.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  PROCEDURE printName(name VARCHAR2) AS -- Noncompliant; relies on <span class=\"code-keyword\">default</span> mode\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE('name: ' || name);\r\n  END;\r\n\r\nBEGIN\r\n  printName('Foo');\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSET SERVEROUTPUT ON\r\n\r\nDECLARE\r\n  PROCEDURE printName(name IN VARCHAR2) AS\r\n  BEGIN\r\n    DBMS_OUTPUT.PUT_LINE('name: ' || name);\r\n  END;\r\nBEGIN\r\n  printName('Foo');\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-141",
      "type": "Code Smell",
      "summary": "Reserved words should be written in lower case",
      "description": "<p>All reserved words should be written using the same case to ensure consistency in the code.<br/>\nThis rule checks that reserved words are all in lower case.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nbegin\r\n  <span class=\"code-keyword\">null</span>;\r\n  NULL; -- Noncompliant\r\nend;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2561",
      "type": "Code Smell",
      "summary": "Reserved words should be written in upper case",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that reserved words are written in upper case.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  <span class=\"code-keyword\">null</span>; -- Noncompliant\r\nEND;\r\n/\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nBEGIN\r\n  NULL;\r\nEND;\r\n/\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1741",
      "type": "Code Smell",
      "summary": "SQL tables should be joined with the \"JOIN\" keyword",
      "description": "<p>Since ANSI SQL-92, explicit joins using the <tt>JOIN</tt> keyword have been possible, and are preferred. Therefore table joins should be done with help of the one of the following clauses: <tt>JOIN</tt>, <tt>INNER  JOIN</tt>, <tt>LEFT OUTER  JOIN</tt>, <tt>RIGHT OUTER JOIN</tt>, and <tt>FULL OUTER  JOIN</tt>. The old way to join tables is deprecated and should not be used anymore.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT *\r\nFROM PARTS, PRODUCTS\r\nWHERE PARTS.PROD = PRODUCTS.PROD\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nSELECT *\r\nFROM PARTS\r\nINNER JOIN PRODUCTS ON PARTS.PROD = PRODUCTS.PROD\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete",
        "sql"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3424",
      "type": "Code Smell",
      "summary": "Skipped unit tests should be either removed or fixed",
      "description": "<p>Skipped unit tests are considered dead code. Either they should be activated again (and updated) or they should be removed.</p>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1071",
      "type": "Code Smell",
      "summary": "The \"RELIES_ON\" clause should not be used",
      "description": "<p>Since Oracle 11.2, <tt>RELIES_ON</tt> has been deprecated because the dependencies of result cache-enabled functions are automatically computed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE OR REPLACE FUNCTION foo RETURN PLS_INTEGER RESULT_CACHE RELIES_ON(DUAL) AS -- Noncompliant\r\nBEGIN\r\n  RETURN 0;\r\nEND;\r\n/\r\n\r\nDROP FUNCTION foo;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nCREATE OR REPLACE FUNCTION foo RETURN PLS_INTEGER RESULT_CACHE AS\r\nBEGIN\r\n  RETURN 0;\r\nEND;\r\n/\r\n\r\nDROP FUNCTION foo;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1484",
      "type": "Code Smell",
      "summary": "Track instances of below-threshold comment line density",
      "description": "<p>An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.</p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    }
  ]
}
