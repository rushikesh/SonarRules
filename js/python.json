{
  "types": {
    "Code Smell": 44,
    "Vulnerability": 1,
    "Bug": 13
  },
  "standards": [{
      "name": "CWE",
      "count": 2
    },
    {
      "name": "MISRA",
      "count": 2
    },
    {
      "name": "CERT",
      "count": 6
    }
  ],
  "tags": [{
      "name": "convention",
      "count": 12
    },
    {
      "name": "obsolete",
      "count": 3
    },
    {
      "name": "cert",
      "count": 6
    },
    {
      "name": "suspicious",
      "count": 3
    },
    {
      "name": "pitfall",
      "count": 3
    },
    {
      "name": "cwe",
      "count": 2
    },
    {
      "name": "python3",
      "count": 4
    },
    {
      "name": "tests",
      "count": 1
    },
    {
      "name": "brain-overload",
      "count": 7
    },
    {
      "name": "design",
      "count": 1
    },
    {
      "name": "misra",
      "count": 2
    },
    {
      "name": "bad-practice",
      "count": 2
    },
    {
      "name": "style",
      "count": 1
    },
    {
      "name": "unused",
      "count": 5
    },
    {
      "name": "confusing",
      "count": 2
    },
    {
      "name": "clumsy",
      "count": 1
    }
  ],
  "rules": [{
      "ruleKey": "RSPEC-2733",
      "type": "Bug",
      "summary": "\"__exit__\" should accept type, value, and traceback arguments",
      "description": "<p>The <tt>_<em>exit</em>_</tt> method is invoked with four arguments: self, type, value and traceback. Leave one of these out of the method declaration and the result will be a <tt>TypeError</tt> at runtime.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass:\r\n   def __enter__(self):\r\n       pass\r\n   def __exit__(self, exc_type, exc_val):  # Noncompliant\r\n       pass\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2734",
      "type": "Bug",
      "summary": "\"__init__\" should not return a value",
      "description": "<p>By contract, every Python function returns something, even if it's the <tt>None</tt> value, which can be returned implicitly by omitting the <tt>return</tt> statement, or explicitly. </p>\n\n<p>The <tt>_<em>init</em><em></tt> method is required to return <tt>None</tt>. A <tt>TypeError</tt> will be raised if the <tt></em><em>init</em>_</tt> method either <tt>yield</tt>s or <tt>return</tt>s any expression other than <tt>None</tt>. Returning some expression that evaluates to <tt>None</tt> will not raise an error, but is considered bad practice.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass(object):\r\n    def __init__(self):\r\n        self.message = 'Hello'\r\n        <span class=\"code-keyword\">return</span> self  # Noncompliant\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass(object):\r\n    def __init__(self):\r\n        self.message = 'Hello'\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2712",
      "type": "Bug",
      "summary": "\"return\" and \"yield\" should not be used in the same function",
      "description": "<p>Functions that use <tt>yield</tt> are known as \"generators\", and generators cannot <tt>return</tt> values. Similarly, functions that use <tt>return</tt> cannot use <tt>yield</tt>. Doing so will cause a <tt>SyntaxError</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef adder(n):\r\n     num = 0\r\n     <span class=\"code-keyword\">while</span> num &lt; n:\r\n         yield num\r\n         num += 1\r\n     <span class=\"code-keyword\">return</span> num  #Noncompliant\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2711",
      "type": "Bug",
      "summary": "\"yield\" and \"return\" should not be used outside functions",
      "description": "<p><tt>yield</tt> and <tt>return</tt> only make sense in the context of functions. Using them outside a function raises a <tt>SyntaxError</tt>. To break out of a loop, use <tt>break</tt> instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass: \r\n    <span class=\"code-keyword\">while</span> True:\r\n        <span class=\"code-keyword\">return</span> False #Noncompliant\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2316",
      "type": "Bug",
      "summary": "Backticks should not be used",
      "description": "<p>Backticks are a deprecated alias for <tt>repr()</tt>. Don't use them any more, the syntax was removed in Python 3.0.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">return</span> `num`  # Noncompliant\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">return</span> repr(num)\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "python3"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1845",
      "type": "Code Smell",
      "summary": "Methods and field names should not differ only by capitalization",
      "description": "<p>Looking at the set of methods and fields in a <tt>class</tt> and finding two that differ only by capitalization is confusing to users of the class.</p>\n\n<p>This situation may simply indicate poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case where both a method and a field have the same name (with or without capitalization differences). However, renaming a public method could be disruptive to callers. Therefore renaming the member is the recommended action.</p>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass SomeClass:\r\n    lookUp = <span class=\"code-keyword\">false</span>\r\n    def lookup():       # Non-compliant; method name differs from field name only by capitalization\r\n        pass\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass SomeClass:\r\n    lookUp = <span class=\"code-keyword\">false</span>\r\n    def getLookUp():\r\n        pass\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-2317",
      "type": "Bug",
      "summary": "The \"exec\" statement should not be used",
      "description": "<p>Use of the <tt>exec</tt> statement could be dangerous, and should be avoided. Moreover, the <tt>exec</tt> statement was removed in Python 3.0. Instead, the built-in <tt>exec()</tt> function can be used.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nexec 'print 1' # Noncompliant\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nexec('print 1')\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete",
        "python3"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1716",
      "type": "Bug",
      "summary": "\"break\" and \"continue\" should not be used outside a loop",
      "description": "<p><tt>break</tt> and <tt>continue</tt> are unstructured control flow statements which make code harder to read. Additionally, more recent versions of Python raise a SyntaxError when modules containing <tt>break</tt> or <tt>continue</tt> outside of a loop are imported.</p>\n\n<p>Therefore, these statements should not be used outside of loops. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nnarg=len(sys.argv)\r\n<span class=\"code-keyword\">if</span> narg == 1:\r\n        print('@Usage: input_filename nelements nintervals')\r\n        <span class=\"code-keyword\">break</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> narg == 1:\r\n        print('@Usage: input_filename nelements nintervals')\r\n        sys.exit()\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-3776",
      "type": "Code Smell",
      "summary": "Cognitive Complexity of functions should not be too high",
      "description": "<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be difficult to maintain.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\" class=\"external-link\" rel=\"nofollow\">Cognitive Complexity</a></li>\n</ul>\n",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1477",
      "type": "Code Smell",
      "summary": "Source files should not have any duplicated blocks",
      "description": "<p>An issue is created on a file as soon as there is at least one block of duplicated code on this file.</p>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2318",
      "type": "Code Smell",
      "summary": "\"<>\" should not be used to test inequality",
      "description": "<p>The forms <tt>&lt;&gt;</tt> and <tt>!=</tt> are equivalent. But in Python 2.7.3 the <tt>&lt;&gt;</tt> form is considered obsolete.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">return</span> a &lt;&gt; b # Noncompliant\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">return</span> a != b\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1700",
      "type": "Code Smell",
      "summary": "A field should not duplicate the name of its containing class",
      "description": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider the common practice of naming a class instance for the class itself.</p>\n\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular aspect of the class it represents or holds.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass Foo: \r\n  foo = '' \r\n\r\n  def getFoo(self):\r\n    ...\r\n\r\nfoo = Foo()\r\nfoo.getFoo() # what does <span class=\"code-keyword\">this</span> <span class=\"code-keyword\">return</span>? \r\n</pre>\n</div></div> \n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass Foo:\r\n  name = ''\r\n\r\n  def getName(self):\r\n    ...\r\n\r\nfoo = Foo()\r\nfoo.getName()\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1066",
      "type": "Code Smell",
      "summary": "Collapsible \"if\" statements should be merged",
      "description": "<p>Merging collapsible <tt>if</tt> statements increases the code's readability.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> condition1:\r\n    <span class=\"code-keyword\">if</span> condition2:\r\n        # ...\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> condition1 and condition2:\r\n    # ...\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1542",
      "type": "Code Smell",
      "summary": "Function names should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default provided regular expression: ^<span class=\"error\">&#91;a-z_&#93;</span><span class=\"error\">&#91;a-z0-9_&#93;</span></p>\n{2,30}\n<p>$</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef MyFunction(a,b):\r\n    ...\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef my_function(a,b):\r\n    ...\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-107",
      "type": "Code Smell",
      "summary": "Functions, methods and lambdas should not have too many parameters",
      "description": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef do_something(param1, param2, param3, param4, param5):\r\n\t...\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef do_something(param1, param2, param3, param4):\r\n\t...\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1764",
      "type": "Bug",
      "summary": "Identical expressions should not be used on both sides of a binary operator",
      "description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n\n<p>This rule ignores <tt>*</tt>, <tt>+</tt>, and <tt>=</tt>. </p>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> a == a: # Noncompliant\r\n    work()\r\n\r\n<span class=\"code-keyword\">if</span>  a != a: # Noncompliant\r\n    work()\r\n\r\n<span class=\"code-keyword\">if</span>  a == b and a == b: # Noncompliant\r\n    work()\r\n\r\n<span class=\"code-keyword\">if</span> a == b or a == b: # Noncompliant\r\n    work()\r\n\r\nj = 5 / 5 # Noncompliant\r\nk = 5 - 5 # Noncompliant\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>The following are ignored:</p>\n<ul>\n\t<li>The expression <tt>1 &lt;&lt; 1</tt></li>\n</ul>\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n\t<li>S1656 - Implements a check on <tt>=</tt>.</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2319",
      "type": "Bug",
      "summary": "Increment and decrement operators should not be used",
      "description": "<p>Python has no pre/post increment/decrement operator. For instance, <tt>x+<ins></tt> and <tt>x-<del></tt> will fail to parse. More importantly, <tt></ins>+x</tt> and <tt></del>-x</tt> will do nothing. To increment a number, simply write <tt>x += 1</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n++x # Noncompliant\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nx += 1\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1763",
      "type": "Bug",
      "summary": "Jump statements should not be followed by other statements",
      "description": "<p>Jump statements (<tt>return</tt>, <tt>break</tt>, <tt>continue</tt>, and <tt>raise</tt>) move control flow out of the current code block. Typically, any statements in a block that come after a jump are simply wasted keystrokes lying in wait to confuse the unwary. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef fun(a):\r\n  i = 10\r\n  <span class=\"code-keyword\">return</span> i + a       # Noncompliant \r\n  i += 1             # <span class=\"code-keyword\">this</span> is never executed\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef fun(a):\r\n  i = 10\r\n  <span class=\"code-keyword\">return</span> i + a\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.1 - There shall be no unreachable code</li>\n\t<li>MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code</li>\n\t<li>MISRA C++:2008, 0-1-9 - There shall be no dead code</li>\n\t<li>MISRA C:2012, 2.1 - A project shall not contain unreachable code</li>\n\t<li>MISRA C:2012, 2.2 - There shall be no dead code</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/561.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-561</a> - Dead Code</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\" class=\"external-link\" rel=\"nofollow\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC07-CPP.</a> - Detect and remove dead code</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-108",
      "type": "Code Smell",
      "summary": "Nested blocks of code should not be left empty",
      "description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span> i in range(3):\r\n    pass\r\n</pre>\n</div></div><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1110",
      "type": "Code Smell",
      "summary": "Redundant pairs of parentheses should be removed",
      "description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But redundant pairs of parentheses could be misleading, and should be removed. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">return</span> ((3))        # Noncompliant\r\n<span class=\"code-keyword\">return</span> ((x + 1))    # Noncompliant\r\nx = ((y / 2)) + 1   # Noncompliant\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">return</span> 3\r\n<span class=\"code-keyword\">return</span> (3)\r\n<span class=\"code-keyword\">return</span> x + 1\r\n<span class=\"code-keyword\">return</span> (x + 1)\r\nx = y / 2 + 1\r\nx = (y / 2) + 1\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1862",
      "type": "Bug",
      "summary": "Related \"if/else if\" statements should not have the same condition",
      "description": "<p>A chain of <tt>if</tt>/<tt>else if</tt> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <tt>true</tt>. </p>\n\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> param == 1:\r\n  openWindow()\r\nelif param == 2:\r\n  closeWindow()\r\nelif param == 1:            # Noncompliant\r\n  moveWindowToTheBackground()\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> param == 1:\r\n  openWindow()\r\nelif param == 2:\r\n  closeWindow()\r\nelif param == 3:        \r\n  moveWindowToTheBackground()\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "pitfall",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-125",
      "type": "Code Smell",
      "summary": "Sections of code should not be \"commented out\"",
      "description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.<br/>\nUnused code should be deleted and can be retrieved from source control history if required.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 2.4 - Sections of code should not be \"commented out\".</li>\n\t<li>MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments.</li>\n\t<li>MISRA C+<ins>:2008, 2-7-3 - Sections of code should not be \"commented out\" using C</ins>+ comments.</li>\n\t<li>MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\"</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2320",
      "type": "Code Smell",
      "summary": "The \"print\" statement should not be used",
      "description": "<p>The <tt>print</tt> statement was removed in Python 3.0. The built-in function should be used instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nprint '1'  # Noncompliant\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nprint('1') \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete",
        "python3"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1134",
      "type": "Code Smell",
      "summary": "Track uses of \"FIXME\" tags",
      "description": "<p><tt>FIXME</tt> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.<br/>\nSometimes the developer will not have the time or will simply forget to get back to that tag.<br/>\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef divide(numerator, denominator):\r\n  <span class=\"code-keyword\">return</span> numerator / denominator              # FIXME denominator value might be 0\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/546.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-546</a> - Suspicious Comment</li>\n</ul>\n",
      "standards": [
        "CWE"
      ],
      "tags": [
        "cwe"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1871",
      "type": "Code Smell",
      "summary": "Two branches in a conditional structure should not have exactly the same implementation",
      "description": "<p>Having two branches in the same <tt>if</tt> structure  with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then they should be combined.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> 0 &lt;= a &lt; 10:\r\n    do_the_thing()\r\nelif 10 &lt;= a &lt; 20:\r\n    do_the_other_thing()\r\nelif 20 &lt;= a &lt; 50:\r\n    do_the_thing()  # Noncompliant; duplicates first condition\r\n<span class=\"code-keyword\">else</span>:\r\n    do_the_rest()\r\n\r\nb = 4 <span class=\"code-keyword\">if</span> a &gt; 12 <span class=\"code-keyword\">else</span> 4\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (0 &lt;= a &lt; 10) or (20 &lt;= a &lt; 50):\r\n    do_the_thing()\r\nelif 10 &lt;= a &lt; 20:\r\n    do_the_other_thing()\r\n<span class=\"code-keyword\">else</span>:\r\n    do_the_rest()\r\n\r\nb = 4\r\n</pre>\n</div></div>\n<p>or </p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> 0 &lt;= a &lt; 10:\r\n    do_the_thing()\r\nelif 10 &lt;= a &lt; 20:\r\n    do_the_other_thing()\r\nelif 20 &lt;= a &lt; 50:\r\n    do_the_third_thing()\r\n<span class=\"code-keyword\">else</span>:\r\n    do_the_rest()\r\n\r\nb = 8 <span class=\"code-keyword\">if</span> a &gt; 12 <span class=\"code-keyword\">else</span> 4\r\n</pre>\n</div></div><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Blocks in an <tt>if</tt> chain that contain a single line of code are ignored, as are blocks in a <tt>switch</tt> statement that contain a single line of code with or without a following <tt>break</tt>.</p>",
      "standards": [],
      "tags": [
        "design",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1656",
      "type": "Bug",
      "summary": "Variables should not be self-assigned",
      "description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nname = name\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nname = other.name\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2772",
      "type": "Code Smell",
      "summary": "\"pass\" should not be used needlessly",
      "description": "<p>The use of a <tt>pass</tt> statement where it's not required by the syntax is pure cruft and should be removed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n    def __init__(self, log=<span class=\"code-quote\">\"\", who=\"</span>\", date=0, files=[]):\r\n        self.log = log\r\n        self.files = files\r\n        self.who = who\r\n        self.date = date\r\n        pass    # Noncompliant\r\n\r\n    def lookup():\r\n        pass    # Compliant; method can't be empty\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n    def __init__(self, log=<span class=\"code-quote\">\"\", who=\"</span>\", date=0, files=[]):\r\n        self.log = log\r\n        self.files = files\r\n        self.who = who\r\n        self.date = date\r\n\r\n    def lookup():\r\n        pass\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-101",
      "type": "Code Smell",
      "summary": "Class names should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With default provided regular expression <tt>^<span class=\"error\">&#91;A-Z&#93;</span><span class=\"error\">&#91;a-zA-Z0-9&#93;</span>*$</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass myClass:\r\n   ...\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass:\r\n   ...\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-116",
      "type": "Code Smell",
      "summary": "Field names should comply with a naming convention",
      "description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field names match a provided regular expression.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression <tt>^<span class=\"error\">&#91;_a-z&#93;</span><span class=\"error\">&#91;_a-z0-9&#93;</span>*$</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass:\r\n  myField = 1\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass:\r\n  my_field = 1\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1313",
      "type": "Vulnerability",
      "summary": "IP addresses should not be hardcoded",
      "description": "<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>\n<ul>\n\t<li>a recompile is required if the address changes</li>\n\t<li>it forces the same address to be used in every environment (dev, sys, qa, prod)</li>\n\t<li>it places the responsibility of setting the value to use in production on the shoulders of the developer</li>\n\t<li>it allows attackers to decompile the code and thereby discover a potentially sensitive address</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nip = '127.0.0.1'\r\nsock = socket.socket()\r\nsock.bind((ip, 9090))\r\n</pre>\n</div></div>\n\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nip = config.get(section, ipAddress)\r\nsock = socket.socket()\r\nsock.bind((ip, 9090))\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC03-J.</a> - Never hard code sensitive information</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-117",
      "type": "Code Smell",
      "summary": "Local variable and function parameter names should comply with a naming convention",
      "description": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does not match the provided regular expression.</p><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span> i in range(limit):  # Compliant\r\n    print(i)\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-100",
      "type": "Code Smell",
      "summary": "Method names should comply with a naming convention",
      "description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all method names match a provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With default provided regular expression: ^<span class=\"error\">&#91;a-z_&#93;</span><span class=\"error\">&#91;a-z0-9_&#93;</span></p>\n{2,30}\n<p>$</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass:\r\n    def MyMethod(a,b):\r\n        ...\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass:\r\n    def my_method(a,b):\r\n        ...\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1481",
      "type": "Code Smell",
      "summary": "Unused local variables should be removed",
      "description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef hello(name):\r\n    message = <span class=\"code-quote\">\"Hello \"</span> + name # Noncompliant\r\n    print(name)\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef hello(name):\r\n    message = <span class=\"code-quote\">\"Hello \"</span> + name\r\n    print(message)\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1606",
      "type": "Code Smell",
      "summary": "Failed unit tests should be fixed",
      "description": "<p>Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.</p>",
      "standards": [],
      "tags": [
        "tests"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1482",
      "type": "Code Smell",
      "summary": "Branches should have sufficient coverage by unit tests",
      "description": "<p>An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.</p>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1311",
      "type": "Code Smell",
      "summary": "Classes should not be too complex",
      "description": "<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-134",
      "type": "Code Smell",
      "summary": "Control flow statements \"if\", \"for\", \"while\", \"try\" and \"with\" should not be nested too deeply",
      "description": "<p>Nested <tt>if</tt>, <tt>for</tt>, <tt>while</tt>, <tt>try</tt>, and <tt>with</tt> statements are key ingredients for making what's known as \"Spaghetti code\". Such code is hard to read, refactor and therefore maintain.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>The following code snippet illustrates this rule with the default threshold of 3.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n  <span class=\"code-keyword\">if</span> condition1:           # Compliant - depth = 1\r\n    # ...\r\n    <span class=\"code-keyword\">if</span> condition2:         # Compliant - depth = 2\r\n      # ...\r\n      <span class=\"code-keyword\">for</span> i in range(10):  # Compliant - depth = 3, not exceeding the limit\r\n        # ...\r\n        <span class=\"code-keyword\">if</span> condition4:     # Non-Compliant - depth = 4\r\n          <span class=\"code-keyword\">if</span> condition5:   # Depth = 5, exceeding the limit, but issues are only reported on depth = 4\r\n            # ...\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1541",
      "type": "Code Smell",
      "summary": "Functions should not be too complex",
      "description": "<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test thoroughly.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1483",
      "type": "Code Smell",
      "summary": "Lines should have sufficient coverage by unit tests",
      "description": "<p>An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.</p>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1717",
      "type": "Bug",
      "summary": "\"\\\" should only be used as an escape character outside of raw strings",
      "description": "<p>Typically, backslashes are seen only as part of escape sequences. Therefore, the use of a backslash outside of a raw string or escape sequence looks suspiciously like a broken escape sequence. </p>\n\n<p>Characters recognized as escape-able are: <tt>abfnrtvox\\'\"</tt></p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ns = <span class=\"code-quote\">\"Hello \\world.\"</span>\r\nt = <span class=\"code-quote\">\"Nice to \\ meet you\"</span>\r\nu = <span class=\"code-quote\">\"Let's have \\ lunch\"</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ns = <span class=\"code-quote\">\"Hello world.\"</span>\r\nt = <span class=\"code-quote\">\"Nice to \\\\ meet you\"</span>\r\nu = r<span class=\"code-quote\">\"Let's have \\ lunch\"</span>  <span class=\"code-comment\">// raw string</span>\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1720",
      "type": "Code Smell",
      "summary": "Docstrings should be defined",
      "description": "<p>A string literal that is the first statement in a module, function, class, or method is a docstring. A docstring should document what a caller needs to know about the code. Information about what it does, what it returns, and what it requires are all valid candidates for documentation. Well written docstrings allow callers to use your code without having to first read it and understand its logic.</p>\n\n<p>By convention, docstrings are enclosed in three sets of double-quotes.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef my_function(a,b):\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef my_function(a,b):\r\n      <span class=\"code-quote\">\"\"\"Do X\"</span>\"\"\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1908",
      "type": "Code Smell",
      "summary": "Files should not be too complex",
      "description": "<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-104",
      "type": "Code Smell",
      "summary": "Files should not have too many lines of code",
      "description": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those smaller files will not only be easier to understand but also probably easier to test.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1142",
      "type": "Code Smell",
      "summary": "Functions should not contain too many return statements",
      "description": "<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a return statement is encountered. This makes it harder to read and understand the logic of the function.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndef fun():          # Noncompliant as there are 4 <span class=\"code-keyword\">return</span> statements\r\n  <span class=\"code-keyword\">if</span> condition1:\r\n    <span class=\"code-keyword\">return</span> True\r\n  elif condition2:\r\n    <span class=\"code-keyword\">return</span> False\r\n  <span class=\"code-keyword\">else</span>:\r\n    <span class=\"code-keyword\">return</span> True\r\n  <span class=\"code-keyword\">return</span> False\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-103",
      "type": "Code Smell",
      "summary": "Lines should not be too long",
      "description": "<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2260",
      "type": "Code Smell",
      "summary": "Python parser failure",
      "description": "<p>When the Python parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.</p>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-122",
      "type": "Code Smell",
      "summary": "Statements should be on separate lines",
      "description": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (True): print(<span class=\"code-quote\">\"hello\"</span>)\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (True): \r\n    print(<span class=\"code-quote\">\"hello\"</span>)\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "style"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-139",
      "type": "Code Smell",
      "summary": "Comments should not be located at the end of lines of code",
      "description": "<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable. Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\na = b + c   # This is a trailing comment that can be very very <span class=\"code-object\">long</span> \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n# This very <span class=\"code-object\">long</span> comment is better placed before the line of code\r\na = b + c \r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-113",
      "type": "Code Smell",
      "summary": "Files should contain an empty newline at the end",
      "description": "<p>Some tools such as Git work better when files end with an empty line. This rule simply generates an issue if it is missing.</p>\n\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:<br/>\n&lt;pre&gt;<br/>\n+class Test:<br/>\n+    pass<br/>\n \\ No newline at end of file<br/>\n&lt;/pre&gt;</p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1131",
      "type": "Code Smell",
      "summary": "Lines should not end with trailing whitespaces",
      "description": "<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same file.</p>\n\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the opportunity to do so. </p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1129",
      "type": "Code Smell",
      "summary": "Long suffix \"L\" should be upper case",
      "description": "<p>The long suffix should always be written in uppercase, i.e. 'L', as the lowercase 'l' can easily be confused with the digit one '1'.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">return</span> 10l  <span class=\"code-comment\">// Noncompliant; easily confused with one zero one</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">return</span> 10L\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2325",
      "type": "Code Smell",
      "summary": "Methods and properties that don't access instance data should be static",
      "description": "<p>Class methods that don't access instance data can and should be static because they yield more performant code.</p>\n\n<p>To implement a static method in Python one should use either <tt>@classmethod</tt> or <tt>@staticmethod</tt>. A class method receives the class as implicit first argument, just like an instance method receives the instance. A static method does not receive an implicit first argument.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass Utilities:\r\n    def do_the_thing(self, arg1, arg2, ...):  # Noncompliant\r\n        #...\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass Utilities:\r\n    @classmethod\r\n    def do_the_thing(cls, arg1, arg2, ...):\r\n        #...\r\n</pre>\n</div></div>\n<p>or</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass Utilities:\r\n    @staticmethod\r\n    def do_the_thing(arg1, arg2, ...):\r\n        #...\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Methods which raise or may raise a <tt>NotImplementedError</tt> are ignored.</p>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1578",
      "type": "Code Smell",
      "summary": "Module names should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate effectively. For that reason, module names should conform to a defined standard.</p><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/P4IyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC09-CPP.</a> - Character encoding: Use subset of ASCII for safety</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/lQAl\" class=\"external-link\" rel=\"nofollow\">CERT, MSC09-C.</a> - Character encoding: Use subset of ASCII for safety</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1722",
      "type": "Code Smell",
      "summary": "New-style classes should be used",
      "description": "<p>The new style of class creation, with the declaration of a parent class, created a unified object model in Python, so that the type of an instantiated class is equal to its class. In Python 2.2-2.7, this is not the case for old-style classes. In Python 3+ all classes are new-style classes. However, since the behavior can differ from 2.2+ to 3+, explicitly inheriting from <tt>object</tt> (if there is no better candidate) is recommended.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass():\r\n    pass\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass(object):\r\n    pass\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "python3"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1721",
      "type": "Code Smell",
      "summary": "Parentheses should not be used after certain keywords",
      "description": "<p>Parentheses are not required after the <tt>assert</tt>, <tt>del</tt>, <tt>elif</tt>, <tt>except</tt>, <tt>for</tt>, <tt>if</tt>, <tt>in</tt>, <tt>not</tt>, <tt>raise</tt>, <tt>return</tt>, <tt>while</tt>, and <tt>yield</tt> keywords, and using them unnecessarily impairs readability. They should therefore be omitted.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nx = 1\r\n<span class=\"code-keyword\">while</span> (x &lt; 10):\r\n    print <span class=\"code-quote\">\"x is now %d\"</span> % (x)\r\n    x += 1\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nx = 1\r\n<span class=\"code-keyword\">while</span> x &lt; 10:\r\n    print <span class=\"code-quote\">\"x is now %d\"</span> % (x)\r\n    x += 1\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3424",
      "type": "Code Smell",
      "summary": "Skipped unit tests should be either removed or fixed",
      "description": "<p>Skipped unit tests are considered dead code. Either they should be activated again (and updated) or they should be removed.</p>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1707",
      "type": "Code Smell",
      "summary": "Track \"TODO\" and \"FIXME\" comments that do not contain a reference to a person",
      "description": "<p>TODO and FIXME comments are typically intended to be short-lived; they are placeholders and reminders that programmers leave for themselves. Unfortunately, even with the best of intentions, those comments are not always acted on and removed in a timely manner. Thus, they can become mysterious, lingering cruft in a code base, reducing both readability and understand-ability.</p>\n\n<p>This rule flags all FIXME and TODO comments that do not have an attribution matching the specified regular expression immediately after the FIXME or TODO. Ideally, such comments will also contain information about what needs to be fixed or done, but this rule does not enforce that.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n# TODO \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n# TODO(ganncamp) per the business partners, more checks needed\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1484",
      "type": "Code Smell",
      "summary": "Track instances of below-threshold comment line density",
      "description": "<p>An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.</p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    }
  ]
}