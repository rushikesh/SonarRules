{
  "types": {
    "Vulnerability": 33,
    "Code Smell": 299,
    "Bug": 103
  },
  "standards": {},
  "tags": [{
    "name": "convention",
    "count": 46
  }, {
    "name": "brain-overload",
    "count": 22
  }, {
    "name": "misra",
    "count": 27
  }, {
    "name": "cert",
    "count": 104
  }, {
    "name": "unused",
    "count": 23
  }, {
    "name": "clumsy",
    "count": 34
  }, {
    "name": "bad-practice",
    "count": 15
  }, {
    "name": "android",
    "count": 1
  }, {
    "name": "suspicious",
    "count": 28
  }, {
    "name": "cwe",
    "count": 65
  }, {
    "name": "design",
    "count": 8
  }, {
    "name": "confusing",
    "count": 19
  }, {
    "name": "unpredictable",
    "count": 8
  }, {
    "name": "pitfall",
    "count": 44
  }, {
    "name": "style",
    "count": 2
  }, {
    "name": "obsolete",
    "count": 7
  }, {
    "name": "error-handling",
    "count": 17
  }, {
    "name": "redundant",
    "count": 7
  }, {
    "name": "performance",
    "count": 22
  }, {
    "name": "java8",
    "count": 21
  }, {
    "name": "lock-in",
    "count": 4
  }, {
    "name": "multi-threading",
    "count": 25
  }, {
    "name": "tests",
    "count": 14
  }, {
    "name": "finding",
    "count": 5
  }, {
    "name": "i18n",
    "count": 1
  }, {
    "name": "serialization",
    "count": 9
  }, {
    "name": "owasp-a6",
    "count": 8
  }, {
    "name": "sans-top25-porous",
    "count": 8
  }, {
    "name": "owasp-a2",
    "count": 4
  }, {
    "name": "owasp-a1",
    "count": 5
  }, {
    "name": "sans-top25-insecure",
    "count": 2
  }, {
    "name": "hibernate",
    "count": 1
  }, {
    "name": "sql",
    "count": 3
  }, {
    "name": "leak",
    "count": 2
  }, {
    "name": "denial-of-service",
    "count": 3
  }, {
    "name": "api-design",
    "count": 3
  }, {
    "name": "overflow",
    "count": 1
  }, {
    "name": "sans-top25-risky",
    "count": 1
  }, {
    "name": "struts",
    "count": 3
  }, {
    "name": "spring",
    "count": 5
  }, {
    "name": "owasp-a5",
    "count": 1
  }, {
    "name": "jee",
    "count": 2
  }, {
    "name": "junit",
    "count": 1
  }, {
    "name": "owasp-a9",
    "count": 1
  }, {
    "name": "deadlock",
    "count": 1
  }, {
    "name": "injection",
    "count": 1
  }, {
    "name": "websphere",
    "count": 1
  }, {
    "name": "owasp-a7",
    "count": 1
  }, {
    "name": "maven",
    "count": 6
  }, {
    "name": "duplicate",
    "count": 1
  }],
  "rules": [{
    "summary": "Default EJB interceptors should be declared in \"ejb-jar.xml\"",
    "type": "Vulnerability",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3281",
    "tags": [],
    "description": "<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml</code> file, or they will not be treated\nas default. </p>\n<p>This rule applies to projects that contain JEE Beans (any one of <code>javax.ejb.Singleton</code>, <code>MessageDriven</code>,\n<code>Stateless</code> or <code>Stateful</code>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// file: ejb-interceptors.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;&lt;!-- Noncompliant; will not be treated as default --&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// file: ejb-jar.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>\n\n"
  }, {
    "summary": "Neither DES (Data Encryption Standard) nor DESede (3DES) should be used",
    "type": "Vulnerability",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2278",
    "tags": ["cwe", "cert", "owasp-a6", "sans-top25-porous"],
    "description": "<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>\n<blockquote>\n  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer\n  provides the security that is needed to protect federal government information.</p>\n  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>\n</blockquote>\n<p>For similar reasons, RC2 should also be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwAZAg\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE\">DES / DESede Unsafe</a> </li>\n</ul>\n\n"
  }, {
    "summary": "SQL binding mechanisms should be used",
    "type": "Vulnerability",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2077",
    "tags": ["cwe", "owasp-a1", "sans-top25-insecure", "cert", "hibernate", "sql"],
    "description": "<p>Applications that execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an\nattacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed.</p>\n<p>This rule checks a variety of methods from different frameworks which are susceptible to SQL injection if not used properly. Frameworks which are\ncovered are Java JDBC, JPA, JDO, Hibernate and Spring. The following specific method signatures are tested. </p>\n<ul>\n  <li> <code>org.hibernate.Session.createQuery</code> </li>\n  <li> <code>org.hibernate.Session.createSQLQuery</code> </li>\n  <li> <code>java.sql.Statement.executeQuery</code> </li>\n  <li> <code>java.sql.Statement.execute</code> </li>\n  <li> <code>java.sql.Statement.executeUpdate</code> </li>\n  <li> <code>java.sql.Statement.executeLargeUpdate</code> </li>\n  <li> <code>java.sql.Statement.addBatch</code> </li>\n  <li> <code>java.sql.Connection.prepareStatement</code> </li>\n  <li> <code>java.sql.Connection.prepareCall</code> </li>\n  <li> <code>java.sql.Connection.nativeSQL</code> </li>\n  <li> <code>javax.persistence.EntityManager.createNativeQuery</code> </li>\n  <li> <code>javax.persistence.EntityManager.createQuery</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.batchUpdate</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.execute</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.query</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForList</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForMap</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForObject</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForRowSet</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForInt</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForLong</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.update</code> </li>\n  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.&lt;init&gt;</code> </li>\n  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementCreator</code> </li>\n  <li> <code>javax.jdo.PersistenceManager.newQuery</code> </li>\n  <li> <code>javax.jdo.Query.setFilter</code> </li>\n  <li> <code>javax.jdo.Query.setGrouping</code> </li>\n</ul>\n<p>If a method is defined in an interface, implementations are also tested. For example this is the case for\n<code>org.springframework.jdbc.core.JdbcOperations</code> , which is usually used as <code>org.springframework.jdbc.core.JdbcTemplate</code>). </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  Statement stmt2 = null;\n  PreparedStatement pstmt;\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\"); // Compliant; parameters not used here\n\n    stmt2 = con.createStatement();\n    ResultSet rs2 = stmt2.executeQuery(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  // Noncompliant; parameter concatenated directly into query\n\n    pstmt = con.prepareStatement(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  // Noncompliant; parameter concatenated directly into query\n    ResultSet rs3 = pstmt.executeQuery();\n\n    //...\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query = session.createQuery(  // Compliant\n            \"FROM students where fname = \" + userInput);  // Noncompliant; parameter binding should be used instead\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  PreparedStatement pstmt = null;\n  String query = \"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=?\"\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\");\n\n    pstmt = con.prepareStatement(query);\n    pstmt.setString(1, user);  // Compliant; PreparedStatements escape their inputs.\n    ResultSet rs2 = pstmt.executeQuery();\n\n    //...\n  }\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query =  session.createQuery(\"FROM students where fname = ?\");\n  query = query.setParameter(0,userInput);  // Parameter binding escapes all input\n  // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/89\">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/564.html\">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/943.html\">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PgIRAg\">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rules <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>\n\n"
  }, {
    "summary": "Credentials should not be hard-coded",
    "type": "Vulnerability",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2068",
    "tags": ["cwe", "cert", "sans-top25-porous", "owasp-a2"],
    "description": "<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConnection conn = null;\ntry {\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=steve&amp;password=blue\"); // Noncompliant\n  String uname = \"steve\";\n  String password = \"blue\";\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password); // Noncompliant\n\n  java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication(\"userName\", \"1234\".toCharArray());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/798\">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/259\">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>\n\n"
  }, {
    "summary": "\"wait\" should not be called when multiple locks are held",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3046",
    "tags": ["multi-threading", "deadlock"],
    "description": "<p>When two locks are held simultaneously, a <code>wait</code> call only releases one of them. The other will be held until some other thread requests\na lock on the awaited object. If no unrelated code tries to lock on that object, then all other threads will be locked out, resulting in a\ndeadlock.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (this.mon1) {  // threadB can't enter this block to request this.mon2 lock &amp; release threadA\n\tsynchronized (this.mon2) {\n\t\tthis.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1\n\t}\n}\n</pre>\n\n"
  }, {
    "summary": "\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2695",
    "tags": ["sql"],
    "description": "<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any \"set\" method of a <code>PreparedStatement</code> with a\nnumber less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1,\nrather than 0</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "\"wait(...)\" should be used instead of \"Thread.sleep(...)\" when a lock is held",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2276",
    "tags": ["multi-threading", "performance", "cert"],
    "description": "<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance and scalability issues, or even\nworse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)</code> on the monitor object to\ntemporarily release the lock and allow other threads to run.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/FgG7AQ\">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a\n  lock </li>\n</ul>\n\n"
  }, {
    "summary": "Printf-style format strings should not lead to unexpected behavior at runtime",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2275",
    "tags": ["cert", "pitfall"],
    "description": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/e4EyAQ\">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>\n\n"
  }, {
    "summary": "Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should not be called on Thread instances",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2236",
    "tags": ["multi-threading"],
    "description": "<p>The methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available on a <code>Thread</code> instance, but only\nbecause all classes in Java extend <code>Object</code> and therefore automatically inherit those methods. But there are two very good reasons for not\ncalling them on a <code>Thread</code>:</p>\n<ul>\n  <li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling\n  them will corrupt the behavior of the JVM. </li>\n  <li> It is not clear (perhaps even to the original coder) what is really expected. For instance, it is waiting for the execution of the Thread to\n  suspended, or is it the acquisition of the object monitor that is waited for? </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n</pre>\n\n"
  }, {
    "summary": "Loops should not be infinite",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2189",
    "tags": ["cert"],
    "description": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nint j;\nwhile (true) { // Noncompliant; end condition omitted\n  j++;\n}\n\nint k;\nboolean b = true;\nwhile (b) { // Noncompliant; b never written to in loop\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint j;\nwhile (true) { // reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k &lt; Integer.MAX_VALUE;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PYHfAw\">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>\n\n"
  }, {
    "summary": "Double-checked locking should not be used",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2168",
    "tags": ["cwe", "multi-threading", "cert"],
    "description": "<p>Double-checked locking is the practice of checking a lazy-initialized object's state both before and after a <code>synchronized</code> block is\nentered to determine whether or not to initialize the object.</p>\n<p>It does not work reliably in a platform-independent manner without additional synchronization for mutable instances of anything other than\n<code>float</code> or <code>int</code>. Using double-checked locking for the lazy initialization of any other type of primitive or mutable object\nrisks a second thread using an uninitialized or partially initialized member while the first thread is still creating it, and crashing the\nprogram.</p>\n<p>There are multiple ways to fix this. The simplest one is to simply not use double checked locking at all, and synchronize the whole method instead.\nWith early versions of the JVM, synchronizing the whole method was generally advised against for performance reasons. But <code>synchronized</code>\nperformance has improved a lot in newer JVMs, so this is now a preferred solution. If you prefer to avoid using <code>synchronized</code> altogether,\nyou can use an inner <code>static class</code> to hold the reference instead. Inner static classes are guaranteed to load lazily.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@NotThreadSafe\npublic class DoubleCheckedLocking {\n    private static Resource resource;\n\n    public static Resource getInstance() {\n        if (resource == null) {\n            synchronized (DoubleCheckedLocking.class) {\n                if (resource == null)\n                    resource = new Resource();\n            }\n        }\n        return resource;\n    }\n\n    static class Resource {\n\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@ThreadSafe\npublic class SafeLazyInitialization {\n    private static Resource resource;\n\n    public synchronized static Resource getInstance() {\n        if (resource == null)\n            resource = new Resource();\n        return resource;\n    }\n\n    static class Resource {\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">The \"Double-Checked Locking is Broken\" Declaration</a> </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IgAZAg\">CERT, LCK10-J.</a> - Use a correct form of the double-checked locking idiom\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/609.html\">MITRE, CWE-609</a> - Double-checked locking </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.4\">JLS 12.4</a> - Initialization of Classes and Interfaces </li>\n</ul>\n\n"
  }, {
    "summary": "Resources should be closed",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2095",
    "tags": ["cwe", "leak", "denial-of-service", "cert"],
    "description": "<p>Connections, streams, files, and other classes that implement the <code>Closeable</code> interface or its super-interface,\n<code>AutoCloseable</code>, needs to be closed after use. Further, that <code>close</code> call must be made in a <code>finally</code> block otherwise\nan exception could keep the call from being made. Preferably, when class implements <code>AutoCloseable</code>, resource should be created using\n\"try-with-resources\" pattern and will be closed automatically.</p>\n<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it's on to\ntheir knees.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void readTheFile() throws IOException {\n  Path path = Paths.get(this.fileName);\n  BufferedReader reader = Files.newBufferedReader(path, this.charset);\n  // ...\n  reader.close();  // Noncompliant\n  // ...\n  Files.lines(\"input.txt\").forEach(System.out::println); // Noncompliant: The stream needs to be closed\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    for (String property : propertyList) {\n      stream = new FileOutputStream(\"myfile.txt\");  // Noncompliant\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();  // Multiple streams were opened. Only the last is closed.\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readTheFile(String fileName) throws IOException {\n    Path path = Paths.get(fileName);\n    try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {\n      reader.readLine();\n      // ...\n    }\n    // ..\n    try (Stream&lt;String&gt; input = Files.lines(\"input.txt\"))  {\n      input.forEach(System.out::println);\n    }\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    stream = new FileOutputStream(\"myfile.txt\");\n    for (String property : propertyList) {\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources\nstatement are ignored by this rule. </p>\n<pre>\ntry (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n  //...\n}\ncatch ( ... ) {\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gFqAQ\">CERT, FIO04-J.</a> - Release resources when they are no longer needed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/GAGQBw\">CERT, FIO42-C.</a> - Close files when they are no longer needed </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\">Try With Resources</a> </li>\n</ul>\n\n"
  }, {
    "summary": "Methods returns should not be invariant",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3516",
    "tags": [],
    "description": "<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint foo(int a) {\n  int b = 12;\n  if (a == 1) {\n    return b;\n  }\n  return b;  // Noncompliant\n}\n</pre>\n\n"
  }, {
    "summary": "\"clone\" should not be overridden",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2975",
    "tags": ["suspicious"],
    "description": "<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky\nand difficult to get right, according to Joshua Bloch:</p>\n<blockquote>\n  Object's clone method is very tricky. It's based on field copies, and it's \"extra-linguistic.\" It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and\n  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow\n  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n</blockquote>\n<p>A copy constructor or copy factory should be used instead.</p>\n<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://www.artima.com/intv/bloch13.html\">Copy Constructor versus Cloning</a> </li>\n</ul>\n<h3>See Also</h3>\n<ul>\n  <li> {rule:squid:S2157} - \"Cloneables\" should implement \"clone\" </li>\n  <li> {rule:squid:S1182} - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" </li>\n</ul>\n\n"
  }, {
    "summary": "Assertions should be complete",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2970",
    "tags": ["tests"],
    "description": "<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>\n<ul>\n  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>\n</ul>\n<p>In such cases, what is intended to be a test doesn't actually verify anything</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n</pre>\n<h2>Exceptions</h2>\n<p>Variable assignments and return statements are skipped to allow helper methods.</p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n</pre>\n\n"
  }, {
    "summary": "Silly bit operations should not be performed",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2437",
    "tags": ["suspicious"],
    "description": "<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and\n<code>anyValue | 0</code>.</p>\n\n"
  }, {
    "summary": "JUnit framework methods should be declared properly",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2391",
    "tags": ["tests"],
    "description": "<p>If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used. Such a method must be named\n\"suite\", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code> or a\n<code>junit.framework.TestSuite</code>.</p>\n<p>Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren't properly capitalized will also be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nTest suite() { ... }  // Noncompliant; must be public static\npublic static boolean suite() { ... }  // Noncompliant; wrong return type\npublic static Test suit() { ... }  // Noncompliant; typo in method name\npublic static Test suite(int count) { ... } // Noncompliant; must be no-arg\n\npublic void setup() { ... } // Noncompliant; should be setUp\npublic void tearDwon() { ... }  // Noncompliant; should be tearDown\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static Test suite() { ... }\npublic void setUp() { ... }\npublic void tearDown() { ... }\n</pre>\n\n"
  }, {
    "summary": "Child class fields should not shadow parent class fields",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2387",
    "tags": ["confusing"],
    "description": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "JUnit test cases should call super methods",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2188",
    "tags": ["tests"],
    "description": "<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding\nmethod. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3\n<code>TestCase</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  // Noncompliant\n      myClass = new MyClass();\n    }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass = new MyClass();\n    }\n</pre>\n\n"
  }, {
    "summary": "TestCases should contain tests",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2187",
    "tags": ["tests", "unused", "confusing"],
    "description": "<p>There's no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn't have a file in the tests directory with\n\"Test\" in the name, but no tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.</p>\n<p>This rule raises an issue when files in the test directory have \"Test\" in the name or implement <code>TestCase</code> but don't contain any\ntests.</p>\n\n"
  }, {
    "summary": "Short-circuit logic should be used in boolean contexts",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2178",
    "tags": ["cert"],
    "description": "<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Methods and field names should not be the same or differ only by capitalization",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1845",
    "tags": ["confusing"],
    "description": "<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.</p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.</p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} //Huh?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n</pre>\n\n"
  }, {
    "summary": "Switch cases should end with an unconditional \"break\" statement",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-128",
    "tags": ["cwe", "misra", "cert", "suspicious"],
    "description": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZoFLAQ\">CERT, MSC18-CPP.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ewHAAQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>\n\n"
  }, {
    "summary": "\"switch\" statements should not contain non-case labels",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1219",
    "tags": ["misra", "suspicious"],
    "description": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>\n\n"
  }, {
    "summary": "Future keywords should not be used as names",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1190",
    "tags": ["obsolete", "pitfall"],
    "description": "<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = \"\";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>\n\n"
  }, {
    "summary": "Defined filters should be used",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3355",
    "tags": ["owasp-a1", "injection"],
    "description": "<p>Every filter defined in <code>web.xml</code> file should be used in a <code>&lt;filter-mapping&gt;</code> element. Otherwise such filters are not\ninvoked.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n</ul>\n\n"
  }, {
    "summary": "\"File.createTempFile\" should not be used to create a directory",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2976",
    "tags": ["owasp-a9"],
    "description": "<p>Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and\ninsecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or a library function such as Guava's similarly-named\n<code>Files.createTempDir</code> should be used.</p>\n<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>\n<ul>\n  <li> call to <code>File.createTempFile</code> </li>\n  <li> delete resulting file </li>\n  <li> call <code>mkdir</code> on the File object </li>\n</ul>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile tempDir;\ntempDir = File.createTempFile(\"\", \".\");\ntempDir.delete();\ntempDir.mkdir();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath tempPath = Files.createTempDirectory(\"\");\nFile tempDir = tempPath.toFile();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities\">OWAPS Top Ten 2013 Category A9</a> - Using\n  Components with Known Vulnerabilities </li>\n</ul>\n\n"
  }, {
    "summary": "Web applications should not have a \"main\" method",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2653",
    "tags": ["cwe", "cert", "jee"],
    "description": "<p>There is no reason to have a <code>main</code> method in a web application. It may have been useful for debugging during application development,\nbut such a method should never make it into production. Having a <code>main</code> method in a web application opens a door to the application logic\nthat an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be\npresent.</p>\n<p>This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    if (userIsAuthorized(req)) {\n      updatePrices(req);\n    }\n  }\n\n  public static void main(String[] args) { // Noncompliant\n    updatePrices(req);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VoB8Bw\">CERT, ENV06-J.</a> - Production code must not contain debugging entry points\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2277",
    "tags": ["cwe", "owasp-a6", "sans-top25-porous", "owasp-a5"],
    "description": "<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an\nissue as soon as a literal value starts with <code>RSA/NONE</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/NONE/NoPadding\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/780.html\">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration\">OWASP Top Ten 2013 Category A5</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING\">RSA NoPadding Unsafe</a> </li>\n</ul>\n\n"
  }, {
    "summary": "\"HttpServletRequest.getRequestedSessionId()\" should not be used",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2254",
    "tags": ["cwe", "sans-top25-porous", "owasp-a2"],
    "description": "<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>\n<blockquote>\n  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client\n  did not specify a session ID, this method returns null.</p>\n</blockquote>\n<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually\nupdating the value of this session ID in the HTTP request. </p>\n<p>Here is an example of a updated HTTP header:</p>\n<pre>\nGET /pageSomeWhere HTTP/1.1\nHost: webSite.com\nUser-Agent: Mozilla/5.0\nCookie: JSESSIONID=Hacked_Session_Value'''\"&gt;\n</pre>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G.\nTomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated.\nMoreover, this session ID should never be logged to prevent hijacking of active sessions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(isActiveSession(request.getRequestedSessionId()) ){\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/807\">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SERVLET_SESSION_ID\">Untrusted Session Cookie Value</a>\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Zero should not be a possible denominator",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3518",
    "tags": ["cwe", "denial-of-service", "cert"],
    "description": "<p>If the denominator to a division or modulo operation is zero it would result in a fatal error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n  }\n  z = 1 / z; // Noncompliant, possible division by zero\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n    z = 1;\n  }\n  z = 1 / z;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/369.html\">MITRE, CWE-369</a> - Divide by zero </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KAGyAw\">CERT, NUM02-J.</a> - Ensure that division and remainder operations do not\n  result in divide-by-zero errors </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/cAI\">CERT, INT33-C.</a> - Ensure that division and remainder operations do not result\n  in divide-by-zero errors </li>\n</ul>\n\n"
  }, {
    "summary": "Dependencies should not have \"system\" scope",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3422",
    "tags": ["maven", "lock-in"],
    "description": "<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact\nin an environment that's not configured just like yours is, your code won't work. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>\n\n"
  }, {
    "summary": "Locks should be released",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2222",
    "tags": ["cwe", "multi-threading"],
    "description": "<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>\n<p>Failing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    lock.lock(); // Noncompliant\n    if (isInitialized()) {\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    if (isInitialized()) {\n      lock.lock();\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>\n\n"
  }, {
    "summary": "\"runFinalizersOnExit\" should not be called",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2151",
    "tags": ["cert"],
    "description": "<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and\n<code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>\n<p>According to the Oracle Javadoc:</p>\n<blockquote>\n  <p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic\n  behavior or deadlock.</p>\n</blockquote>\n<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String [] args) {\n  ...\n  System.runFinalizersOnExit(true);  // Noncompliant\n  ...\n}\n\nprotected void finalize(){\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String [] args) {\n  Runtime.addShutdownHook(new Runnable() {\n    public void run(){\n      doSomething();\n    }\n  });\n  //...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>\n\n"
  }, {
    "summary": "\"ScheduledThreadPoolExecutor\" should not have 0 core threads",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2122",
    "tags": [],
    "description": "<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>'s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code>\nto zero means the executor will have no threads and run nothing.</p>\n<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void do(){\n\n  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant\n\n  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);\n  stpe2.setCorePoolSize(0);  // Noncompliant\n</pre>\n\n"
  }, {
    "summary": "The signature of \"finalize()\" should match that of \"Object.finalize()\"",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1175",
    "tags": ["pitfall"],
    "description": "<p><code>Object.finalize()</code> is called by the Garbage Collector at some point after the object becomes unreferenced.</p>\n<p>In general, overloading <code>Object.finalize()</code> is a bad idea because:</p>\n<ul>\n  <li> The overload may not be called by the Garbage Collector. </li>\n  <li> Users are not expected to call <code>Object.finalize()</code> and will get confused. </li>\n</ul>\n<p>But beyond that it's a terrible idea to name a method \"finalize\" if it doesn't actually override <code>Object.finalize()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>\n\n"
  }, {
    "summary": "\"super.finalize()\" should be called at the end of \"Object.finalize()\" implementations",
    "type": "Bug",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1114",
    "tags": ["cwe", "cert"],
    "description": "<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/568.html\">MITRE, CWE-568</a> - finalize() Method Without super.finalize() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>\n\n"
  }, {
    "summary": "Conditionals should start on new lines",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3972",
    "tags": ["suspicious"],
    "description": "<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding\n<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>\n\n"
  }, {
    "summary": "Cognitive Complexity of methods should not be too high",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3776",
    "tags": ["brain-overload"],
    "description": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>\n\n"
  }, {
    "summary": "Instance methods should not write to \"static\" fields",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2696",
    "tags": ["multi-threading"],
    "description": "<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>\nmethods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "\"indexOf\" checks should not be for positive numbers",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2692",
    "tags": ["suspicious"],
    "description": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "Method overrides should not change contracts",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2638",
    "tags": ["suspicious"],
    "description": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>\n\n"
  }, {
    "summary": "Null should not be returned from a \"Boolean\" method",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2447",
    "tags": ["cwe", "cert", "pitfall"],
    "description": "<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and\n<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Classes should not access their own subclasses during initialization",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2390",
    "tags": ["cert"],
    "description": "<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child\nclass might not have been initialized yet. This could create what is known as an \"initialisation cycle\", or even a deadlock in some extreme cases.</p>\n<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  static int field1 = Child.method(); // Noncompliant\n  static int field2 = 42;\n\n  public static void main(String[] args) {\n    System.out.println(Parent.field1); // will display \"0\" instead of \"42\"\n  }\n}\n\nclass Child extends Parent {\n  static int method() {\n    return Parent.field2;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>\n\n"
  }, {
    "summary": "\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2274",
    "tags": ["multi-threading", "cert"],
    "description": "<p>According to the documentation of the Java <code>Condition</code> interface:</p>\n<blockquote>\n  <p>When waiting upon a <code>Condition</code>, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.</p>\n</blockquote>\n<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>\n<blockquote>\n  <p>waits should always occur in loops, like this one:</p>\n  <pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   //the thread can wake up even if the condition is still false\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9QIhAQ\">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop\n  </li>\n</ul>\n\n"
  }, {
    "summary": "IllegalMonitorStateException should not be caught",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2235",
    "tags": ["multi-threading"],
    "description": "<p>According to Oracle Javadoc:</p>\n<blockquote>\n  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting\n  on an object's monitor without owning the specified monitor.</p>\n</blockquote>\n<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and\n<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "JUnit assertions should not be used in \"run\" methods",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2186",
    "tags": ["tests"],
    "description": "<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in\n<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the\ntest won't fail.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run() {\n  // ...\n  Assert.assertEquals(expected, actual);  // Noncompliant\n}\n</pre>\n\n"
  }, {
    "summary": "Class names should not shadow interfaces or superclasses",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2176",
    "tags": ["pitfall"],
    "description": "<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>\n\n"
  }, {
    "summary": "\"Cloneables\" should implement \"clone\"",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2157",
    "tags": ["convention", "api-design"],
    "description": "<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While\nthe <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.\nOtherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.\nwithout overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>\n<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a\nclass to be copied.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Team implements Cloneable {  // Noncompliant\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Team implements Cloneable {\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() {\n    Team clone = (Team) super.clone();\n    //...\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Try-with-resources should be used",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2093",
    "tags": ["java8", "cert", "pitfall"],
    "description": "<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer\nto bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>\n<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFileReader fr = null;\nBufferedReader br = null;\ntry {\n  fr = new FileReader(fileName);\n  br = new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n} finally {\n  if (br != null) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n  if (fr != null ) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (\n    FileReader fr = new FileReader(fileName);\n    BufferedReader br = new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<p>or</p>\n<pre>\ntry (BufferedReader br =\n        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don't want to\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/MACfBg\">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle\n  closeable resources </li>\n</ul>\n\n"
  }, {
    "summary": "\"readResolve\" methods should be inheritable",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2062",
    "tags": ["pitfall"],
    "description": "<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement\n<code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private Object readResolve() throws ObjectStreamException  // Noncompliant\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {  // No access to parent's readResolve() method\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {\n  //...\n}\n</pre>\n\n"
  }, {
    "summary": "\"for\" loop increment clauses should modify the loops' counters",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1994",
    "tags": ["confusing"],
    "description": "<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) {  // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or</p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>\n\n"
  }, {
    "summary": "Fields in a \"Serializable\" class should either be transient or serializable",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1948",
    "tags": ["cwe", "serialization"],
    "description": "<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. </p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they\ncould be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn't serializable\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/594.html\">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>\n  <li> <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Oracle Java 6, Serializable</a> </li>\n  <li> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">Oracle Java 7, Serializable</a> </li>\n</ul>\n\n"
  }, {
    "summary": "Package declaration should match source file directory",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1598",
    "tags": ["pitfall"],
    "description": "<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java\nfile located at \"src/org/sonarqube/Foo.java\" should have a package of \"org.sonarqube\". </p>\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the\n\"com.apple\" package, which could degrade the maintainability of both the class and its application.</p>\n\n"
  }, {
    "summary": "Generic wildcard types should not be used in return parameters",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1452",
    "tags": ["pitfall"],
    "description": "<p>Using a wildcard as a return type implicitly means that the return value should be considered read-only, but without any way to enforce this\ncontract. </p>\n<p>Let's take the example of method returning a \"List&lt;? extends Animal&gt;\". Is it possible on this list to add a Dog, a Cat, ... we simply don't\nknow. The consumer of a method should not have to deal with such disruptive questions. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n</pre>\n\n"
  }, {
    "summary": "\"switch\" statements should end with \"default\" clauses",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-131",
    "tags": ["cwe", "misra", "cert"],
    "description": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,\nthen no <code>default</code> clause is expected.</p>\n<p>Example:</p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n</ul>\n\n"
  }, {
    "summary": "Execution of the Garbage Collector should be triggered only by the JVM",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1215",
    "tags": ["unpredictable", "bad-practice"],
    "description": "<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>\n<ul>\n  <li> Will the whole application be frozen during the call? </li>\n  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>\n  <li> Will the JVM simply ignore the call? </li>\n  <li> ... </li>\n</ul>\n<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector should\nbe left exclusively to the JVM.</p>\n\n"
  }, {
    "summary": "Constants should not be defined in interfaces",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1214",
    "tags": ["bad-practice"],
    "description": "<p>According to Joshua Bloch, author of \"Effective Java\":</p>\n<blockquote>\n  <p>The constant interface pattern is a poor use of interfaces. </p>\n  <p>That a class uses some constants internally is an implementation detail.</p>\n  <p>Implementing a constant interface causes this implementation detail to leak into the class's exported API. It is of no consequence to the users\n  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future\n  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.\n  If a nonfinal class implements a constant interface,</p>\n  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface Status {                      // Noncompliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n</pre>\n<p>or</p>\n<pre>\npublic final class Status {             // Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n</pre>\n\n"
  }, {
    "summary": "String literals should not be duplicated",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1192",
    "tags": ["design"],
    "description": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\"'\" + a + \"'\");               // Compliant - literal \"'\" has less than 5 characters and is excluded\n  return \"\";                                       // Compliant - literal \"\" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>\n\n"
  }, {
    "summary": "Methods should not be empty",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1186",
    "tags": ["suspicious"],
    "description": "<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.</p>\n<pre>\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "\"Object.finalize()\" should remain protected (versus public) when overriding",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1174",
    "tags": ["cwe", "cert"],
    "description": "<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/583.html\">MITRE, CWE-583</a> - finalize() Method Declared Public </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>\n\n"
  }, {
    "summary": "Exceptions should not be thrown in finally blocks",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1163",
    "tags": ["error-handling", "cert", "suspicious"],
    "description": "<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>\nblock, and the masked's exception message and stack trace will be lost.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/soUbAQ\">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Constant names should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-115",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>\n\n"
  }, {
    "summary": "The Object.finalize() method should not be overriden",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1113",
    "tags": ["unpredictable", "cert"],
    "description": "<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to\nthe object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be\nfew microseconds to few minutes later. So when system resources need to be disposed by an object, it's better to not rely on this asynchronous\nmechanism to dispose them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    // Noncompliant\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>\n\n"
  }, {
    "summary": "Assignments should not be redundant",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-4165",
    "tags": ["redundant"],
    "description": "<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in\nassigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>\n<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b;\nc = a;\nb = c; // Noncompliant: c and b are already the same\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = b;\nc = a;\n</pre>\n\n"
  }, {
    "summary": "Map values should not be replaced unconditionally",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-4143",
    "tags": ["suspicious"],
    "description": "<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nletters.put(\"a\", \"Apple\");\nletters.put(\"a\", \"Boy\");  // Noncompliant\n\ntowns[i] = \"London\";\ntowns[i] = \"Chicago\";  // Noncompliant\n</pre>\n\n"
  }, {
    "summary": "Week Year (\"YYYY\") should not be used for date formatting",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3986",
    "tags": ["suspicious"],
    "description": "<p>Few developers are aware of the difference between <code>Y</code> for \"Week year\" and <code>y</code> for Year when formatting and parsing a date\nwith <code>SimpleDateFormat</code>. That's likely because for most dates, Week year and Year are the same, so testing at any time other than the first\nor last week of the year will yield the same value for both <code>y</code> and <code>Y</code>. But in the last week of December and the first week of\nJanuary, you may get unexpected results.</p>\n<p>According to the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year\">Javadoc</a>:</p>\n<blockquote>\n  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.\n  Therefore, the first and last days of a week year may have different calendar year values.</p>\n  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible\n  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar\n  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three\n  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY/MM/dd\").format(date);   //Noncompliant; yields '2016/12/31'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"yyyy/MM/dd\").format(date);   //Yields '2015/12/31' as expected\n</pre>\n<h2>Exceptions</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY-ww\").format(date);  //compliant, 'Week year' is used along with 'Week of year'. result = '2016-01'\n</pre>\n\n"
  }, {
    "summary": "Exception should not be created without being thrown ",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3984",
    "tags": [],
    "description": "<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n\n"
  }, {
    "summary": "Collection sizes and array length comparisons should make sense",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3981",
    "tags": [],
    "description": "<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myList.size() &gt;= 0) { ... }\n\nif (myList.size() &lt; 0) { ... }\n\nboolean result = myArray.length &gt;= 0;\n\nif (0 &gt; myArray.length) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (!myList.isEmpty()) { ... }\n\nif (myArray.length &gt;= 42) { ... }\n</pre>\n\n"
  }, {
    "summary": "Consumed Stream pipelines should not be reused",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3959",
    "tags": ["java8"],
    "description": "<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is\nperformed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == RED);\nint sum1 = pipeline.sum();\nint sum2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>\n\n"
  }, {
    "summary": "Intermediate Stream methods should not be left unused",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3958",
    "tags": ["java8"],
    "description": "<p>There are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something\nother than a stream. Intermediate operations are lazy, meaning they aren't actually executed until and unless a terminal stream operation is performed\non their results. Consequently if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is\nalmost certainly an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nwidgets.stream().filter(b -&gt; b.getColor() == RED); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint sum = widgets.stream()\n                      .filter(b -&gt; b.getColor() == RED)\n                      .mapToInt(b -&gt; b.getWeight())\n                      .sum();\nStream&lt;Widget&gt; pipeline = widgets.stream()\n                                 .filter(b -&gt; b.getColor() == GREEN)\n                                 .mapToInt(b -&gt; b.getWeight());\nsum = pipeline.sum();\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>\n\n"
  }, {
    "summary": "All branches in a conditional structure should not have exactly the same implementation",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3923",
    "tags": [],
    "description": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n\n"
  }, {
    "summary": "Optional value should only be accessed after calling isPresent()",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3655",
    "tags": ["cwe"],
    "description": "<p><code>Optional</code> value can hold either a value or not. The value held in the <code>Optional</code> can be accessed using the\n<code>get()</code> method, but it will throw a </p>\n<p><code>NoSuchElementException</code> if there is no value present. To avoid the exception, calling the <code>isPresent()</code> method should always\nbe done before any call to <code>get()</code>.</p>\n<p>Alternatively, note that other methods such as <code>orElse(...)</code>, <code>orElseGet(...)</code> or <code>orElseThrow(...)</code> can be used\nto specify what to do with an empty <code>Optional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.get(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nif (value.isPresent()) {\n  String stringValue = value.get();\n}\n</pre>\n<p>or</p>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.orElse(\"default\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n</ul>\n\n"
  }, {
    "summary": "\"SingleConnectionFactory\" instances should be set to \"reconnectOnException\"",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3438",
    "tags": ["spring"],
    "description": "<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic\nconnection recovery when the connection goes bad. </p>\n<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this\nconnection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the\n<code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing\nanything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\" p:reconnectOnException=\"true\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<p>or</p>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n   &lt;property name=\"reconnectOnException\"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;\n &lt;/bean&gt;\n</pre>\n\n"
  }, {
    "summary": "Value-based classes should not be used for locking",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3436",
    "tags": ["multi-threading", "java8", "lock-in"],
    "description": "<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization...\n</blockquote>\n<p>This is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to\n<code>struct</code>s in other languages) that will come in future versions of Java.</p>\n<blockquote>\n  <p> Instances of a value-based class ... </p>\n  <ul>\n    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no committment as to the identity of\n    returned instances; </li>\n  </ul>\n</blockquote>\n<p>Which means that you can't be sure you're the only one trying to lock on any given instance of a value-based class, opening your code up to\ncontention and deadlock issues.</p>\n<p>Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.</p>\n<p>This rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the <code>java.time</code>\npackage except <code>Clock</code>; the date classes for alternate calendars, <code>HijrahDate</code>, <code>JapaneseDate</code>,\n<code>MinguoDate</code>, <code>ThaiBuddhistDate</code>; and the optional classes: <code>Optional</code>, <code>OptionalDouble</code>,\n<code>OptionalLong</code>, <code>OptionalInt</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;Foo&gt; fOpt = doSomething();\nsynchronized (fOpt) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>\n\n"
  }, {
    "summary": "Expressions used in \"assert\" should not produce side effects",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3346",
    "tags": ["cert"],
    "description": "<p>Since <code>assert</code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their\nexecution the evaluation of any logic required for correct program function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassert myList.remove(myList.get(0));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/vwG7AQ\">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side\n  effects </li>\n</ul>\n\n"
  }, {
    "summary": "\"getClass\" should not be used for synchronization",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3067",
    "tags": ["multi-threading", "cert"],
    "description": "<p><code>getClass</code> should not be used for synchronization in non-<code>final</code> classes because child classes will synchronize on a\ndifferent object than the parent or each other, allowing multiple threads into the code block at once, despite the <code>synchronized</code>\nkeyword.</p>\n<p>Instead, hard code the name of the class on which to synchronize or make the class <code>final</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (this.getClass()) {  // Noncompliant\n      // ...\n    }\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (MyClass.class) {\n      // ...\n    }\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/bwCaAg\">CERT, LCK02-J.</a> - Do not synchronize on the class object returned by\n  getClass() </li>\n</ul>\n\n"
  }, {
    "summary": "Raw byte values should not be used in bitwise operations in combination with shifts",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3034",
    "tags": ["cert"],
    "description": "<p>When reading bytes in order to build other primitive values such as <code>int</code>s or <code>long</code>s, the <code>byte</code> values are\nautomatically promoted, but that promotion can have unexpected results.</p>\n<p>For instance, the binary representation of the integer 640 is <code>0b0000_0010_1000_0000</code>, which can also be written with the array of\n(unsigned) bytes <code>[2, 128]</code>. However, since Java uses two's complement, the representation of the integer in signed bytes will be <code>[2,\n-128]</code> (because the <code>byte</code> <code>0b1000_0000</code> is promoted to the <code>int</code>\n<code>0b1111_1111_1111_1111_1111_1111_1000_0000</code>). Consequently, trying to reconstruct the initial integer by shifting and adding the values of\nthe bytes without taking care of the sign will not produce the expected result. </p>\n<p>To prevent such accidental value conversion, use bitwise and (<code>&amp;</code>) to combine the <code>byte</code> value with <code>0xff</code>\n(255) and turn all the higher bits back off.</p>\n<p>This rule raises an issue any time a <code>byte</code> value is used as an operand without <code>&amp; 0xff</code>, when combined with shifts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | readByte(); // Noncompliant\n    }\n    return result;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | (readByte() &amp; 0xff);\n    }\n    return result;\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SAHEAw\">CERT, NUM52-J.</a> - Be aware of numeric promotion behavior </li>\n</ul>\n\n"
  }, {
    "summary": "Getters and setters should be synchronized in pairs",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2886",
    "tags": ["multi-threading", "cert"],
    "description": "<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may\nresult in inconsistent behavior at runtime as callers access an inconsistent method state.</p>\n<p>This rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  // Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  // Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/I4BoAg\">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable\n  objects </li>\n</ul>\n\n"
  }, {
    "summary": "Non-thread-safe fields should not be static",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2885",
    "tags": ["multi-threading"],
    "description": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>\n\n"
  }, {
    "summary": "\"null\" should not be used with \"Optional\"",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2789",
    "tags": ["java8"],
    "description": "<p>The concept of <code>Optional</code> is that it will be used when <code>null</code> could cause errors. In a way, it replaces <code>null</code>,\nand when <code>Optional</code> is in use, there should never be a question of returning or receiving <code>null</code> from a call.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  if (optional != null) {  // Noncompliant\n    // do something with optional...\n  }\n}\n\n@Nullable // Noncompliant\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  optional.ifPresent(\n    // do something with optional...\n  );\n}\n\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return Optional.empty();\n}\n</pre>\n\n"
  }, {
    "summary": "\"=+\" should not be used instead of \"+=\"",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2757",
    "tags": [],
    "description": "<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>\n\n"
  }, {
    "summary": "\"read\" and \"readLine\" return values should be used",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2677",
    "tags": [],
    "description": "<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of\naction is surely a bug.</p>\n<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>,\n<code>Reader.read()</code>, and these methods in any child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    while (buffReader.readLine() != null) { // Noncompliant\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Inappropriate regular expressions should not be used",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2639",
    "tags": [],
    "description": "<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>\n<p>The following should not be used as regular expressions:</p>\n<ul>\n  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>\n  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>\n  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"/File|Name.txt\";\n\nString clean = str.replaceAll(\".\",\"\"); // Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll(\"|\",\"_\"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,\"\"); // Noncompliant; exception on Windows\n</pre>\n\n"
  }, {
    "summary": "Conditionally executed blocks should be reachable",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2583",
    "tags": ["cwe", "misra", "cert", "unused", "pitfall"],
    "description": "<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "\"notifyAll\" should be used",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2446",
    "tags": ["multi-threading", "cert"],
    "description": "<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code>\nrouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notify();  // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notifyAll();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OoAlAQ\">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Blocks should be synchronized on \"private final\" fields",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2445",
    "tags": ["cwe", "multi-threading", "cert"],
    "description": "<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code>\nfield makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread,\nsynchronized on the new value, to enter the block at the same time.</p>\n<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object\ninstances in to the method as parameters, completely undermining the synchronization.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate String color = \"red\";\n\nprivate void doSomething(){\n  synchronized(color) {  // Noncompliant; lock is actually on object instance \"red\" referred to by the color variable\n    //...\n    color = \"green\"; // other threads now allowed into this block\n    // ...\n  }\n  synchronized(new Object()) { // Noncompliant this is a no-op.\n     // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate String color = \"red\";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = \"green\";\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/412.html\">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/413\">MITRE, CWE-413</a> - Improper Resource Locking </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/6IEzAg\">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that\n  may interact with untrusted code </li>\n</ul>\n\n"
  }, {
    "summary": "Non-serializable objects should not be stored in \"HttpSession\" objects",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2441",
    "tags": ["cwe"],
    "description": "<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not\nseem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use\nin a process called \"passivation\". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such\nsessions at startup.</p>\n<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be\nserialized, and understand that if you've stored non-serializable objects in the session, errors will result. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\n//...\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  // Noncompliant; Address isn't serializable\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/579.html\">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session\n  </li>\n</ul>\n\n"
  }, {
    "summary": "\"wait\", \"notify\" and \"notifyAll\" should only be called when a lock is obviously held on an object",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2273",
    "tags": ["multi-threading"],
    "description": "<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a\nthread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule\nreinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    obj.wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<p>or</p>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void removeElement() {\n  synchronized(obj) {\n    while (!suitableCondition()){\n      obj.wait();\n    }\n    ... // Perform removal\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nprivate synchronized void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>\n\n"
  }, {
    "summary": "Null pointers should not be dereferenced",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2259",
    "tags": ["cwe", "cert"],
    "description": "<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a\nhref=\"https://jcp.org/en/jsr/detail?id=305\">JSR-305</a> to understand which values are and are not nullable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nString getName(){...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked\n}\n</pre>\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry{\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n\n}catch(Exception e){\n  e.printStackTrace();\n}finally{\n  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close();  // Noncompliant; conn could be null if an exception was thrown\n}\n</pre>\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic  void append(@CheckForNull Color color) {\n    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n</pre>\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println(\"Unable to apply color \" + color.toString());  // Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PAw\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Loop conditions should be true at least once",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2252",
    "tags": [],
    "description": "<p>If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always\nbugs, particularly when the initial value and stop conditions are hard-coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  // Noncompliant\n  // ...\n</pre>\n\n"
  }, {
    "summary": "A \"for\" loop update clause should move the counter in the right direction",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2251",
    "tags": ["cert"],
    "description": "<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    //...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    //...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zYEzAg\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>\n\n"
  }, {
    "summary": "Non-public methods should not be \"@Transactional\"",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2230",
    "tags": ["spring"],
    "description": "<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't \"see\" non-<code>public</code>\nmethods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a <code>private</code> method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the\nmethod is actually written to be <code>@Transactional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "Servlets should not have mutable instance fields",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2226",
    "tags": ["multi-threading", "struts", "cert"],
    "description": "<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to\nprocess this request. So all threads are sharing the servlet instances and by extension instance fields. To prevent any misunderstanding and\nunexpected behavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently\n  ...\n}\n</pre>\n<p>or </p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  //Same reason\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYBUC\">CERT, MSC11-J.</a> - Do not let session information leak within a servlet </li>\n</ul>\n\n"
  }, {
    "summary": "\"toString()\" and \"clone()\" methods should not return null",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2225",
    "tags": ["cwe", "cert"],
    "description": "<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code>\ninstead contravenes the method's implicit contract.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return null; // Noncompliant\n  } else {\n    // ...\n {code}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return \"\";\n  } else {\n    // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>\n\n"
  }, {
    "summary": "\".equals()\" should not be used to test the values of \"Atomic\" classes",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2204",
    "tags": ["multi-threading"],
    "description": "<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and\n<code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free,\nthread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be \"equal\" to itself. Instead, you should\n<code>.get()</code> the value and make comparisons on it.</p>\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and\n<code>AtomicBoolean</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n</pre>\n\n"
  }, {
    "summary": "Return values from functions without side effects should not be ignored",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2201",
    "tags": ["misra", "cert"],
    "description": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on the following predefined list of immutable classes in the Java API\n:</p>\n<ul>\n  <li> <code>java.lang.String</code> </li>\n  <li> <code>java.lang.Boolean</code> </li>\n  <li> <code>java.lang.Integer</code> </li>\n  <li> <code>java.lang.Double</code> </li>\n  <li> <code>java.lang.Float</code> </li>\n  <li> <code>java.lang.Byte</code> </li>\n  <li> <code>java.lang.Character</code> </li>\n  <li> <code>java.lang.Short</code> </li>\n  <li> <code>java.lang.StackTraceElement</code> </li>\n  <li> <code>java.time.DayOfWeek</code> </li>\n  <li> <code>java.time.Duration</code> </li>\n  <li> <code>java.time.Instant</code> </li>\n  <li> <code>java.time.LocalDate</code> </li>\n  <li> <code>java.time.LocalDateTime</code> </li>\n  <li> <code>java.time.LocalTime</code> </li>\n  <li> <code>java.time.Month</code> </li>\n  <li> <code>java.time.MonthDay</code> </li>\n  <li> <code>java.time.OffsetDateTime</code> </li>\n  <li> <code>java.time.OffsetTime</code> </li>\n  <li> <code>java.time.Period</code> </li>\n  <li> <code>java.time.Year</code> </li>\n  <li> <code>java.time.YearMonth</code> </li>\n  <li> <code>java.time.ZonedDateTime</code> </li>\n  <li> <code>java.math.BigInteger</code> </li>\n  <li> <code>java.math.BigDecimal</code> </li>\n  <li> <code>java.util.Optional</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>\n\n"
  }, {
    "summary": "Child class methods named for parent class methods should be overrides",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2177",
    "tags": ["pitfall"],
    "description": "<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that's not the case\nwhen:</p>\n<ul>\n  <li> the parent class method is <code>static</code> and the child class method is not. </li>\n  <li> the arguments or return types of the child method are in different packages than those of the parent method. </li>\n  <li> the parent class method is <code>private</code>. </li>\n</ul>\n<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent\ndeclaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then\nthe method should be renamed to prevent confusion. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport fruit.Pear;\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // Noncompliant; this is not an override\n    // ...\n  }\n\n\n  public void doSomethingElse() {  // Noncompliant; parent method is static\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport computer.Pear;  // import corrected\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // true override (see import)\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Inappropriate \"Collection\" calls should not be made",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2175",
    "tags": ["cert"],
    "description": "<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>\n\n"
  }, {
    "summary": "Silly equality checks should not be made",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2159",
    "tags": ["cert", "unused"],
    "description": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>\n\n"
  }, {
    "summary": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2154",
    "tags": [],
    "description": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>\n\n"
  }, {
    "summary": "\"InterruptedException\" should not be ignored",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2142",
    "tags": ["cwe", "multi-threading"],
    "description": "<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as \"ignoring\". The\nthrowing of the <code>InterruptedException</code> clears the interrupted state of the Thread, so if the exception is not handled properly the fact\nthat the thread was interrupted will be lost. Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up\nthe method's state - or the thread should be re-interrupted by calling <code>Thread.interrupt()</code> even if this is supposed to be a\nsingle-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -\nprobably without finishing its task.</p>\n<p>Similarly, the <code>ThreadDeath</code> exception should also be propagated. According to its JavaDoc:</p>\n<blockquote>\n  <p>If <code>ThreadDeath</code> is caught by a method, it is important that it be rethrown so that the thread actually dies.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    // Restore interrupted state...\n    Thread.currentThread().interrupt();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/391.html\">MITRE, CWE-391</a> - Unchecked Error Condition </li>\n  <li> <a href=\"https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1\">Dealing with InterruptedException</a> </li>\n</ul>\n\n"
  }, {
    "summary": "Classes extending java.lang.Thread should override the \"run\" method",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2134",
    "tags": ["multi-threading", "pitfall"],
    "description": "<p>According to the Java API documentation:</p>\n<blockquote>\n  <p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the\n  run method of class Thread. An instance of the subclass can then be allocated and started...</p>\n  <p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An\n  instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>\n</blockquote>\n<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn't make sense, and implies that the contract of the\n<code>Thread</code> class is not well understood.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyRunner extends Thread { // Noncompliant; run method not overridden\n\n  public void doSometing() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If <code>run()</code> is not overridden in a class extending <code>Thread</code>, it means that starting the thread will actually call\n<code>Thread.run()</code>. However, <code>Thread.run()</code> does nothing if it has not been fed with a target <code>Runnable</code>. The rule\nconsequently ignore classes extending <code>Thread</code> if they are calling, in their constructors, the <code>super(...)</code> constructor with a\nproper <code>Runnable</code> target.</p>\n<pre>\nclass MyThread extends Thread { // Compliant - calling super constructor with a Runnable\n  MyThread(Runnable target) {\n    super(target); // calling super constructor with a Runnable, which will be used for when Thread.run() is executed\n    // ...\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "\"Double.longBitsToDouble\" should not be used for \"int\"",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2127",
    "tags": [],
    "description": "<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the\nmathematical conversion into a <code>double</code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as\nif a child were trying to use an adult's gloves.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 42;\ndouble d = Double.longBitsToDouble(i);  // Noncompliant\n</pre>\n\n"
  }, {
    "summary": "Values should not be uselessly incremented",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2123",
    "tags": ["unused"],
    "description": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n</pre>\n\n"
  }, {
    "summary": "Non-serializable classes should not be written",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2118",
    "tags": ["serialization"],
    "description": "<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown.\nOnly a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Vegetable {  // neither implements Serializable nor extends a class that does\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  // Noncompliant. Nothing will be written\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Vegetable implements Serializable {  // can now be serialized\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "\"hashCode\" and \"toString\" should not be called on array instances",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2116",
    "tags": [],
    "description": "<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's\n\"identity hash code\", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents.\nInstead, you should pass the array to the relevant static <code>Arrays</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); // Noncompliant\n    int argHash = args.hashCode(); // Noncompliant\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n</pre>\n\n"
  }, {
    "summary": "Collections should not be passed as arguments to their own methods",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2114",
    "tags": [],
    "description": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>\n\n"
  }, {
    "summary": "\"BigDecimal(double)\" should not be used",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2111",
    "tags": ["cert"],
    "description": "<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)\">the JavaDocs</a>:</p>\n<blockquote>\n  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which\n  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to\n  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\n  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances\n  notwithstanding.\n</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the\nconstructor that takes a <code>String</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = new BigDecimal(\"1.1\"); // using String constructor will result in precise value\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQAVAg\">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point\n  literals </li>\n</ul>\n\n"
  }, {
    "summary": "Invalid \"Date\" values should not be used",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2110",
    "tags": [],
    "description": "<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month\nstarts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12\nfor month, and you'll get January of the following year.</p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and\n<code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Field</th>\n      <th>Valid</th>\n    </tr>\n    <tr>\n      <td>month</td>\n      <td>0-11</td>\n    </tr>\n    <tr>\n      <td>date (day)</td>\n      <td>0-31</td>\n    </tr>\n    <tr>\n      <td>hour</td>\n      <td>0-23</td>\n    </tr>\n    <tr>\n      <td>minute</td>\n      <td>0-60</td>\n    </tr>\n    <tr>\n      <td>second</td>\n      <td>0-61</td>\n    </tr>\n  </tbody>\n</table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "Reflection should not be used to check non-runtime annotations",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2109",
    "tags": [],
    "description": "<p>The writer of an annotation can set one of three retention policies for it:</p>\n<ul>\n  <li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>,\n  <code>@SuppressWarnings</code>. </li>\n  <li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the\n  default. </li>\n  <li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM. </li>\n</ul>\n<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any\nother retention policy is simply an error, since the test will always return false.</p>\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMethod m = String.class.getMethod(\"getBytes\", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code\n</pre>\n\n"
  }, {
    "summary": "Custom serialization method signatures should meet requirements",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2061",
    "tags": ["cert"],
    "description": "<p>Writers of <code>Serializable</code> classes can choose to let Java's automatic mechanisms handle serialization and deserialization, or they can\nchoose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they\nwill be ignored and the default serialization mechanisms will kick back in. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  void writeObject(java.io.ObjectOutputStream out)// Noncompliant; not private\n        throws IOException\n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n  {...}\n\n  public void readObjectNoData()  // Noncompliant; not private\n  {...}\n\n  static Object readResolve() throws ObjectStreamException  // Noncompliant; this method may have any access modifier, may not be static\n\n  Watermelon writeReplace() throws ObjectStreamException // Noncompliant; this method may have any access modifier, but must return Object\n  {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  private void writeObject(java.io.ObjectOutputStream out)\n        throws IOException\n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n        throws IOException, ClassNotFoundException\n  {...}\n\n  private void readObjectNoData()\n        throws ObjectStreamException\n  {...}\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  private Object writeReplace() throws ObjectStreamException\n  {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/4gAMAg\">CERT, SER01-J.</a> - Do not deviate from the proper signatures of serialization\n  methods </li>\n</ul>\n\n"
  }, {
    "summary": "\"Externalizable\" classes should have no-arguments constructors",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2060",
    "tags": [],
    "description": "<p>An <code>Externalizable</code> class is one which handles its own <code>Serialization</code> and deserialization. During deserialization, the first\nstep in the process is a default instantiation using the class' no-argument constructor. Therefore an <code>Externalizable</code> class without a\nno-arg constructor cannot be deserialized.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Tomato implements Externalizable {  // Noncompliant; no no-arg constructor\n\n  public Tomato (String color, int weight) { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Tomato implements Externalizable {\n\n  public Tomato() { ... }\n  public Tomato (String color, int weight) { ... }\n}\n</pre>\n\n"
  }, {
    "summary": "Classes should not be compared by name",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1872",
    "tags": ["cwe", "cert"],
    "description": "<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access.</p>\n<p>Instead, the <code>instanceof</code> operator or the <code>Class.isAssignableFrom()</code> method should be used to check the object's underlying\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (List.class.getName().equals(valueClass.getName())) {  // Noncompliant\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (valueClass.isAssignableFrom(List.class)) {\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/486.html\">MITRE, CWE-486</a> - Comparison of Classes by Name </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/LAFlAQ\">CERT, OBJ09-J.</a> - Compare classes and not class names </li>\n</ul>\n\n"
  }, {
    "summary": "Related \"if/else if\" statements should not have the same condition",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1862",
    "tags": ["cert", "unused", "pitfall"],
    "description": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "Synchronization should not be based on Strings or boxed primitives",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1860",
    "tags": ["multi-threading", "cert"],
    "description": "<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock\nwith unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects\nbecause they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there are only two instances of\n<code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the\ntwo.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = \"LOCK\";\n\npublic void doSomething() {\n\n  synchronized(bLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(iLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(sLock) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Object lock1 = new Object();\nprivate static final Object lock2 = new Object();\nprivate static final Object lock3 = new Object();\n\npublic void doSomething() {\n\n  synchronized(lock1) {\n    // ...\n  }\n  synchronized(lock2) {\n    // ...\n  }\n  synchronized(lock3) {\n    // ...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rQGeAQ\">CERT, LCK01-J.</a> - Do not synchronize on objects that may be reused </li>\n</ul>\n\n"
  }, {
    "summary": "\"Iterator.hasNext()\" should not call \"Iterator.next()\"",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1849",
    "tags": [],
    "description": "<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator.\n<code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the\n<code>hasNext()</code> contract, and will lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FibonacciIterator implements Iterator&lt;Integer&gt;{\n...\n@Override\npublic boolean hasNext() {\n  if(next() != null) {\n    return true;\n  }\n  return false;\n}\n...\n}\n</pre>\n\n"
  }, {
    "summary": "Identical expressions should not be used on both sides of a binary operator",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1764",
    "tags": ["cert"],
    "description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n\nc.equals(c); //always true\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:squid:S1656} - Implements a check on <code>=</code>. </li>\n</ul>\n\n"
  }, {
    "summary": "Variables should not be self-assigned",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1656",
    "tags": ["cert"],
    "description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "\"StringBuilder\" and \"StringBuffer\" should not be instantiated with a character ",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1317",
    "tags": ["pitfall"],
    "description": "<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect\nthe character to be the initial value of the <code>StringBuffer</code>. </p>\n<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStringBuffer foo = new StringBuffer('x');   //equivalent to StringBuffer foo = new StringBuffer(120);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuffer foo = new StringBuffer(\"x\");\n</pre>\n\n"
  }, {
    "summary": "Methods should not be named \"hashcode\" or \"equal\"",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1221",
    "tags": ["pitfall"],
    "description": "<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>\n\n"
  }, {
    "summary": "Thread.run() should not be called directly",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1217",
    "tags": ["cwe", "multi-threading", "cert"],
    "description": "<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make\nsense because it causes its code to be executed in the current thread. </p>\n<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/572.html\">MITRE, CWE-572</a> - Call to Thread run() instead of start() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KQAiAg\">CERT THI00-J.</a> - Do not invoke Thread.run() </li>\n</ul>\n\n"
  }, {
    "summary": "\"equals\" method overrides should accept \"Object\" parameters",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1201",
    "tags": ["suspicious"],
    "description": "<p>\"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check.\nHowever, this will not work as expected when that is the only override.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));  // Prints \"false\" because o2 an Object not a MyClass\n  }\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {  // Ignored; `boolean equals(Object)` also present\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Jump statements should not occur in \"finally\" blocks",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1143",
    "tags": ["cwe", "error-handling", "cert"],
    "description": "<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any\nunhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and\n<code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   // incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/584.html\">MITRE, CWE-584</a> - Return Inside Finally Block </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/mIEbAQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>\n\n"
  }, {
    "summary": "The Object.finalize() method should not be called",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1111",
    "tags": ["cwe", "cert"],
    "description": "<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection\ndetermines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/586.html\">MITRE, CWE-586</a> - Explicit Call to Finalize() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>\n\n"
  }, {
    "summary": "Methods should not have identical implementations",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-4144",
    "tags": ["confusing", "duplicate", "suspicious"],
    "description": "<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate final static String CODE = \"bounteous\";\n\npublic String getCode() {\n  return CODE;\n}\n\npublic String getName() {  // Noncompliant\n  return CODE;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate final static String CODE = \"bounteous\";\n\npublic String getCode() {\n  return CODE;\n}\n\npublic String getName() {\n  return getCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>\n\n"
  }, {
    "summary": "\"java.nio.Files#delete\" should be preferred",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-4042",
    "tags": ["error-handling", "api-design"],
    "description": "<p>When <code>java.io.File#delete</code> fails, this <code>boolean</code> method simply returns <code>false</code> with no indication of the cause. On\nthe other hand, when <code>java.nio.Files#delete</code> fails, this <code>void</code> method returns one of a series of exception types to better\nindicate the cause of the failure. And since more information is generally better in a debugging situation, <code>java.nio.Files#delete</code> is the\npreferred option.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void cleanUp(Path path) {\n  File file = new File(path);\n  if (!file.delete()) {  // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException{\n  Files.delete(path);\n}\n</pre>\n\n"
  }, {
    "summary": "Unused \"private\" classes should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3985",
    "tags": ["unused"],
    "description": "<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  ...\n  private class MyUnusedPrivateClass {...} // Noncompliant\n}\n</pre>\n\n"
  }, {
    "summary": "\"Map.get\" and value test should be replaced with single method call",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3824",
    "tags": ["java8"],
    "description": "<p>It's a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> before proceeding with adding or changing\nthe value in the map. However the <code>java.util.Map</code> API offers a significantly better alternative in the form of the\n<code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these instead leads to cleaner and more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nV value = map.get(key);\nif (value == null) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nreturn value;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn map.computeIfAbsent(key, k -&gt; V.createFor(k));\n</pre>\n\n"
  }, {
    "summary": "Java 8's \"Files.exists\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3725",
    "tags": ["performance", "java8"],
    "description": "<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don't actually exist. </p>\n<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPath myPath;\nif(java.nio.Files.exists(myPath)) {  // Noncompliant\n // do something\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath myPath;\nif(myPath.toFile().exists())) {\n // do something\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8153414\">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8153414\">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>\n</ul>\n\n"
  }, {
    "summary": "\"Arrays.stream\" should be used for primitive arrays",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3631",
    "tags": ["performance"],
    "description": "<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use\n<em>that</em> last as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,\n<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n</pre>\n\n"
  }, {
    "summary": "Printf-style format strings should be used correctly",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3457",
    "tags": ["cert", "confusing"],
    "description": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their\narguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,\n<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of\n<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument '2' is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument '3' is unused\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s = String.format(\"string without arguments\"); // Noncompliant\n\nMessageFormat.format(\"Result '{0}'.\", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result '{0}'  =  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/e4EyAQ\">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>\n\n"
  }, {
    "summary": "Assertion arguments should be passed in the correct order",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3415",
    "tags": ["tests", "suspicious"],
    "description": "<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the\nfirst argument to be the expected value and the second argument to be the actual value. Swap them, and your test will still have the same outcome\n(succeed/fail when it should) but the error messages will be confusing. </p>\n<p>This rule raises an issue when the second argument to an assertions library method is a hard-coded value and the first argument is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\norg.junit.Assert.assertEquals(runner.exitCode(), 0, \"Unexpected exit code\");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\norg.junit.Assert.assertEquals(0, runner.exitCode(), \"Unexpected exit code\");\n</pre>\n\n"
  }, {
    "summary": "Ternary operators should not be nested",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3358",
    "tags": ["confusing"],
    "description": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?\"Mr. \":p.isMarried()?\"Mrs. \":\"Miss \" + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?\"Mrs. \":\"Miss \";\n  return p.gender==Person.MALE?\"Mr. \": honorific + p.getLastName();\n</pre>\n\n"
  }, {
    "summary": "\"writeObject\" should not be the only \"synchronized\" code in a class",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3042",
    "tags": ["confusing"],
    "description": "<p>The purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There's no real problem with marking\n<code>writeObject</code> <code>synchronized</code>, but if it's highly suspicious if this serialization-related method the only\n<code>synchronized</code> code in a <code>class</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n  public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n   public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private void writeObject(ObjectOutputStream stream) throws IOException {\n    // ...\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "String function use should be optimized for single characters",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3027",
    "tags": ["performance", "clumsy"],
    "description": "<p>An <code>indexOf</code> or <code>lastIndexOf</code> call with a single letter <code>String</code> can be made more performant by switching to a\ncall with a <code>char</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myStr = \"Hello World\";\n// ...\nint pos = myStr.indexOf(\"W\");  // Noncompliant\n// ...\nint otherPos = myStr.lastIndexOf(\"r\"); // Noncompliant\n// ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myStr = \"Hello World\";\n// ...\nint pos = myStr.indexOf('W');\n// ...\nint otherPos = myStr.lastIndexOf('r');\n// ...\n</pre>\n\n"
  }, {
    "summary": "Static fields should not be updated in constructors",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3010",
    "tags": [],
    "description": "<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.</p>\n<p>Instead remove the field's <code>static</code> modifier, or initialize it statically.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  static Date dateOfBirth;\n  static int expectedFingers;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers = 10;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  Date dateOfBirth;\n  static int expectedFingers = 10;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "\"Thread.sleep\" should not be used in tests",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2925",
    "tags": ["bad-practice"],
    "description": "<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on\nenvironment (\"Passes on my machine!\") or load. Don't rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous\ntesting. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable&lt;Boolean&gt; didTheThing() {\n  return new Callable&lt;Boolean&gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n</pre>\n\n"
  }, {
    "summary": "\"entrySet()\" should be iterated when both the key and value are needed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2864",
    "tags": ["performance"],
    "description": "<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "\"DateUtils.truncate\" from Apache Commons Lang library should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2718",
    "tags": ["performance", "java8"],
    "description": "<p>The use of the <code>Instant</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code> class\nfrom Commons Lang.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  instant = instant.truncatedTo(ChronoUnit.SECONDS);\n  return Date.from(instant);\n}\n</pre>\n\n"
  }, {
    "summary": "Multiline blocks should be enclosed in curly braces",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2681",
    "tags": ["cwe", "cert"],
    "description": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>\n\n"
  }, {
    "summary": "\"readObject\" should not be \"synchronized\"",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2675",
    "tags": ["confusing"],
    "description": "<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be\nthe case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the\n<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method\nshould be refactored to make it the case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n</pre>\n\n"
  }, {
    "summary": "\"Preconditions\" and logging arguments should not require evaluation",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2629",
    "tags": ["performance"],
    "description": "<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a\nperformance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.</p>\n<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.</p>\n<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging\ncalls.</p>\n<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen <code>Preconditions</code> should be skipped altoghether, and the relevant exception should be conditionally thrown instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlogger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a &gt; 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a &gt; 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(Level.SEVERE, \"Something went wrong: %s \", message);  // String formatting only applied if needed\n\nlogger.log(Level.FINE, \"An exception occurred with message: {}\", message);\n\nlogger.log(Level.SEVERE, () -&gt; \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nLOG.error(\"Unable to open file {}\", csvPath, e);\n\nif (LOG.isDebugEnabled() {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg &gt; 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored. This rule accounts for explicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and\nignores the bodies of such <code>if</code> statements.</p>\n\n"
  }, {
    "summary": "Boolean expressions should not be gratuitous",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2589",
    "tags": ["cwe", "misra", "cert", "redundant"],
    "description": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "\"Lock\" objects should not be \"synchronized\"",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2442",
    "tags": ["multi-threading", "cert", "clumsy"],
    "description": "<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with\n<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such\nobjects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n//...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/cQCaAg\">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level\n  concurrency objects </li>\n</ul>\n\n"
  }, {
    "summary": "Classes with only \"static\" methods should not be instantiated",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2440",
    "tags": ["clumsy"],
    "description": "<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only\n<code>static</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>See Also</h2>\n<ul>\n  <li> {rule:squid:S1118} - Utility classes should not have public constructors </li>\n</ul>\n\n"
  }, {
    "summary": "\"Threads\" should not be used where \"Runnables\" are expected",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2438",
    "tags": ["multi-threading", "pitfall"],
    "description": "<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose\nrunning should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tThread r =new Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tRunnable r =new Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n</pre>\n\n"
  }, {
    "summary": "Inner class calls to super class methods should be unambiguous",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2388",
    "tags": ["pitfall"],
    "description": "<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using <code>super.</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Unused type parameters should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2326",
    "tags": ["cert", "unused"],
    "description": "<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint Add(int a, int b)\n{\n  return a + b;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "\"ResultSet.isLast()\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2232",
    "tags": ["performance", "pitfall", "sql"],
    "description": "<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>\nresult sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear\non what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nResultSet rs = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (! rs.next()) {\n  // process row\n}\n</pre>\n\n"
  }, {
    "summary": "\"static\" members should be accessed statically",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2209",
    "tags": ["pitfall"],
    "description": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Silly math should not be performed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2185",
    "tags": ["clumsy"],
    "description": "<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>\n\n"
  }, {
    "summary": "Classes named like \"Exception\" should extend \"Exception\" or a subclass",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2166",
    "tags": ["convention", "pitfall"],
    "description": "<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation\nthat a class' name will indicate what it is and/or does.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n\n"
  }, {
    "summary": "Objects should not be created only to \"getClass\"",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2133",
    "tags": ["performance"],
    "description": "<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'\n<code>.class</code> property.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass c = MyObject.class;\n</pre>\n\n"
  }, {
    "summary": "Primitives should not be boxed just for \"String\" conversion",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2131",
    "tags": ["performance"],
    "description": "<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'\n<code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>\nargument should be avoided, as should concatenating empty string <code>\"\"</code> to a primitive.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\nmyIntString = 4 + \"\";  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>\n\n"
  }, {
    "summary": "Constructors should not be used to instantiate \"String\" and primitive-wrapper classes",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2129",
    "tags": ["performance"],
    "description": "<p>Constructors for <code>Strings</code> and the objects used to wrap primitives should never be used. Doing so is less clear and uses more memory\nthan simply using the desired value in the case of strings, and using <code>valueOf</code> for everything else.</p>\n<p>Further, these constructors are deprecated in Java 9, which is an indication that they will eventually be removed from the language altogether.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\n</pre>\n\n"
  }, {
    "summary": "\"URL.hashCode\" and \"URL.equals\" should be avoided",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2112",
    "tags": ["performance"],
    "description": "<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to\nresolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand\nmakes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>\n<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the\n<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>\n<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and\n<code>hashCode</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant\n\n  URL homepage = new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant\n\n  URI homepage = new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Two branches in a conditional structure should not have exactly the same implementation",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1871",
    "tags": ["design", "suspicious"],
    "description": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<p>or </p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n\n"
  }, {
    "summary": "Dead stores should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1854",
    "tags": ["cwe", "cert", "unused"],
    "description": "<p>A dead store happens when a local variable is assigned a value, including <code>null</code>, that is not read by any subsequent instruction.\nCalculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error,\nit is at best a waste of resources. </p>\n<p>Even assigning <code>null</code> to a variable is a dead store if the variable is not subsequently used. Assigning null as a hint to the garbage\ncollector used to be common practice, but is no longer needed and such code should be eliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a;\n  }\n  return x;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, empty string (<code>\"\"</code>), <code>true</code>, and <code>false</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/S4IyAQ\">CERT, MSC13-CPP.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "\"Object.wait(...)\" should never be called on objects that implement \"java.util.concurrent.locks.Condition\"",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1844",
    "tags": ["suspicious"],
    "description": "<p>From the Java API documentation:</p>\n<blockquote>\n  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)\n  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.\n  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the\n  <code>Object</code> monitor methods.</p>\n</blockquote>\n<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,\ncalling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.wait();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.await();\n</pre>\n\n"
  }, {
    "summary": "Jump statements should not be used unconditionally",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1751",
    "tags": ["misra", "cert", "unused"],
    "description": "<p>Having an unconditional <code>break</code>, <code>return</code> or <code>throw</code> in a loop renders it useless; the loop will only execute once\nand the loop structure itself is simply wasted keystrokes.</p>\n<p>Having an unconditional <code>continue</code> in a loop is itself wasted keystrokes.</p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i;\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println(\"i is \" + i);\n  break;  // loop only executes once\n}\n\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println(\"i is \" + i);\n  continue;  // this is meaningless; the loop would continue anyway\n}\n\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println(\"i is \" + i);\n  return;  // loop only executes once\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i;\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println(\"i is \" + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "A field should not duplicate the name of its containing class",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1700",
    "tags": ["brain-overload"],
    "description": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>\n\n"
  }, {
    "summary": "Tests should not be ignored",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1607",
    "tags": ["tests", "suspicious"],
    "description": "<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each ignored test that does not have a notation about why it is being skipped.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Ignore  // Noncompliant\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<h2>Exceptions</h2>\n<p>The rule doesn't raise an issue if there is a comment in the @Ignore annotation</p>\n\n"
  }, {
    "summary": "Anonymous inner classes containing only one method should become lambdas",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1604",
    "tags": ["java8"],
    "description": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>\n\n"
  }, {
    "summary": "\"switch\" statements should not have too many \"case\" clauses",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1479",
    "tags": ["brain-overload"],
    "description": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>\n\n"
  }, {
    "summary": "\"for\" loop stop conditions should be invariant",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-127",
    "tags": ["misra", "pitfall"],
    "description": "<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the\n  loop. </li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>\n</ul>\n\n"
  }, {
    "summary": "Sections of code should not be \"commented out\"",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-125",
    "tags": ["misra", "unused"],
    "description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>\n\n"
  }, {
    "summary": "Non-constructor methods should not have the same name as the enclosing class",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1223",
    "tags": ["pitfall"],
    "description": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>\n\n"
  }, {
    "summary": "Exception types should not be tested using \"instanceof\" in catch blocks",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1193",
    "tags": ["error-handling", "cert", "clumsy"],
    "description": "<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/5gFFB\">CERT, ERR51-J.</a> - Prefer user-defined exceptions over more general exception\n  types </li>\n</ul>\n\n"
  }, {
    "summary": "Classes from \"sun.*\" packages should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1191",
    "tags": ["lock-in", "pitfall"],
    "description": "<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>\n<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause\nproblems when moving to a different Java vendor, such as OpenJDK.</p>\n<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport com.sun.jna.Native;     // Noncompliant\nimport sun.misc.BASE64Encoder; // Noncompliant\n</pre>\n\n"
  }, {
    "summary": "Throwable and Error should not be caught",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1181",
    "tags": ["cwe", "error-handling", "bad-practice", "cert"],
    "description": "<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Unused method parameters should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1172",
    "tags": ["misra", "cert", "unused"],
    "description": "<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething(int a, int b) {     // \"b\" is unused\n  compute(a);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething(int a) {\n  compute(a);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise issues for unused parameters:</p>\n<ul>\n  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n  <li> in overrides and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>\n  <li> in annotated methods, unless the annotation is <code>@SuppressWarning(\"unchecked\")</code> or <code>@SuppressWarning(\"rawtypes\")</code>, in\n  which case the annotation will be ignored </li>\n</ul>\n<pre>\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "Only static class initializers should be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1171",
    "tags": ["pitfall"],
    "description": "<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When\npossible, non-static initializers should be refactored into standard constructors or field initializers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n</pre>\n<p>or using Guava:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(\"a\", \"b\");\n}\n</pre>\n\n"
  }, {
    "summary": "Empty arrays and collections should be returned instead of null",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1168",
    "tags": ["cert"],
    "description": "<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/AgG7AQ\">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an\n  empty array over a null value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zwHEAw\">CERT, MET55-J.</a> - Return an empty array or collection instead of a null\n  value for methods that return an array or collection </li>\n</ul>\n\n"
  }, {
    "summary": "\"@Override\" should be used on overriding and implementing methods",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1161",
    "tags": ["bad-practice"],
    "description": "<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>\n<ul>\n  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>\n  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashcode()</code>, ...</p>\n\n"
  }, {
    "summary": "Enumeration should not be implemented",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1150",
    "tags": ["obsolete"],
    "description": "<p>From the official Oracle Javadoc:</p>\n<blockquote>\n  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>\n\n"
  }, {
    "summary": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1149",
    "tags": ["performance"],
    "description": "<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>\n  <li> <code>Deque</code> instead of <code>Stack</code> </li>\n  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>\n  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>\n\n"
  }, {
    "summary": "Unused \"private\" methods should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1144",
    "tags": ["cert", "unused"],
    "description": "<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated methods.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>\n\n"
  }, {
    "summary": "Try-catch blocks should not be nested",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1141",
    "tags": ["confusing"],
    "description": "<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.</p>\n\n"
  }, {
    "summary": "Track uses of \"FIXME\" tags",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1134",
    "tags": ["cwe"],
    "description": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>\n\n"
  }, {
    "summary": "Deprecated elements should have both the annotation and the Javadoc tag",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1123",
    "tags": ["obsolete", "bad-practice"],
    "description": "<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored. </p>\n<p>Further, Java 9 adds two additional arguments to the annotation:</p>\n<ul>\n  <li> <code>since</code> allows you to describe when the deprecation took place </li>\n  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>\n</ul>\n<p>If your compile level is Java 9 or higher, you should be using one or both of these arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"5.1\")\n  public void foo2() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"4.2\", forRemoval=true)\n  public void foo3() {\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>\n\n"
  }, {
    "summary": "Assignments should not be made from within sub-expressions",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1121",
    "tags": ["cwe", "misra", "cert", "suspicious"],
    "description": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {...}\n</pre>\n<p>Chained assignments, including compound assignments, are ignored.</p>\n<pre>\nint i = j = 0;\nint k = (j += 1);\nresult = (bresult = new byte[len]);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/nYFtAg\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1gCTAw\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KQvhAg\">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KYIyAQ\">CERT, MSC02-CPP.</a> - Avoid errors of omission </li>\n</ul>\n\n"
  }, {
    "summary": "Generic exceptions should never be thrown",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-112",
    "tags": ["cwe", "error-handling", "cert"],
    "description": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Labels should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1119",
    "tags": ["confusing"],
    "description": "<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col &lt; matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int row = 1; row &lt; matrix.length; row++) {          // Compliant\n  for (int col = 0; col &lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Utility classes should not have public constructors",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1118",
    "tags": ["design"],
    "description": "<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this\nrule.</p>\n\n"
  }, {
    "summary": "Local variables should not shadow class fields",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1117",
    "tags": ["cert", "pitfall"],
    "description": "<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>\n\n"
  }, {
    "summary": "Redundant pairs of parentheses should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1110",
    "tags": ["confusing"],
    "description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>\n\n"
  }, {
    "summary": "Inheritance tree of classes should not be too deep",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-110",
    "tags": ["design"],
    "description": "<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object\noriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>\n<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>\n\n"
  }, {
    "summary": "Nested blocks of code should not be left empty",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-108",
    "tags": ["suspicious"],
    "description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>\n\n"
  }, {
    "summary": "Methods should not have too many parameters",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-107",
    "tags": ["brain-overload"],
    "description": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore\nignored.</p>\n\n"
  }, {
    "summary": "Unused \"private\" fields should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1068",
    "tags": ["cert", "unused"],
    "description": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "Collapsible \"if\" statements should be merged",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1066",
    "tags": ["clumsy"],
    "description": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>\n\n"
  }, {
    "summary": "Unused labels should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1065",
    "tags": ["misra", "cert", "unused"],
    "description": "<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() {\n  outer: //label is not used.\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() {\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 2.6 - A function should not contain unused label declarations </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "Standard outputs should not be used directly to log anything",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-106",
    "tags": ["bad-practice", "cert"],
    "description": "<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(\"My Message\");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(\"My Message\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/RoElAQ\">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>\n\n"
  }, {
    "summary": "Return values should not be ignored when they contain the operation status code",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-899",
    "tags": ["cwe", "error-handling", "misra", "cert"],
    "description": "<p>When the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed\nsuccessfully.</p>\n<p>This rule raises an issue when the return values of the following are ignored:</p>\n<ul>\n  <li> <code>java.io.File</code> operations that return a status code (except <code>mkdirs</code>) </li>\n  <li> <code>Iterator.hasNext()</code> </li>\n  <li> <code>Enumeration.hasMoreElements()</code> </li>\n  <li> <code>Lock.tryLock()</code> </li>\n  <li> non-void <code>Condition.await*</code> methods </li>\n  <li> <code>CountDownLatch.await(long, TimeUnit)</code> </li>\n  <li> <code>Semaphore.tryAcquire</code> </li>\n  <li> <code>BlockingQueue</code>: <code>offer</code>, <code>remove</code>, <code>drainTo</code>, </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  file.delete();  // Noncompliant\n  // ...\n  lock.tryLock(); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  if (!lock.tryLock()) {\n    // lock failed; take appropriate action\n  }\n  if (!file.delete()) {\n    // file delete failed; take appropriate action\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.10 - If a function returns error information, then that error information shall be tested </li>\n  <li> MISRA C++:2008, 0-1-7 - The value returned by a function having a non-void return type that is not an overloaded operator shall always be used.\n  </li>\n  <li> MISRA C:2012, Dir. 4.7 - If a function returns error information, then that error information shall be tested </li>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/w4C4Ag\">CERT, ERR33-C.</a> - Detect and handle standard library errors </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/iIBfBw\">CERT, POS54-C.</a> - Detect and handle POSIX library errors </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/toHWAw\">CERT, FIO02-J.</a> - Detect and handle file-related errors </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/754\">MITRE, CWE-754</a> - Improper Check for Unusual Exceptional Conditions </li>\n</ul>\n\n"
  }, {
    "summary": "\"enum\" fields should not be publicly mutable",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3066",
    "tags": ["bad-practice"],
    "description": "<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>\n\n"
  }, {
    "summary": "Mutable fields should not be \"public static\"",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2386",
    "tags": ["cwe", "unpredictable", "cert"],
    "description": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Cookies should be \"secure\"",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2092",
    "tags": ["cwe", "owasp-a6", "owasp-a2"],
    "description": "<p>The \"secure\" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon.\nInstead, cookies with the secure attribute are only sent over encrypted HTTPS connections.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);  // Noncompliant; cookie is not secure\nresponse.addCookie(c);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);\nc.setSecure(true);\nresponse.addCookie(c);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/614\">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Exceptions should not be thrown from servlet methods",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1989",
    "tags": ["cwe", "error-handling", "cert", "owasp-a6"],
    "description": "<p>Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>, it's a bad idea to let such\nexceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service\nattacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging\ninformation back to the user. And that information could be very valuable to an attacker. </p>\n<p>This rule checks all exceptions in methods named \"do*\" are explicitly handled in servlet classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  String ip = request.getRemoteAddr();\n  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  try {\n    String ip = request.getRemoteAddr();\n    InetAddress addr = InetAddress.getByName(ip);\n    //...\n  }\n  catch (UnknownHostException uhex) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/600.html\">MITRE, CWE-600</a> - Uncaught Exception in Servlet </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/s4EVAQ\">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information\n  </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten Category A6</a> - Sensitive Data Exposure </li>\n</ul>\n\n"
  }, {
    "summary": "\"public static\" fields should be constant",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1444",
    "tags": ["cwe", "cert"],
    "description": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>\n\n"
  }, {
    "summary": "IP addresses should not be hardcoded",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1313",
    "tags": ["cert"],
    "description": "<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>\n<ul>\n  <li> a recompile is required if the address changes </li>\n  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) </li>\n  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer </li>\n  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString ip = \"127.0.0.1\";\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString ip = System.getProperty(\"myapplication.ip\");\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>\n\n"
  }, {
    "summary": "Throwable.printStackTrace(...) should not be called",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1148",
    "tags": ["error-handling"],
    "description": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>\n\n"
  }, {
    "summary": "Class variable fields should not have public accessibility",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1104",
    "tags": ["cwe"],
    "description": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>\n\n"
  }, {
    "summary": "Double Brace Initialization should not be used",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3599",
    "tags": ["leak"],
    "description": "<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when there's no leak, DBI is so obscure that it's bound to\nconfuse most maintainers. </p>\n<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMap source = new HashMap(){{ // Noncompliant\n    put(\"firstName\", \"John\");\n    put(\"lastName\", \"Smith\");\n}};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMap source = new HashMap();\n// ...\nsource.put(\"firstName\", \"John\");\nsource.put(\"lastName\", \"Smith\");\n// ...\n</pre>\n\n"
  }, {
    "summary": "Value-based objects should not be serialized",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3437",
    "tags": ["serialization", "java8", "lock-in"],
    "description": "<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization...\n</blockquote>\n<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = new Foo(0);\n</pre>\n<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = arr[0];\n</pre>\n<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>\n<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.</p>\n<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the\ndate classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass implements Serializable {\n  private HijrahDate date;  // Noncompliant; mark this transient\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>\n\n"
  }, {
    "summary": "\"toArray\" should be passed an array of the proper type",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3020",
    "tags": [],
    "description": "<p>Given no arguments, the <code>Collections.toArray</code> method returns an <code>Object []</code>, which will cause a\n<code>ClassCastException</code> at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the\ncall.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray();  // Noncompliant; ClassCastException thrown\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return strings.toArray(new String[0]);\n}\n</pre>\n\n"
  }, {
    "summary": "Neither \"Math.abs\" nor negation should be used on numbers that could be \"MIN_VALUE\"",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2676",
    "tags": [],
    "description": "<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you'll\nstill have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.</p>\n<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object's <code>compareTo</code> method, and\n<code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods\nis similarly ill-advised.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    // ...\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "The value returned from a stream read should be checked",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2674",
    "tags": ["cert"],
    "description": "<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value\nreturned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>\n<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned\nfrom the method.</p>\n<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not\nchecked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child\nclasses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  // Noncompliant\n    // ...\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      // ...\n    }\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/XACSAQ\">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an\n  array </li>\n</ul>\n\n"
  }, {
    "summary": "\"@NonNull\" values should not be set to null",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2637",
    "tags": ["cwe", "cert"],
    "description": "<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null\nvalues and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field\nin a constructor, could cause <code>NullPointerException</code>s at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MainClass {\n\n  @Nonnull\n  private String primary;\n  private String secondary;\n\n  public MainClass(String color) {\n    if (color != null) {\n      secondary = null;\n    }\n    primary = color;  // Noncompliant; \"primary\" is Nonnull but could be set to null here\n  }\n\n  public MainClass() { // Noncompliant; \"primary\" Nonnull\" but is not initialized\n  }\n\n  @Nonnull\n  public String indirectMix() {\n    String mix = null;\n    return mix;  // Noncompliant; return value is Nonnull, but null is returned.}}\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>\n\n"
  }, {
    "summary": "\"Iterator.next()\" methods should throw \"NoSuchElementException\"",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2272",
    "tags": ["unpredictable"],
    "description": "<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception\nwhen the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this\n<code>Iterator</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      return null;\n    }\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      throw new NoSuchElementException();\n    }\n    ...\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "\"compareTo\" results should not be checked for specific values",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2200",
    "tags": ["unpredictable"],
    "description": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "Math operands should be cast before assignment",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2184",
    "tags": ["cwe", "overflow", "sans-top25-risky", "misra", "cert"],
    "description": "<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long</code>,\n<code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code> or <code>long</code>, the result\nwill likely not be what you expect. </p>\n<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the\nassignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the\noperation takes place.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat twoThirds = 2/3; // Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.\nDate myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748\n}\n\npublic float compute2(long factor){\n  return factor / 123;  //Noncompliant, will be rounded to closest long integer\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfloat twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n\npublic float compute2(long factor){\n  return factor / 123f;\n}\n</pre>\n<p>or</p>\n<pre>\nfloat twoThirds = (float)2/3; // 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n\npublic float compute2(float factor){\n  return factor / 123;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 5-0-8 - An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue\n  expression. </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/190\">MITRE, CWE-190</a> - Integer Overflow or Wraparound </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/woIyAQ\">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point\n  operations </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/AxE\">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1IAyAQ\">CERT, INT18-CPP.</a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Risky Resource Management </li>\n</ul>\n\n"
  }, {
    "summary": "Ints and longs should not be shifted by zero or more than their number of bits-1",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2183",
    "tags": ["cert"],
    "description": "<p>Since an <code>int</code> is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. Shifting an\n<code>int</code> by 32 is the same as shifting it by 0, and shifting it by 33 is the same as shifting it by 1.</p>\n<p>Similarly, shifting a <code>long</code> by +/-64 is the same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int shift(int a) {\n  return a &lt;&lt; 48;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int shift(int a) {\n  return a &lt;&lt; 16;\n}\n</pre>\n\n"
  }, {
    "summary": "\"compareTo\" should not return \"Integer.MIN_VALUE\"",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2167",
    "tags": [],
    "description": "<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo</code> that matters. Returning <code>Integer.MIN_VALUE</code>\ndoes <em>not</em> convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo</code> is sometimes\ninversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE</code> yields\n<code>Integer.MIN_VALUE</code> rather than <code>Integer.MAX_VALUE</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return Integer.MIN_VALUE;  // Noncompliant\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return -1;\n  }\n</pre>\n\n"
  }, {
    "summary": "Boxing and unboxing should not be immediately reversed",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2153",
    "tags": ["clumsy"],
    "description": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>\n\n"
  }, {
    "summary": "\"equals(Object obj)\" should test argument type",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2097",
    "tags": [],
    "description": "<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "\"Serializable\" inner classes of non-serializable classes should be \"static\"",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2066",
    "tags": ["serialization", "cert"],
    "description": "<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not\nserializable, then serialization will fail, resulting in a runtime error. </p>\n<p>Making the inner class <code>static</code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static</code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: </p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public class Seed implements Serializable {  // Noncompliant; serialization will fail\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public static class Seed implements Serializable {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/O4CpAQ\">CERT SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>\n\n"
  }, {
    "summary": "The non-serializable super class of a \"Serializable\" class should have a no-argument constructor",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2055",
    "tags": ["serialization"],
    "description": "<p>When a <code>Serializable</code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the\nobject from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until\nthe final object has been instantiated. </p>\n<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a\n<code>Serializable</code> class must have a no-arg constructor. Otherwise the class is <code>Serializable</code> but not deserializable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {  // Noncompliant; nonserializable ancestor doesn't have no-arg constructor\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit () {...};  // Compliant; no-arg constructor added to ancestor\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) {...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n\n"
  }, {
    "summary": "Method parameters, caught exceptions and foreach variables' initial values should not be ignored",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1226",
    "tags": ["misra"],
    "description": "<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read\nbefore reassignment.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doTheThing(String str, int i, List&lt;String&gt; strings) {\n  str = Integer.toString(i);  // Noncompliant\n\n  for (String s : strings) {\n    s = \"hello world\";  // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>\n\n"
  }, {
    "summary": "\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1206",
    "tags": ["cwe", "cert"],
    "description": "<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two\n  objects must produce the same integer result. </p>\n  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the\n  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {    // Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/581.html\">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYYbAQ\">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>\n\n"
  }, {
    "summary": "\"close()\" calls should not be redundant",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-4087",
    "tags": ["redundant"],
    "description": "<p>Java 7's try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit\n<code>close()</code> call is redundant and potentially confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n  writer.close();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n}\n</pre>\n\n"
  }, {
    "summary": "\"ThreadLocal.withInitial\" should be preferred",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-4065",
    "tags": ["java8"],
    "description": "<p>Java 8 Introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a\n<code>ThreadLocal</code> instance.</p>\n<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to\n<code>ThreadLocal.withInitial</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =\n    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant\n        @Override\n        protected List&lt;String&gt; initialValue() {\n            return new ArrayList&lt;String&gt;();\n        }\n    };\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);\n</pre>\n\n"
  }, {
    "summary": "\"Stream\" call chains should be simplified when possible",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-4034",
    "tags": ["clumsy"],
    "description": "<p>The Stream API provides the <code>boolean anyMatch(Predicate&lt;? super T&gt; predicate)</code> method, which is a very convenient and efficient\nway to check whether any elements of a stream match the provided predicate.</p>\n<p>This rule raises an issue when a <code>Stream</code> chain could be replaced by this method call. Specifically:</p>\n<ul>\n  <li> <code>filter(Predicate&lt;? super T&gt; predicate).findFirst().isPresent()</code> </li>\n  <li> <code>filter(Predicate&lt;? super T&gt; predicate).findAny().isPresent()</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean hasRed = widgets.stream().filter(w -&gt; w.getColor() == RED).findFirst().isPresent(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean hasRed = widgets.stream().anyMatch(w -&gt; w.getColor() == RED);\n</pre>\n\n"
  }, {
    "summary": "Packages containing only \"package-info.java\" should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-4032",
    "tags": ["unused"],
    "description": "<p>There is no reason to have a package that is empty except for \"package-info.java\". Such packages merely clutter a project, taking up space but\nadding no value. </p>\n\n"
  }, {
    "summary": "Arrays should not be created for varargs parameters",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3878",
    "tags": ["clumsy"],
    "description": "<p>There's no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>\nis expected makes the intent ambiguous: Is the array supposed to be one object ora collection of objects?</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(new String[] { \"s1\", \"s2\"});  // Noncompliant: unnecessary\n  doTheThing(new String[12]);  // Compliant\n  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous\n  // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(\"s1\", \"s2\");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "Deprecated \"${pom}\" properties should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3421",
    "tags": ["maven", "obsolete"],
    "description": "<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect,\ndeprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated\nfeatures should be added, and all existing uses should be gradually removed.</p>\n<p>This rule raises an issue when <code>${pom.*</code>} properties are used in a pom.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;\n</pre>\n<p>or</p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;\n</pre>\n\n"
  }, {
    "summary": "Methods should not return constants",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3400",
    "tags": ["confusing"],
    "description": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>\n\n"
  }, {
    "summary": "\"private\" methods called only by inner classes should be moved to those classes",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3398",
    "tags": ["confusing"],
    "description": "<p>When a <code>private</code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same\naccess to the outer class' members, but the outer class will be clearer and less cluttered.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Abstract methods should not be redundant",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3038",
    "tags": ["confusing"],
    "description": "<p>There's no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the\nclass <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "Static non-final field names should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-3008",
    "tags": ["convention"],
    "description": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic final class MyClass {\n   private static String foo_bar;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private static String fooBar;\n}\n</pre>\n\n"
  }, {
    "summary": "JUnit rules should be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2924",
    "tags": ["tests", "unused"],
    "description": "<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and\nthere's no reason to leave them cluttering up the file if they're not in use.</p>\n<p>This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any of the test methods:\n<code>TemporaryFolder</code>, and <code>TestName</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "\"indexOf\" checks should use a start position",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2912",
    "tags": ["confusing"],
    "description": "<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper\nchoice of <code>indexOf</code> methods can help move code from confusing to clear.</p>\n<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus\nthe target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the\nresult is tested against -1, which is an easily recognizable \"not found\" indicator.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\") &gt; 2) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\", 2) &gt; -1) {\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "Nested \"enum\"s should not be declared static",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2786",
    "tags": ["clumsy"],
    "description": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "\"catch\" clauses should do more than rethrow",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2737",
    "tags": ["cert", "unused", "finding", "clumsy"],
    "description": "<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {  // Noncompliant\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<p>or</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  StringBuilder sb = new StringBuilder();\n  FileReader fileReader = new FileReader(fileName);\n  BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n  while((line = bufferedReader.readLine()) != null) {\n    //...\n\n  return sb.toString();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>\n\n"
  }, {
    "summary": "The diamond operator (\"<>\") should be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2293",
    "tags": ["clumsy"],
    "description": "<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>\n\n"
  }, {
    "summary": "\"finalize\" should not set fields to \"null\"",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2165",
    "tags": ["performance", "clumsy"],
    "description": "<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -\nthe object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name = null;  // Noncompliant; completely unnecessary\n</pre>\n\n"
  }, {
    "summary": "Subclasses that add fields should override \"equals\"",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2160",
    "tags": ["suspicious"],
    "description": "<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of\nnon-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>\n<p>This rule looks for classes that do all of the following:</p>\n<ul>\n  <li> extend classes that override <code>equals</code>. </li>\n  <li> do not themselves override <code>equals</code>. </li>\n  <li> add fields. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method\n  private Color ripeColor;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj = (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Catches should be combined",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2147",
    "tags": ["clumsy"],
    "description": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>\n\n"
  }, {
    "summary": "Methods of \"Random\" that return floating point values should not be used in random integer generation",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2140",
    "tags": ["clumsy"],
    "description": "<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the\n<code>nextInt</code> method instead.</p>\n<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an\ninteger.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\n</pre>\n\n"
  }, {
    "summary": "Parsing should be used to convert \"Strings\" to primitives",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2130",
    "tags": ["performance"],
    "description": "<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method\ninstead. It will be clearer and more efficient.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = Float.parseFloat(myNum);\n</pre>\n\n"
  }, {
    "summary": "Classes should not be empty",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2094",
    "tags": ["clumsy"],
    "description": "<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an\n<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Nothing {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Nothing {\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n</pre>\n\n"
  }, {
    "summary": "Fields in non-serializable classes should not be \"transient\"",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-2065",
    "tags": ["serialization", "unused"],
    "description": "<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class\nthat does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Vegetable {  // does not implement Serializable\n  private transient Season ripe;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Vegetable {\n  private Season ripe;\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "Boolean checks should not be inverted",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1940",
    "tags": ["pitfall"],
    "description": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...}\nboolean b = (i &gt;= 10);\n</pre>\n\n"
  }, {
    "summary": "Redundant casts should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1905",
    "tags": ["redundant", "clumsy"],
    "description": "<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>\n\n"
  }, {
    "summary": "\"@Deprecated\" code should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1874",
    "tags": ["cwe", "obsolete", "cert"],
    "description": "<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn't deprecated\n    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/KgAVAg\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n</ul>\n\n"
  }, {
    "summary": "\"toString()\" should never be called on a String object",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1858",
    "tags": ["finding", "clumsy"],
    "description": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>\n\n"
  }, {
    "summary": "Annotation repetitions should not be wrapped",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1710",
    "tags": ["java8"],
    "description": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>\n\n"
  }, {
    "summary": "Multiple variables should not be declared on the same line",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1659",
    "tags": ["convention", "misra", "cert"],
    "description": "<p>Declaring multiple variable on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator\n  respectively </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7wHEAw\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VgU\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fAAhAQ\">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Strings should not be concatenated using '+' in a loop",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1643",
    "tags": ["performance"],
    "description": "<p>Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>\n\n"
  }, {
    "summary": "Maps with keys that are enum values should be replaced with EnumMap",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1640",
    "tags": ["performance"],
    "description": "<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more\nefficient than other sets because the underlying data structure is a simple array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;COLOR, String&gt; (COLOR.class);\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Lambdas should be replaced with method references",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1612",
    "tags": ["java8"],
    "description": "<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred. Similarly, <code>null</code> checks\ncan be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code> methods.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(a -&gt; a.&lt;String&gt;getObject())\n      .forEach(a -&gt; { System.out.println(a); });\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(A::&lt;String&gt;getObject)\n      .forEach(System.out::println);\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Parentheses should be removed from a single lambda input parameter when its type is inferred",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1611",
    "tags": ["java8"],
    "description": "<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>\n\n"
  }, {
    "summary": "Abstract classes without fields should be converted to interfaces",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1610",
    "tags": ["java8"],
    "description": "<p>With Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Lamdbas containing only one statement should not nest this statement in a block",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1602",
    "tags": ["java8"],
    "description": "<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx -&gt; {System.out.println(x+1);}\n(a, b) -&gt; { return a+b; }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; System.out.println(x+1)\n(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped\n</pre>\n\n"
  }, {
    "summary": "\"Collections.EMPTY_LIST\", \"EMPTY_MAP\", and \"EMPTY_SET\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1596",
    "tags": ["obsolete", "pitfall"],
    "description": "<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw\nones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>\nfields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>\n\n"
  }, {
    "summary": "Local Variables should not be declared and then immediately returned or thrown",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1488",
    "tags": ["clumsy"],
    "description": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>\n\n"
  }, {
    "summary": "Unused local variables should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1481",
    "tags": ["unused"],
    "description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>\n\n"
  }, {
    "summary": "Private fields only used as local variables in methods should become local variables",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1450",
    "tags": ["pitfall"],
    "description": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>\n\n"
  }, {
    "summary": "Loops should not contain more than a single \"break\" or \"continue\" statement",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-135",
    "tags": ["brain-overload"],
    "description": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>\n\n"
  }, {
    "summary": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1319",
    "tags": ["bad-practice"],
    "description": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "\"switch\" statements should have at least 3 \"case\" clauses",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1301",
    "tags": ["misra", "bad-practice"],
    "description": "<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>\n\n"
  }, {
    "summary": "A \"while\" loop should be used instead of a \"for\" loop",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1264",
    "tags": ["clumsy"],
    "description": "<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>\n\n"
  }, {
    "summary": "The default unnamed package should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1220",
    "tags": ["convention"],
    "description": "<p>According to the Java Language Specification:</p>\n<blockquote>\n  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just\n  beginning development.</p>\n</blockquote>\n<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n</pre>\n\n"
  }, {
    "summary": "\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1210",
    "tags": [],
    "description": "<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n  <p>The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\" </p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on\n<code>equals()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>\n\n"
  }, {
    "summary": "Package names should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-120",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z]+(\\.[a-z][a-z0-9]*)*$</code>:</p>\n<pre>\npackage org.exAmple; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n</pre>\n\n"
  }, {
    "summary": "Nested code blocks should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1199",
    "tags": ["bad-practice"],
    "description": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>\n\n"
  }, {
    "summary": "Array designators \"[]\" should be on the type, not the variable",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1197",
    "tags": ["convention"],
    "description": "<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint[][] matrix;   // Compliant\n</pre>\n\n"
  }, {
    "summary": "Array designators \"[]\" should be located after the type in method signatures",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1195",
    "tags": ["convention"],
    "description": "<p>According to the Java Language Specification: </p>\n<blockquote>\n  <p>For compatibility with older versions of the Java SE platform,</p>\n  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the\n  array type after the formal parameter list.</p>\n  <p>This obsolescent syntax should not be used in new code.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getVector()[] { /* ... */ }    // Noncompliant\n\npublic int[] getMatrix()[] { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int[] getVector() { /* ... */ }\n\npublic int[][] getMatrix() { /* ... */ }\n</pre>\n\n"
  }, {
    "summary": "Type parameter names should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-119",
    "tags": ["convention"],
    "description": "<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type\nparameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { // Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass&lt;T&gt; {\n  &lt;T&gt; void method(T t) {\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Overriding methods should do more than simply call the same method in the super class ",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1185",
    "tags": ["redundant", "clumsy"],
    "description": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>\n\n"
  }, {
    "summary": "Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1182",
    "tags": ["convention", "cwe", "cert"],
    "description": "<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding\n<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,\nit's probably a mistake.</p>\n<p>The usual convention for <code>Object.clone()</code> according to Oracle's Javadoc is:</p>\n<ol>\n  <li> <code>x.clone() != x</code> </li>\n  <li> <code>x.clone().getClass() == x.getClass()</code> </li>\n  <li> <code>x.clone().equals\\(x\\)</code> </li>\n</ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ol>\n  <li> <code>super.clone()</code> returns a new object instance </li>\n  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>\n  <li> <code>Object.clone()</code> performs a shallow copy of the object's state </li>\n</ol>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass BaseClass {  // Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/580.html\">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/CQHEAw\">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>\n</ul>\n\n"
  }, {
    "summary": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1170",
    "tags": ["convention"],
    "description": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (\u00a78.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (\u00a715.28).</p>\n</blockquote>\n\n"
  }, {
    "summary": "Local variable and method parameter names should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-117",
    "tags": ["convention"],
    "description": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic void doSomething(int my_param) {\n  int LOCAL;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int myParam) {\n  int local;\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor (int i_1 = 0; i_1 &lt; limit; i_1++) {  // Compliant\n  // ...\n}\n</pre>\n<p>as well as one-character <code>catch</code> variables: </p>\n<pre>\ntry {\n//...\n} catch (Exception e) { // Compliant\n}\n</pre>\n\n"
  }, {
    "summary": "Exception classes should be immutable",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1165",
    "tags": ["error-handling"],
    "description": "<p>Exceptions are meant to represent the application's state at the point at which an error occurred.</p>\n<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>\n<ul>\n  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>\n  <li> Won't be updated or corrupted by a questionable error handler. </li>\n</ul>\n<p>This will enable developers to quickly understand what went wrong.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>\n\n"
  }, {
    "summary": "Field names should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-116",
    "tags": ["convention"],
    "description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n   private int my_field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private int myField;\n}\n</pre>\n\n"
  }, {
    "summary": "Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1158",
    "tags": ["clumsy"],
    "description": "<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is\ninefficient.</p>\n<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew Integer(myInteger).toString();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger.toString(myInteger);        // Compliant\n</pre>\n\n"
  }, {
    "summary": "Case insensitive string comparisons should be made without intermediate upper or lower casing",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1157",
    "tags": ["clumsy"],
    "description": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>\n\n"
  }, {
    "summary": "Collection.isEmpty() should be used to test for emptiness",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1155",
    "tags": ["clumsy"],
    "description": "<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can\nbe more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations\nof <code>size()</code> can be <code>O(n)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myCollection.size() == 0) {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n</pre>\n\n"
  }, {
    "summary": "String.valueOf() should not be appended to a String",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1153",
    "tags": ["clumsy"],
    "description": "<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>\n<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + String.valueOf(i));    // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + i);                    // Compliant\n}\n</pre>\n\n"
  }, {
    "summary": "Interface names should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-114",
    "tags": ["convention"],
    "description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic interface myInterface {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyInterface {...}\n</pre>\n\n"
  }, {
    "summary": "\"throws\" declarations should not be superfluous",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1130",
    "tags": ["unused", "redundant", "clumsy"],
    "description": "<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>\n<ul>\n  <li> listed multiple times </li>\n  <li> a subclass of another listed exception </li>\n  <li> a <code>RuntimeException</code>, or one of its descendants </li>\n  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\nvoid baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\nvoid baz() {}\n</pre>\n\n"
  }, {
    "summary": "Useless imports should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1128",
    "tags": ["unused"],
    "description": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>\n\n"
  }, {
    "summary": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1126",
    "tags": ["clumsy"],
    "description": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>\n\n"
  }, {
    "summary": "Boolean literals should not be redundant",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1125",
    "tags": ["clumsy"],
    "description": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>\n\n"
  }, {
    "summary": "Modifiers should be declared in the correct order",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1124",
    "tags": ["convention"],
    "description": "<p>The Java Language Specification recommends listing modifiers in the following order:</p>\n<p>1. Annotations</p>\n<p>2. public</p>\n<p>3. protected</p>\n<p>4. private</p>\n<p>5. abstract</p>\n<p>6. static</p>\n<p>7. final</p>\n<p>8. transient</p>\n<p>9. volatile</p>\n<p>10. synchronized</p>\n<p>11. native</p>\n<p>12. strictfp</p>\n<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard\norder.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic public void main(String[] args) {   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>\n\n"
  }, {
    "summary": "Empty statements should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1116",
    "tags": ["misra", "cert", "unused"],
    "description": "<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");;                     // Noncompliant - double ;\n  ...\n  for (int i = 0; i &lt; 3; System.out.println(i), i++);       // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");\n  ...\n  for (int i = 0; i &lt; 3; i++){\n    System.out.println(i);\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7gCTAw\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4FtAg\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>\n\n"
  }, {
    "summary": "URIs should not be hardcoded",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1075",
    "tags": ["android", "cert"],
    "description": "<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.</p>\n<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>\n<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  public Collection&lt;User&gt; listUsers() {\n    File userList = new File(\"/home/mylogin/Dev/users.txt\"); // Non-Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.\n  private Configuration config;\n  public Foo(Configuration myConfig) {\n    this.config = myConfig;\n  }\n  public Collection&lt;User&gt; listUsers() {\n    // Find here the way to get the correct folder, in this case using the Configuration object\n    String listingFolder = config.getProperty(\"myApplication.listingFolder\");\n    // and use this parameter instead of the hard coded path\n    File userList = new File(listingFolder, \"users.txt\"); // Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>\n\n"
  }, {
    "summary": "Class names should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-101",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>\n\n"
  }, {
    "summary": "Method names should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-100",
    "tags": ["convention"],
    "description": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic int DoSomething(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int doSomething(){...}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded. </p>\n<pre>\n@Override\npublic int Do_Something(){...}\n</pre>\n\n"
  }, {
    "summary": "Track uses of \"TODO\" tags",
    "type": "Code Smell",
    "defaultSeverity": "Info",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1135",
    "tags": ["cwe"],
    "description": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>\n\n"
  }, {
    "summary": "Deprecated code should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Info",
    "inDefaultProfile": true,
    "ruleKey": "RSPEC-1133",
    "tags": ["obsolete"],
    "description": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "\"@RequestMapping\" methods should be \"public\"",
    "type": "Vulnerability",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3751",
    "tags": ["spring"],
    "description": "<p>A <code>@Controller</code> method with a <code>@RequestMapping</code> annotation will be called to handle matching web requests. That will happen\neven if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility. </p>\n<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if you've tried to control web access to your sensitive, <code>private</code>,\n<code>@RequestMapping</code> method by marking it <code>@Secured</code> ... it will still be called, whether or not the user is authorized to access\nit. That's because AOP proxies are not applied to non-public methods. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\nprivate String greet(String greetee) {  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\npublic String greet(String greetee) {\n</pre>\n\n"
  }, {
    "summary": "Struts validation forms should have unique names",
    "type": "Vulnerability",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3374",
    "tags": ["cwe", "struts"],
    "description": "<p>According to the Common Weakness Enumeration,</p>\n<blockquote>\n  If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the\n  other. This decision might not correspond to the programmer's expectations...\n</blockquote>\n<p>In such a case, it is likely that the two forms should be combined. At the very least, one should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/102.html\">MITRE, CWE-102</a> - Struts: Duplicate Validation Forms </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Struts:_Duplicate_Validation_Forms#Struts:_Duplicate_Validation_Forms\">OWASP, Improper Data\n  Validation</a> - Struts: Duplicate Validation Forms </li>\n</ul>\n\n"
  }, {
    "summary": "Security constraints should be defined",
    "type": "Vulnerability",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3369",
    "tags": ["cwe", "websphere", "jee", "owasp-a7"],
    "description": "<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes,\nbut it's a start, and should be used at least as a base.</p>\n<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-constraint&gt;</code> elements.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284.html\">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\">OWASP Top Ten 2013 Category A7</a> - Missing\n  Function Level Access Control </li>\n</ul>\n\n"
  }, {
    "summary": "\"javax.crypto.NullCipher\" should not be used for anything other than testing",
    "type": "Vulnerability",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2258",
    "tags": ["cwe", "owasp-a6", "sans-top25-porous"],
    "description": "<p>By contract, the <code>NullCipher</code> class provides an \"identity cipher\" <del></del> one that does not transform or encrypt the plaintext in\nany way. As a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nNullCipher nc=new NullCipher();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#NULL_CIPHER\">NullCipher Unsafe</a> </li>\n</ul>\n\n"
  }, {
    "summary": "Custom resources should be closed",
    "type": "Bug",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3546",
    "tags": ["denial-of-service"],
    "description": "<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule\ntemplate allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom\nresources are leaked.</p>\n<h2>See also</h2>\n<ul>\n  <li> {rule:squid:S2095} - Resources should be closed </li>\n</ul>\n\n"
  }, {
    "summary": "EJB interceptor exclusions should be declared as annotations",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3282",
    "tags": ["pitfall"],
    "description": "<p>Exclusions for default interceptors can be declared either in xml or as class annotations. Since annotations are more visible to maintainers, they\nare preferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;assembly-descriptor&gt;\n      &lt;interceptor-binding&gt;\n         &lt;ejb-name&gt;MyExcludedClass&lt;/ejb-name&gt;\n         &lt;exclude-default-interceptors&gt;true&lt;/exclude-default-interceptors&gt; &lt;!-- Noncompliant --&gt;\n         &lt;exclude-class-interceptors&gt;true&lt;/exclude-class-interceptors&gt; &lt;!-- Noncomopliant --&gt;\n         &lt;method&gt;\n           &lt;method-name&gt;doTheThing&lt;/method-name&gt;\n         &lt;/method&gt;\n      &lt;/interceptor-binding&gt;\n\n&lt;/assembly-descriptor&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@ExcludeDefaultInterceptors\npublic class MyExcludedClass implements MessageListener\n{\n\n  @ExcludeClassInterceptors\n  @ExcludeDefaultInterceptors\n  public void doTheThing() {\n    // ...\n  }\n</pre>\n\n"
  }, {
    "summary": "Tests should include assertions",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2699",
    "tags": ["tests"],
    "description": "<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.</p>\n<p>This rule raises an exception when no assertions from any of the following frameworks are found in a test:</p>\n<ul>\n  <li> Junit </li>\n  <li> Fest 1.x </li>\n  <li> Fest 2.x </li>\n  <li> Rest-assured 2.0 </li>\n  <li> AssertJ </li>\n  <li> Hamcrest </li>\n  <li> Spring's <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> </li>\n  <li> Truth Framework </li>\n  <li> Mockito </li>\n  <li> EasyMock </li>\n  <li> JMock </li>\n  <li> WireMock </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass = new MyClass();\n  myClass.doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoSomething() {\n  MyClass myClass = new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n</pre>\n\n"
  }, {
    "summary": "Threads should not be started in constructors",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2693",
    "tags": ["multi-threading", "cert", "pitfall"],
    "description": "<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you'll have a confusing mess on your hands if the class is ever\nextended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>\n<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  Thread thread = null;\n\n  public MyClass(Runnable runnable) {\n    thread = new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZQIRAg\">CERT, TSM02-J.</a> - Do not use background threads during class initialization\n  </li>\n</ul>\n\n"
  }, {
    "summary": "\"main\" should not \"throw\" anything",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2096",
    "tags": ["error-handling"],
    "description": "<p>There's no reason for a <code>main</code> method to <code>throw</code> anything. After all, what's going to catch it? </p>\n<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and\nperform whatever logging or user communication is necessary, and <code>exit</code> with a non-zero (i.e. non-success) exit code if necessary.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String args[]) throws Exception { // Noncompliant\n  doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String args[]) {\n try {\n    doSomething();\n  } catch (Throwable t) {\n    log.error(t);\n    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Track lack of copyright and license headers",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1451",
    "tags": [],
    "description": "<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>\n\n"
  }, {
    "summary": "Octal values should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1314",
    "tags": ["misra", "cert", "pitfall"],
    "description": "<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myNumber = 8;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>\n  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used </li>\n  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_QC7AQ\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a\n  decimal value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>\n\n"
  }, {
    "summary": "Exit methods should not be called",
    "type": "Code Smell",
    "defaultSeverity": "Blocker",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1147",
    "tags": ["cwe", "cert", "suspicious"],
    "description": "<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n<h2>Exceptions</h2>\n<p>These methods are ignored inside <code>main</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/382.html\">MITRE, CWE-382</a> - Use of System.exit() </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PoYbAQ\">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>\n</ul>\n\n"
  }, {
    "summary": "Members of Spring components should be injected",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3749",
    "tags": ["spring"],
    "description": "<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s are singletons by default, meaning only one instance of the\nclass is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all\nnon-<code>static</code> members should be managed by Spring. That is, they should have one of these annotations: <code>@Resource</code>,\n<code>@Inject</code>, <code>@Autowired</code> or <code>@Value</code>.</p>\n<p>Having non-injected members in one of these classes could indicate an attempt to manage state. Because they are singletons, such an attempt is\nalmost guaranteed to eventually expose data from User1's session to User2. </p>\n<p>This rule raises an issue when a singleton <code>@Controller</code>, <code>@Service</code>, or <code>@Repository</code> has non-<code>static</code>\nmembers that are not annotated with one of:</p>\n<ul>\n  <li> <code>org.springframework.beans.factory.annotation.Autowired</code> </li>\n  <li> <code>org.springframework.beans.factory.annotation.Value</code> </li>\n  <li> <code>javax.annotation.Inject</code> </li>\n  <li> <code>javax.annotation.Resource</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    if (greetee != null) {\n      this.name = greetee;\n    }\n\n    return \"Hello \" + this.name;  // if greetee is null, you see the previous user's data\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Classes should not be loaded dynamically",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2658",
    "tags": ["cwe", "owasp-a1"],
    "description": "<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn't even have to instantiate or\nexplicitly invoke methods on such classes to be vulnerable to an attack.</p>\n<p>This rule raises an issue for each use of dynamic class loading.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString className = System.getProperty(\"messageClassName\");\nClass clazz = Class.forName(className);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top 10 2013 Category A1</a> - Injection </li>\n</ul>\n\n"
  }, {
    "summary": "Only standard cryptographic algorithms should be used",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2257",
    "tags": ["cwe", "owasp-a6", "sans-top25-porous"],
    "description": "<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, ... should be used instead.</p>\n<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyCryptographicAlgorithm extends MessageDigest {\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST\">MessageDigest is Custom</a>\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Pseudorandom number generators (PRNGs) should not be used in secure contexts",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2245",
    "tags": ["cwe", "cert", "owasp-a6"],
    "description": "<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.</p>\n<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code>\nmethod should not be used for security-critical applications or for protecting sensitive data. In such context, the\n<code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom random = new Random();\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/338.html\">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/330.html\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/310\">MITRE, CWE-310</a> - Cryptographic Issues </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/mAFqAQ\">CERT, MSC02-J.</a> - Generate strong random numbers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/qw4\">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom\n  numbers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/WYIyAQ\">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom\n  numbers </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n</ul>\n\n"
  }, {
    "summary": "HTTP referers should not be relied on",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2089",
    "tags": ["cwe", "sans-top25-porous", "owasp-a2"],
    "description": "<p>The fields in an HTTP request are putty in the hands of an attacker, and you cannot rely on them to tell you the truth about anything. While it may\nbe safe to store such values after they have been neutralized, decisions should never be made based on their contents.</p>\n<p>This rule flags uses of the referer header field.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n    String referer = request.getHeader(\"referer\");  // Noncompliant\n    if(isTrustedReferer(referer)){\n      //..\n    }\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/807\">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/293\">MITRE, CWE-293</a> - Using Referer Field for Authentication </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n</ul>\n\n"
  }, {
    "summary": "Values passed to LDAP queries should be sanitized",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2078",
    "tags": ["cwe", "owasp-a1", "cert"],
    "description": "<p>Applications that execute LDAP queries should neutralize any externally-provided values in those commands. Failure to do so could allow an attacker\nto include input that changes the query so that unintended commands are executed, or sensitive data is exposed. Unhappily LDAP doesn't provide any\nprepared statement interfaces like SQL to easily remove this risk. So each time a LDAP query is built dynamically this rule logs an issue.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic User lookupUser(String username, String base, String [] requestedAttrs) {\n\n  // ...\n  DirContext dctx = new InitialDirContext(env);\n\n  SearchControls sc = new SearchControls();\n  sc.setReturningAttributes(requestedAttrs);  // Noncompliant\n  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n\n  String filter = \"(&amp;(objectClass=user)(sAMAccountName=\" + username + \"))\";\n\n  NamingEnumeration results = dctx.search(base,  // Noncompliant\n        filter,  // Noncompliant; parameter concatenated directly into string\n        sc);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic User lookupUser(String username, String base, String [] requestedAttrs) {\n\n  // ...\n  DirContext dctx = new InitialDirContext(env);\n\n  SearchControls sc = new SearchControls();\n  sc.setReturningAttributes(buildAttrFilter(requestedAttrs));  // Compliant; method presumably scrubs input\n  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n\n  String useBase = \"ou=People\";\n  if (! base.startsWith(useBase)) {\n    useBase = base;\n  }\n\n  String filter = \"(&amp;(objectClass=user)(sAMAccountName=\" + username.replaceAll(\"[()| ]\",\"\") + \"))\";\n\n  NamingEnumeration results = dctx.search(useBase,  // Compliant; originally value used conditionally\n        filter,  // Compliant; parameter NOT concatenated directly into string\n        sc);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/90\">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP\n  Injection') </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/CgLEAw\">CERT, IDS54-J.</a> - Prevent LDAP injection </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#LDAP_INJECTION\">Potential LDAP Injection</a> </li>\n</ul>\n\n"
  }, {
    "summary": "Values passed to OS commands should be sanitized",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2076",
    "tags": ["cwe", "owasp-a1", "sans-top25-insecure"],
    "description": "<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any\nexternally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands, or\nexposes sensitive data.</p>\n<p>This rule logs issues for dynamically-built commands, and when parameter values are used to influence how a command is run. it's then up to the\nauditor to figure out if the command execution is secure or not. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void listContent(String input) {\n  Runtime rt = Runtime.getRuntime();\n  rt.exec(\"ls \" + input); // Noncompliant; input could easily contain extra commands\n  ...\n}\n\npublic void execute(String command, String argument) {\n  ProcessBuilder pb = new ProcessBuilder(command, argument); // Noncompliant\n  ...\n}\n\npublic void doTheThing(String path) {\n  ProcessBuilder pb = new ProcessBuilder(\"ls\");  // command hard coded. So far, so good\n  pb.redirectOutput(path);  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/78\">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/88\">MITRE, CWE-88</a> - Argument Injection or Modification </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from the FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#COMMAND_INJECTION\">Potential Command Injection</a>\n  </li>\n</ul>\n\n"
  }, {
    "summary": "SHA-1 and Message-Digest hash algorithms should not be used",
    "type": "Vulnerability",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2070",
    "tags": ["cwe", "owasp-a6", "sans-top25-porous"],
    "description": "<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,\nit takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash\nvalue gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,\nMD4, MD6, RIPEMD160.</p>\n<p>The following APIs are tracked for use of obsolete crypto algorithms:</p>\n<p> * <code>java.security.AlgorithmParameters</code> (JDK)</p>\n<p> * <code>java.security.AlgorithmParameterGenerator</code> (JDK)</p>\n<p> * <code>java.security.MessageDigest</code> (JDK)</p>\n<p> * <code>java.security.KeyFactory</code> (JDK)</p>\n<p> * <code>java.security.KeyPairGenerator</code> (JDK)</p>\n<p> * <code>java.security.Signature</code> (JDK)</p>\n<p> * <code>javax.crypto.Mac</code> (JDK)</p>\n<p> * <code>javax.crypto.KeyGenerator</code> (JDK)</p>\n<p> * <code>org.apache.commons.codec.digest.DigestUtils</code> (Apache Commons Codec)</p>\n<p> * <code>com.google.common.hash.Hashing</code> (Guava)</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA1\");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/328\">MITRE, CWE-328</a> - Reversible One-Way Hash </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST\">MessageDigest Is Weak</a> </li>\n</ul>\n\n"
  }, {
    "summary": "Equality operators should not be used in \"for\" loop termination conditions",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-888",
    "tags": ["cwe", "misra", "cert", "suspicious"],
    "description": "<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li> starts below the ending value and is incremented by 1 on each iteration. </li>\n  <li> starts above the ending value and is decremented by 1 on each iteration. </li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 6-5-2 </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/835\">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwDJAQ\">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/GwDJAQ\">CERT, MSC21-CPP.</a> - Use inequality to terminate a loop whose counter changes\n  by more than one </li>\n</ul>\n\n"
  }, {
    "summary": "Number patterns should be regular",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3937",
    "tags": ["suspicious"],
    "description": "<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>\n<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint duos = 1_00_00;\nint million = 1_000_00_000;  // Noncompliant\nint thousand = 1000;\nint tenThousand = 100_00;  // Noncompliant\n</pre>\n\n"
  }, {
    "summary": "Literal boolean values should not be used in assertions",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2701",
    "tags": ["junit", "tests"],
    "description": "<p>There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.assertTrue(true);  // Noncompliant\nassertThat(true).isTrue(); // Noncompliant\n</pre>\n\n"
  }, {
    "summary": "Lazy initialization of \"static\" fields should be \"synchronized\"",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2444",
    "tags": ["multi-threading"],
    "description": "<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of non-<code>volatile</code> fields could mean that a second thread\nhas access to a half-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the\ninitialization block should be <code>synchronized</code> or the variable made <code>volatile</code>.</p>\n<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected static Object instance = null;\n\npublic static Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();  // Noncompliant\n    return instance;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected static volatile Object instance = null;\n\npublic static Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();\n    return instance;\n}\n</pre>\n<p>or </p>\n<pre>\nprotected static Object instance = null;\n\npublic static synchronized Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();\n    return instance;\n}\n</pre>\n\n"
  }, {
    "summary": "Wildcard imports should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2208",
    "tags": ["pitfall"],
    "description": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>\n\n"
  }, {
    "summary": "Modulus results should not be checked for direct equality",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2197",
    "tags": ["cert", "suspicious"],
    "description": "<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 != 0;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/xAHAAQ\">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQBi\">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_YBLAQ\">CERT, INT10-CPP.</a> - Do not assume a positive remainder when using the %\n  operator </li>\n</ul>\n\n"
  }, {
    "summary": "Comparators should be \"Serializable\"",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2063",
    "tags": ["serialization", "pitfall"],
    "description": "<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the\noverhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {\n  private static final long serialVersionUID = 1;\n\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>\n\n"
  }, {
    "summary": "\"Serializable\" classes should have a version id",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2057",
    "tags": ["serialization", "cert", "pitfall"],
    "description": "<p>A <code>serialVersionUID</code> field is required in all <code>Serializable</code> classes. If you do not provide one, one will be calculated for\nyou by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an entirely new id,\nand you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the class.</p>\n<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.\n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s),\nand classes marked with <code>@SuppressWarnings(\"serial\")</code> are ignored.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYCpAQ\">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Constructors should only call non-overridable methods",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1699",
    "tags": ["cert", "pitfall"],
    "description": "<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.</p>\n<p>For example:</p>\n<ul>\n  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>\n  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>\n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  <code>NullPointerException</code>) can result, because the fields aren't initialized yet. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo = foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/MYYbAQ\">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/TQBi\">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or\n  destructors </li>\n</ul>\n\n"
  }, {
    "summary": "@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1609",
    "tags": [],
    "description": "<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as\n<code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and\n<code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or\nMethod references. </p>\n<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would\nbreak the use of Lambda implementations.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>\n\n"
  }, {
    "summary": "Methods should not be too complex",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1541",
    "tags": ["brain-overload"],
    "description": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>\n\n"
  }, {
    "summary": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-134",
    "tags": ["brain-overload"],
    "description": "<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Classes should not be too complex",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1311",
    "tags": [],
    "description": "<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>,\n<code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>,\n<code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance\ninitializer in the class. The last return statement in method, if exists, is not taken into account.</p>\n<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the\ntime, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several\nclasses.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>\n\n"
  }, {
    "summary": "Control structures should use curly braces",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-121",
    "tags": ["misra", "cert", "pitfall"],
    "description": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>\n\n"
  }, {
    "summary": "Expressions should not be too complex",
    "type": "Code Smell",
    "defaultSeverity": "Critical",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1067",
    "tags": ["brain-overload"],
    "description": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>\n\n"
  }, {
    "summary": "Untrusted data should not be stored in sessions",
    "type": "Vulnerability",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3318",
    "tags": ["cwe"],
    "description": "<p>Data in a web session is considered inside the \"trust boundary\". That is, it is assumed to be trustworthy. But storing unvetted data from an\nunauthenticated user violates the trust boundary, and may lead to that data being used inappropriately.</p>\n<p>This rule raises an issue when data from <code>Cookie</code>s or <code>HttpServletRequest</code>s is stored in a session. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlogin = request.getParameter(\"login\");\nsession.setAttribute(\"login\", login);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/501\">MITRE, CWE-501</a> - Trust Boundary Violation </li>\n</ul>\n\n"
  }, {
    "summary": "Spring \"@Controller\" classes should not use \"@Scope\"",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3750",
    "tags": ["spring"],
    "description": "<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s have <code>singleton</code> scope by default, meaning only\none instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn\nas new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the\nserver.</p>\n<p>This rule raises an issue when the <code>@Scope</code> annotation is applied to a <code>@Controller</code>, <code>@Service</code>, or\n<code>@Repository</code> with any value but \"singleton\". <code>@Scope(\"singleton\")</code> is redundant, but ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Scope(\"prototype\")  // Noncompliant\n@Controller\npublic class HelloWorld {\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n</pre>\n\n"
  }, {
    "summary": "Constructor injection should be used instead of field injection",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3306",
    "tags": ["design", "pitfall"],
    "description": "<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a <code>NullPointerException</code>\nwaiting to happen unless all your class constructors are <code>private</code>. That's because any class instances that are constructed by callers,\nrather than instantiated by the Spring framework, won't have the ability to perform the field injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor\n\n  @Inject MyCollaborator collaborator;  // Noncompliant\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Classes that don't define \"hashCode()\" should not be used in hashes",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2141",
    "tags": [],
    "description": "<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define\n<code>equals(Object)</code> but not <code>hashCode()</code> aren't truly hash-able because instances that are equivalent according to the\n<code>equals</code> method can return different hashes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Student {  // no hashCode() method; not hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = // okay so far\n          new HashTable&lt;Student, Integer&gt;(); // Noncompliant\n\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Student {  // has hashCode() method; hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n  public int hashCode() {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();\n\n  // ...\n</pre>\n\n"
  }, {
    "summary": "\"instanceof\" operators that always return \"true\" or \"false\" should be removed",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1850",
    "tags": [],
    "description": "<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding\nwhich could lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  String name = null;\n\n  if (name instanceof String) { // Noncompliant; always false since name is null\n    //...\n  }\n\n  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer\n    doSomething();\n  }\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:squid:S2589} instead.</p>\n\n"
  }, {
    "summary": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1697",
    "tags": [],
    "description": "<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null || str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null &amp;&amp; str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:squid:S2259} instead.</p>\n\n"
  }, {
    "summary": "Floating point numbers should not be tested for equality",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1244",
    "tags": ["misra"],
    "description": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>\n\n"
  }, {
    "summary": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
    "type": "Bug",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1145",
    "tags": ["cwe", "misra"],
    "description": "<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {\n  doSomething();\n}\n...\nif (false) {\n  doSomethingElse();\n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nboolean b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:squid:S2583} instead.</p>\n\n"
  }, {
    "summary": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-881",
    "tags": ["misra", "cert"],
    "description": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>\n\n"
  }, {
    "summary": "Limited dependence should be placed on operator precedence rules in expressions",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-864",
    "tags": ["cwe", "misra", "cert"],
    "description": "<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational\noperators are used in together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n  <tbody>\n    <tr>\n      <td> </td>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td><code>&amp;</code></td>\n      <td><code>^</code></td>\n      <td> <code>|</code> </td>\n    </tr>\n    <tr>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&amp;</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>^</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td> <code>|</code> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions </li>\n  <li> MISRA C:2004, 12.2 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>\n  <li> MISRA C++:2008, 5-0-1 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions </li>\n  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_wI\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VoAyAQ\">CERT, EXP00-CPP.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9wHEAw\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/783.html\">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>\n</ul>\n\n"
  }, {
    "summary": "Duplicate values should not be passed as arguments",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-4142",
    "tags": ["suspicious"],
    "description": "<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was\nintended for one of the arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (compare(myPoint.x, myPoint.x) != 0) { // Noncompliant\n&nbsp;&nbsp;//...\n}\n\nif (compare(getNextValue(), getNextValue()) != 0) { // Noncompliant\n&nbsp;&nbsp;// ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (compare(myPoint.x, myPoint.y) != 0) {\n&nbsp;&nbsp;//...\n}\n\nObject v1 = getNextValue();\nObject v2 = getNextValue();\nif (compare(v1, v2) != 0) {\n&nbsp;&nbsp;// ...\n}\n</pre>\n\n"
  }, {
    "summary": "Track uses of disallowed constructors",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-4011",
    "tags": [],
    "description": "<p>This rule allows banning usage of certain constructors.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className: java.util.Date </li>\n  <li> argumentTypes: java.lang.String </li>\n</ul>\n<pre>\nDate birthday;\nbirthday = new Date(\"Sat Sep 27 05:42:21 EDT 1986\");  // Noncompliant\nbirthday = new Date(528176541000L); // Compliant\n</pre>\n\n"
  }, {
    "summary": "\"Optional\" should not be used for parameters",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3553",
    "tags": ["clumsy"],
    "description": "<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value. </p>\n<p>And for that, it's valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really\nincreasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and there's really no reason to have <code>Optional</code> parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String sayHello(Optional&lt;String&gt; name) {  // Noncompliant\n  if (name == null || !name.isPresent()) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String sayHello(String name) {\n  if (name == null) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Track uses of disallowed dependencies",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3417",
    "tags": ["maven"],
    "description": "<p>Whether they are disallowed locally for security, license, or dependability reasons, forbidden dependencies should not be used. </p>\n<p>This rule raises an issue when the group or artifact id of a direct dependency matches the configured forbidden dependency pattern. </p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter of: <code>*:.*log4j.*</code></p>\n<pre>\n&lt;dependency&gt; &lt;!-- Noncompliant --&gt;\n    &lt;groupId&gt;log4j&lt;/groupId&gt;\n    &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n    &lt;version&gt;1.2.17&lt;/version&gt;\n&lt;/dependency&gt;\n</pre>\n\n"
  }, {
    "summary": "Classes should not have too many \"static\" imports",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3030",
    "tags": ["brain-overload"],
    "description": "<p>Importing a class statically allows you to use its <code>public static</code> members without qualifying them with the class name. That can be\nhandy, but if you import too many classes statically, your code can become confusing and difficult to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value: 4</p>\n<pre>\nimport static java.lang.Math.*;\nimport static java.util.Collections.*;\nimport static com.myco.corporate.Constants.*;\nimport static com.myco.division.Constants.*;\nimport static com.myco.department.Constants.*;  // Noncompliant\n</pre>\n\n"
  }, {
    "summary": "Escaped Unicode characters should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2973",
    "tags": ["confusing"],
    "description": "<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>\n<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString prefix = \"n\\u00E9e\"; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString prefix = \"n\u00e9e\";\n</pre>\n\n"
  }, {
    "summary": "Inner classes should not have too many lines of code",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2972",
    "tags": ["brain-overload"],
    "description": "<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.</p>\n\n"
  }, {
    "summary": "Inner classes which do not reference their owning classes should be \"static\"",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2694",
    "tags": ["performance"],
    "description": "<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary. </p>\n<p>If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it. </p>\n<p>However, while a nested/<code>static</code> class would be more efficient, it's worth nothing that there are semantic differences between an inner\nclass and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "\"deleteOnExit\" should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2308",
    "tags": ["performance"],
    "description": "<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>\n<ul>\n  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>\n  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant\n</pre>\n\n"
  }, {
    "summary": "Public methods should not contain selector arguments",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2301",
    "tags": ["design"],
    "description": "<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it's well named. </p>\n<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at\nthe meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n</pre>\n\n"
  }, {
    "summary": "Java parser failure",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2260",
    "tags": ["suspicious"],
    "description": "<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>\n\n"
  }, {
    "summary": "Track uses of disallowed methods",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2253",
    "tags": [],
    "description": "<p>This rule allows banning certain methods.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n  <li> methodName: replace </li>\n  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>\n</ul>\n<pre>\nString name;\nname.replace(\"A\",\"a\");  // Noncompliant\n</pre>\n\n"
  }, {
    "summary": "Types should be used in lambdas",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2211",
    "tags": ["convention", "java8"],
    "description": "<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (a, b) -&gt; {  // Noncompliant\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -&gt; {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n\n"
  }, {
    "summary": "\"java.time\" classes should be used for dates and times",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2143",
    "tags": ["java8", "pitfall"],
    "description": "<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8's JSR 310\nimplementation offers specific classes for:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Class</th>\n      <th>Use for</th>\n    </tr>\n    <tr>\n      <td>LocalDate</td>\n      <td>a date, without time of day, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalTime</td>\n      <td>the time of day, without date, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalDateTime</td>\n      <td>the date and time, without offset, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDate</td>\n      <td>a date with an offset such as +02:00, without time of day, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetTime</td>\n      <td>the time of day with an offset such as +02:00, without date, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDateTime</td>\n      <td>the date and time with an offset such as +02:00, without a zone</td>\n    </tr>\n    <tr>\n      <td>ZonedDateTime</td>\n      <td>the date and time with a time zone and offset</td>\n    </tr>\n    <tr>\n      <td>YearMonth</td>\n      <td>a year and month</td>\n    </tr>\n    <tr>\n      <td>MonthDay</td>\n      <td>month and day</td>\n    </tr>\n    <tr>\n      <td>Year/MonthOfDay/DayOfWeek/...</td>\n      <td>classes for the important fields</td>\n    </tr>\n    <tr>\n      <td>DateTimeFields</td>\n      <td>stores a map of field-value pairs which may be invalid</td>\n    </tr>\n    <tr>\n      <td>Calendrical</td>\n      <td>access to the low-level API</td>\n    </tr>\n    <tr>\n      <td>Period</td>\n      <td>a descriptive amount of time, such as \"2 months and 3 days\"</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate now = new Date();  // Noncompliant\nDateFormat df = new SimpleDateFormat(\"dd.MM.yyyy\");\nCalendar christmas  = Calendar.getInstance();  // Noncompliant\nchristmas.setTime(df.parse(\"25.12.2020\"));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLocalDate now = LocalDate.now();  // gets calendar date. no time component\nLocalTime now2 = LocalTime.now(); // gets current time. no date component\nLocalDate christmas = LocalDate.of(2020,12,25);\n</pre>\n\n"
  }, {
    "summary": "The names of methods with boolean return values should start with \"is\" or \"has\"",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2047",
    "tags": ["convention"],
    "description": "<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean should have names that start with \"is\" or \"has\" rather than with \"get\".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean getFoo() { // Noncompliant\n  // ...\n}\n\npublic boolean getBar(Bar c) { // Noncompliant\n  // ...\n}\n\npublic boolean testForBar(Bar c) { // Compliant - The method does not start by 'get'.\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isFoo() {\n  // ...\n}\n\npublic boolean hasBar(Bar c) {\n  // ...\n}\n\npublic boolean testForBar(Bar c) {\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded.</p>\n<pre>\n@Override\npublic boolean getFoo(){\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "Files should contain only one top-level class or interface each",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1996",
    "tags": ["brain-overload"],
    "description": "<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.</p>\n\n"
  }, {
    "summary": "Classes should not have too many fields",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1820",
    "tags": ["brain-overload"],
    "description": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>\n\n"
  }, {
    "summary": "The ternary operator should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1774",
    "tags": ["brain-overload"],
    "description": "<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose <code>if</code>/<code>else</code> structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(i&gt;10?\"yes\":\"no\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (i &gt; 10) {\n  System.out.println((\"yes\");\n} else {\n  System.out.println(\"no\");\n}\n</pre>\n\n"
  }, {
    "summary": "Standard functional interfaces should not be redefined",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1711",
    "tags": ["java8"],
    "description": "<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.</p>\n<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n</pre>\n\n"
  }, {
    "summary": "\"NullPointerException\" should not be caught",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1696",
    "tags": ["cwe", "error-handling", "cert"],
    "description": "<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can\neasily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of\nthe conditional.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/395.html\">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer\n  Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>\n\n"
  }, {
    "summary": "\"NullPointerException\" should not be explicitly thrown",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1695",
    "tags": ["pitfall"],
    "description": "<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE's. </p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely\nthrow an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation\ninstead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>\n\n"
  }, {
    "summary": "Classes should not have too many methods",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1448",
    "tags": ["brain-overload"],
    "description": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>\n\n"
  }, {
    "summary": "Methods should not have too many lines",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-138",
    "tags": ["brain-overload"],
    "description": "<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.</p>\n\n"
  }, {
    "summary": "Track uses of \"NOSONAR\" comments",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1291",
    "tags": ["bad-practice"],
    "description": "<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>\n\n"
  }, {
    "summary": "Classes and enums with private members should have a constructor",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1258",
    "tags": ["pitfall"],
    "description": "<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Track comments matching a regular expression",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-124",
    "tags": [],
    "description": "<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>\n\n"
  }, {
    "summary": "Statements should be on separate lines",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-122",
    "tags": ["style"],
    "description": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>\n\n"
  }, {
    "summary": "Track breaches of architectural constraints",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1212",
    "tags": [],
    "description": "<p>A source code comply to an architectural model when it fully adheres to a set of architectural constraints. A constraint allows to deny references\nbetween classes by pattern.</p>\n<p>You can for instance use this rule to :</p>\n<ul>\n  <li> forbid access to <code>**.web.**</code> from <code>**.dao.**</code> classes </li>\n  <li> forbid access to <code>java.util.Vector</code>, <code>java.util.Hashtable</code> and <code>java.util.Enumeration</code> from any classes </li>\n  <li> forbid access to <code>java.sql.**</code> from <code>**.ui.**</code> and <code>**.web.**</code> classes </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>\n\n"
  }, {
    "summary": "Classes should not be coupled to too many other classes (Single Responsibility Principle)",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1200",
    "tags": ["brain-overload"],
    "description": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Cycles between packages should be removed",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1196",
    "tags": ["design"],
    "description": "<p>When several packages are involved in a cycle (package A &gt; package B &gt; package C &gt; package A, where \"&gt;\" means \"depends upon\"), that\nmeans those packages are highly coupled, and there is no way to reuse/extract one of those packages without importing all the other packages. Such\ncycle could quickly increase the effort required to maintain an application and embrace business change. </p>\n<p>SonarQube not only detect cycles between packages, but also calculates the minimum effort to break those cycles. This rule logs a violation on each\nsource file having an outgoing dependency to be cut in order to break a cycle.</p>\n\n"
  }, {
    "summary": "\"java.lang.Error\" should not be extended",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1194",
    "tags": ["error-handling"],
    "description": "<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be\nencountered by the Java Virtual Machine.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>\n\n"
  }, {
    "summary": "Lambdas and anonymous classes should not have too many lines of code",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1188",
    "tags": ["java8"],
    "description": "<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>\n\n"
  }, {
    "summary": "Public types, methods and fields (API) should be documented with Javadoc",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1176",
    "tags": ["convention"],
    "description": "<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way\nto understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>\n<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>\n<ul>\n  <li> Parameters, using <code>@param parameterName</code>. </li>\n  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>\n  <li> Method return values, using <code>@return</code>. </li>\n  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>\n</ul>\n<p>Furthermore the following guidelines should be followed:</p>\n<ul>\n  <li> At least 1 line of description which should have more than one word. </li>\n  <li> All parameters documented with <code>@param</code>, and names should match. </li>\n  <li> All checked exceptions documented with <code>@throws</code> </li>\n  <li> <code>@return</code> present and documented when not <code>void</code>. </li>\n  <li> Placeholders like \"TODO\", \"FIXME\", \"...\" should be avoided. </li>\n</ul>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li> Getters and setters. </li>\n  <li> Methods with <code>@Override</code> annotation. </li>\n  <li> Empty constructors. </li>\n  <li> Static constants. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'\n\n  public static final DEFAULT_STATUS = 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; the parameter of the class\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * Will do something.\n    * @param value the value to be used\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Exception handlers should preserve the original exceptions",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1166",
    "tags": ["error-handling", "cert", "suspicious"],
    "description": "<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/6gEqAQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n</ul>\n\n"
  }, {
    "summary": "Checked exceptions should not be thrown",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1162",
    "tags": ["error-handling"],
    "description": "<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>\n<p>This rule verifies that no method throws a new checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}\n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n</pre>\n\n"
  }, {
    "summary": "Public methods should throw at most one checked exception",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1160",
    "tags": ["error-handling"],
    "description": "<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.</p>\n<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>\n\n"
  }, {
    "summary": "\"switch case\" clauses should not have too many lines of code",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1151",
    "tags": ["brain-overload"],
    "description": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>\n\n"
  }, {
    "summary": "Methods should not have too many return statements",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1142",
    "tags": ["brain-overload"],
    "description": "<p>Having too many return statements in a method increases the method's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>\n\n"
  }, {
    "summary": "Magic numbers should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-109",
    "tags": ["brain-overload"],
    "description": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>\n\n"
  }, {
    "summary": "Files should not have too many lines of code",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-104",
    "tags": ["brain-overload"],
    "description": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>\n\n"
  }, {
    "summary": "Lines should not be too long",
    "type": "Code Smell",
    "defaultSeverity": "Major",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-103",
    "tags": ["convention"],
    "description": "<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>\n\n"
  }, {
    "summary": "Mutable members should not be stored or returned directly",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2384",
    "tags": ["cwe", "unpredictable", "cert"],
    "description": "<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,\n<code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return the copy instead.</p>\n<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"yellow\", \"second\"};\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"first\", \"second\"};\n  }\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/374\">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/375\">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zQCuAQ\">CERT, OBJ05-J.</a> - Do not return references to private mutable class members\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QIEVAQ\">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal\n  components </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/kwCuAQ\">CERT, OOP08-CPP.</a> - Do not return references to private data </li>\n</ul>\n\n"
  }, {
    "summary": "Member variable visibility should be specified",
    "type": "Vulnerability",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2039",
    "tags": [],
    "description": "<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don't expect, and potentially leave it\nopen to unexpected modification by other classes. </p>\n<h2>Compliant Solution</h2>\n<pre>\nclass Ball {\n    private String color=\"red\";  // Compliant\n}\nenum A {\n  B;\n  private int a;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\nclass Cone {\n  @VisibleForTesting\n  Logger logger; // Compliant\n}\n</pre>\n\n"
  }, {
    "summary": "Math should not be performed on floats",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2164",
    "tags": ["cert"],
    "description": "<p>For small numbers, <code>float</code> math has enough precision to yield the expected value, but for larger numbers, it does not.\n<code>BigDecimal</code> is the best alternative, but if a primitive is required, use a <code>double</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nfloat c = a + b; // Noncompliant; yields 1.6777216E7 not 1.6777217E7\n\ndouble d = a + b; // Noncompliant; addition is still between 2 floats\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nBigDecimal c = BigDecimal.valueOf(a).add(BigDecimal.valueOf(b));\n\ndouble d = (double)a + (double)b;\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the mathematical expression is only used to build a string.</p>\n<pre>\nSystem.out.println(\"[\"+getName()+\"] \" +\n           \"\\n\\tMax time to retrieve connection:\"+(max/1000f/1000f)+\" ms.\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/DgU\">CERT, FLP02-C.</a> - Avoid using floating-point numbers when precise computation\n  is needed </li>\n</ul>\n\n"
  }, {
    "summary": "\"equals\" methods should be symmetric and work for subclasses",
    "type": "Bug",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2162",
    "tags": ["cert"],
    "description": "<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is\nsymmetric. </p>\n<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the\nparent is not an <code>instanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a\nnew implementation of <code>equals</code>):</p>\n<pre>\nFruit fruit = new Fruit();\nRaspberry raspberry = new Raspberry();\n\nif (raspberry instanceof Fruit) { ... } // true\nif (fruit instanceof Raspberry) { ... } // false\n</pre>\n<p>If similar <code>instanceof</code> checks were used in the classes' <code>equals</code> methods, the symmetry principle would be broken:</p>\n<pre>\nraspberry.equals(fruit); // false\nfruit.equals(raspberry); //true\n</pre>\n<p>Additionally, non <code>final</code> classes shouldn't use a hardcoded class name in the <code>equals</code> method because doing so breaks the\nmethod for subclasses. Instead, make the comparison dynamic.</p>\n<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while\n<code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class\n      // ...\n    }\n    //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (this.getClass() == obj.getClass()) {\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    return false;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zIUbAQ\">CERT, MET08-J.</a> - Preserve the equality contract when overriding the\n  equals() method </li>\n</ul>\n\n"
  }, {
    "summary": "Literal suffixes should be upper case",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-818",
    "tags": ["convention", "misra", "cert", "pitfall"],
    "description": "<p>Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlong long1 = 1l; // Noncompliant\nfloat float1 = 1.0f; // Noncompliant\ndouble double1 = 1.0d; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlong long1 = 1L;\nfloat float1 = 1.0F;\ndouble double1 = 1.0D;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>\n  <li> MISRA C:2012, 7.3 - The lowercase character \"l\" shall not be used in a literal suffix </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/koAtAQ\">CERT DCL16-C</a> - Use \"L,\" not \"l,\" to indicate a long value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/n4AtAQ\">CERT DCL16-CPP</a> - Use \"L,\" not \"l,\" to indicate a long value </li>\n</ul>\n\n"
  }, {
    "summary": "Local constants should follow naming conventions for constants",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-4174",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all local, <code>final</code>, initialized, primitive\nvariables, have names that match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic void doSomething() {\n  final int local = 42;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  final int LOCAL = 42;\n  ...\n}\n</pre>\n\n"
  }, {
    "summary": "Unit tests should throw exceptions",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3658",
    "tags": ["tests", "clumsy"],
    "description": "<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature. </p>\n<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testMethod() {\n  try {\n            // Some code\n  } catch (MyException e) {\n    Assert.fail(e.getMessage());  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testMethod() throws MyException {\n    // Some code\n}\n</pre>\n\n"
  }, {
    "summary": "Test methods should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3578",
    "tags": ["convention", "tests"],
    "description": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>\n<pre>\n@Test\npublic void foo() {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testFoo() {\n  // ...\n}\n</pre>\n\n"
  }, {
    "summary": "Test classes should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3577",
    "tags": ["convention", "tests"],
    "description": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9]+|[A-Z][a-zA-Z0-9]*(Test|IT|TestCase|ITCase))$</code></p>\n<pre>\nclass Foo {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass FooTest {\n}\n</pre>\n\n"
  }, {
    "summary": "pom elements should be in the recommended order",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3423",
    "tags": ["convention", "maven"],
    "description": "<p>The POM Code Convention is the Maven project's internal recommendation for POM element ordering. It calls for listing modifiers in the following\norder:</p>\n<ol>\n  <li> &lt;modelVersion/&gt; </li>\n  <li> &lt;parent/&gt; </li>\n  <li> &lt;groupId/&gt; </li>\n  <li> &lt;artifactId/&gt; </li>\n  <li> &lt;version/&gt; </li>\n  <li> &lt;packaging/&gt; </li>\n  <li> &lt;name/&gt; </li>\n  <li> &lt;description/&gt; </li>\n  <li> &lt;url/&gt; </li>\n  <li> &lt;inceptionYear/&gt; </li>\n  <li> &lt;organization/&gt; </li>\n  <li> &lt;licenses/&gt; </li>\n  <li> &lt;developers/&gt; </li>\n  <li> &lt;contributors/&gt; </li>\n  <li> &lt;mailingLists/&gt; </li>\n  <li> &lt;prerequisites/&gt; </li>\n  <li> &lt;modules/&gt; </li>\n  <li> &lt;scm/&gt; </li>\n  <li> &lt;issueManagement/&gt; </li>\n  <li> &lt;ciManagement/&gt; </li>\n  <li> &lt;distributionManagement/&gt; </li>\n  <li> &lt;properties/&gt; </li>\n  <li> &lt;dependencyManagement/&gt; </li>\n  <li> &lt;dependencies/&gt; </li>\n  <li> &lt;repositories/&gt; </li>\n  <li> &lt;pluginRepositories/&gt; </li>\n  <li> &lt;build/&gt; </li>\n  <li> &lt;reporting/&gt; </li>\n  <li> &lt;profiles/&gt; </li>\n</ol>\n<p>Not following this convention has no technical impact, but will reduce the pom's readability because most developers are used to the standard\norder.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention\">POM Code Convention</a> </li>\n</ul>\n\n"
  }, {
    "summary": "Artifact ids should follow a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3420",
    "tags": ["convention", "maven"],
    "description": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom's <code>artifactId</code> does not match the\nprovided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n\n"
  }, {
    "summary": "Group ids should follow a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3419",
    "tags": ["convention", "maven"],
    "description": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom's <code>groupId</code> does not match\nthe provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>(com|org)(\\.[a-z][a-z-0-9]*)+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;com.myco&lt;/groupId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n\n"
  }, {
    "summary": "\"action\" mappings should not have too many \"forward\" entries",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3373",
    "tags": ["brain-overload", "struts"],
    "description": "<p>It makes sense to handle all related actions in the same place. Thus, the same <code>&lt;action&gt;</code> might logically handle all facets of\nCRUD on an entity, with no confusion in the naming about which <code>&lt;forward/&gt;</code> handles which facet. But go very far beyond that, and it\nbecomes difficult to maintain a transparent naming convention. </p>\n<p>So to ease maintenance, this rule raises an issue when an <code>&lt;action&gt;</code> has more than the allowed number of\n<code>&lt;forward/&gt;</code> tags.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 4:</p>\n<pre>\n&lt;action path='/book' type='myapp.BookDispatchAction' name='form' parameter='method'&gt;\n  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;\n  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;\n  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;\n  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;\n  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;  &lt;!-- Noncompliant --&gt;\n&lt;/action&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;action path='/book' type='myapp.BookDispatchAction' name='bookForm' parameter='method'&gt;\n  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;\n  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;\n  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;\n  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;\n&lt;/action&gt;\n\n&lt;action path='/author' type='myapp.AuthorDispatchAction' name='authorForm' parameter='method'&gt;\n  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;\n&lt;/action&gt;\n</pre>\n\n"
  }, {
    "summary": "Annotation arguments should appear in the order in which they were declared",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3340",
    "tags": ["convention"],
    "description": "<p>For optimal code readability, annotation arguments should be specified in the same order that they were declared in the annotation definition.</p>\n\n"
  }, {
    "summary": "Default annotation parameter values should not be passed as arguments",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3254",
    "tags": ["finding", "clumsy"],
    "description": "<p>Specifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@MyAnnotation(arg = \"def\")  // Noncompliant\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@MyAnnotation\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n</pre>\n\n"
  }, {
    "summary": "Method parameters should be declared with base types",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3242",
    "tags": ["api-design"],
    "description": "<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.</p>\n\n"
  }, {
    "summary": "Fields should not be initialized to default values",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3052",
    "tags": ["convention", "finding"],
    "description": "<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need\nto explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it's considered poor style to do so.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  int count = 0;  // Noncompliant\n  // ...\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  int count;\n  // ...\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>final</code> fields are ignored.</p>\n\n"
  }, {
    "summary": "Multiple loops over the same set should be combined",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3047",
    "tags": ["performance"],
    "description": "<p>When a method loops multiple over the same set of data, whether it's a list or a set of numbers, it is highly likely that the method could be made\nmore efficient by combining the loops into a single set of iterations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Classes without \"public\" constructors should be \"final\"",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2974",
    "tags": ["design"],
    "description": "<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Unnecessary semicolons should be omitted",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2959",
    "tags": ["convention"],
    "description": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>\n\n"
  }, {
    "summary": "JUnit assertions should include messages",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2698",
    "tags": ["tests"],
    "description": "<p>Adding messages to JUnit assertions is an investment in your future productivity. Spend a few seconds writing them now, and you'll save a lot of\ntime on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the tests and the\nassertion messages work as a sort of documentation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo(\"pear\");  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertEquals(\"There should have been 4 Fruits in the list\", 4, list.size());\n\ntry {\n  fail(\"And exception is expected here\");\n} catch (Exception e) {\n  assertThat(list.get(0)).as(\"check first element\").overridingErrorMessage(\"The first element should be a pear, not a %s\", list.get(0)).isEqualTo(\"pear\");\n}\n</pre>\n\n"
  }, {
    "summary": "Redundant modifiers should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2333",
    "tags": ["finding", "clumsy"],
    "description": "<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically\n<code>public static final</code>. There is no need to explicitly declare them so.</p>\n<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>\n<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, and <code>private</code> is redundant on the\nconstructor of an <code>Enum</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n</pre>\n\n"
  }, {
    "summary": "\"private\" methods that don't access instance data should be \"static\"",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2325",
    "tags": ["pitfall"],
    "description": "<p><code>private</code> methods that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the\nmethod.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>\n<ul>\n  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>\n  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>\n  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>\n</ul>\n\n"
  }, {
    "summary": "Files should not be empty",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2309",
    "tags": ["unused"],
    "description": "<p>Files with no lines of code clutter a project and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>\n\n"
  }, {
    "summary": "Collection methods with O(n) performance should be used carefully",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2250",
    "tags": ["performance"],
    "description": "<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes\nconstant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation. </p>\n<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>\n<ul>\n  <li> <code>ArrayList</code>\n    <ul>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>LinkedList</code>\n    <ul>\n      <li> <code>get</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedQueue</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedDeque</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArrayList</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArraySet</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n//...\nlog.info(\"Queue contains \" + queue.size() + \" elements\");  // Noncompliant\n</pre>\n\n"
  }, {
    "summary": "\"Exception\" should not be caught when not required by called methods",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2221",
    "tags": ["cwe", "error-handling"],
    "description": "<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the <code>catch</code> clause.</p>\n<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n</pre>\n<p>or if runtime exceptions should not be caught:</p>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n</ul>\n\n"
  }, {
    "summary": "\"collect\" should be used with \"Streams\" instead of \"list::add\"",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2203",
    "tags": ["java8"],
    "description": "<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the\nbetter choice because it's automatically thread-safe and parallellizable. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; bookNames = new ArrayList&lt;&gt;();\nbooks.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .forEach(bookNames::add);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .collect(Collectors.toList());\n</pre>\n\n"
  }, {
    "summary": "Switches should be used for sequences of simple \"String\" tests",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2196",
    "tags": ["clumsy"],
    "description": "<p>Since Java 7, <code>String</code>s can be used as <code>switch</code> arguments. So when a single <code>String</code> is tested against three or\nmore values in an <code>if</code>/<code>else if</code> structure, it should be converted to a switch instead for greater readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (\"red\".equals(choice)) {  // Noncompliant\n  dispenseRed();\n} else if (\"blue\".equals(choice)) {\n  dispenseBlue();\n} else if (\"yellow\".equals(choice)) {\n  dispenseYellow();\n} else {\n  promptUser();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch(choice) {\n  case \"Red\":\n    dispenseRed();\n    break;\n  case \"Blue\":\n    dispenseBlue():\n    break;\n  case \"Yellow\":\n    dispenseYellow();\n    break;\n  default:\n    promptUser();\n    break;\n}\n</pre>\n\n"
  }, {
    "summary": "\"final\" classes should not have \"protected\" members",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2156",
    "tags": ["confusing"],
    "description": "<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a\n<code>final</code> class <code>protected</code> is confusingly pointless.</p>\n<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Underscores should be used to make large numbers readable",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2148",
    "tags": ["convention"],
    "description": "<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>\n<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Base</th>\n      <th> Minimum digits</th>\n      <th> Ideal spacing</th>\n    </tr>\n    <tr>\n      <td>binary</td>\n      <td> 9 </td>\n      <td> every 8 </td>\n    </tr>\n    <tr>\n      <td>decimal</td>\n      <td> 5 </td>\n      <td> every 3</td>\n    </tr>\n    <tr>\n      <td>hexadecimal</td>\n      <td> 9 </td>\n      <td> every 4</td>\n    </tr>\n  </tbody>\n</table>\n<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j = 0b01101001010011011110010101011110;  // Noncompliant\nlong l = 0x7fffffffffffffffL;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i = 10_000_000;\nint  j = 0b01101001_01001101_11100101_01011110;\nlong l = 0x7fff_ffff_ffff_ffffL;\n</pre>\n\n"
  }, {
    "summary": "\"Serializable\" inner classes of \"Serializable\" classes should be static",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-2059",
    "tags": ["serialization", "cert", "pitfall"],
    "description": "<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually\nserializable, then the serialization will succeed but possibly write out far more data than was intended. </p>\n<p>Making the inner class <code>static</code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static</code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: </p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public class Drupelet implements Serializable {  // Noncompliant; output may be too large\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public static class Drupelet implements Serializable {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/O4CpAQ\">CERT, SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>\n\n"
  }, {
    "summary": "Classes and methods that rely on the default system encoding should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1943",
    "tags": ["unpredictable", "cert", "i18n"],
    "description": "<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its \"home\" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when it's time to fix them.</p>\n<p>This rule detects uses of the following classes and methods:</p>\n<ul>\n  <li> <code>FileReader</code> </li>\n  <li> <code>FileWriter</code> </li>\n  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument\n    <ul>\n      <li> <code>String(byte[] bytes)</code> </li>\n      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>\n    </ul> </li>\n  <li> <code>String.getBytes()</code> </li>\n  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>\n  <li> <code>InputStreamReader(InputStream in)</code> </li>\n  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>\n  <li> <code>ByteArrayOutputStream.toString()</code> </li>\n  <li> Some <code>Formatter</code> constructors\n    <ul>\n      <li> <code>Formatter(String fileName)</code> </li>\n      <li> <code>Formatter(File file)</code> </li>\n      <li> <code>Formatter(OutputStream os)</code> </li>\n    </ul> </li>\n  <li> Some <code>Scanner</code> constructors\n    <ul>\n      <li> <code>Scanner(File source)</code> </li>\n      <li> <code>Scanner(Path source)</code> </li>\n      <li> <code>Scanner(InputStream source)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintStream</code> constructors\n    <ul>\n      <li> <code>PrintStream(File file)</code> </li>\n      <li> <code>PrintStream(OutputStream out)</code> </li>\n      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintStream(String fileName)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintWriter</code> constructors\n    <ul>\n      <li> <code>PrintWriter(File file)</code> </li>\n      <li> <code>PrintWriter(OutputStream out)</code> </li>\n      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintWriter(String fileName)</code> </li>\n    </ul> </li>\n  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit\n  the encoding argument\n    <ul>\n      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>\n      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>\n      <li> <code>IOUtils.readLines(InputStream)</code> </li>\n      <li> <code>IOUtils.toByteArray(Reader)</code> </li>\n      <li> <code>IOUtils.toByteArray(String)</code> </li>\n      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>\n      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>\n      <li> <code>IOUtils.toString(byte[])</code> </li>\n      <li> <code>IOUtils.toString(URI)</code> </li>\n      <li> <code>IOUtils.toString(URL)</code> </li>\n      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>\n      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>\n      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>\n      <li> <code>FileUtils.readFileToString(File)</code> </li>\n      <li> <code>FileUtils.readLines(File)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>\n      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>\n    </ul> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/FoL5AQ\">CERT, STR04-J.</a> - Use compatible character encodings when communicating\n  string data between JVMs </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JgAWCQ\">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a\n  string </li>\n</ul>\n\n"
  }, {
    "summary": "Simple class names should be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1942",
    "tags": ["confusing", "redundant"],
    "description": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>\n\n"
  }, {
    "summary": "Variables should not be declared before they are relevant",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1941",
    "tags": ["brain-overload"],
    "description": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n\n"
  }, {
    "summary": "Extensions and implementations should not be redundant",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1939",
    "tags": ["clumsy"],
    "description": "<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there's no need to do so explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>\n\n"
  }, {
    "summary": "\"==\" and \"!=\" should not be used when \"equals\" is overridden",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1698",
    "tags": ["cwe", "cert", "suspicious"],
    "description": "<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>\nmethod inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>\n<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName();   //String is a good example of a class overriding the equals method\nString lastName = getLastName();\n\nif (firstName == lastName) { ... };   // Non-compliant, the two literals can have the same value and yet the condition is false\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wwD1AQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/8AEqAQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>\n\n"
  }, {
    "summary": "An abstract class should have both abstract and concrete methods",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1694",
    "tags": ["convention"],
    "description": "<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n<code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Sets with elements that are enum values should be replaced with EnumSet",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1641",
    "tags": ["performance"],
    "description": "<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLORS.RED);\n    warm.add(COLORS.ORANGE);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    EnumSet&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Locale should be used in String operations",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1449",
    "tags": ["unpredictable", "cert"],
    "description": "<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code> or <code>toUpperCase()</code> on <code>String</code> objects means\nthe system default encoding will be used, possibly creating problems with international characters. For instance with the Turkish language, when\nconverting the small letter 'i' to upper case, the result is capital letter 'I' with a dot over it.</p>\n<p>Case conversion without a locale may work fine in its \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but <code>Locale.ENGLISH</code> can be used for case-insensitive ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyString.toLowerCase()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyString.toLowerCase(Locale.TR)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwAiAg\">CERT, STR02-J.</a> - Specify an appropriate locale when comparing\n  locale-dependent data </li>\n</ul>\n\n"
  }, {
    "summary": "Comments should not be located at the end of lines of code",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-139",
    "tags": ["convention"],
    "description": "<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n</pre>\n\n"
  }, {
    "summary": "Track uses of \"CHECKSTYLE:OFF\" suppression comments",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1315",
    "tags": ["bad-practice"],
    "description": "<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// CHECKSTYLE:OFF\n</pre>\n\n"
  }, {
    "summary": "Loggers should be \"private static final\" and should share a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1312",
    "tags": ["convention"],
    "description": "<p>Loggers should be:</p>\n<ul>\n  <li> <code>private</code>: not accessible outside of their parent classes. If another class needs to log something, it should instantiate its own\n  logger. </li>\n  <li> <code>static</code>: not dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>\n  <li> <code>final</code>: created once and only once per class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>\n<pre>\npublic Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\n</pre>\n<h2>Exceptions</h2>\n<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>\n\n"
  }, {
    "summary": "Track uses of \"NOPMD\" suppression comments ",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1310",
    "tags": ["bad-practice"],
    "description": "<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// NOPMD\n</pre>\n\n"
  }, {
    "summary": "Packages should have a javadoc file 'package-info.java'",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1228",
    "tags": ["convention"],
    "description": "<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n</pre>\n\n"
  }, {
    "summary": "The members of an interface declaration or class should appear in a pre-defined order",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1213",
    "tags": ["convention"],
    "description": "<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:</p>\n<ul>\n  <li> Class and instance variables </li>\n  <li> Constructors </li>\n  <li> Methods </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo{\n   private int field = 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{\n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>\n\n"
  }, {
    "summary": "Abstract class names should comply with a naming convention",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-118",
    "tags": ["convention"],
    "description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\nabstract class names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nabstract class MyClass { // Noncompliant\n}\n\nclass AbstractLikeClass { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nabstract class MyAbstractClass {\n}\n\nclass LikeClass {\n}\n</pre>\n\n"
  }, {
    "summary": "Strings literals should be placed on the left side when checking for equality",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1132",
    "tags": ["bad-practice"],
    "description": "<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null &amp;&amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n</pre>\n\n"
  }, {
    "summary": "Files should contain an empty newline at the end",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-113",
    "tags": ["convention"],
    "description": "<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>\n\n"
  }, {
    "summary": "Source code should be indented consistently",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1120",
    "tags": ["style"],
    "description": "<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier. </p>\n<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With an indent size of 2:</p>\n<pre>\nclass Foo {\n  public int a;\n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  public int a;\n  public int b;\n\n...\n\n  public void doSomething() {\n    if(something) {\n        doSomethingElse();\n    }\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "A close curly brace should be located at the beginning of a line",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1109",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>\n\n"
  }, {
    "summary": "Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be on two different lines",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1108",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on\ntwo different lines.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be located on the same line",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1107",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or\n<code>finally</code> keywords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "An open curly brace should be located at the beginning of a line",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1106",
    "tags": ["convention"],
    "description": "<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>\n\n"
  }, {
    "summary": "An open curly brace should be located at the end of a line",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1105",
    "tags": ["convention"],
    "description": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>\n\n"
  }, {
    "summary": "Tabulation characters should not be used",
    "type": "Code Smell",
    "defaultSeverity": "Minor",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-105",
    "tags": ["convention"],
    "description": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>\n\n"
  }, {
    "summary": "Functions should not be defined with a variable number of arguments",
    "type": "Code Smell",
    "defaultSeverity": "Info",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-923",
    "tags": ["misra", "cert", "pitfall"],
    "description": "<p>As stated per effective java : </p>\n<blockquote>\n  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments. </li>\n  <li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4CW\">CERT, DCL50-CPP.</a> - Do not define a C-style variadic function </li>\n</ul>\n\n"
  }, {
    "summary": "Track uses of disallowed classes",
    "type": "Code Smell",
    "defaultSeverity": "Info",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-3688",
    "tags": [],
    "description": "<p>This rule allows banning certain classes.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n</ul>\n<pre>\nString name;  // Noncompliant\n</pre>\n\n"
  }, {
    "summary": "Track uses of \"@SuppressWarnings\" annotations",
    "type": "Code Smell",
    "defaultSeverity": "Info",
    "inDefaultProfile": false,
    "ruleKey": "RSPEC-1309",
    "tags": [],
    "description": "<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter value of \"unused\" :</p>\n<pre>\n@SuppressWarnings(\"unused\")\n@SuppressWarnings(\"unchecked\")  // Noncompliant\n</pre>\n\n"
  }]
}