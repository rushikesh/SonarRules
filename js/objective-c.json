{
  "types": {
    "Code Smell": 177,
    "Vulnerability": 2,
    "Bug": 47
  },
  "standards": [{
      "name": "CWE",
      "count": 19
    },
    {
      "name": "SANS_TOP_25",
      "count": 2
    },
    {
      "name": "MISRA",
      "count": 108
    },
    {
      "name": "CERT",
      "count": 63
    }
  ],
  "tags": [{
      "name": "c11",
      "count": 1
    },
    {
      "name": "sans-top25-risky",
      "count": 2
    },
    {
      "name": "preprocessor",
      "count": 6
    },
    {
      "name": "obsolete",
      "count": 9
    },
    {
      "name": "cert",
      "count": 63
    },
    {
      "name": "redundant",
      "count": 2
    },
    {
      "name": "api-design",
      "count": 1
    },
    {
      "name": "design",
      "count": 2
    },
    {
      "name": "bad-practice",
      "count": 14
    },
    {
      "name": "confusing",
      "count": 16
    },
    {
      "name": "convention",
      "count": 24
    },
    {
      "name": "multi-threading",
      "count": 2
    },
    {
      "name": "cpp11",
      "count": 1
    },
    {
      "name": "unpredictable",
      "count": 1
    },
    {
      "name": "lock-in",
      "count": 10
    },
    {
      "name": "suspicious",
      "count": 23
    },
    {
      "name": "finding",
      "count": 2
    },
    {
      "name": "pitfall",
      "count": 27
    },
    {
      "name": "gnu",
      "count": 3
    },
    {
      "name": "error-handling",
      "count": 4
    },
    {
      "name": "cwe",
      "count": 19
    },
    {
      "name": "tests",
      "count": 1
    },
    {
      "name": "performance",
      "count": 2
    },
    {
      "name": "brain-overload",
      "count": 18
    },
    {
      "name": "misra",
      "count": 108
    },
    {
      "name": "unused",
      "count": 14
    },
    {
      "name": "style",
      "count": 2
    },
    {
      "name": "injection",
      "count": 1
    },
    {
      "name": "clumsy",
      "count": 4
    }
  ],
  "rules": [{
      "ruleKey": "RSPEC-3936",
      "type": "Code Smell",
      "summary": "\"case\" ranges should cover multiple values",
      "description": "<p>The GNU compiler extension that allows <tt>case</tt>s to be specified with ranges should only be used when a range is actually needed. Use it with the same number on both ends of the range, and you've either made a mistake because an actual range was intended, or you've used the syntax inappropriately in a way that is highly likely to confuse maintainers.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (i) {\r\n  <span class=\"code-keyword\">case</span> 0: \r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 1 ... 2:\r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 3 ... 3: <span class=\"code-comment\">// Noncompliant\r\n</span>    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (i) {\r\n  <span class=\"code-keyword\">case</span> 0: \r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 1 ... 2:\r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 3:\r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n}\r\n</pre>\n</div></div>\n<p>or</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (i) {\r\n  <span class=\"code-keyword\">case</span> 0: \r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 1 ... 2:\r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 3 ... 5:\r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "gnu",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-999",
      "type": "Code Smell",
      "summary": "\"goto\" should jump to labels declared later in the same function",
      "description": "<p>Unconstrained use of <tt>goto</tt> can lead to programs that are extremely difficult to comprehend and analyse. For C++, it can also lead to the program exhibiting unspecified behavior.</p>\n\n<p>However, in many cases a total ban on <tt>goto</tt> requires the introduction of flags to ensure correct control flow, and it is possible that these flags may themselves be less transparent than the <tt>goto</tt> they replace.</p>\n\n<p>Therefore, the restricted use of <tt>goto</tt> is allowed where that use will not lead to semantics contrary to developer expectations. \"Back\" jumps are prohibited, since they can be used to create iterations without using the well-defined iteration statements supplied by the core language.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> f() {\r\n  <span class=\"code-object\">int</span> j = 0;\r\nL1:\r\n  ++j;\r\n  <span class=\"code-keyword\">if</span> (10 == j) {\r\n    <span class=\"code-keyword\">goto</span> L2;         <span class=\"code-comment\">// forward jump ignored\r\n</span>  }\r\n  <span class=\"code-comment\">// ...\r\n</span>  <span class=\"code-keyword\">goto</span> L1;           <span class=\"code-comment\">// Noncompliant\r\n</span>L2:\r\n  <span class=\"code-keyword\">return</span> ++j;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> f() {\r\n  <span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> j = 0; j &lt; 11; j++) {\r\n    <span class=\"code-comment\">// ...\r\n</span>  }\r\n  <span class=\"code-keyword\">return</span> ++j;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 6-6-2 - The goto statement shall jump to a label declared later in the same function body</li>\n\t<li>MISRA C:2012, 15.2 - The goto statement shall jump to a label declared later in the same function</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1909",
      "type": "Code Smell",
      "summary": "\"goto\" statements should not be used to jump into blocks",
      "description": "<p>Use of <tt>goto</tt> can lead to programs that are extremely difficult to comprehend and analyse, and possibly to unspecified behavior.</p>\n\n<p>Unfortunately, removing <tt>goto</tt> from some code can lead to a rewritten version that is even more difficult to understand than the original. Therefore, limited use of <tt>goto</tt> is sometimes advised. </p>\n\n<p>However, the use of <tt>goto</tt> to jump into or out of a sub-block of code, such as into the body of a <tt>for</tt> loop is never acceptable, because it is extremely difficult to understand and will likely yield results other than what is intended. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid f1 (<span class=\"code-object\">int</span> a) {\r\n  <span class=\"code-keyword\">if</span> (a &lt;=0) {\r\n    <span class=\"code-keyword\">goto</span> L2;  <span class=\"code-comment\">// Noncompliant; jumps into a different block\r\n</span>  }\r\n  \r\n  <span class=\"code-keyword\">if</span> (a == 0) {\r\n  {\r\n    <span class=\"code-keyword\">goto</span> L1; <span class=\"code-comment\">// Compliant\r\n</span>  }\r\n  <span class=\"code-keyword\">goto</span> L2;  <span class=\"code-comment\">// Noncompliant; jumps into a block\r\n</span>\r\nL1:\r\n  <span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 0; i &lt; a; i++) {\r\n  L2:\r\n    <span class=\"code-comment\">//...  Should only have come here with a &gt;=0. Loop is infinite <span class=\"code-keyword\">if</span> a &lt; 0\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid f1 (<span class=\"code-object\">int</span> a) {\r\n  <span class=\"code-keyword\">if</span> (a &lt;=0) {\r\n    <span class=\"code-comment\">// ...\r\n</span>  }\r\n  \r\n  <span class=\"code-keyword\">if</span> (a == 0) {\r\n  {\r\n    <span class=\"code-keyword\">goto</span> L1; <span class=\"code-comment\">// Compliant\r\n</span>  }\r\n\r\nL1:\r\n  <span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 0; i &lt; a; i++) {\r\n  L2:\r\n    <span class=\"code-comment\">//...  \r\n</span>  }\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 6-6-1 - Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement</li>\n\t<li>MISRA C:2012, 15.3 - Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "brain-overload",
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1219",
      "type": "Code Smell",
      "summary": "\"switch\" statements should not contain non-case labels",
      "description": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing error.</p>\n\n<h2><a name=\"NoncompliantCodeExamples\"></a>Noncompliant Code Examples</h2>\n<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (day) {\r\n  <span class=\"code-keyword\">case</span> MONDAY:\r\n  <span class=\"code-keyword\">case</span> TUESDAY:\r\n  WEDNESDAY:   <span class=\"code-comment\">// instead of <span class=\"code-quote\">\"<span class=\"code-keyword\">case</span> WEDNESDAY\"</span>\r\n</span>    doSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  ...\r\n}\r\n</pre>\n</div></div>\n\n<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (day) {\r\n  <span class=\"code-keyword\">case</span> MONDAY:\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> TUESDAY:\r\n    foo:<span class=\"code-keyword\">for</span>(<span class=\"code-object\">int</span> i = 0 ; i &lt; X ; i++) {\r\n         /* ... */\r\n        <span class=\"code-keyword\">break</span> foo;  <span class=\"code-comment\">// <span class=\"code-keyword\">this</span> <span class=\"code-keyword\">break</span> statement doesn't relate to the nesting <span class=\"code-keyword\">case</span> TUESDAY\r\n</span>         /* ... */\r\n    }\r\n    <span class=\"code-keyword\">break</span>;\r\n    /* ... */\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<p>Case 1</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (day) {\r\n  <span class=\"code-keyword\">case</span> MONDAY:\r\n  <span class=\"code-keyword\">case</span> TUESDAY:\r\n  <span class=\"code-keyword\">case</span> WEDNESDAY:\r\n    doSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  ...\r\n}\r\n</pre>\n</div></div>\n\n<p>Case 2</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (day) {\r\n  <span class=\"code-keyword\">case</span> MONDAY:\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> TUESDAY:\r\n    compute(args); <span class=\"code-comment\">// put the content of the labelled <span class=\"code-quote\">\"<span class=\"code-keyword\">for</span>\"</span> statement in a dedicated method\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n\r\n    /* ... */\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n\t<li>MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n\t<li>MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-3729",
      "type": "Code Smell",
      "summary": "Array indices should be placed between brackets",
      "description": "<p>While C syntax considers array subscripts (<tt>[]</tt>) as symmetrical, meaning that <tt>a<span class=\"error\">&#91;i&#93;</span></tt> and <tt>i<span class=\"error\">&#91;a&#93;</span></tt> are equivalent, the convention is to put the index in the brackets rather than the array name. Inverting the index and array name serves no purpose, and is very confusing.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n10[P1] = 0; <span class=\"code-comment\">// Noncompliant\r\n</span>dostuff(i[arr]); <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nP1[10] = 0;\r\ndostuff(arr[i]);\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1036",
      "type": "Code Smell",
      "summary": "Control should not be transferred into a complex logic block using a \"goto\" or a \"switch\" statement",
      "description": "<p>Having a <tt>switch</tt> and its cases wholly encompassed by a control structure such as a <tt>try</tt>, <tt>@try</tt>, <tt>catch</tt>, <tt>@catch</tt>, or a loop is perfectly acceptable. (<tt>try</tt> and <tt>catch</tt> are used hereafter to refer to both variants.) It is also acceptable to have a <tt>goto</tt> and its target label wholly encompassed in a control structure. </p>\n\n<p>What is not acceptable is using a <tt>goto</tt> or <tt>case</tt> to suddenly jump into the body of a <tt>try</tt>, <tt>catch</tt>, Objective-C <tt>@finally</tt>, or loop structure. Tangling labels or <tt>switch</tt> blocks with other control structures results in code that is difficult, if not impossible to understand. More importantly, when it compiles (some of these constructs won't compile under ISO-conformant compilers), it can lead to unexpected results. Therefore this usage should be strictly avoided.</p>\n\n<p>This C++ code sample, which is also applicable to Objective-C if <tt>try</tt> and <tt>catch</tt> are converted to <tt>@try</tt> and <tt>@catch</tt>, demonstrates jumping into a <tt>switch</tt> and into a <tt>try</tt> and <tt>catch</tt> :</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid f ( int32_t i ) \r\n{ \r\n  <span class=\"code-keyword\">if</span> ( 10 == i ) \r\n  { \r\n    <span class=\"code-keyword\">goto</span> Label_10; <span class=\"code-comment\">// Noncompliant; <span class=\"code-keyword\">goto</span> transfers control into <span class=\"code-keyword\">try</span> block \r\n</span>  }\r\n  \r\n  <span class=\"code-keyword\">if</span> ( 11 == i ) \r\n  { \r\n    <span class=\"code-keyword\">goto</span> Label_11; <span class=\"code-comment\">// Noncompliant; <span class=\"code-keyword\">goto</span> transfers control into <span class=\"code-keyword\">catch</span> block\r\n</span>  }\r\n  \r\n  <span class=\"code-keyword\">switch</span> ( i ) \r\n  { \r\n    <span class=\"code-keyword\">case</span> 1: \r\n      <span class=\"code-keyword\">try</span> \r\n      { \r\n        Label_10: \r\n        <span class=\"code-keyword\">case</span> 2:  <span class=\"code-comment\">// Noncompliant; <span class=\"code-keyword\">switch</span> transfers control into <span class=\"code-keyword\">try</span> block\r\n</span>          <span class=\"code-comment\">// Action \r\n</span>          <span class=\"code-keyword\">break</span>; \r\n      }\r\n      <span class=\"code-keyword\">catch</span> ( ... ) \r\n      { \r\n        Label_11: \r\n        <span class=\"code-keyword\">case</span> 3: <span class=\"code-comment\">// Noncompliant; <span class=\"code-keyword\">switch</span> transfers control into <span class=\"code-keyword\">catch</span> block\r\n</span>          <span class=\"code-comment\">// Action \r\n</span>          <span class=\"code-keyword\">break</span>; \r\n      } \r\n      <span class=\"code-keyword\">break</span>;\r\n    <span class=\"code-keyword\">default</span>: \r\n    { \r\n      <span class=\"code-comment\">// Default Action \r\n</span>      <span class=\"code-keyword\">break</span>; \r\n    } \r\n  } \r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid f ( int32_t i ) \r\n{ \r\n  <span class=\"code-keyword\">switch</span> ( i ) \r\n  { \r\n    <span class=\"code-keyword\">case</span> 1: \r\n    <span class=\"code-keyword\">case</span> 2:\r\n      <span class=\"code-comment\">// Action \r\n</span>      <span class=\"code-keyword\">break</span>; \r\n    <span class=\"code-keyword\">case</span> 3:\r\n      <span class=\"code-comment\">// Action \r\n</span>      <span class=\"code-keyword\">break</span>; \r\n    <span class=\"code-keyword\">case</span> 10:\r\n    \r\n    <span class=\"code-keyword\">default</span>: \r\n    { \r\n      <span class=\"code-comment\">// Default Action \r\n</span>      <span class=\"code-keyword\">break</span>; \r\n    } \r\n  } \r\n  \r\n  <span class=\"code-keyword\">try</span> \r\n  {\r\n    <span class=\"code-keyword\">if</span> ( 2 == i || 10 == i)\r\n    {\r\n      <span class=\"code-comment\">// Action\r\n</span>    }\r\n  }\r\n  <span class=\"code-keyword\">catch</span> ( ... )\r\n  {\r\n    <span class=\"code-keyword\">if</span> (3 == i || 11 == i)\r\n    {\r\n      <span class=\"code-comment\">// Action\r\n</span>    }\r\n  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 15-0-3 - Control shall not be transferred into a try or catch block using goto or switch statement</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/DgDFAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC20-C.</a> - Do not use a switch statement to transfer control into a complex block</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/wwDAAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC20-CPP.</a> - Do not use a switch statement to transfer control into a complex block</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "lock-in",
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-798",
      "type": "Code Smell",
      "summary": "Digraphs should not be used",
      "description": "<p>The use of digraphs may not meet developer expectations.</p>\n\n<p>The digraphs are: </p>\n<ul>\n\t<li><tt>&lt;%</tt></li>\n\t<li><tt>%&gt;</tt></li>\n\t<li><tt>&lt;:</tt></li>\n\t<li><tt>:&gt;</tt></li>\n\t<li><tt>%:</tt></li>\n\t<li><tt>%:%:</tt></li>\n</ul>\n\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ntemplate &lt;typename T&gt;\r\nclass A\r\n{\r\n  <span class=\"code-keyword\">public</span>:\r\n    template&lt;int32_t i&gt;\r\n    void f2();\r\n};\r\n\r\nvoid f(A&lt;int32_t&gt; * a&lt;:10:&gt;)    /* Noncompliant - usage of '&lt;:' instead of '[' and ':&gt;' instead of ']' */\r\n&lt;%                              /* Noncompliant - usage of '&lt;%' instead of '{' */\r\n  a&lt;:0:&gt;-&gt;f2&lt;20&gt;();             /* Noncompliant - usage of '&lt;:' and ':&gt;' */\r\n%&gt;                              /* Noncompliant - usage of '%&gt;' instead of '}' */\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">/* ... */\r\n\r\nvoid f(A&lt;int32_t&gt; * a[10])      /* Compliant */\r\n{                               /* Compliant */\r\n  a[0]-&gt;f2&lt;20&gt;();               /* Compliant */\r\n}                               /* Compliant */\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 2-5-1 - Digraphs should not be used.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-961",
      "type": "Bug",
      "summary": "Function-like macros should not be invoked without all of their arguments",
      "description": "<p>This is a constraint error, but preprocessors have been known to ignore this problem. Each argument in a function-like macro must consist of at least one preprocessing token otherwise the behaviour is undefined.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 19.8 - A function-like macro shall not be invoked without all of its arguments.</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/628.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-628</a> - Function Call with Incorrectly Specified Arguments</li>\n</ul>\n",
      "standards": [
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cwe",
        "misra",
        "preprocessor"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1912",
      "type": "Code Smell",
      "summary": "Non-reentrant POSIX functions should be replaced with their reentrant versions",
      "description": "<p>A function is called reentrant if it can be interrupted in the middle of its execution and then safely called again (\"re-entered\") before its previous invocations complete execution.</p>\n\n<p>It is especially important that multi-threaded applications do not call the same non-reentrant function from different threads.</p>\n\n<p>This rule will trigger an issue each time a function in the configurable list is invoked.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>Given a function that includes <tt>localtime</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;stdio.h&gt;\r\n#include &lt;time.h&gt;\r\n\r\nvoid print_date_and_time(struct tm *time_ptr)\r\n{\r\n  printf(\r\n    <span class=\"code-quote\">\"Current date and time: %d/%02d/%02d %02d:%02d:%02d\\n\"</span>,\r\n    time_ptr-&gt;tm_year + 1900,\r\n    time_ptr-&gt;tm_mon,\r\n    time_ptr-&gt;tm_mday,\r\n    time_ptr-&gt;tm_hour,\r\n    time_ptr-&gt;tm_min,\r\n    time_ptr-&gt;tm_sec);\r\n}\r\n\r\nvoid print_unix_epoch_date_and_time()\r\n{\r\n  time_t unix_epoch_time = (time_t)0;\r\n  struct tm *local_time_ptr = localtime(&amp;unix_epoch_time); <span class=\"code-comment\">// Noncompliant, call to the non-reentrant localtime() function\r\n</span>  print_date_and_time(local_time_ptr);\r\n}\r\n\r\n<span class=\"code-object\">int</span> main(<span class=\"code-object\">int</span> argc, <span class=\"code-object\">char</span>* argv[])\r\n{\r\n  time_t current_time;\r\n  struct tm *local_time_ptr;\r\n\r\n  time(&amp;current_time);\r\n\r\n  local_time_ptr = localtime(&amp;current_time); <span class=\"code-comment\">// Noncompliant, call to the non-reentrant localtime() function\r\n</span>\r\n  <span class=\"code-comment\">// As expected, <span class=\"code-keyword\">this</span> will print: Current date and time: 1970/00/01 01:00:00\r\n</span>  print_unix_epoch_date_and_time();\r\n\r\n  <span class=\"code-comment\">// This will actually also print Current date and time: 1970/00/01 01:00:00\r\n</span>  <span class=\"code-comment\">// Indeed, localtime() is non-reentrant, and always returns the same pointer\r\n</span>  print_date_and_time(local_time_ptr);\r\n\r\n  <span class=\"code-keyword\">return</span> 0;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;stdio.h&gt;\r\n#include &lt;time.h&gt;\r\n\r\nvoid print_date_and_time(struct tm *time_ptr)\r\n{\r\n  printf(\r\n    <span class=\"code-quote\">\"Current date and time: %d/%02d/%02d %02d:%02d:%02d\\n\"</span>,\r\n    time_ptr-&gt;tm_year + 1900,\r\n    time_ptr-&gt;tm_mon,\r\n    time_ptr-&gt;tm_mday,\r\n    time_ptr-&gt;tm_hour,\r\n    time_ptr-&gt;tm_min,\r\n    time_ptr-&gt;tm_sec);\r\n}\r\n\r\nvoid print_unix_epoch_date_and_time()\r\n{\r\n  time_t unix_epoch_time = (time_t)0;\r\n  struct tm local_time;\r\n  localtime_r(&amp;unix_epoch_time, &amp;local_time); <span class=\"code-comment\">// Compliant\r\n</span>  print_date_and_time(&amp;local_time);\r\n}\r\n\r\n<span class=\"code-object\">int</span> main(<span class=\"code-object\">int</span> argc, <span class=\"code-object\">char</span>* argv[])\r\n{\r\n  time_t current_time;\r\n  struct tm local_time;\r\n\r\n  time(&amp;current_time);\r\n\r\n  localtime_r(&amp;current_time, &amp;local_time); <span class=\"code-comment\">// Compliant\r\n</span>\r\n  <span class=\"code-comment\">// As expected, <span class=\"code-keyword\">this</span> will print: Current date and time: 1970/00/01 01:00:00\r\n</span>  print_unix_epoch_date_and_time();\r\n\r\n  <span class=\"code-comment\">// As expected, <span class=\"code-keyword\">this</span> will print the current date and time, as expected\r\n</span>  print_date_and_time(&amp;local_time);\r\n\r\n  <span class=\"code-keyword\">return</span> 0;\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "multi-threading"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-969",
      "type": "Code Smell",
      "summary": "Only standard forms of the \"defined\" directive should be used",
      "description": "<p>The <tt>defined</tt> preprocessing directive is used in the context of <tt>#if</tt> and <tt>#elif</tt> expressions to see whether a given identifier has been defined as a macro. It returns a value of 0 (false) or 1 (true), and has two valid forms, <tt>defined IDENTIFIER</tt> and <tt>defined ( IDENTIFIER )</tt>. Since it is essentially a macro existence check, it cannot take expressions as arguments.</p>\n\n<p>Note that since<br/>\n<tt>#if defined AN_IDENTIFIER</tt><br/>\nis equivalent to<br/>\n<tt>#ifdef AN_IDENTIFIER</tt><br/>\n<tt>defined</tt> is most useful when there are multiple arguments to check, E.G.<br/>\n<tt>#if defined AAA || defined BBB</tt></p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#<span class=\"code-keyword\">if</span> defined ( X &gt; Y ) <span class=\"code-comment\">// Noncompliant; expressions not allowed</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#<span class=\"code-keyword\">if</span> defined X &amp;&amp; defined Y &amp;&amp; X &gt; Y\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 19.14 - The defined preprocessor operator shall only be used in one of the two standard forms.</li>\n\t<li>MISRA C++:2008, 16-1-1 - The defined preprocessor operator shall only be used in one of the two standard forms.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "bad-practice",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-3491",
      "type": "Code Smell",
      "summary": "Redundant pointer operator sequences should be removed",
      "description": "<p>By contract, chaining the 'Address of' operator <tt>&amp;</tt> with the 'Indirection' operator <tt>*</tt> results in a return to the initial value. Thus, such combinations are confusing at best, and bugs at worst.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> *ptr = ...;\r\n<span class=\"code-object\">int</span> *result1 = &amp;(*ptr); <span class=\"code-comment\">//Noncompliant\r\n</span><span class=\"code-object\">int</span> *result2 = &amp;*ptr; <span class=\"code-comment\">//Noncompliant\r\n</span>\r\n<span class=\"code-object\">int</span> value = 4;\r\n<span class=\"code-object\">int</span> result3 = *(&amp;value); <span class=\"code-comment\">//Noncompliant\r\n</span><span class=\"code-object\">int</span> result4 = *&amp;value; <span class=\"code-comment\">//Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> *ptr = ...;\r\n<span class=\"code-object\">int</span> *result1 = ptr;\r\n<span class=\"code-object\">int</span> *result2 = ptr;\r\n\r\n<span class=\"code-object\">int</span> value = 4;\r\n<span class=\"code-object\">int</span> result3 = value;\r\n<span class=\"code-object\">int</span> result4 = value;\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n\n<p>No issue is raised when the <tt>*</tt> or <tt>&amp;</tt> operators are overloaded or when both operators are not located in the same piece of code (one being generated by a macro expansion and the other one located in the main source code for instance).</p>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-128",
      "type": "Code Smell",
      "summary": "Switch cases should end with an unconditional \"break\" statement",
      "description": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (myVariable) {\r\n  <span class=\"code-keyword\">case</span> 1:                              \r\n    foo();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 2:  <span class=\"code-comment\">// Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\r\n</span>    doSomething();\r\n  <span class=\"code-keyword\">default</span>:                               \r\n    doSomethingElse();\r\n    <span class=\"code-keyword\">break</span>;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (myVariable) {\r\n  <span class=\"code-keyword\">case</span> 1:\r\n    foo();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 2:\r\n    doSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">default</span>:\r\n    doSomethingElse();\r\n    <span class=\"code-keyword\">break</span>;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (myVariable) {\r\n  <span class=\"code-keyword\">case</span> 0:                                <span class=\"code-comment\">// Empty <span class=\"code-keyword\">case</span> used to specify the same behavior <span class=\"code-keyword\">for</span> a group of cases.\r\n</span>  <span class=\"code-keyword\">case</span> 1:\r\n    doSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 2:                                <span class=\"code-comment\">// Use of <span class=\"code-keyword\">return</span> statement\r\n</span>    <span class=\"code-keyword\">return</span>;\r\n  <span class=\"code-keyword\">case</span> 3:                                <span class=\"code-comment\">// Use of <span class=\"code-keyword\">throw</span> statement\r\n</span>    <span class=\"code-keyword\">throw</span> 1;\r\n  <span class=\"code-keyword\">case</span> 4:                                <span class=\"code-comment\">// Use of <span class=\"code-keyword\">continue</span> statement\r\n</span>    <span class=\"code-keyword\">continue</span>;\r\n  <span class=\"code-keyword\">default</span>:                               <span class=\"code-comment\">// For the last <span class=\"code-keyword\">case</span>, use of <span class=\"code-keyword\">break</span> statement is optional\r\n</span>    doSomethingElse();\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n\t<li>MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause</li>\n\t<li>MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n\t<li>MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause</li>\n\t<li>MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n\t<li>MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/484.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-484</a> - Omitted Break Statement in Switch</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case label with a break statement</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/ZoFLAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC18-CPP.</a> - Finish every set of statements associated with a case label with a break statement</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/ewHAAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case label with a break statement</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "misra",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-916",
      "type": "Code Smell",
      "summary": "Switch labels should not be nested inside non-switch blocks",
      "description": "<p>A switch-label can be placed anywhere within the statements that form the body of a switch statement, potentially leading to unstructured code. To prevent this from happening, the scope of a case-label or default-label shall be the statement forming the body of a switch statement. All case-clauses and the default-clause shall be at the same scope.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (x) {\r\n  <span class=\"code-keyword\">case</span> 1: <span class=\"code-comment\">// Compliant\r\n</span>    <span class=\"code-keyword\">if</span> (foo) {\r\n      <span class=\"code-keyword\">case</span> 2: <span class=\"code-comment\">// Noncompliant\r\n</span>        <span class=\"code-keyword\">break</span>;\r\n      <span class=\"code-keyword\">default</span>: <span class=\"code-comment\">// Noncompliant\r\n</span>        <span class=\"code-keyword\">break</span>;\r\n    }\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">default</span>: <span class=\"code-comment\">// Compliant\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 15.1 - A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement.</li>\n\t<li>MISRA C++:2008, 6-4-4 - A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement.</li>\n\t<li>MISRA C:2012, 16.2 - A switch label shall only be used when the most closely-enclsoing compound statement is the body of a switch statement</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "confusing",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-998",
      "type": "Code Smell",
      "summary": "The name \"main\" should not be used for any function other than the global \"main\" function",
      "description": "<p>A global function named <tt>main</tt> is the entry point to the program, and is the only identifier which must be in the global namespace. The use of <tt>main</tt> for other functions may not meet developer expectations.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> main() {       <span class=\"code-comment\">// Compliant\r\n</span>}\r\n\r\nnamespace {\r\n  <span class=\"code-object\">int</span> main() {     <span class=\"code-comment\">// Noncompliant\r\n</span>  }\r\n}\r\nnamespace NS {\r\n  <span class=\"code-object\">int</span> main() {     <span class=\"code-comment\">// Noncompliant\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 7-3-2 - The identifier main shall not be used for a function other than global function main.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-912",
      "type": "Code Smell",
      "summary": "The right-hand operands of && and || should not contain side effects",
      "description": "<p>There are some situations in C++ where certain parts of expressions may not be evaluated. If these sub-expressions contain side effects then those side effects may or may not occur, depending on the values of other sub expressions. The operators which can lead to this problem are <tt>&amp;&amp;</tt> and <tt>||</tt>, where the evaluation of the right-hand operand is conditional on the value of the left-hand operand. The conditional evaluation of the right-hand operand of one of the logical operators can easily cause problems if the developer relies on a side effect occurring.</p>\n\n<p>Operations that cause side effects are: </p>\n<ul>\n\t<li>accessing a volatile object</li>\n\t<li>modifying an object</li>\n\t<li>modifying a file</li>\n\t<li>calling a function that performs any operations that cause changes in the state of the execution environment of the calling function.</li>\n</ul>\n\n\n<p>This rule raises an issue when there is assignment or the use of the increment/decrement operators in right-hand operands.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ( ishigh &amp;&amp; ( x == i++ ) ) <span class=\"code-comment\">// Noncompliant\r\n</span>...\r\n<span class=\"code-keyword\">if</span> ( ishigh &amp;&amp; ( x ==  getX() ) ) <span class=\"code-comment\">// Only acceptable <span class=\"code-keyword\">if</span> getX() is known to have no side effects</span>\r\n</pre>\n</div></div>\n\n<p>The operations that cause side effects are accessing a volatile object, modifying an object, modifying a file, or calling a function<br/>\nthat does any of those operations, which cause changes in the state of the execution environment of the calling function.</p>\n\n<p>For the time being, this rule only check that there is no assignment or no use of increment/decrement operators made in right hand operands.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 12.4 - The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects.</li>\n\t<li>MISRA C++:2008, 5-14-1 - The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects.</li>\n\t<li>MISRA C:2012, 13.5 - The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/loAD\" class=\"external-link\" rel=\"nofollow\">CERT, EXP02-C.</a> - Be aware of the short-circuit behavior of the logical AND and OR operators</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/XIAyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, EXP02-CPP.</a> - Be aware of the short-circuit behavior of the logical AND and OR operators</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-797",
      "type": "Code Smell",
      "summary": "Trigraphs should not be used",
      "description": "<p>Trigraphs are denoted by a sequence of 2 question marks followed by a specified third character (e.g. ??- represents a '~' (tilde) character and ??) represents a ']'). They can cause accidental confusion with other uses of two question marks.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">static</span> <span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> str[] = <span class=\"code-quote\">\"(Date should be in the form ??-??-??)\"</span>; <span class=\"code-comment\">// Noncompliant. Evaluates to <span class=\"code-quote\">\"(Date should be in the form ~~]\"</span></span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">static</span> <span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> str[] = <span class=\"code-quote\">\"(Date should be in the form ?\"</span> <span class=\"code-quote\">\"?-?\"</span> <span class=\"code-quote\">\"?-?\"</span> ?)\";  <span class=\"code-comment\">// adjacent string literals concatenated at compile time\r\n</span><span class=\"code-keyword\">static</span> <span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> str2[] = <span class=\"code-quote\">\"(Date should be in the form ?-?-?)\"</span>; <span class=\"code-comment\">// problem avoided by eliminating 2nd '?' in each sequence\r\n</span><span class=\"code-keyword\">static</span> <span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> str3[] = <span class=\"code-quote\">\"(Date should be in the form ? ?-? ?-? ?)\"</span>; <span class=\"code-comment\">// problem avoided by spacing '?'s out</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 4.2 - Trigraphs shall not be used</li>\n\t<li>MISRA C++:2008, 2-3-1 - Trigraphs shall not be used</li>\n\t<li>MISRA C:2012, 4.2 - Trigraphs shall not be used</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/nAE_\" class=\"external-link\" rel=\"nofollow\">CERT, PRE07-C.</a> - Avoid using repeated question marks</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/KAAhAQ\" class=\"external-link\" rel=\"nofollow\">CERT, PRE07-CPP.</a> - Avoid using repeated question marks</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "obsolete",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-959",
      "type": "Code Smell",
      "summary": "\"#undef\" should not be used",
      "description": "<p><tt>#undef</tt> should not normally be needed. Its use can lead to confusion with respect to the existence or meaning of a macro when it is used in the code.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#ifndef MY_HDR\r\n#define MY_HDR\r\n#endif\r\n...\r\n#undef MY_HDR    /* Noncompliant */\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 19.6 - #undef shall not be used.</li>\n\t<li>MISRA C++:2008, 16-0-3 - #undef shall not be used.</li>\n\t<li>MISRA C:2012, 20.5 - #undef should not be used</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "brain-overload",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1836",
      "type": "Code Smell",
      "summary": "\"restrict\" should not be used",
      "description": "<p>The <tt>restrict</tt> type qualifier is a guarantee by the programmer that there are no other pointers with access to the referenced object, and that the object does not overlap with any other object in memory. Its use may allow the compiler to generate more efficient byte code. </p>\n\n<p>However, this is a tricky language feature to use correctly, and there is significant risk of unexpected program behavior if <tt>restrict</tt> is misused. Therefore, <tt>restrict</tt> should not be used.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid user_copy (\r\n  void * restrict p,  <span class=\"code-comment\">// Noncompliant parameter\r\n</span>  void * restrict q,  <span class=\"code-comment\">// Noncompliant parameter\r\n</span>  size_t n\r\n) {\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n</pre>\n</div></div>\n\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2012, 8.14 - The restrict type qualifier shall not be used</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/QQBLBw\" class=\"external-link\" rel=\"nofollow\">CERT, EXP43-C.</a> - Avoid undefined behavior when using restrict-qualified pointers</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1079",
      "type": "Vulnerability",
      "summary": "\"scanf()\" and \"fscanf()\" format strings should specify a field width for the \"%s\" string placeholder",
      "description": "<p>The <tt>%s</tt> placeholder is used to read a word into a string.<br/>\nBy default, there is no restriction on the length of that word, and the developer is required to pass a sufficiently large buffer for storing it.<br/>\nNo matter how large the buffer is, there will always be a longer word.<br/>\nTherefore, programs relying on <tt>%s</tt> are vulnerable to buffer overflows.</p>\n\n<p>A field width specifier can be used together with the <tt>%s</tt> placeholder to limit the number of bytes which will by written to the buffer.<br/>\nNote that an additional byte is required to store the null terminator.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">char</span> buffer[10];\r\nscanf(<span class=\"code-quote\">\"%s\"</span>, buffer);      <span class=\"code-comment\">// Noncompliant - will overflow when a word longer than 9 characters is entered</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">char</span> buffer[10];\r\nscanf(<span class=\"code-quote\">\"%9s\"</span>, buffer);     <span class=\"code-comment\">// Compliant - will not overflow</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/120\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-120</a> - Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/676\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-676</a> - Use of Potentially Dangerous Function</li>\n\t<li><a href=\"http://www.sans.org/top25-software-errors/\" class=\"external-link\" rel=\"nofollow\">SANS Top 25</a> - Risky Resource Management</li>\n</ul>\n",
      "standards": [
        "CWE",
        "SANS_TOP_25"
      ],
      "tags": [
        "cwe",
        "injection",
        "sans-top25-risky"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1831",
      "type": "Code Smell",
      "summary": "\"static\" should not be used for the size of an array parameter",
      "description": "<p>Theoretically, the use of the <tt>static</tt> keyword on the size of an array parameter means you can assume that only arrays of at least that size will be passed as arguments to the function. I.e. a function parameter of <tt>int my_array<span class=\"error\">&#91;static 10&#93;</span></tt> means that <tt>my_array</tt> will always be <em>at least</em> 10 elements long. If it is not, the behavior is undefined.</p>\n\n<p>In practice, the use of <tt>static</tt> on the size of an array parameter means the compiler might issue a warning if a noncompliant array is passed to the function - a warning that might or might not be ignored. Therefore, in practice the use of <tt>static</tt> on an array parameter's size merely lends a false sense of security, and <tt>static</tt> should not be used in this context.</p>\n\n<p>Note that for some compiler/processor combinations, more efficient code can be generated when <tt>static</tt> is used, but these combinations are limited, and the benefit does not outweigh the cost.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> total (<span class=\"code-object\">int</span> size, <span class=\"code-object\">int</span> my_array[<span class=\"code-keyword\">static</span> 10]) {...}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> total (<span class=\"code-object\">int</span> size, <span class=\"code-object\">int</span> my_array[10]) {...}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2012, 17.6 - The declaration of an array parameter shall not contain the static keyword between the []</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-131",
      "type": "Code Smell",
      "summary": "\"switch\" statements should end with \"default\" clauses",
      "description": "<p>The requirement for a final <tt>default</tt> clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken. When the <tt>switch</tt> covers all current values of an <tt>enum</tt> - and especially when it doesn't - a <tt>default</tt> case should still be used because there is no guarantee that the <tt>enum</tt> won't be extended.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (param) { <span class=\"code-comment\">// Noncompliant - <span class=\"code-keyword\">default</span> clause is missing\r\n</span>  <span class=\"code-keyword\">case</span> 0:\r\n    doSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 1:\r\n    doSomethingElse();\r\n    <span class=\"code-keyword\">break</span>;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (param) {\r\n  <span class=\"code-keyword\">case</span> 0:\r\n    doSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 1:\r\n    doSomethingElse();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">default</span>:\r\n    doDefault();\r\n    <span class=\"code-keyword\">break</span>;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n\t<li>MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause</li>\n\t<li>MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n\t<li>MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause</li>\n\t<li>MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n\t<li>MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label</li>\n\t<li>MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/478.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/YgE\" class=\"external-link\" rel=\"nofollow\">CERT, MSC01-C.</a> - Strive for logical completeness</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC01-CPP.</a> - Strive for logical completeness</li>\n</ul>\n\n\n<h3><a name=\"Seealso\"></a>See also</h3>\n<ul>\n\t<li>S3562</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-3776",
      "type": "Code Smell",
      "summary": "Cognitive Complexity of methods should not be too high",
      "description": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be difficult to maintain.</p><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\" class=\"external-link\" rel=\"nofollow\">Cognitive Complexity</a></li>\n</ul>\n",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-3973",
      "type": "Code Smell",
      "summary": "Conditionally executed code should be denoted by either indentation or curly braces",
      "description": "<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition)  <span class=\"code-comment\">// Noncompliant\r\n</span>doTheThing();\r\ndoTheOtherThing();\r\nsomethingElseEntirely();\r\n\r\nfoo();\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition) {\r\n  doTheThing();\r\n  doTheOtherThing();\r\n  somethingElseEntirely();\r\n}\r\n\r\nfoo();\r\n</pre>\n</div></div>\n<p>Or</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition)\r\n  doTheThing();\r\ndoTheOtherThing();\r\nsomethingElseEntirely();\r\n\r\nfoo();\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-3972",
      "type": "Code Smell",
      "summary": "Conditionals should start on new lines",
      "description": "<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <tt>if</tt> and its resulting <em>then</em> statement. However, when an <tt>if</tt> is placed on the same line as the closing <tt>} }} from a preceding {{else</tt> or <tt>else if</tt>, it is either an error - <tt>else</tt> is missing - or the invitation to a future error as maintainers fail to understand that the two statements are unconnected.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition1) {\r\n  <span class=\"code-comment\">// ...\r\n</span>} <span class=\"code-keyword\">if</span> (condition2) {  <span class=\"code-comment\">// Noncompliant\r\n</span>  <span class=\"code-comment\">//...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition1) {\r\n  <span class=\"code-comment\">// ...\r\n</span>} <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (condition2) { \r\n  <span class=\"code-comment\">//...\r\n</span>}\r\n</pre>\n</div></div>\n<p>Or</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition1) {\r\n  <span class=\"code-comment\">// ...\r\n</span>} \r\n\r\n<span class=\"code-keyword\">if</span> (condition2) {\r\n  <span class=\"code-comment\">//...\r\n</span>}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1163",
      "type": "Code Smell",
      "summary": "Exceptions should not be thrown in finally blocks",
      "description": "<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <tt>try</tt> or <tt>catch</tt> block, and the masked's exception message and stack trace will be lost.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid openResource() {\r\n  @<span class=\"code-keyword\">throw</span> [NSException exceptionWithName:@<span class=\"code-quote\">\"FileNotFoundException\"</span> reason:@<span class=\"code-quote\">\"File Not Found on <span class=\"code-object\">System</span>\"</span> userInfo:nil];\r\n}\r\n\r\nvoid fun() {\r\n  @<span class=\"code-keyword\">try</span> {\r\n    openResource();\r\n  }\r\n  @<span class=\"code-keyword\">finally</span> {\r\n    closeResource();\r\n    @<span class=\"code-keyword\">throw</span> ... ; <span class=\"code-comment\">// Noncompliant - will mask previous exception\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid openResource() {\r\n  @<span class=\"code-keyword\">throw</span> [NSException exceptionWithName:@<span class=\"code-quote\">\"FileNotFoundException\"</span> reason:@<span class=\"code-quote\">\"File Not Found on <span class=\"code-object\">System</span>\"</span> userInfo:nil];\r\n}\r\n\r\nvoid fun() {\r\n  @<span class=\"code-keyword\">try</span> {\r\n    openResource();\r\n  }\r\n  @<span class=\"code-keyword\">finally</span> {\r\n    closeResource();\r\n  }\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/soUbAQ\" class=\"external-link\" rel=\"nofollow\">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "error-handling",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-936",
      "type": "Code Smell",
      "summary": "Function names should be used either as a call with a parameter list or with the \"&\" operator",
      "description": "<p>Using a \"bald\" function name is likely a bug. Rather than testing the return value of a function with a <tt>void</tt> parameter list, it implicitly retrieves the address of that function in memory. If that's truly what's intended, then it should be made explicit with the use of the <tt>&amp;</tt> (address-of) operator. If it's not, then a parameter list (even an empty one) should be added after the function name.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> func(void) {\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n\r\nvoid f2(<span class=\"code-object\">int</span> a, <span class=\"code-object\">int</span> b) {\r\n  <span class=\"code-comment\">// ...\r\n</span>  <span class=\"code-keyword\">if</span> (func) {  <span class=\"code-comment\">// Noncompliant - tests that the memory address of func() is non-<span class=\"code-keyword\">null</span>\r\n</span>    <span class=\"code-comment\">//...\r\n</span>  }\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid f2(<span class=\"code-object\">int</span> a, <span class=\"code-object\">int</span> b) {\r\n  <span class=\"code-comment\">// ...\r\n</span>  <span class=\"code-keyword\">if</span> (func()) {  <span class=\"code-comment\">// tests that the <span class=\"code-keyword\">return</span> value of func() &gt; 0\r\n</span>    <span class=\"code-comment\">//...\r\n</span>  }\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Callback functions are a common occurrence and are usually not passed with a preceding &amp;. There is however little ambiguity so this rule ignores function identifiers when used as a parameter of a function call.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid foo() {\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n\r\nregisterEvent(AnEvent, foo);\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 16.9 - A function identifier shall only be used with either a preceding &amp;, or with a parenthesized parameter list, which may be empty.</li>\n\t<li>MISRA C++:2008, 8-4-4 - A function identifier shall only be used to call the function or it shall be preceded by &amp;.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-819",
      "type": "Code Smell",
      "summary": "Functions should be declared explicitly",
      "description": "<p>The use of prototypes enables the compiler to check the integrity of function definitions and calls. Without prototypes the compiler is not obliged to pick up certain errors in function calls (e.g. different number of arguments from the function body, mismatch in types of arguments between call and definition). Function interfaces have been shown to be a cause of considerable problems, and therefore this rule is considered very important.</p>\n\n<p>The recommended method of implementing function prototypes for external functions is to declare the function (i.e. give the function prototype) in a header file, and then include the header file in all those code files that need the prototype (see MISRA C 2004, Rule 8.8).</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid example() {\r\n  fun(); <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n\r\nvoid fun() {\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid fun();\r\n\r\nvoid example() {\r\n  fun();\r\n}\r\n\r\nvoid fun() {\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 8.1 - Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call</li>\n\t<li>MISRA C:2012, 17.3 - A function shall not be declared implicitly</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/LoAg\" class=\"external-link\" rel=\"nofollow\">CERT, DCL07-C.</a> - Include the appropriate type information in function declarators</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/tgDI\" class=\"external-link\" rel=\"nofollow\">CERT, DCL31-C.</a> - Declare identifiers before using them</li>\n</ul>\n\n\n<h3><a name=\"SeeAlso\"></a>See Also</h3>\n<ul>\n\t<li>MISRA C:2004, 8.8 - An external object or function shall be declared in one and only one file</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "bad-practice",
        "cert",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-923",
      "type": "Code Smell",
      "summary": "Functions should not be defined with a variable number of arguments",
      "description": "<p>Passing arguments via an ellipsis bypasses the type checking performed by the compiler. Additionally, passing an argument with non-POD class type leads to undefined behavior. Note that the rule specifies \"defined\" (and not \"declared\") so as to permit the use of existing library functions.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid MyPrintf ( char_t * pFormat, ... )\t<span class=\"code-comment\">// Noncompliant\r\n</span>{\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.</li>\n\t<li>MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation.</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/i4CW\" class=\"external-link\" rel=\"nofollow\">CERT, DCL50-CPP.</a> - Do not define a C-style variadic function</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1081",
      "type": "Vulnerability",
      "summary": "Insecure functions \"strcpy\", \"strcat\" and \"sprintf\" should not be used",
      "description": "<p>When using legacy C functions such as <tt>strcpy</tt>, it's up to the developer to make sure the size of the buffer to be written to is large enough to avoid buffer overruns. If this is not done properly, it can result in a buffer overflow, causing the program to crash at a minimum. At worst, a carefully crafted overflow can cause malicious code to be executed.</p>\n\n<p>In such cases, it's better to use an alternate, secure, function, such as <tt>strlcpy()</tt>, <tt>strlcat()</tt> and <tt>snprintf()</tt>,  which allows you to define the maximum number of characters to be written to the buffer. However, since <tt>strlcpy()</tt> and <tt>strlcat()</tt> are part of the BSD library, they might not be available, in which case <tt>strncpy()</tt> and <tt>strncat()</tt> should be used instead, but be aware that they don't guarantee the string will be null-terminated.</p>\n\n<p>This rule logs an issue when encountering the following insecure functions: <tt>strcpy()</tt>, <tt>strcat()</tt> and <tt>sprintf()</tt></p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nsprintf(str, <span class=\"code-quote\">\"%s\"</span>, message);   <span class=\"code-comment\">// Noncompliant\r\n</span>strcpy(str, message); <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nsnprintf(str, sizeof(str), <span class=\"code-quote\">\"%s\"</span>, message);\r\nstrlcpy(str, message, sizeof(str));\r\n\r\nstrncpy(str, message, sizeof(str) -1); <span class=\"code-comment\">// Leave room <span class=\"code-keyword\">for</span> <span class=\"code-keyword\">null</span>\r\n</span>str[sizeof(str) - 1] = '\\0'; <span class=\"code-comment\">// Make sure the string is <span class=\"code-keyword\">null</span>-terminated</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/120\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-120</a> - Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/676\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-676</a> - Use of Potentially Dangerous Function</li>\n\t<li><a href=\"http://www.sans.org/top25-software-errors/\" class=\"external-link\" rel=\"nofollow\">SANS Top 25</a> - Risky Resource Management</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/QwY\" class=\"external-link\" rel=\"nofollow\">CERT, STR07-C.</a> - Use the bounds-checking interfaces for string manipulation</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "SANS_TOP_25"
      ],
      "tags": [
        "cert",
        "cwe",
        "sans-top25-risky"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-3485",
      "type": "Code Smell",
      "summary": "Keywords should be used before arguments",
      "description": "<p>It may seem cleaner to omit keywords from your method declarations, but this is one time you should err on the side of verbosity. Omitting keywords in a declaration necessarily means that they'll be omitted from calls too. What results is code that will be impenetrable to maintainers. That's why it's considered best practice to always use keywords. This applies both to Objective-C-style parameters without keywords, and to C-style parameter declarations, which are deprecated.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n@<span class=\"code-keyword\">interface</span> MyAction\r\n- (void)sendAction:(<span class=\"code-object\">int</span>)anAction :(<span class=\"code-object\">int</span>)flag;  <span class=\"code-comment\">// Noncompliant\r\n</span>- (void)seekAction:(<span class=\"code-object\">int</span>)anAction, <span class=\"code-object\">int</span> flag;  <span class=\"code-comment\">// Noncompliant; hard on maintainers AND deprecated\r\n</span>@end\r\n\r\nvoid test(MyAction* myAction) {\r\n  [myAction sendAction:1 :1];\r\n  [myAction sendAction:1 forAllCells:1]; <span class=\"code-comment\">// warning: 'MyAction' may not respond to 'sendAction:forAllCells:'\r\n</span>  [myAction seekAction:1 :1];\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n@<span class=\"code-keyword\">interface</span> MyAction\r\n- (void)sendAction:(<span class=\"code-object\">int</span>)anAction forAllCells:(<span class=\"code-object\">int</span>)flag;\r\n- (void)seekAction:(<span class=\"code-object\">int</span>)anAction forAllCells:(<span class=\"code-object\">int</span>)flag;\r\n@end\r\n\r\nvoid test(MyAction* myAction) {\r\n  [myAction sendAction:1 forAllCells:1];\r\n  [myAction seekAction:1 forAllCells:1];\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingMethods.html\" class=\"external-link\" rel=\"nofollow\">Coding Guidelines for Cocoa</a> - Naming Methods</li>\n</ul>\n",
      "standards": [],
      "tags": [
        "api-design"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-958",
      "type": "Code Smell",
      "summary": "Macros should not be #define'd or #undef'd within a block",
      "description": "<p>While it is legal to place <tt>#define</tt> and <tt>#undef</tt> directives anywhere in a source file, placing them outside of the global namespace is misleading since their scope is not actually restricted. This may be inconsistent with developer expectations.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nnamespace NS\r\n{\r\n  #ifndef MY_HDR\r\n  #define MY_HDR    /* Noncompliant */\r\n  #undef FOO        /* Noncompliant */\r\n  #endif\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#ifndef MY_HDR\r\n#define MY_HDR\r\n#undef FOO\r\n#endif\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 19.5 - Macros shall not be #define'd or #undef'd within a block.</li>\n\t<li>MISRA C++:2008, 16-0-2 - Macros shall only be #define'd or #undef'd in the global namespace.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1186",
      "type": "Code Smell",
      "summary": "Methods should not be empty",
      "description": "<p>There are several reasons for a method not to have a method body:</p>\n\n<ul>\n\t<li>It is an unintentional omission, and should be fixed.</li>\n\t<li>It is not yet, or never will be, supported. In this case a <tt>NotSupportedException</tt> should be thrown.</li>\n\t<li>The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">public</span> override void DoSomething() \r\n{\r\n}\r\n\r\n<span class=\"code-keyword\">public</span> override void DoSomethingElse() \r\n{\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">public</span> override void DoSomething() \r\n{\r\n  <span class=\"code-comment\">// Do nothing because of X and Y.\r\n</span>}\r\n\r\n<span class=\"code-keyword\">public</span> override void DoSomethingElse() \r\n{\r\n  <span class=\"code-keyword\">throw</span> <span class=\"code-keyword\">new</span> NotSupportedException();\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>The following methods are ignored:</p>\n<ul>\n\t<li>empty <tt>virtual</tt> methods,</li>\n\t<li>empty methods that override an <tt>abstract</tt> method,</li>\n\t<li>empty overrides in test assemblies.</li>\n</ul>\n",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-820",
      "type": "Code Smell",
      "summary": "Object and function types should be explicitly stated in their declarations and definitions",
      "description": "<p>The C90 standard allows implicit typing of variables and functions, and some C compilers still support legacy code by allowing implicit typing. But it should not be used for new code because it might lead to confusion.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nextern x;\r\n<span class=\"code-keyword\">const</span> x;\r\n<span class=\"code-keyword\">static</span> fun(void);\r\ntypedef ( *pfi ) ( void );\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nextern int16_t x;\r\n<span class=\"code-keyword\">const</span> int16_t x;\r\n<span class=\"code-keyword\">static</span> int16_t fun(void);\r\ntypedef int16_t ( *pfi ) ( void );\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 8.2 - Whenever an object or function is declared or defined, its type shall be explicitly stated</li>\n\t<li>MISRA C:2012, 8.1 - Types shall be explicitly specified</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/tgDI\" class=\"external-link\" rel=\"nofollow\">CERT, DCL31-C.</a> - Declare identifiers before using them</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1767",
      "type": "Bug",
      "summary": "Pointers should not be cast to integral types",
      "description": "<p>The size of integer required to hold a memory address is implementation-dependent. Therefore, casting a pointer (i.e. a memory address) to any integral data type may result in data loss because the integral type is too small to hold the full address value.</p>\n\n<p>When treating a memory address as integer type is absolutely required, you should be sure to use a large enough type to hold all the data.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> *p;\r\n<span class=\"code-object\">int</span> addr = ( <span class=\"code-object\">int</span> ) &amp;p;\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 11.3 - A cast should not be performed between a pointer type and an integral type.</li>\n\t<li>MISRA C++:2008, 5-2-9 - A cast should not convert a pointer type to an integral type.</li>\n\t<li>MISRA C:2012, 11.4 - A conversion should not be performed between a pointer to object and an integer type</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/XAAV\" class=\"external-link\" rel=\"nofollow\">CERT, INT36-C.</a> - Converting a pointer to integer or integer to pointer</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/toAyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, INT11-CPP.</a> - Take care when converting from pointer to integer or integer to pointer</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1761",
      "type": "Code Smell",
      "summary": "Pre-defined macros should not be defined, redefined or undefined",
      "description": "<p>The standard, predefined macros, such as <tt>_<em>FILE</em><em></tt> and <tt></em><em>LINE</em>_</tt>, are primarily intended for use by the implementation, and changing them could result in undefined behavior.</p>\n\n<p>This rule checks that the following predefined macros are not defined, undefined, or redefined: <tt>assert</tt>, <tt>errno</tt>, <tt>_<em>FILE</em><em></tt>, <tt></em><em>LINE</em><em></tt>, <tt></em><em>TIME</em><em></tt>, <tt></em><em>DATE</em><em></tt>, <tt></em><em>TIMESTAMP</em><em></tt>, <tt></em><em>COUNTER</em><em></tt>, <tt></em><em>INCLUDE_LEVEL</em><em></tt>, <tt></em><em>BASE_FILE</em>_</tt>, and <tt>_Pragma</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example </h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#undef __LINE__\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 20.1 - Reserved identifiers, macros and functions in the standard library shall not be defined, redefined, or undefined</li>\n\t<li>MISRA C++:2008, 17-0-1 - Reserved identifiers, macros and functions in the standard library shall not be defined, redefined, or undefined</li>\n\t<li>MISRA C:2012, 21.1 - #define and #undef shall not be used on a reserved identifier or reserved macro name</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "preprocessor",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1915",
      "type": "Code Smell",
      "summary": "Preprocessor directives should not be indented",
      "description": "<p>Indenting preprocessor directives reduces the code readability, because it make preprocessor directives harder to spot.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid optimal()\r\n{\r\n  #<span class=\"code-keyword\">if</span> INTEL             /* Noncompliant - hard to spot */\r\n  specificIntelStuff();\r\n  #endif                /* Noncompliant - hard to spot */\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid optimal()\r\n{\r\n#<span class=\"code-keyword\">if</span> INTEL               /* Compliant */\r\n  specificIntelStuff();\r\n#endif                  /* Compliant */\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall",
        "style"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1477",
      "type": "Code Smell",
      "summary": "Source files should not have any duplicated blocks",
      "description": "<p>An issue is created on a file as soon as there is at least one block of duplicated code on this file.</p>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1768",
      "type": "Code Smell",
      "summary": "The sign of an unsigned variable should not be tested",
      "description": "<p>Because the value in a variable of an unsigned type can never be less than zero, testing to see if it is negative is a useless operation which can only confuse future readers of the code.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nunsigned <span class=\"code-object\">int</span> i = 0; <span class=\"code-comment\">// the lowest value <span class=\"code-keyword\">this</span> <span class=\"code-keyword\">var</span> can have\r\n</span>...\r\n<span class=\"code-keyword\">if</span> (i &gt;= 0) { <span class=\"code-comment\">// Noncompliant\r\n</span>  do_x(i);\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nunsigned <span class=\"code-object\">int</span> i = 0;\r\n...\r\ndo_x(i);\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-953",
      "type": "Code Smell",
      "summary": "Unions should not be used",
      "description": "<p>The use of unions to access an object in different ways may result in the data being misinterpreted. Therefore, this rule prohibits the use of unions for any purpose.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nunion U1 { <span class=\"code-comment\">// Noncompliant\r\n</span>    <span class=\"code-object\">float</span> j;\r\n    <span class=\"code-object\">int</span> i;\r\n};\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 18.4 - Unions shall not be used.</li>\n\t<li>MISRA C++:2008, 9-5-1 - Unions shall not be used.</li>\n\t<li>MISRA C:2012, 19.2 - The union keyword should not be used</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-956",
      "type": "Bug",
      "summary": "\"#include\" directives should be followed by either <filename> or \"filename\" sequences",
      "description": "<p>These are the only forms for the <tt>#include</tt> directive permitted by the standard. The behavior is undefined when other forms are used.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include filename.h        <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include <span class=\"code-quote\">\"filename.h\"</span>        <span class=\"code-comment\">// Compliant\r\n</span>#include &lt;filename.h&gt;\r\n\r\n#define HEADER <span class=\"code-quote\">\"filename.h\"</span>\r\n#include HEADER\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 19.3 - The #include directive shall be followed by either a &lt;filename&gt; or \"filename\" sequence.</li>\n\t<li>MISRA C++:2008, 16-2-6 - The #include directive shall be followed by either a &lt;filename&gt; or \"filename\" sequence.</li>\n\t<li>MISRA C:2012, 20.3 - The #include directive shall be followed by either a &lt;filename&gt; or \"filename\" sequence</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3806",
      "type": "Code Smell",
      "summary": "\"#include\" paths should be portable",
      "description": "<p>The path provided here doesn't match the actual path on this file system (e.g. the case is different). While this may work on a particular environment, this is not portable and may fail on a different environment.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include <span class=\"code-quote\">\"Foo.h\"</span> <span class=\"code-comment\">// Noncompliant, the file name is <span class=\"code-quote\">\"foo.h\"</span></span>\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2757",
      "type": "Bug",
      "summary": "\"=+\" should not be used instead of \"+=\"",
      "description": "<p>The use of operators pairs (<tt>=<ins></tt>) where the reversed, single operator was meant (<tt></ins>=</tt>) will compile and run, but not produce the expected results.</p>\n\n<p>This rule raises an issue when <tt>=<ins></tt>, <tt>=<del></tt>, <tt>=!</tt>, <tt>=&amp;</tt>, <tt>=*</tt>, <tt></ins>=+</tt>,  and <tt></del>=-</tt> are used without any space between the two operators and when there is at least one whitespace after.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> target = -5;\r\n<span class=\"code-object\">int</span> num = 3;\r\n\r\ntarget =- num;  <span class=\"code-comment\">// Noncompliant; target = -3. Is that really what's meant?\r\n</span>target =+ num; <span class=\"code-comment\">// Noncompliant; target = 3</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> target = -5;\r\n<span class=\"code-object\">int</span> num = 3;\r\n\r\ntarget = -num;  <span class=\"code-comment\">// Compliant; intent to assign inverse value of num is clear\r\n</span>target += num;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1123",
      "type": "Code Smell",
      "summary": "\"Obsolete\" attributes should include explanations",
      "description": "<p>The <tt>Obsolete</tt> attribute can be applied with or without arguments, but marking something <tt>Obsolete</tt> without including advice as to why it's obsolete or on what to use instead will lead maintainers to waste time trying to figure those things out - every single time the warning is encountered.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">public</span> class Car\r\n{\r\n\r\n  [Obsolete]  <span class=\"code-comment\">// Noncompliant\r\n</span>  <span class=\"code-keyword\">public</span> void CrankEngine(<span class=\"code-object\">int</span> turnsOfCrank) \r\n  { ... }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">public</span> class Car\r\n{\r\n\r\n  [Obsolete(<span class=\"code-quote\">\"Replaced by the automatic starter\"</span>)]\r\n  <span class=\"code-keyword\">public</span> void CrankEngine(<span class=\"code-object\">int</span> turnsOfCrank) \r\n  { ... }\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "bad-practice",
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-872",
      "type": "Bug",
      "summary": "\"bool\" expressions should not be used as operands to built-in operators other than =, &&, ||, !, ==, !=, unary &, and the conditional operator",
      "description": "<p>The use of <tt>bool</tt> operands with other operators is unlikely to be meaningful (or intended). This rule allows the detection of such uses, which often occur because the logical operators (<tt>&amp;&amp;</tt>, <tt>||</tt> and <tt>!</tt>) can be easily confused with the bitwise operators (<tt>&amp;</tt>, <tt>|</tt> and <tt>~</tt>).</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nbool b1 = <span class=\"code-keyword\">true</span>;\r\nbool b2 = <span class=\"code-keyword\">false</span>;\r\nint8_t s8a;\r\n<span class=\"code-keyword\">if</span> ( b1 &amp; b2 ) <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">if</span> ( ~b1 ) <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">if</span> ( b1 &lt; b2 ) <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">if</span> ( b1 ^ b2 ) <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ( b1 &amp;&amp; b2 )\r\n<span class=\"code-keyword\">if</span> ( !b1 )\r\n<span class=\"code-keyword\">if</span> ( b1 == <span class=\"code-keyword\">false</span> )\r\n<span class=\"code-keyword\">if</span> ( b1 == b2 )\r\n<span class=\"code-keyword\">if</span> ( b1 != b2 )\r\ns8a = b1 ? 3 : 7;\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Operators <tt>|=</tt> and <tt>&amp;=</tt> are ignored when used with <tt>bool</tt> operands as a statement.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid test(bool b1, bool b2, <span class=\"code-object\">int</span> i1) {\r\n  b1 |= b2; <span class=\"code-comment\">// ignored\r\n</span>  b1 &amp;= b2; <span class=\"code-comment\">// ignored\r\n</span>  b1 &amp;= i1; <span class=\"code-comment\">// Noncompliant; right operand is not a bool\r\n</span>  <span class=\"code-keyword\">if</span> (b1 |= b2) { <span class=\"code-comment\">// Noncompliant, <span class=\"code-quote\">\"|=\"</span> on <span class=\"code-quote\">\"bool\"</span> should not be used as expression\r\n</span>    <span class=\"code-comment\">// ...\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 4-5-1 - Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3935",
      "type": "Bug",
      "summary": "\"case\" ranges should not be empty",
      "description": "<p>The GNU compiler extension that allows <tt>case</tt>s to be specified with ranges will only recognize ranges specified from a smaller value to a larger value. Flip the order and the range will evaluate as empty.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (i) {\r\n  <span class=\"code-keyword\">case</span> 0: \r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 1 ... 2:\r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 5 ... 3: <span class=\"code-comment\">// Noncompliant\r\n</span>    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (i) {\r\n  <span class=\"code-keyword\">case</span> 0: \r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 1 ... 2:\r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 3 ... 5\r\n    <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">break</span>;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "gnu"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-841",
      "type": "Code Smell",
      "summary": "\"enum\" members other than the first one should not be explicitly initialized unless all members are explicitly initialized",
      "description": "<p>If an enumerator list is given with no explicit initialization of members, then C/C++ allocates a sequence of integers starting at zero for the first element and increasing by one for each subsequent element.</p>\n\n<p>An explicit initialization of the first element, as permitted by this rule, forces the allocation of integers to start at the given value. When adopting this approach it is essential to ensure that the initialization value used is small enough that no subsequent value in the list will exceed the <tt>int</tt> storage used by enumeration constants.</p>\n\n<p>Explicit initialization of all items in the list, which is also permissible, prevents the mixing of automatic and manual allocation, which is error prone.<br/>\nHowever, it is then the responsibility of the developer to ensure that all values are in the required range, and that values are not unintentionally duplicated.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">enum</span> color { red = 3, blue, green, yellow = 5 }; <span class=\"code-comment\">// Noncompliant; both green and yellow = 5</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">enum</span> color { red = 3, blue = 4, green = 5, yellow = 5 }; <span class=\"code-comment\">// Compliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 9.3 - In an enumerator list, the \"=\" construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized.</li>\n\t<li>MISRA C++:2008, 8-5-3 - In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-127",
      "type": "Code Smell",
      "summary": "\"for\" loop stop conditions should be invariant",
      "description": "<p>A <tt>for</tt> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the introduction of errors in the future.</p>\n\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n\t<li>When the loop counters are updated in the body of the <tt>for</tt> loop</li>\n\t<li>When the stop condition depend upon a method call</li>\n\t<li>When the stop condition depends on an object property, since such properties could change during the execution of the loop.</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 0; i &lt; 10; i++) {\r\n  ...\r\n  i = i - 1; <span class=\"code-comment\">// Noncompliant\r\n</span>  ...\r\n}\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 0; i &lt; getMaximumNumber(); i++) {\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 0; i &lt; 10; i++) {\r\n  ...\r\n}\r\n<span class=\"code-object\">int</span> stopCondition = getMaximumNumber();\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 0; i &lt; stopCondition; i++) {\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the loop.</li>\n\t<li>MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1143",
      "type": "Bug",
      "summary": "\"return\" statements should not occur in \"finally\" blocks",
      "description": "<p>Returning from a <tt>finally</tt> block suppresses the propagation of any unhandled exception which was thrown in the <tt>try</tt> or <tt>catch</tt> block.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid openResource() {\r\n  @<span class=\"code-keyword\">throw</span> [NSException exceptionWithName:@<span class=\"code-quote\">\"FileNotFoundException\"</span> reason:@<span class=\"code-quote\">\"File Not Found on <span class=\"code-object\">System</span>\"</span> userInfo:nil];\r\n}\r\n\r\nvoid fun() {\r\n  @<span class=\"code-keyword\">try</span> {\r\n    openResource();\r\n  }\r\n  @<span class=\"code-keyword\">finally</span> {\r\n    closeResource();\r\n    <span class=\"code-keyword\">return</span>; <span class=\"code-comment\">// Noncompliant - prevents the exception from being propagated\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid openResource() {\r\n  @<span class=\"code-keyword\">throw</span> [NSException exceptionWithName:@<span class=\"code-quote\">\"FileNotFoundException\"</span> reason:@<span class=\"code-quote\">\"File Not Found on <span class=\"code-object\">System</span>\"</span> userInfo:nil];\r\n}\r\n\r\nvoid fun() {\r\n  @<span class=\"code-keyword\">try</span> {\r\n    openResource();\r\n  }\r\n  @<span class=\"code-keyword\">finally</span> {\r\n    closeResource();\r\n  }\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/584.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-584</a> - Return Inside Finally Block</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/mIEbAQ\" class=\"external-link\" rel=\"nofollow\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE"
      ],
      "tags": [
        "cert",
        "cwe",
        "error-handling"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1479",
      "type": "Code Smell",
      "summary": "\"switch\" statements should not have too many \"case\" clauses",
      "description": "<p>When <tt>switch</tt> statements have large sets of <tt>case</tt> clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.</p><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>This rule ignores <tt>switch</tt>es over <tt>Enum</tt>s and empty, fall-through cases.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-954",
      "type": "Code Smell",
      "summary": "#include directives in a file should only be preceded by other preprocessor directives or comments",
      "description": "<p>To aid code readability, all the <tt>#include</tt> directives in a particular code file should be grouped together near the top of the file. The only items which may precede an <tt>#include</tt> in a file are other preprocessor directives or comments.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;h1.h&gt; /* Compliant */\r\nint32_t i;\r\n#include &lt;f2.h&gt; /* Noncompliant */\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;h1.h&gt;\r\n#include &lt;f2.h&gt;\r\n\r\nint32_t i;\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 19.1 - #include statements in a file should only be preceded by other preprocessor directives or comments.</li>\n\t<li>MISRA C++:2008, 16-0-1 - #include directives in a file shall only be preceded by other preprocessor directives or comments.</li>\n\t<li>MISRA C:2012, 20.1 - #include directives should only be preceded by preprocessor directives or comments</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "confusing",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3923",
      "type": "Bug",
      "summary": "All branches in a conditional structure should not have exactly the same implementation",
      "description": "<p>Having all branches in a <tt>switch</tt> or <tt>if</tt> chain with the same implementation is an error. Either a copy-paste error was made and something different should be executed, or there shouldn't be a <tt>switch</tt>/<tt>if</tt> chain at all. Note that this rule does not apply to <tt>if</tt> chains without <tt>else</tt>-s, or to <tt>switch</tt>-es without <tt>default</tt> clauses.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (b == 0) {  <span class=\"code-comment\">// Noncompliant\r\n</span>  doOneMoreThing();\r\n}\r\n<span class=\"code-keyword\">else</span> {\r\n  doOneMoreThing();\r\n}\r\n\r\n<span class=\"code-object\">int</span> b = a &gt; 12 ? 4 : 4;  <span class=\"code-comment\">// Noncompliant\r\n</span>\r\n<span class=\"code-keyword\">switch</span> (i) {  <span class=\"code-comment\">// Noncompliant\r\n</span>  <span class=\"code-keyword\">case</span> 1: \r\n    doSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 2: \r\n    doSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 3:\r\n    doSomething(); \r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">default</span>: \r\n    doSomething();\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1121",
      "type": "Code Smell",
      "summary": "Assignments should not be made from within sub-expressions",
      "description": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have side-effects.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (string.IsNullOrEmpty(result = str.Substring(index, length))) <span class=\"code-comment\">// Noncompliant\r\n</span>{\r\n  <span class=\"code-comment\">//...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">var</span> result = str.Substring(index, length);\r\n<span class=\"code-keyword\">if</span> (string.IsNullOrEmpty(result))\r\n{\r\n  <span class=\"code-comment\">//...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Assignments inside lambda and delegate expressions are allowed. </p>\n\n<p>Furthermore, the following patterns are also accepted:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">var</span> a = b = c = 10;\r\n</pre>\n</div></div>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">while</span> ((val = GetNewValue()) &gt; 0)\r\n{\r\n...\r\n}\r\n</pre>\n</div></div>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">private</span> MyClass instance;\r\n<span class=\"code-keyword\">public</span> MyClass Instance\r\n{\r\n  get\r\n  {\r\n    <span class=\"code-keyword\">return</span> instance ?? (instance = <span class=\"code-keyword\">new</span> MyClass());\r\n  }\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value</li>\n\t<li>MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions</li>\n\t<li>MISRA C:2012, 13.4 - The result of an assignment operator should not be used</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/481.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-481</a> - Assigning instead of Comparing</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/nYFtAg\" class=\"external-link\" rel=\"nofollow\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/1gCTAw\" class=\"external-link\" rel=\"nofollow\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/KQvhAg\" class=\"external-link\" rel=\"nofollow\">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/KYIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC02-CPP.</a> - Avoid errors of omission</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "misra",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-814",
      "type": "Code Smell",
      "summary": "Bit fields should be declared with appropriate types",
      "description": "<p>The use of any type other than <tt>signed short</tt>, <tt>unsigned short</tt>, <tt>signed char</tt>, <tt>unsigned char</tt>, <tt>signed int</tt>, <tt>unsigned int</tt> or <tt>&#95;Bool</tt> for a bit field is implementation-defined, and therefore not portable.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> b:3; <span class=\"code-comment\">// Noncompliant - may have the range of values 0..7 or -4..3</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nunsigned <span class=\"code-object\">int</span> b:3;\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 6.4 - Bit fields shall only be defined to be of type <em>unsigned int</em> or <em>signed int</em>.</li>\n\t<li>MISRA C++:2008, 9-6-2 - Bit-fields shall be either <em>bool</em> type or an explicitly <em>unsigned</em> or <em>signed</em> integral type.</li>\n\t<li>MISRA C:2012, 6.1 - Bit-fields shall only be declared with an appropriate type</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/RAE\" class=\"external-link\" rel=\"nofollow\">CERT, INT12-C.</a> - Do not make assumptions about the type of a plain int bit-field when used in an expression</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/uYAyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, INT12-CPP.</a> - Do not make assumptions about the type of a plain int bit-field when used in an expression</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "lock-in",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1066",
      "type": "Code Smell",
      "summary": "Collapsible \"if\" statements should be merged",
      "description": "<p>Merging collapsible <tt>if</tt> statements increases the code's readability.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition1)\r\n{\r\n  <span class=\"code-keyword\">if</span> (condition2)\r\n  {        \r\n    ...\r\n  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition1 &amp;&amp; condition2)\r\n{        \r\n  ...\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-878",
      "type": "Code Smell",
      "summary": "Comma operator should not be used",
      "description": "<p>The comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is generally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ni = a += 2, a + b;  <span class=\"code-comment\">// What's the value of i ?</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\na +=  2;\r\ni = a + b;\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Use of comma operator is tolerated in initialization and increment expressions of <tt>for</tt> loops.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span>(i = 0, j = 5; i &lt; 6; i++, j++) { ... }\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 12.10 - The comma operator shall not be used.</li>\n\t<li>MISRA C++:2008, 5-18-1 - The comma operator shall not be used.</li>\n\t<li>MISRA C:2012, 12.3 - The comma operator should not be used</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1046",
      "type": "Bug",
      "summary": "Condition-specific \"catch\" handlers should not be used after the ellipsis (catch-all) handler",
      "description": "<p>The catch-all handler should come last in a chain of <tt>catch</tt> or <tt>@catch</tt> statements because it catches everything, and any more-specific <tt>catch</tt>/<tt>@catch</tt> that comes after it will never be used, even when the relevant condition occurs. </p>\n\n<p>This C++ code sample also applies to Objective-C.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid f1()\r\n{\r\n  <span class=\"code-keyword\">try</span>\r\n  {\r\n    <span class=\"code-comment\">// ...\r\n</span>  }\r\n  <span class=\"code-keyword\">catch</span> (...)\r\n  {\r\n    <span class=\"code-comment\">// Handle all exception types\r\n</span>  }\r\n  <span class=\"code-keyword\">catch</span> (int32_t i)  <span class=\"code-comment\">// Noncompliant - handler will never be called\r\n</span>  {\r\n  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid f1()\r\n{\r\n  <span class=\"code-keyword\">try</span>\r\n  {\r\n    <span class=\"code-comment\">// ...\r\n</span>  }\r\n  <span class=\"code-keyword\">catch</span> (int32_t i)  <span class=\"code-comment\">// Compliant - <span class=\"code-object\">int</span> handler\r\n</span>  {\r\n    <span class=\"code-comment\">// Handle <span class=\"code-object\">int</span> exceptions\r\n</span>  }\r\n  <span class=\"code-keyword\">catch</span> (...)        <span class=\"code-comment\">// Compliant - <span class=\"code-keyword\">catch</span>-all handler\r\n</span>  {\r\n    <span class=\"code-comment\">// Handle all other exception types\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 15-3-7 - Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3358",
      "type": "Code Smell",
      "summary": "Conditional operators should not be nested",
      "description": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you) scratching their heads and cursing.</p>\n\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> max(<span class=\"code-object\">int</span> p1, <span class=\"code-object\">int</span> p2, <span class=\"code-object\">int</span> p3) {\r\n  <span class=\"code-keyword\">return</span> p1 &gt; p2 ? (p1 &gt; p3 ? p1 : p3) : (p2 &gt; p3 ? p2 : p3); <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> max(<span class=\"code-object\">int</span> p1, <span class=\"code-object\">int</span> p2, <span class=\"code-object\">int</span> p3) {\r\n  <span class=\"code-keyword\">if</span> (p1 &gt; p2) {\r\n    <span class=\"code-keyword\">return</span> p1 &gt; p3 ? p1 : p3;\r\n  } <span class=\"code-keyword\">else</span> {\r\n    <span class=\"code-keyword\">return</span> p2 &gt; p3 ? p2 : p3;\r\n  }\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1854",
      "type": "Code Smell",
      "summary": "Dead stores should be removed",
      "description": "<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid pow(<span class=\"code-object\">int</span> a, <span class=\"code-object\">int</span> b) {\r\n  <span class=\"code-keyword\">if</span> (b == 0) {\r\n    <span class=\"code-keyword\">return</span> 0;\r\n  }\r\n  <span class=\"code-object\">int</span> x = a;\r\n  <span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 1; i &lt; b; i++) {\r\n    x = x * a;  <span class=\"code-comment\">// Dead store because the last <span class=\"code-keyword\">return</span> statement should <span class=\"code-keyword\">return</span> x instead of returning a\r\n</span>  }\r\n  <span class=\"code-keyword\">return</span> a;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid pow(<span class=\"code-object\">int</span> a, <span class=\"code-object\">int</span> b) {\r\n  <span class=\"code-keyword\">if</span> (b == 0) {\r\n    <span class=\"code-keyword\">return</span> 0;\r\n  }\r\n  <span class=\"code-object\">int</span> x = a;\r\n  <span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 1; i &lt; b; i++) {\r\n    x = x * a;\r\n  }\r\n  <span class=\"code-keyword\">return</span> x;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>This rule ignores:</p>\n<ul>\n\t<li>variable declarations initializers</li>\n\t<li>prefix and postfix increments and decrements <tt>x++;</tt></li>\n\t<li>null pointer assignments <tt>x = NULL;</tt></li>\n\t<li>self assignments (i.e. <tt>x = x;</tt>)</li>\n</ul>\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/563.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable')</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC13-C.</a> - Detect and remove unused values</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/S4IyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC13-CPP.</a> - Detect and remove unused values</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\" class=\"external-link\" rel=\"nofollow\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE"
      ],
      "tags": [
        "cert",
        "cwe",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3689",
      "type": "Bug",
      "summary": "Declaration specifiers should not be redundant",
      "description": "<p>Redundant declaration specifiers should be removed or corrected. Typically, they represent bugs. A specifier modifies the type or pointer to its left. Only when it is at the far left does it apply to the right.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span> <span class=\"code-keyword\">const</span> * v1a; <span class=\"code-comment\">// Noncompliant; both <span class=\"code-keyword\">const</span> specifiers apply to <span class=\"code-object\">int</span>\r\n</span><span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span> <span class=\"code-keyword\">const</span> * v1b; <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">static</span> <span class=\"code-keyword\">static</span> <span class=\"code-object\">int</span> v2;  <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span> *       v1a;  <span class=\"code-comment\">// pointer to a <span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span>. same meaning as before but less confusing\r\n</span><span class=\"code-object\">int</span> <span class=\"code-keyword\">const</span> * <span class=\"code-keyword\">const</span> v1b;  <span class=\"code-comment\">// <span class=\"code-keyword\">const</span> pointer to a <span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span>\r\n</span><span class=\"code-keyword\">static</span> <span class=\"code-object\">int</span>         v2;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "redundant"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1198",
      "type": "Code Smell",
      "summary": "Deprecated K&R syntax should not be used for function definition",
      "description": "<p>In 1978, Brian Kernighan and Dennis Ritchie published the first edition of The C Programming Language. This book, known to C programmers as \"K&amp;R\", served for many years as an informal specification of the language. The version of C that it describes is commonly referred to as K&amp;R C. </p>\n\n<p>The K&amp;R function definition syntax introduced in the book was later deprecated in the ANSI C and ISO C standards. Even though the K&amp;R syntax is still supported in the ISO C11 standard, it's not in ISO C++ standard versions and is not considered readable by most C/C++ developers today. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> foo(a, b)   <span class=\"code-comment\">// Noncompliant K&amp;R C syntax\r\n</span>  <span class=\"code-object\">int</span> a;\r\n  <span class=\"code-object\">char</span>* b;\r\n{\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> foo(<span class=\"code-object\">int</span> a, <span class=\"code-object\">char</span>* b) { <span class=\"code-comment\">// Compliant\r\n</span>}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing",
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-824",
      "type": "Code Smell",
      "summary": "Functions should not be declared at block scope",
      "description": "<p>A function declared at block scope will refer to a member of the enclosing namespace, and so the declaration should be explicitly placed at the namespace level.</p>\n\n<p>Additionally, where a declaration statement could either declare a function or an object, the compiler will choose to declare the function. To avoid potential developer confusion over the meaning of a declaration, functions should not be declared at block scope.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass A {\r\n};\r\n\r\nvoid fun() {\r\n  void nestedFun();  <span class=\"code-comment\">// Noncompliant; declares a function in block scope\r\n</span>\r\n  A a();      <span class=\"code-comment\">// Noncompliant; declares a function at block scope, not an object\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 8.6 - Functions shall be declared at file scope</li>\n\t<li>MISRA C++:2008, 3-1-2 - Functions shall not be declared at block scope</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-107",
      "type": "Code Smell",
      "summary": "Functions should not have too many parameters",
      "description": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</p>\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid doSomething(<span class=\"code-object\">int</span> param1, <span class=\"code-object\">int</span> param2, <span class=\"code-object\">int</span> param3, <span class=\"code-object\">int</span> param4, <span class=\"code-object\">int</span> param5) { \r\n  ...\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid doSomething(<span class=\"code-object\">int</span> param1, <span class=\"code-object\">int</span> param2, <span class=\"code-object\">int</span> param3, <span class=\"code-object\">int</span> param4) { \r\n  ...\r\n}\r\n</pre>\n</div></div>\n",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1764",
      "type": "Bug",
      "summary": "Identical expressions should not be used on both sides of a binary operator",
      "description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.<br/>\nThis rule ignores <tt>*</tt>, <tt>+</tt>, <tt>=</tt>, <tt>&lt;&lt;</tt>,  and <tt>&gt;&gt;</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ( a == a ) <span class=\"code-comment\">// always <span class=\"code-keyword\">true</span>\r\n</span>{ \r\n  doZ();\r\n}\r\n<span class=\"code-keyword\">if</span> ( a != a ) <span class=\"code-comment\">// always <span class=\"code-keyword\">false</span>\r\n</span>{\r\n  doY();\r\n}\r\n<span class=\"code-keyword\">if</span> ( a == b &amp;&amp; a == b ) <span class=\"code-comment\">// <span class=\"code-keyword\">if</span> the first one is <span class=\"code-keyword\">true</span>, the second one is too\r\n</span>{ \r\n  doX();\r\n}\r\n<span class=\"code-keyword\">if</span> ( a == b || a == b ) <span class=\"code-comment\">// <span class=\"code-keyword\">if</span> the first one is <span class=\"code-keyword\">true</span>, the second one is too\r\n</span>{ \r\n  doW();\r\n}\r\n\r\n<span class=\"code-object\">int</span> j = 5 / 5; <span class=\"code-comment\">//always 1\r\n</span><span class=\"code-object\">int</span> k = 5 - 5; <span class=\"code-comment\">// always 0\r\n</span>\r\nc.Equals(c);    <span class=\"code-comment\">//always <span class=\"code-keyword\">true</span>\r\n</span><span class=\"code-object\">Object</span>.Equals(c, c); <span class=\"code-comment\">//always <span class=\"code-keyword\">true</span></span>\r\n</pre>\n</div></div>\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n\t<li>S1656 - Implements a check on <tt>=</tt>.</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2668",
      "type": "Code Smell",
      "summary": "Increment should not be used to set boolean variables to 'true'",
      "description": "<p>It is possible to use the increment operator <tt>+<ins></tt>, to set the value of a <tt>bool</tt>(C</ins><ins>) or <tt>_Bool</tt>(C) variable to <tt>true</tt>. But this feature has been deprecated in C</ins>+ since the 1998 version of the standard, and even where allowed, is simply confusing. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nbool alive;\r\n...\r\nalive++;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nbool alive;\r\n...\r\nalive = <span class=\"code-keyword\">true</span>;\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>ISO/IEC 14882:1998, 5.3.2</li>\n</ul>\n",
      "standards": [],
      "tags": [
        "confusing",
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-110",
      "type": "Code Smell",
      "summary": "Inheritance tree of classes should not be too deep",
      "description": "<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object oriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>\n\n<p>This rule raises an issue when the inheritance tree, starting from <tt>Object</tt> has a greater depth than is allowed. </p>",
      "standards": [],
      "tags": [
        "design"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1751",
      "type": "Code Smell",
      "summary": "Jump statements should not be used unconditionally",
      "description": "<p>Having an unconditional <tt>break</tt>, <tt>return</tt>, <tt>(@)throw</tt> or <tt>goto</tt> in a loop renders it useless; the loop will only execute once and the loop structure itself is simply wasted keystrokes.</p>\n\n<p>Having an unconditional <tt>continue</tt> in a loop can render the loop meaningless, or is itself wasted keystrokes, depending on where in the loop it occurs.</p>\n\n<p>Having an unconditional <tt>return</tt> anywhere other than at the end of a function or method simply renders all the rest of the code in the method useless.</p>\n\n<p>For these reasons, unconditional jump statements should never be used except for the final <tt>return</tt> in a function or method.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">var</span> i = 0; i &lt; 10; i++)\r\n{\r\n    Console.WriteLine(i);\r\n    <span class=\"code-keyword\">break</span>;  <span class=\"code-comment\">// loop only executes once\r\n</span>}\r\n\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">var</span> i = 0; i &lt; 10; i++)\r\n{\r\n    <span class=\"code-keyword\">continue</span>;\r\n    Console.WriteLine(i); <span class=\"code-comment\">// <span class=\"code-keyword\">this</span> is never executed\r\n</span>}\r\n\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">var</span> i = 0; i &lt; 10; i++)\r\n{\r\n    Console.WriteLine(i);\r\n    <span class=\"code-keyword\">continue</span>;  <span class=\"code-comment\">// <span class=\"code-keyword\">this</span> is meaningless; the loop would <span class=\"code-keyword\">continue</span> anyway\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">var</span> i = 0; i &lt; 10; i++)\r\n{\r\n    Console.WriteLine(i);\r\n}\r\n\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-keyword\">var</span> i = 0; i &lt; 10; i++)\r\n{\r\n    Console.WriteLine(i);\r\n    <span class=\"code-keyword\">if</span> (ErrorOccurred())\r\n    {\r\n        <span class=\"code-keyword\">break</span>;\r\n    }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>This rule does not raise an issue when the jump statement is inside a foreach loop as they are often used to find the first element of a collection matching a specific set of criteria:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nforeach (<span class=\"code-keyword\">var</span> t in from t in _usableBitSetSizes\r\n               let numSetBitsAtDesiredSaturation = (<span class=\"code-object\">int</span>) (t*desiredSaturation)\r\n               let estimatedNumUniqueValues = GetEstimatedNumberUniqueValuesAllowingForCollisions(\r\n                t, numSetBitsAtDesiredSaturation) where estimatedNumUniqueValues &gt; maxNumberOfValuesExpected select t)\r\n{\r\n  <span class=\"code-keyword\">return</span> t;\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.1 - There shall be no unreachable code.</li>\n\t<li>MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>.</li>\n\t<li>MISRA C++:2008, 0-1-9 - There shall be no dead code.</li>\n\t<li>MISRA C:2012, 2.2 - There shall be no dead code</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-977",
      "type": "Bug",
      "summary": "Lines starting with \"#\" should contain valid preprocessing directives",
      "description": "<p>Preprocessing directives (lines that start with <tt>#</tt>) can be used to conditionally include or exclude code from compilation. Malformed preprocessing directives could lead to the exclusion or inclusion of more code than was intended. Therefore all preprocessing directives should be syntactically meaningful.</p>\n\n<p>Recognized preprocessing directives are <tt>#if</tt>, <tt>#elif</tt>, <tt>#else</tt>, <tt>#endif</tt>, <tt>#define</tt>, <tt>#undef</tt>, <tt>#ifdef</tt>, <tt>#ifndef</tt>, <tt>#include</tt>, <tt>#line</tt>, <tt>#error</tt>, and <tt>#pragma</tt>. Note that whitespace is allowed between the <tt>#</tt> and the directive.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define AAA 2\r\n...\r\n<span class=\"code-object\">int</span> foo(void)\r\n{\r\n  <span class=\"code-object\">int</span> x = 0;\r\n  ...\r\n\r\n#ifndef AAA\r\n  x = 1;\r\n#else1  /* Noncompliant */\r\n  x = AAA;\r\n#endif\r\n\r\n  ...\r\n  <span class=\"code-keyword\">return</span> x;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define AAA 2\r\n...\r\n<span class=\"code-object\">int</span> foo(void)\r\n{\r\n  <span class=\"code-object\">int</span> x = 0;\r\n  ...\r\n\r\n#ifndef AAA\r\n  x = 1;\r\n#<span class=\"code-keyword\">else</span>\r\n  x = AAA;\r\n#endif\r\n\r\n  ...\r\n  <span class=\"code-keyword\">return</span> x;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 19.16 - Preprocessing directives shall be syntactically meaningful even when excluded by preprocessor.</li>\n\t<li>MISRA C++:2008, 16-0-8 - If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token.</li>\n\t<li>MISRA C:2012, 20.13 - A line whose first token is # shall be a valid preprocessing directive</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "preprocessor"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-924",
      "type": "Code Smell",
      "summary": "Loops should not have more than one \"break\" or \"goto\" statement",
      "description": "<p>Restricting the number of exits from a loop is done in the interests of good structured programming. One <tt>break</tt> or <tt>goto</tt> statement is acceptable in a loop since this allows, for example, for dual-outcome loops or optimal coding.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default threshold of 1:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 0; i &lt; 10; i++) {\r\n  <span class=\"code-keyword\">if</span> (...) {\r\n    <span class=\"code-keyword\">break</span>;      <span class=\"code-comment\">//  Compliant\r\n</span>  }\r\n  <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (...) {\r\n    <span class=\"code-keyword\">break</span>;      <span class=\"code-comment\">//  Non-compliant - second jump from loop\r\n</span>  }\r\n  <span class=\"code-keyword\">else</span> {\r\n    ...\r\n  }\r\n}\r\n<span class=\"code-keyword\">while</span> (...) {\r\n  <span class=\"code-keyword\">if</span> (...) {\r\n    <span class=\"code-keyword\">break</span>;      <span class=\"code-comment\">// Compliant\r\n</span>  }\r\n  <span class=\"code-keyword\">if</span> (...) {\r\n    <span class=\"code-keyword\">break</span>;      <span class=\"code-comment\">// Non-compliant - second jump from loop\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 0; i &lt; 10; i++) {\r\n  <span class=\"code-keyword\">if</span> (...) {\r\n    <span class=\"code-keyword\">break</span>;      <span class=\"code-comment\">//  Compliant\r\n</span>  }\r\n}\r\n<span class=\"code-keyword\">while</span> (...) {\r\n  <span class=\"code-keyword\">if</span> (...) {\r\n    <span class=\"code-keyword\">break</span>;    <span class=\"code-comment\">// Compliant\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.6 - For any iteration statement there shall be at most one break statement used for loop termination.</li>\n\t<li>MISRA C++:2008, 6-6-4 - For any iteration statement there shall be no more than one break or goto statement used for loop termination.</li>\n\t<li>MISRA C:2012, 15.4 - There should be no more than one break or goto statement used to terminate any iteration statement</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "confusing",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1763",
      "type": "Bug",
      "summary": "Methods should not contain unreachable code",
      "description": "<p>Jump statements (<tt>return</tt>, <tt>break</tt>, <tt>continue</tt>, and <tt>goto</tt>) and <tt>throw</tt> expressions move control flow out of the current code block. Typically, any statements in a block that come after a jump or <tt>throw</tt> are simply wasted keystrokes lying in wait to confuse the unwary. </p>\n\n<p>Rarely, as illustrated below, code after a jump or <tt>throw</tt> is reachable. However, such code is difficult to understand, and should be refactored. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> fun(<span class=\"code-object\">int</span> a) {\r\n  <span class=\"code-object\">int</span> i = 10;\r\n  <span class=\"code-keyword\">return</span> i + a;       <span class=\"code-comment\">// Noncompliant \r\n</span>  i++;             <span class=\"code-comment\">// <span class=\"code-keyword\">this</span> is never executed\r\n</span>}\r\n\r\nvoid foo(<span class=\"code-object\">int</span> a) {\r\n  <span class=\"code-keyword\">if</span> (a == 5) {\r\n    <span class=\"code-keyword\">goto</span> error;\r\n  } <span class=\"code-keyword\">else</span> {\r\n    <span class=\"code-comment\">// <span class=\"code-keyword\">do</span> the job\r\n</span>  }\r\n  <span class=\"code-keyword\">return</span>;\r\n  \r\n  error: \r\n    printf(<span class=\"code-quote\">\"don't use 5\"</span>); <span class=\"code-comment\">// <span class=\"code-keyword\">this</span> is reachable but unreadable\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> fun(<span class=\"code-object\">int</span> a) {\r\n  <span class=\"code-object\">int</span> i = 10;\r\n  <span class=\"code-keyword\">return</span> i + a;\r\n}\r\n\r\nvoid foo(<span class=\"code-object\">int</span> a) {\r\n  <span class=\"code-keyword\">if</span> (a == 5) {\r\n    handleError();\r\n  } <span class=\"code-keyword\">else</span> {\r\n    <span class=\"code-comment\">// <span class=\"code-keyword\">do</span> the job\r\n</span>  }\r\n  <span class=\"code-keyword\">return</span>;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.1 - There shall be no unreachable code</li>\n\t<li>MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code</li>\n\t<li>MISRA C++:2008, 0-1-9 - There shall be no dead code</li>\n\t<li>MISRA C:2012, 2.1 - A project shall not contain unreachable code</li>\n\t<li>MISRA C:2012, 2.2 - There shall be no dead code</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/561.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-561</a> - Dead Code</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\" class=\"external-link\" rel=\"nofollow\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC07-CPP.</a> - Detect and remove dead code</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2681",
      "type": "Code Smell",
      "summary": "Multiline blocks should be enclosed in curly braces",
      "description": "<p>Curly braces can be omitted from a one-line block, such as with an <tt>if</tt> statement or <tt>for</tt> loop, but doing so can be misleading and induce bugs. </p>\n\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the omission of curly braces means the lines will be unconditionally executed once.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition)\r\n  FirstActionInBlock();\r\n  SecondAction();  <span class=\"code-comment\">// Noncompliant; executed unconditionally\r\n</span>ThirdAction();\r\n\r\n<span class=\"code-keyword\">if</span>(condition) FirstActionInBlock(); SecondAction();  <span class=\"code-comment\">// Noncompliant; secondAction executed unconditionally\r\n</span>\r\n<span class=\"code-keyword\">if</span>(condition) FirstActionInBlock();  <span class=\"code-comment\">// Noncompliant\r\n</span>  SecondAction();  <span class=\"code-comment\">// Executed unconditionally\r\n</span>\r\nstring str = <span class=\"code-keyword\">null</span>;\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 0; i &lt; array.Length; i++) \r\n  str = array[i];\r\n  DoTheThing(str);  <span class=\"code-comment\">// Noncompliant; executed only on last array element</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition) \r\n{\r\n  FirstActionInBlock();\r\n  SecondAction();\r\n}\r\nThirdAction();\r\n\r\nstring str = <span class=\"code-keyword\">null</span>;\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 0; i &lt; array.Length; i++) \r\n{\r\n  str = array[i];\r\n  DoTheThing(str);\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/483.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-483</a> - Incorrect Block Delimitation</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\" class=\"external-link\" rel=\"nofollow\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE"
      ],
      "tags": [
        "cert",
        "cwe"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-817",
      "type": "Bug",
      "summary": "Narrow and wide string literals should not be concatenated ",
      "description": "<p>Concatenation of wide and narrow string literals leads to undefined behavior.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nwchar_t n_array[] = <span class=\"code-quote\">\"Hello\"</span> L<span class=\"code-quote\">\"World\"</span>;     <span class=\"code-comment\">// Noncompliant\r\n</span>wchar_t w_array[] = L<span class=\"code-quote\">\"Hello\"</span> <span class=\"code-quote\">\"World\"</span>;     <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nchar_t n_array[] = <span class=\"code-quote\">\"Hello\"</span> <span class=\"code-quote\">\"World\"</span>;     <span class=\"code-comment\">// Compliant\r\n</span>wchar_t w_array[] = L<span class=\"code-quote\">\"Hello\"</span> L<span class=\"code-quote\">\"World\"</span>;\t<span class=\"code-comment\">// Compliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 2-13-5 - Narrow and wide string literals shall not be concatenated.</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/QIEzAg\" class=\"external-link\" rel=\"nofollow\">CERT STR10-C.</a> - Do not concatenate different type of string literals</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-108",
      "type": "Code Smell",
      "summary": "Nested blocks of code should not be left empty",
      "description": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid foo()\r\n{\r\n  <span class=\"code-object\">int</span> x;\r\n  <span class=\"code-keyword\">if</span> (x == 42)\r\n  {                     /* Noncompliant */\r\n    /* <span class=\"code-keyword\">do</span> nothing */\r\n  }\r\n  <span class=\"code-keyword\">else</span>\r\n  {\r\n    printf(<span class=\"code-quote\">\"x != 42\"</span>);\r\n  }\r\n}\r\n\r\nvoid bar()\r\n{                       /* Compliant - functions are not nested blocks */\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid foo()\r\n{\r\n  <span class=\"code-object\">int</span> x;\r\n  <span class=\"code-keyword\">if</span> (x != 42)\r\n  {                     /* Compliant */\r\n    printf(<span class=\"code-quote\">\"x != 42\"</span>);\r\n  }\r\n}\r\n\r\n/* ... */\r\n</pre>\n</div></div><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-905",
      "type": "Bug",
      "summary": "Non-empty statements should change control flow or have at least one side-effect",
      "description": "<p>Any statement (other than a null statement, which means a statement containing only a semicolon <tt>;</tt>) which has no side effect and does not result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> func(<span class=\"code-object\">int</span> a, <span class=\"code-object\">int</span> b) {\r\n  <span class=\"code-object\">int</span> result = 0;\r\n  a + b; <span class=\"code-comment\">// Noncompliant, no side effect.\r\n</span>  <span class=\"code-keyword\">return</span> result;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> func(<span class=\"code-object\">int</span> a, <span class=\"code-object\">int</span> b) {\r\n  <span class=\"code-object\">int</span> result = a + b; <span class=\"code-comment\">// Compliant\r\n</span>  <span class=\"code-keyword\">return</span> result;\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See </h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/482\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-482</a> - Comparing instead of Assigning</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n\t<li>MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-955",
      "type": "Bug",
      "summary": "Non-standard characters should not occur in header file names in \"#include\" directives",
      "description": "<p>If the <tt>'</tt>, <tt>}}, {{\"</tt> or <tt>/<b></tt> characters are used between <tt>&lt;</tt> and <tt>&gt;</tt> delimiters or the <tt>'</tt>, <tt>}} or {{/</b></tt> characters are used between the <tt>\"</tt> delimiters in a header name preprocessing token, then the behavior is undefined.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;<span class=\"code-quote\">\"foo\"</span>&gt;     <span class=\"code-comment\">// Noncompliant\r\n</span>#include <span class=\"code-quote\">\"dir\\foo.h\"</span> <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 19.2 - Non-standard characters should not occur in header file names in #include directives.</li>\n\t<li>MISRA C++:2008, 16-2-4 - The ', \", /* or // characters shall not occur in a header file name.</li>\n\t<li>MISRA C++:2008, 16-2-5 - The \\ character should not occur in a header file name.</li>\n\t<li>MISRA C:2012, 20.2 - The ', \" or \\ characters and the /* or // character sequences shall not occur in a header file name</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1911",
      "type": "Code Smell",
      "summary": "Obsolete POSIX functions should not be used",
      "description": "<p>To ensure future code portability, obsolete POSIX functions should be removed. Those functions, with their replacements are listed below:</p>\n\n<table class='confluenceTable'><tbody>\n<tr>\n<th class='confluenceTh'>Obsolete</th>\n<th class='confluenceTh'>Use Instead</th>\n</tr>\n<tr>\n<td class='confluenceTd'>asctime</td>\n<td class='confluenceTd'>strftime</td>\n</tr>\n<tr>\n<td class='confluenceTd'>asctime_r</td>\n<td class='confluenceTd'>strftime</td>\n</tr>\n<tr>\n<td class='confluenceTd'>bcmp</td>\n<td class='confluenceTd'>memcmp</td>\n</tr>\n<tr>\n<td class='confluenceTd'>bcopy</td>\n<td class='confluenceTd'>memmove memcpy</td>\n</tr>\n<tr>\n<td class='confluenceTd'>bsd_signal</td>\n<td class='confluenceTd'>sigaction</td>\n</tr>\n<tr>\n<td class='confluenceTd'>bzero</td>\n<td class='confluenceTd'>memset</td>\n</tr>\n<tr>\n<td class='confluenceTd'>ctime</td>\n<td class='confluenceTd'>strftime</td>\n</tr>\n<tr>\n<td class='confluenceTd'>ecvt</td>\n<td class='confluenceTd'>sprintf</td>\n</tr>\n<tr>\n<td class='confluenceTd'>fcvt</td>\n<td class='confluenceTd'>sprintf</td>\n</tr>\n<tr>\n<td class='confluenceTd'>ftime</td>\n<td class='confluenceTd'>no replacement function</td>\n</tr>\n<tr>\n<td class='confluenceTd'>gcvt</td>\n<td class='confluenceTd'>sprintf</td>\n</tr>\n<tr>\n<td class='confluenceTd'>getcontext</td>\n<td class='confluenceTd'>Rewrite to use POSIX threads.</td>\n</tr>\n<tr>\n<td class='confluenceTd'>gethostbyaddr</td>\n<td class='confluenceTd'>getnameinfo</td>\n</tr>\n<tr>\n<td class='confluenceTd'>gethostbyname</td>\n<td class='confluenceTd'>getaddrinfo</td>\n</tr>\n<tr>\n<td class='confluenceTd'>getwd</td>\n<td class='confluenceTd'>getcwd</td>\n</tr>\n<tr>\n<td class='confluenceTd'>index</td>\n<td class='confluenceTd'>strchr</td>\n</tr>\n<tr>\n<td class='confluenceTd'>makecontext</td>\n<td class='confluenceTd'>Rewrite to use POSIX threads.</td>\n</tr>\n<tr>\n<td class='confluenceTd'>pthread_attr_getstackaddr</td>\n<td class='confluenceTd'>pthread_attr_getstack</td>\n</tr>\n<tr>\n<td class='confluenceTd'>pthread_attr_setstackaddr</td>\n<td class='confluenceTd'>pthread_attr_setstack</td>\n</tr>\n<tr>\n<td class='confluenceTd'>rand_r</td>\n<td class='confluenceTd'>rand</td>\n</tr>\n<tr>\n<td class='confluenceTd'>rindex</td>\n<td class='confluenceTd'>strrchr</td>\n</tr>\n<tr>\n<td class='confluenceTd'>scalb</td>\n<td class='confluenceTd'>scalbln', 'scalblnf' or 'scalblnl' instead of this function</td>\n</tr>\n<tr>\n<td class='confluenceTd'>swapcontext</td>\n<td class='confluenceTd'>Rewrite to use POSIX threads.</td>\n</tr>\n<tr>\n<td class='confluenceTd'>tmpnam</td>\n<td class='confluenceTd'>'tmpfile', 'mkstemp', or 'mkdtemp' instead for this function</td>\n</tr>\n<tr>\n<td class='confluenceTd'>tmpnam_r</td>\n<td class='confluenceTd'>tmpfile', 'mkstemp', or 'mkdtemp' instead for this function</td>\n</tr>\n<tr>\n<td class='confluenceTd'>ualarm</td>\n<td class='confluenceTd'>'timer_create', 'timer_delete', 'timer_getoverrun', 'timer_gettime', or 'timer_settime' instead of this function</td>\n</tr>\n<tr>\n<td class='confluenceTd'>usleep</td>\n<td class='confluenceTd'>'nanosleep' or 'setitimer' function</td>\n</tr>\n<tr>\n<td class='confluenceTd'>utime</td>\n<td class='confluenceTd'>utimensat</td>\n</tr>\n<tr>\n<td class='confluenceTd'>vfork</td>\n<td class='confluenceTd'>fork</td>\n</tr>\n<tr>\n<td class='confluenceTd'>wcswcs</td>\n<td class='confluenceTd'>wcsstr</td>\n</tr>\n</tbody></table>\n\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/EgAa\" class=\"external-link\" rel=\"nofollow\">CERT, POS33-C.</a> - Do not use vfork()</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-796",
      "type": "Bug",
      "summary": "Only escape sequences defined in the ISO C standard should be used",
      "description": "<p>The use of an undefined escape sequence leads to undefined behavior. The defined escape sequences (ISO/IEC 14882:2003 <span class=\"error\">&#91;1&#93;</span> §2.13.2) are: <tt>\\n</tt>, <tt>\\t</tt>, <tt>\\v</tt>, <tt>\\b</tt>, <tt>\\r</tt>, <tt>\\f</tt>, <tt>\\a</tt>, <tt><br class=\"atl-forced-newline\" />}}, {{&#63;</tt>, <tt>\\'</tt>, <tt>\\\"</tt>, <tt>\\&lt;Octal Number&gt;</tt>, and <tt>\\x&lt;Hexadecimal Number&gt;</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">const</span> char_t a[ 2 ] = <span class=\"code-quote\">\"\\k\"</span>;   <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">const</span> char_t b[ 2 ] = <span class=\"code-quote\">\"\\b\"</span>;   <span class=\"code-comment\">// Compliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 4.1 - Only those escape sequences that are defined in ISO C standard shall be used.</li>\n\t<li>MISRA C++:2008, 2-13-1 - Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1110",
      "type": "Code Smell",
      "summary": "Redundant pairs of parentheses should be removed",
      "description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But redundant pairs of parentheses could be misleading, and should be removed. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> x = (y / 2 + 1);   <span class=\"code-comment\">//Compliant even <span class=\"code-keyword\">if</span> the parenthesis are ignored by the compiler\r\n</span>\r\n<span class=\"code-keyword\">if</span> (a &amp;&amp; ((x+y &gt; 0))) {  <span class=\"code-comment\">// Noncompliant\r\n</span>  <span class=\"code-comment\">//...\r\n</span>}\r\n\r\n<span class=\"code-keyword\">return</span> ((x + 1));  <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> x = (y / 2 + 1);\r\n\r\n<span class=\"code-keyword\">if</span> (a &amp;&amp; (x+y &gt; 0)) {\r\n  <span class=\"code-comment\">//...\r\n</span>}\r\n\r\n<span class=\"code-keyword\">return</span> (x + 1);\r\n</pre>\n</div></div><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>When the result of an assignment is used as a condition, clang raises a warning to make sure the purpose was not to use <tt>==</tt> in place of <tt>=</tt>. Adding some parentheses around the assignment is a common way to silence this clang warning. So, no issue is raised in such case.</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ((x = 7)) {} <span class=\"code-comment\">// Compliant</span>\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1862",
      "type": "Bug",
      "summary": "Related \"if/else if\" statements should not have the same condition",
      "description": "<p>A chain of <tt>if</tt>/<tt>else if</tt> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <tt>true</tt>. </p>\n\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (param == 1)\r\n{\r\n  OpenWindow();\r\n}\r\n<span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (param == 2)\r\n{\r\n  CloseWindow();\r\n}\r\n<span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (param == 1) <span class=\"code-comment\">// Noncompliant\r\n</span>{\r\n  MoveWindowToTheBackground();\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (param == 1)\r\n{\r\n  OpenWindow();\r\n}\r\n<span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (param == 2)\r\n{\r\n  CloseWindow();\r\n}\r\n<span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (param == 3)\r\n{\r\n  MoveWindowToTheBackground();\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "pitfall",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-125",
      "type": "Code Smell",
      "summary": "Sections of code should not be \"commented out\"",
      "description": "<p>Programmers should not comment out code as it bloats programs and reduces readability.<br/>\nUnused code should be deleted and can be retrieved from source control history if required.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 2.4 - Sections of code should not be \"commented out\".</li>\n\t<li>MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments.</li>\n\t<li>MISRA C+<ins>:2008, 2-7-3 - Sections of code should not be \"commented out\" using C</ins>+ comments.</li>\n\t<li>MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\"</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2216",
      "type": "Bug",
      "summary": "Single-bit named bit fields should not be of a signed type",
      "description": "<p>The values that can be represented by a signed bit field with a length of one bit may not meet developer expectations. For example according to the C99 Standard, Section 6.2.6.2, a single-bit signed bit-field has a single (one) sign bit and no (zero) value bits.</p>\n\n<p>This rule does not apply to unnamed bit fields, as their values cannot be accessed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nsigned <span class=\"code-object\">int</span> f:1;  <span class=\"code-comment\">// Noncompliant; there's only room here <span class=\"code-keyword\">for</span> the sign</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nunsigned <span class=\"code-object\">int</span> f:1;\r\n</pre>\n</div></div>\n<p>or</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nsigned <span class=\"code-object\">int</span>:1; <span class=\"code-comment\">// unnamed</span>\r\n</pre>\n</div></div>\n<p>or</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nsigned <span class=\"code-object\">int</span> f:2;\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 6.5 - Bit fields of type signed int shall be at least 2 bits long</li>\n\t<li>MISRA C:2012, 6.2 - Single-bit named bit fields shall not be of a signed type</li>\n\t<li>MISRA C++:2008, 9-6-4 - Named bit-fields with signed integer type shall have a length of more than one bit</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1820",
      "type": "Code Smell",
      "summary": "Structures should not have too many fields ",
      "description": "<p>A structure, such as a <tt>struct</tt>, <tt>union</tt> or <tt>class</tt> that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and having a lot of fields is an indication that a structure has grown too large.</p>\n\n<p>Above a specific threshold, it is strongly advised to refactor the structure into smaller ones that focus on well defined topics.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1134",
      "type": "Code Smell",
      "summary": "Track uses of \"FIXME\" tags",
      "description": "<p><tt>FIXME</tt> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.<br/>\nSometimes the developer will not have the time or will simply forget to get back to that tag.<br/>\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">private</span> <span class=\"code-object\">int</span> Divide(<span class=\"code-object\">int</span> numerator, <span class=\"code-object\">int</span> denominator) \r\n{\r\n  <span class=\"code-keyword\">return</span> numerator / denominator;              <span class=\"code-comment\">// FIXME denominator value might be  0\r\n</span>}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/546.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-546</a> - Suspicious Comment</li>\n</ul>\n",
      "standards": [
        "CWE"
      ],
      "tags": [
        "cwe"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1141",
      "type": "Code Smell",
      "summary": "Try-catch blocks should not be nested",
      "description": "<p>Nesting <tt>try</tt>/<tt>catch</tt> or <tt>@try</tt>/<tt>@catch</tt> blocks severely impacts the readability of source code because it makes it too difficult to understand which block will catch which exception.</p>\n\n<p>This C++ example also applies to Objective-C.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">try</span> {\r\n  <span class=\"code-keyword\">try</span> {                                     <span class=\"code-comment\">// Noncompliant\r\n</span>    doSomething();\r\n  } <span class=\"code-keyword\">catch</span> (RuntimeException e) {\r\n    /* Ignore */\r\n  }\r\n\r\n  doSomethingElse();\r\n} <span class=\"code-keyword\">catch</span> (Exception e) {\r\n  /* ... */\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">try</span> {\r\n  dedicatedMethod();                        <span class=\"code-comment\">// Compliant\r\n</span>  doSomethingElse();\r\n} <span class=\"code-keyword\">catch</span> (Exception e) {\r\n  /* ... */\r\n}\r\n\r\n/* ... */\r\n\r\n<span class=\"code-keyword\">private</span> void dedicatedMethod() {\r\n  <span class=\"code-keyword\">try</span> {                                     <span class=\"code-comment\">// Compliant\r\n</span>    doSomething();\r\n  } <span class=\"code-keyword\">catch</span> (RuntimeException e) {\r\n    /* Ignore */\r\n  }\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1871",
      "type": "Code Smell",
      "summary": "Two branches in a conditional structure should not have exactly the same implementation",
      "description": "<p>Having two <tt>cases</tt> in the same <tt>switch</tt> statement or branches in the same <tt>if</tt> structure with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <tt>if</tt> structure they should be combined, or for a <tt>switch</tt>, one should fall  through to the other.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (i)\r\n{\r\n  <span class=\"code-keyword\">case</span> 1:\r\n    DoSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 2:\r\n    DoSomethingDifferent();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 3:  <span class=\"code-comment\">// Noncompliant; duplicates <span class=\"code-keyword\">case</span> 1's implementation\r\n</span>    DoSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">default</span>:\r\n    DoTheRest();\r\n}\r\n\r\n<span class=\"code-keyword\">if</span> (a &gt;= 0 &amp;&amp; a &lt; 10)\r\n{\r\n  DoTheThing();\r\n}\r\n<span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (a &gt;= 10 &amp;&amp; a &lt; 20)\r\n{\r\n  DoTheOtherThing();\r\n}\r\n<span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (a &gt;= 20 &amp;&amp; a &lt; 50)\r\n{\r\n  DoTheThing();  <span class=\"code-comment\">// Noncompliant; duplicates first condition\r\n</span>}\r\n<span class=\"code-keyword\">else</span>\r\n{\r\n  DoTheRest();\r\n}\r\n\r\n<span class=\"code-keyword\">if</span> (b == 0)\r\n{\r\n  DoOneMoreThing();\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (i) {\r\n  <span class=\"code-keyword\">case</span> 1:\r\n  <span class=\"code-keyword\">case</span> 3:\r\n    DoSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 2:\r\n    DoSomethingDifferent();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">default</span>:\r\n    DoTheRest();\r\n}\r\n\r\n<span class=\"code-keyword\">if</span> ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50))\r\n{\r\n  DoTheThing();\r\n}\r\n<span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (a &gt;= 10 &amp;&amp; a &lt; 20)\r\n{\r\n  DoTheOtherThing();\r\n}\r\n<span class=\"code-keyword\">else</span>\r\n{\r\n  DoTheRest();\r\n}\r\n\r\nDoOneMoreThing();\r\n</pre>\n</div></div>\n<p>or</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (i)\r\n{\r\n  <span class=\"code-keyword\">case</span> 1:\r\n    DoSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 2:\r\n    DoSomethingDifferent();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 3:\r\n    DoThirdThing();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">default</span>:\r\n    DoTheRest();\r\n}\r\n\r\n<span class=\"code-keyword\">if</span> (a &gt;= 0 &amp;&amp; a &lt; 10)\r\n{\r\n  DoTheThing();\r\n}\r\n<span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (a &gt;= 10 &amp;&amp; a &lt; 20)\r\n{\r\n  DoTheOtherThing();\r\n}\r\n<span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (a &gt;= 20 &amp;&amp; a &lt; 50)\r\n{\r\n  DoTheThirdThing();\r\n}\r\n<span class=\"code-keyword\">else</span>\r\n{\r\n  DoTheRest();\r\n}\r\n</pre>\n</div></div><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Blocks in an <tt>if</tt> chain that contain a single line of code are ignored, as are blocks in a <tt>switch</tt> statement that contain a single line of code with or without a following <tt>break</tt>.</p>",
      "standards": [],
      "tags": [
        "design",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-876",
      "type": "Bug",
      "summary": "Unary minus should not be applied to an unsigned expression",
      "description": "<p>Applying the unary minus operator to an unsigned variable or expression will always yield another unsigned expression. More plainly, in some cases the operation itself is meaningless, and in some other cases the result will be unexpected. In all cases it is bad practice. Therefore the unary minus operator should not be applied to unsigned variables or expressions.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nuint8_t a = -1U;\r\nint32_t b = -a; <span class=\"code-comment\">// Noncompliant; b is assigned -255 \r\n</span>uint32_t c = 1U; \r\nint64_t d = -c; <span class=\"code-comment\">// Noncompliant; d is assigned MAX_UINT</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>This rule ignores <tt>-1U</tt> because it is commonly used as shorthand for <tt>MAX_UINT</tt>.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 12.9 - The unary minus operator shall not be applied to an expression whose underlying type is unsigned.</li>\n\t<li>MISRA C++:2008, 5-3-2 - The unary minus operator shall not be applied to an expression whose underlying type is unsigned.</li>\n\t<li>MISRA C:2012, 10.1 - Operands shall not be of an inappropriate essential type</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2761",
      "type": "Bug",
      "summary": "Unary prefix operators should not be repeated",
      "description": "<p>The needless repetition of an operator is usually a typo. After all, why write <tt>!!!i</tt> when <tt>!i</tt> will do?</p>\n\n<p>On the other hand, the repetition of increment and decrement operators may have been done on purpose, but doing so obfuscates the meaning, and should be simplified.</p>\n\n<p>This rule raises an issue for sequences of: <tt>!</tt>, <tt>~</tt>, <tt>-</tt>, and <tt>&#43;</tt>, and in C+&#43; for repetitions of the increment and decrement operators.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> i = 1;\r\n\r\n<span class=\"code-object\">int</span> j = - - -i;  <span class=\"code-comment\">// Noncompliant; just use -i\r\n</span><span class=\"code-object\">int</span> k = ~~i;     <span class=\"code-comment\">// Noncompliant; same as i\r\n</span><span class=\"code-object\">int</span> m = + +i;    <span class=\"code-comment\">// Noncompliant; operators are useless here\r\n</span>\r\nbool b = <span class=\"code-keyword\">false</span>;\r\nbool c = !!!b;   <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> i =  1;\r\n\r\n<span class=\"code-object\">int</span> j = -i;\r\n<span class=\"code-object\">int</span> k =  i;\r\n<span class=\"code-object\">int</span> m =  i;\r\n\r\nbool b = <span class=\"code-keyword\">false</span>;\r\nbool c = !b;\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Boolean normalization <tt>!!</tt> is ignored.</p>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1065",
      "type": "Code Smell",
      "summary": "Unused labels should be removed",
      "description": "<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.<br/>\nThis will improve maintainability as developers will not wonder what this label is used for.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid fun() {\r\n  label: doSomething();\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid fun() {\r\n  doSomething();\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2012, 2.6 - A function should not contain unused label declarations</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-897",
      "type": "Code Smell",
      "summary": "Unused type declarations should be removed",
      "description": "<p>If a type is declared but not used, then it is unclear to a reviewer if the type is redundant or it has been left unused by mistake.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid unusedtype()\r\n{\r\n  typedef <span class=\"code-object\">int</span> local_Type; <span class=\"code-comment\">// Noncompliant, unused\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 0-1-5 - A project shall not contain unused type declarations.</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC07-CPP.</a> - Detect and remove dead code</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1656",
      "type": "Bug",
      "summary": "Variables should not be self-assigned",
      "description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid setValue(<span class=\"code-object\">int</span> value) {\r\n  value = value;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid setValue(<span class=\"code-object\">int</span> value) {\r\n  <span class=\"code-keyword\">this</span>-&gt;value = value;\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3730",
      "type": "Code Smell",
      "summary": "\"#include_next\" should not be used",
      "description": "<p><tt>#include_next</tt> is a gcc-specific language extension that alters the search path for the specified header file by starting the search from the header file directory <em>after</em> the one in which the directive was encountered. It also ignores the distinction between <tt>\"file\"</tt> and <tt>&lt;file&gt;</tt>. It is typically used when you have two (probably related) header files with the same name, although there is nothing in the extension to enforce or limit the use to same-name files.</p>\n\n<p>Use of this extension can be tricky to get right, and is almost never justified. Instead, you should use an absolute path in the <tt>#include</tt> statement or rename one of the files.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include_next <span class=\"code-quote\">\"foo.h\"</span> <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include <span class=\"code-quote\">\"/usr/local/include/foo.h\"</span>\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing",
        "lock-in"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1103",
      "type": "Code Smell",
      "summary": "\"/*\" and \"//\" should not be used within comments",
      "description": "<p>Defining a nested single-line comment within a multi-line comment invites errors. It may lead a developer to wrongly think that the lines located after the single-line comment are not part of the comment.</p>\n\n<p>If a comment starting sequence, <tt>/<b></tt> or <tt>//</tt>, occurs within a <tt>/</b></tt> comment, is it quite likely to be caused by a missing <tt>*/</tt> comment ending sequence.<br/>\nIf a comment starting sequence occurs within a <tt>//</tt> comment, it is probably because a region of code has been commented-out using <tt>//</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n/* some comment, end comment marker accidentally omitted\r\n<span class=\"code-comment\">// Make sure <span class=\"code-keyword\">this</span> function is called in a thread safe context\r\n</span>Perform_Critical_Safety_Function(X);\r\n...\r\n/* <span class=\"code-keyword\">this</span> comment is non-compliant */\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>The sequence // is permitted within a // comment.</p><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 2.3 - The character sequence /* shall not be used within a comment.</li>\n\t<li>MISRA C++:2008, 2-7-1 - The character sequence /* shall not be used within a C-style comment.</li>\n\t<li>MISRA C:2012, 3.1 - The character sequences /* and // shall not be used within a comment</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "confusing",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2737",
      "type": "Code Smell",
      "summary": "\"catch\" clauses should do more than rethrow",
      "description": "<p>A <tt>catch</tt> clause that only rethrows the caught exception has the same effect as omitting the <tt>catch</tt> altogether and letting it bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>\n\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">try</span> {\r\n  saveDocument();\r\n} <span class=\"code-keyword\">catch</span> (<span class=\"code-keyword\">const</span> std::exception&amp; e) { <span class=\"code-comment\">// Noncompliant\r\n</span>  <span class=\"code-keyword\">throw</span>;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">try</span> {\r\n  saveDocument();\r\n} <span class=\"code-keyword\">catch</span> (<span class=\"code-keyword\">const</span> std::exception&amp; e) { <span class=\"code-comment\">// Compliant\r\n</span>  log &lt;&lt; e.what();\r\n  <span class=\"code-keyword\">throw</span>;\r\n}\r\n</pre>\n</div></div>\n<p>or</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nsaveDocument();\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "clumsy",
        "finding",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2193",
      "type": "Bug",
      "summary": "\"for\" loop counters should not have essentially floating type",
      "description": "<p>When using a floating-point <tt>for</tt> loop counter, an accumulation of rounding errors may result in a mismatch between the expected and actual number of iterations.<br/>\nEven if floating-point loop counters appears to behave correctly on one implementation, it may give a different number of iterations on another implementation.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-object\">float</span> counter = 0.0f; counter &lt; 1.0f; counter += 0.001f) {\r\n  ...\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> counter = 0; counter &lt; 1000; ++counter) {\r\n  ...\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 13.4 - The controlling expression of a for statement shall not contain any objects of floating type.</li>\n\t<li>MISRA C++:2008, 6-5-1 - A <em>for</em> loop shall contain a single <em>loop-counter</em> which shall not have floating type.</li>\n\t<li>MISRA C:2012, 14.1 - A <em>loop counter</em> shall not have essentially <em>floating type</em>.</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/uYIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, NUM09-J.</a> - Do not use floating-point variables as loop counters</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/AoG_/\" class=\"external-link\" rel=\"nofollow\">CERT, FLP30-C.</a> - Do not use floating-point variables as loop counters</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1301",
      "type": "Code Smell",
      "summary": "\"switch\" statements should have at least 3 \"case\" clauses",
      "description": "<p><tt>switch</tt> statements are useful when there are many different cases depending on the value of the same expression.<br/>\nFor just one or two cases however, the code will be more readable with <tt>if</tt> statements.</p>\n\n<p>Moreover, <tt>if</tt> statements are obviously more suitable when the condition of the <tt>switch</tt> is boolean.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (variable) {\r\n  <span class=\"code-keyword\">case</span> 0:\r\n    doSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">default</span>:\r\n    doSomethingElse();\r\n    <span class=\"code-keyword\">break</span>;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (variable == 0) {\r\n  doSomething();\r\n} <span class=\"code-keyword\">else</span> {\r\n  doSomethingElse();\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.</li>\n\t<li>MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.</li>\n\t<li>MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "bad-practice",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1264",
      "type": "Code Smell",
      "summary": "A \"while\" loop should be used instead of a \"for\" loop",
      "description": "<p>When only the condition expression is defined in a <tt>for</tt> loop, and the initialization and increment expressions are missing, a <tt>while</tt> loop should be used instead to increase readability. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span> (;condition;) { /*...*/ }\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">while</span> (condition) { /*...*/ }\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3486",
      "type": "Bug",
      "summary": "C declarations should not be made inside Objective-C structures",
      "description": "<p>C-style definitions should not be made inside Objective-C structures such as {{@interface}}s. Doing so appears to limit their scope to the interface, but in fact, it imposes no such restriction. Such symbols are available globally, and may result in future confusion. Instead, such definitions should be moved to the top level, to make it clear that they're globally available.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n@<span class=\"code-keyword\">interface</span> Example : NSObject\r\ntypedef <span class=\"code-object\">int</span> T; <span class=\"code-comment\">// Noncompliant - defines type, which is visible outside of @<span class=\"code-keyword\">interface</span>\r\n</span>void fun(); <span class=\"code-comment\">// Noncompliant - declares global function\r\n</span>@end\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ntypedef <span class=\"code-object\">int</span> T;\r\nvoid fun();\r\n\r\n@<span class=\"code-keyword\">interface</span> Example : NSObject\r\n@end\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1874",
      "type": "Code Smell",
      "summary": "Code annotated as deprecated should not be used",
      "description": "<p>Code annotated as deprecated should not be used since it will be removed sooner or later.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-comment\">// C++14 attribute\r\n</span>[[deprecated]]\r\nvoid fun();\r\n\r\n<span class=\"code-comment\">// GNU attribute\r\n</span>__attribute__((deprecated))\r\nvoid fun();\r\n\r\n<span class=\"code-comment\">// Microsoft attribute\r\n</span>__declspec(deprecated)\r\nvoid fun();\r\n\r\nvoid example() {\r\n  fun(); <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/477.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-477</a> - Use of Obsolete Functions</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/KgAVAg\" class=\"external-link\" rel=\"nofollow\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE"
      ],
      "tags": [
        "cert",
        "cwe",
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2754",
      "type": "Code Smell",
      "summary": "Declarations should not be empty",
      "description": "<p>Empty declarations are cruft; they (may) compile, but they violate the language standards, don't contribute anything of value, and clutter up the program. Like cobwebs, they should be swept away.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span>;  <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>ISO/IEC 9899:2011, 6.7p2</li>\n\t<li>ISO/IEC 14882:2011, 7p3.</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3458",
      "type": "Code Smell",
      "summary": "Empty \"case\" clauses that fall through to the \"default\" should be omitted",
      "description": "<p>Empty <tt>case</tt> clauses that fall through to the default are useless. Whether or not such a <tt>case</tt> is present, the <tt>default</tt> clause will be invoked. Such <tt>case</tt>s simply clutter the code, and should be removed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span>(ch) \r\n{\r\n  <span class=\"code-keyword\">case</span> 'a' :\r\n    HandleA();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 'b' :\r\n    HandleB();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 'c' :  <span class=\"code-comment\">// Noncompliant\r\n</span>  <span class=\"code-keyword\">default</span>:\r\n    HandleTheRest();\r\n    <span class=\"code-keyword\">break</span>;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span>(ch) \r\n{\r\n  <span class=\"code-keyword\">case</span> 'a' :\r\n    HandleA();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 'b' :\r\n    HandleB();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">default</span>:\r\n    HandleTheRest();\r\n    <span class=\"code-keyword\">break</span>;\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy",
        "finding"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1116",
      "type": "Code Smell",
      "summary": "Empty statements should be removed",
      "description": "<p>Empty statements, i.e. <tt>;</tt>, are usually introduced by mistake, for example because:</p>\n<ul>\n\t<li>It was meant to be replaced by an actual statement, but this was forgotten.</li>\n\t<li>There was a typo which lead the semicolon to be doubled, i.e. <tt>;;</tt>.</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid doSomething() {\r\n  ;                                                       <span class=\"code-comment\">// Noncompliant - was used as a kind of TODO marker\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid doSomething() {\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>In the case of 2 consecutive semi-colons, if one of the two is part of a macro-definition then the issue is not raised.<br/>\nExample:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define A(x) x;\r\n\r\nvoid fun() {\r\n  A(5);\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.</li>\n\t<li>MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/7gCTAw\" class=\"external-link\" rel=\"nofollow\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while condition</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/i4FtAg\" class=\"external-link\" rel=\"nofollow\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while statement</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2342",
      "type": "Code Smell",
      "summary": "Enumeration types should comply with a naming convention",
      "description": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all <tt>enum</tt> names match a provided regular expression.</p>\n\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n\t<li>Pascal casing, starting with an upper case character, e.g. BackColor</li>\n\t<li>Short abbreviations of 2 letters can be capitalized, e.g. GetID</li>\n\t<li>Longer abbreviations need to be lower case, e.g. GetHtml</li>\n\t<li>If the enum is marked as <span class=\"error\">&#91;Flags&#93;</span> then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption)</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression for non-flags enums: {{^(<span class=\"error\">&#91;A-Z&#93;</span></p>\n{1,3}<span class=\"error\">&#91;a-z0-9&#93;</span>+)*(<span class=\"error\">&#91;A-Z&#93;</span>{2})?$}}\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">enum</span> foo <span class=\"code-comment\">// Noncompliant\r\n</span>{\r\n    FooValue = 0\r\n}\r\n</pre>\n</div></div><br/>\nWith the default regular expression for flags enums: {{^(<span class=\"error\">&#91;A-Z&#93;</span>{1,3}\n<p><span class=\"error\">&#91;a-z0-9&#93;</span>+)*(<span class=\"error\">&#91;A-Z&#93;</span></p>\n{2}\n<p>)?s$}}</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n[Flags]\r\n<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">enum</span> Option <span class=\"code-comment\">// Noncompliant\r\n</span>{\r\n    None = 0,\r\n    Option1 = 1,\r\n    Option2 = 2\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">enum</span> Foo\r\n{\r\n    FooValue = 0\r\n}\r\n</pre>\n</div></div>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n[Flags]\r\n<span class=\"code-keyword\">public</span> <span class=\"code-keyword\">enum</span> Options\r\n{\r\n    None = 0,\r\n    Option1 = 1,\r\n    Option2 = 2\r\n}\r\n</pre>\n</div></div>\n",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3231",
      "type": "Code Smell",
      "summary": "Forward declarations should not be redundant",
      "description": "<p>Redundant forward declarations simply clutter the code, and like any duplications, should be removed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstruct S {\r\n  <span class=\"code-comment\">// ...\r\n</span>};\r\n<span class=\"code-comment\">// ...\r\n</span>struct S;  <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstruct S {\r\n  <span class=\"code-comment\">// ...\r\n</span>};\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "redundant",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2738",
      "type": "Code Smell",
      "summary": "General \"catch\" clauses should not be used",
      "description": "<p>A general <tt>catch</tt> block seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types, casting too broad a net, and perhaps mishandling extraordinary cases. Instead, specific exception sub-types should be caught.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">try</span> {\r\n  file.open(<span class=\"code-quote\">\"test.txt\"</span>);\r\n} <span class=\"code-keyword\">catch</span> (...) {  <span class=\"code-comment\">// Noncompliant\r\n</span>  <span class=\"code-comment\">// ...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">try</span> {\r\n  file.open(<span class=\"code-quote\">\"test.txt\"</span>);\r\n} <span class=\"code-keyword\">catch</span> (std::ifstream::failure e) {\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "error-handling"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2486",
      "type": "Code Smell",
      "summary": "Generic exceptions should not be ignored",
      "description": "<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>\n\n<p>This rule only reports on empty catch clauses that catch generic {{Exception}}s.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstring text = \"\";\r\n<span class=\"code-keyword\">try</span> \r\n{\r\n  text = File.ReadAllText(fileName);\r\n} \r\n<span class=\"code-keyword\">catch</span> (Exception exc) <span class=\"code-comment\">// Noncompliant\r\n</span>{  \r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstring text = \"\";\r\n<span class=\"code-keyword\">try</span> \r\n{\r\n  text = File.ReadAllText(fileName);\r\n} \r\n<span class=\"code-keyword\">catch</span> (Exception exc) \r\n{\r\n  logger.Log(exc);\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>When a block contains a comment, it is not considered to be empty.</p><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/391.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-391</a> - Unchecked Error Condition</li>\n</ul>\n",
      "standards": [
        "CWE"
      ],
      "tags": [
        "cwe",
        "error-handling",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1916",
      "type": "Bug",
      "summary": "Line continuation characters '\\' should not be followed by trailing whitespace",
      "description": "<p>The standard mentions that the line continuation character ({{}}) should be immediately followed by a newline or be the very last character of the file in order for the lines to be joined.</p>\n\n<p>Several compilers relax this requirement by allowing whitespace after the {{}} character, but this is not portable because other compilers may not do the same.</p>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-comment\">// There should be no whitespace after the '\\'\r\n</span>#define FOO BAR \\\r\n            BAZ\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2323",
      "type": "Bug",
      "summary": "Line-splicing should not be used in \"//\" comments",
      "description": "<p>Line-splicing occurs when the \\ character is immediately followed by a new-line character. If the source line containing a <tt>//</tt> comment ends with a '\\', the next line becomes part of the comment. This may result in unintentional removal of code.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid f ( void )\r\n{\r\n  <span class=\"code-object\">int</span> x = 0; <span class=\"code-comment\">// comment \\\r\n</span>  <span class=\"code-keyword\">if</span> (x)\r\n  {\r\n    ++x; /* This is always executed */\r\n  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2012, 3.2 - Line-splicing shall not be used in // comments</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-818",
      "type": "Code Smell",
      "summary": "Literal suffixes shall be upper case",
      "description": "<p>Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span>        a = 0u;      <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span>        b = 0l;      <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span>        c = 0Ul;     <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span>        d = 0x12bu;  <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">const</span> <span class=\"code-object\">float</span>      m = 1.2f;    <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">const</span> <span class=\"code-object\">float</span>      n = 1.2l;    <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span>        a = 0U;\r\n<span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span>        b = 0L;\r\n<span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span>        c = 0UL;\r\n<span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span>        d = 0x12bU;\r\n<span class=\"code-keyword\">const</span> <span class=\"code-object\">float</span>      m = 1.2F;\r\n<span class=\"code-keyword\">const</span> <span class=\"code-object\">float</span>      n = 1.2L;\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case</li>\n\t<li>MISRA C:2012, 7.3 - The lowercase character \"l\" shall not be used in a literal suffix</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/koAtAQ\" class=\"external-link\" rel=\"nofollow\">CERT DCL16-C.</a> - Use \"L,\" not \"l,\" to indicate a long value</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/n4AtAQ\" class=\"external-link\" rel=\"nofollow\">CERT DCL16-CPP.</a> - Use \"L,\" not \"l,\" to indicate a long value</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\" class=\"external-link\" rel=\"nofollow\">CERT, DCL50-J.</a> - Use visually distinct identifiers</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "convention",
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3744",
      "type": "Code Smell",
      "summary": "Macros should not be redefined",
      "description": "<p>A macro definition should not be redefined without marking that intent specifically by un-defining it first.</p>\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define A 1\r\n#define A 2\r\n</pre>\n</div></div>\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define A 1\r\n#undef A\r\n#define A 2\r\n</pre>\n</div></div>\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>If the redefinition has the same value as the original one. This is consistent with most C compilers warnings.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define A 1\r\n#define A 1\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1199",
      "type": "Code Smell",
      "summary": "Nested code blocks should not be used",
      "description": "<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">public</span> void evaluate(<span class=\"code-object\">int</span> <span class=\"code-keyword\">operator</span>) {\r\n  <span class=\"code-keyword\">switch</span> (<span class=\"code-keyword\">operator</span>) {\r\n    /* ... */\r\n    <span class=\"code-keyword\">case</span> ADD: {                                <span class=\"code-comment\">// Noncompliant - nested code block '{' ... '}'\r\n</span>        <span class=\"code-object\">int</span> a = stack.pop();\r\n        <span class=\"code-object\">int</span> b = stack.pop();\r\n        <span class=\"code-object\">int</span> result = a + b;\r\n        stack.push(result);\r\n        <span class=\"code-keyword\">break</span>;\r\n      }\r\n    /* ... */\r\n  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">public</span> void evaluate(<span class=\"code-object\">int</span> <span class=\"code-keyword\">operator</span>) {\r\n  <span class=\"code-keyword\">switch</span> (<span class=\"code-keyword\">operator</span>) {\r\n    /* ... */\r\n    <span class=\"code-keyword\">case</span> ADD:                                  <span class=\"code-comment\">// Compliant\r\n</span>      evaluateAdd();\r\n      <span class=\"code-keyword\">break</span>;\r\n    /* ... */\r\n  }\r\n}\r\n\r\n<span class=\"code-keyword\">private</span> void evaluateAdd() {\r\n  <span class=\"code-object\">int</span> a = stack.pop();\r\n  <span class=\"code-object\">int</span> b = stack.pop();\r\n  <span class=\"code-object\">int</span> result = a + b;\r\n  stack.push(result);\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-968",
      "type": "Code Smell",
      "summary": "Preprocessor operators \"#\" and \"##\" should not be used",
      "description": "<p>The evaluation order of both the <tt>#</tt> and <tt>##</tt> preprocessor operators is unspecified. Compilers have been known to implement these operators inconsistently, therefore, to avoid these problems, do not use them.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define A(Y)   #Y    /* Noncompliant */\r\n#define A(X,Y) X##Y  /* Noncompliant */\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 19.13 - The # and ## preprocessor operators should not be used.</li>\n\t<li>MISRA C++:2008, 16-3-2 - The # and ## operators should not be used.</li>\n\t<li>MISRA C:2012, 20.10 - The # and ## preprocessor operators should not be used</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "lock-in",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3728",
      "type": "Code Smell",
      "summary": "String literals should not be concatenated implicitly",
      "description": "<p>While in C, and derived languages, it is legal to concatenate two literals by putting them next to each other, this is only justified  in a few cases. For instance if one is a macro or if the layout makes it clearer.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n  <span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> * v1 = <span class=\"code-quote\">\"a\"</span><span class=\"code-quote\">\"b\"</span>;      <span class=\"code-comment\">// Noncompliant; same as <span class=\"code-quote\">\"ab\"</span>\r\n</span>  <span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> * v2 = <span class=\"code-quote\">\"a\\n\"</span> <span class=\"code-quote\">\"b\\n\"</span>; <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n  <span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> * v1 = <span class=\"code-quote\">\"ab\"</span>\r\n  <span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> * v2 = <span class=\"code-quote\">\"a\\n\"</span>\r\n                    <span class=\"code-quote\">\"b\\n\"</span>;\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n  <span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> * v3 = <span class=\"code-quote\">\"a\"</span> /* comment */ <span class=\"code-quote\">\"b\"</span>;\r\n\r\n  #define _s <span class=\"code-quote\">\"b\"</span>\r\n  <span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> * v4 = <span class=\"code-quote\">\"a\"</span> _s; <span class=\"code-comment\">// concatenation with macro ignored</span>\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2665",
      "type": "Bug",
      "summary": "The \"alignof\" operator should not be used with operands of a \"void\" type",
      "description": "<p>Although some compilers will allow it, the use of <tt>alignof</tt> with arguments that have a <tt>void</tt> type is forbidden by both the C and C++ standards.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid fun() {\r\n  void* p;\r\n  alignof(*p);  <span class=\"code-comment\">// Noncompliant\r\n</span>  alignof(void);  <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "lock-in"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3646",
      "type": "Code Smell",
      "summary": "Types and variables should be declared in separate statements",
      "description": "<p>It is possible in the same statement, to declare a user-defined type (<tt>class</tt>, <tt>struct</tt>, <tt>union</tt> or <tt>enum</tt>) followed by variable declarations of this type. But mixing more than one concern in a single statement is confusing for maintainers.</p>\n\n<p>This rule raises an issue when a variable is declared at the end of a user-defined type declaration statement.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstruct Container { <span class=\"code-object\">int</span> size; } container; <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstruct Container { <span class=\"code-object\">int</span> size; };\r\nContainer container;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1481",
      "type": "Code Smell",
      "summary": "Unused local variables should be removed",
      "description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> numberOfMinutes(<span class=\"code-object\">int</span> hours) {\r\n  <span class=\"code-object\">int</span> seconds = 0; <span class=\"code-comment\">// never used\r\n</span>  <span class=\"code-keyword\">return</span> hours * 60;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> numberOfMinutes(<span class=\"code-object\">int</span> hours) {\r\n  <span class=\"code-keyword\">return</span> hours * 60;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>No issue is raised on local variables having the attribute \"unused\", on exception handler parameters and on object declarations with non-empty arguments.</p>",
      "standards": [],
      "tags": [
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2753",
      "type": "Bug",
      "summary": "Values of different \"enum\" types should not be compared ",
      "description": "<p>Just as comparing apples and oranges is seen as a classic folly, comparing values from different enumerations against each other is nonsensical. True, at root <tt>enum</tt>s are simply named numbers, and it's certainly valid to compare numbers. But an added layer of meaning is created by an <tt>enum</tt>, one that goes beyond simple numerical values.</p>\n\n<p>Ignoring that extra layer of meaning is at best a trap for maintainers, who are likely to be hopelessly confused by the code. At worst, it is a bug, which will lead to unexpected results.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">enum</span> apple {BRAEBURN, FUJI, GRANNY_SMITH, RED_DELICIOUS};\r\n<span class=\"code-keyword\">enum</span> orange {BLOOD, NAVEL, BITTER, BERGAMOT, MANDARIN};\r\n\r\nbool fun(apple v1, orange v2) {\r\n  <span class=\"code-keyword\">return</span> v1 != v2;  <span class=\"code-comment\">// Noncompliant \r\n</span>}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1133",
      "type": "Code Smell",
      "summary": "Deprecated code should be removed",
      "description": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-comment\">// C++14 attribute\r\n</span>[[deprecated]] <span class=\"code-comment\">// Noncompliant\r\n</span>void fun();\r\n\r\n<span class=\"code-comment\">// GNU attribute\r\n</span>__attribute__((deprecated)) <span class=\"code-comment\">// Noncompliant\r\n</span>void fun();\r\n\r\n<span class=\"code-comment\">// Microsoft attribute\r\n</span>__declspec(deprecated) <span class=\"code-comment\">// Noncompliant\r\n</span>void fun();\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Info"
    },
    {
      "ruleKey": "RSPEC-1135",
      "type": "Code Smell",
      "summary": "Track uses of \"TODO\" tags",
      "description": "<p><tt>TODO</tt> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.<br/>\nSometimes the developer will not have the time or will simply forget to get back to that tag.<br/>\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid doSomething() {\r\n  <span class=\"code-comment\">// TODO\r\n</span>}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/546.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-546</a> - Suspicious Comment</li>\n</ul>\n",
      "standards": [
        "CWE"
      ],
      "tags": [
        "cwe"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Info"
    },
    {
      "ruleKey": "RSPEC-2806",
      "type": "Code Smell",
      "summary": "Bit fields should not be used",
      "description": "<p>The real need for bit fields is narrow and highly specialized. Previously, they were used to save memory, but that's less a concern in modern systems than are the extra instructions required to interact with them. Today, they may be needed in direct hardware interaction, but since their behavior is platform-dependent, getting them right can be tricky, and since their use is increasingly rare these days, they're likely to confuse maintainers. For these reasons, it's simpler and more performant to use another field type instead of bit fields.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nunsigned <span class=\"code-object\">int</span> b1 : 3;  <span class=\"code-comment\">// Noncompliant\r\n</span>unsigned <span class=\"code-object\">char</span> b2 : 3;  <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nunsigned <span class=\"code-object\">int</span> b1;\r\nunsigned <span class=\"code-object\">char</span> b2;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance",
        "pitfall"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1606",
      "type": "Code Smell",
      "summary": "Failed unit tests should be fixed",
      "description": "<p>Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.</p>",
      "standards": [],
      "tags": [
        "tests"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1314",
      "type": "Code Smell",
      "summary": "Octal values should not be used",
      "description": "<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example </h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> myNumber = 010;   <span class=\"code-comment\">// Noncompliant. myNumber will hold 8, not 10 - was <span class=\"code-keyword\">this</span> really expected?</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> myNumber = 8;\r\n</pre>\n</div></div>\n\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used.</li>\n\t<li>MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used</li>\n\t<li>MISRA C:2012, 7.1 - Octal constants shall not be used</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/_QC7AQ\" class=\"external-link\" rel=\"nofollow\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a decimal value</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\" class=\"external-link\" rel=\"nofollow\">CERT, DCL50-J.</a> - Use visually distinct identifiers</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-978",
      "type": "Code Smell",
      "summary": "Reserved identifiers and functions in the standard library should not be defined or declared",
      "description": "<p>Defining or declaring identifiers with reserved names may lead to undefined behavior. Similarly, defining macros, variables or functions/methods with the same names as functions from the standard library is likely to lead to unexpected results. </p>\n\n<p>Additionally, such identifiers have the potential to thoroughly confuse people who are unfamiliar with the code base, possibly leading them to introduce additional errors. Therefore reserved words and the names of standard library functions should not be used as identifiers.</p>\n\n<p>This rule applies to:</p>\n<ul>\n\t<li><tt>defined</tt></li>\n\t<li>standard library function names</li>\n\t<li>identifiers that begin with two underscores</li>\n\t<li>identifiers that begin with an underscore, followed by an uppercase letter</li>\n\t<li>identifiers in the global namespace that start with an underscore</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#ifndef _MY_FILE\r\n#define _MY_FILE   <span class=\"code-comment\">// Noncompliant: starts with '_'\r\n</span>\r\n<span class=\"code-object\">int</span> free(void *pArg, <span class=\"code-object\">int</span> len) {  <span class=\"code-comment\">// Noncompliant: free is a standard function\r\n</span>  <span class=\"code-object\">int</span> __i; <span class=\"code-comment\">// Noncompliant: starts with <span class=\"code-quote\">\"__\"</span>\r\n</span>  <span class=\"code-comment\">//...\r\n</span>}\r\n#endif\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#ifndef MY_FILE\r\n#define MY_FILE\r\n\r\n<span class=\"code-object\">int</span> clean(void *pArg, <span class=\"code-object\">int</span> len) {\r\n  <span class=\"code-object\">int</span> i;\r\n  <span class=\"code-comment\">//...\r\n</span>}\r\n#endif\r\n</pre>\n</div></div> \n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 20.1 - Reserved identifiers, macros and functions in the standard library, shall not be defined redefined or undefined.</li>\n\t<li>MISRA C++:2008, 17-0-1 - Reserved identifiers, macros and functions in the standard library shall not be defined, redefined, or undefined.</li>\n\t<li>MISRA C:2012, 21.2 - A reserved identifier or macro name shall not be declared</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/-4AzAg\" class=\"external-link\" rel=\"nofollow\">CERT, DCL37-C.</a> - Do not declare or define a reserved identifier</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/Qg8\" class=\"external-link\" rel=\"nofollow\">CERT, DCL51-CPP.</a> - Do not declare or define a reserved identifier</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "bad-practice",
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-1451",
      "type": "Code Smell",
      "summary": "Track lack of copyright and license headers",
      "description": "<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. <br/>\nThis rule must be fed with the header text that is expected at the beginning of every file.</p>\n\n<p>The <tt>headerFormat</tt> must end with an empty line if you want to have an empty line between the file header and the first line for your source file (<tt>using</tt>, <tt>namespace</tt>...).</p>\n\n<p>For example, if you want the source file to look like this</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-comment\">// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root <span class=\"code-keyword\">for</span> license information.\r\n</span>\r\nnamespace Foo\r\n{\r\n}\r\n</pre>\n</div></div>\n<p>then the <tt>headerFormat</tt> parameter should end with an empty line like this</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-comment\">// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root <span class=\"code-keyword\">for</span> license information.\r\n</span>\r\n</pre>\n</div></div><h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n/*\r\n * SonarQube, open source software quality management tool.\r\n * Copyright (C) 2008-2013 SonarSource\r\n * mailto:contact AT sonarsource DOT com\r\n *\r\n * SonarQube is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3 of the License, or (at your option) any later version.\r\n *\r\n * SonarQube is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License <span class=\"code-keyword\">for</span> more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with <span class=\"code-keyword\">this</span> program; <span class=\"code-keyword\">if</span> not, write to the Free Software Foundation,\r\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n */\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-987",
      "type": "Bug",
      "summary": "\"<signal.h>\" should not be used",
      "description": "<p>Signal handling contains implementation-defined and undefined behavior.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;signal.h&gt; /* Noncompliant */\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 20.8  - The signal handling facilities of &lt;signal.h&gt; shall not be used.</li>\n\t<li>MISRA C:2012, 21.5 - The standard header file &lt;signal.h&gt; shall not be used</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "lock-in",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-988",
      "type": "Bug",
      "summary": "\"<stdio.h>\" should not be used in production code",
      "description": "<p>This includes file and I/O functions <tt>fgetpos</tt>, <tt>fopen</tt>, <tt>ftell</tt>, <tt>gets</tt>, <tt>perror</tt>, <tt>remove</tt>, <tt>rename</tt> and <tt>ungetc</tt>.</p>\n\n<p>Streams and file I/O have a large number of unspecified, undefined and implementation-defined behaviors associated with them. It is assumed within MISRA C that they will not normally be needed in production code in embedded systems.</p>\n\n<p>If any of the features of <tt>stdio.h</tt> need to be used in production code, then the issues associated with the features need to be understood.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;stdio.h&gt; /* Noncompliant */\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 20.9 - The input/output library &lt;stdio.h&gt; shall not be used in production code.</li>\n\t<li>MISRA C++:2008, 27-0-1 - The stream input/output library &lt;cstdio&gt; shall not be used.</li>\n\t<li>MISRA C:2012, 21.6 - The Standard Library input/output functions shall not be used</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "lock-in",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-991",
      "type": "Code Smell",
      "summary": "\"<time.h>\" should not be used",
      "description": "<p>Includes <tt>time</tt>, <tt>strftime</tt>. This library is associated with clock times. Various aspects are implementation dependent or unspecified, such as the formats of times. If any of the facilities of <tt>time.h</tt> are used, then the exact implementation for the compiler being used must be determined, and a deviation raised.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;time.h&gt;  /* Noncompliant */\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 20.12 - The time handling functions of library &lt;time.h&gt; shall not be used.</li>\n\t<li>MISRA C:2012, 21.10 - The Standard Library time and date functions shall not be used</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "lock-in",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-990",
      "type": "Bug",
      "summary": "\"abort\", \"exit\", \"getenv\" and \"system\" from <stdlib.h> should not be used",
      "description": "<p><tt>&lt;stdlib.h&gt;</tt>'s <tt>abort</tt>, <tt>exit</tt>, <tt>getenv</tt>, and <tt>system</tt> have undefined, and implementation-defined behaviors, and should therefore be used.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;stdlib.h&gt;\r\n\r\nvoid f( ) {\r\n  exit(0); <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 20.11 - The library functions abort, exit, getenv and system from library &lt;stdlib.h&gt; shall not be used.</li>\n\t<li>MISRA C++:2008, 18-0-3 - The library functions abort, exit, getenv and system from library &lt;cstdlib&gt; shall not be used.</li>\n\t<li>MISRA C:2012, 21.8 - The library functions abort, exit, getenv and system of &lt;stdlib.h&gt; shall not be used</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/1IAg\" class=\"external-link\" rel=\"nofollow\">CERT, ENV33-C.</a> - Do not call system()</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/5oEyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, ENV02-CPP.</a> - Do not call system() if you do not need a command processor</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/2gDOAQ\" class=\"external-link\" rel=\"nofollow\">CERT, ERR50-CPP.</a> - Do not abruptly terminate the program</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-989",
      "type": "Bug",
      "summary": "\"atof\", \"atoi\" and \"atol\" from <stdlib.h> should not be used",
      "description": "<p><tt>&lt;stdlib.h&gt;</tt>'s <tt>atof</tt>, <tt>atoi</tt>, and <tt>atol</tt> functions, which convert strings to numbers, have undefined behavior when the strings cannot be converted, and should therefore be avoided.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> converter (<span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> * numstr) {\r\n  <span class=\"code-keyword\">return</span> atoi(numstr); <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> converter (<span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> * numstr) {\r\n  <span class=\"code-keyword\">return</span> strtol(numstr, NULL, 10);\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 20.10 - The library functions atof, atoi and atol from library &lt;stdlib.h&gt; shall not be used.</li>\n\t<li>MISRA C++:2008, 18-0-2 - The library functions atof, atoi and atol from library &lt;cstdlib&gt; shall not be used.</li>\n\t<li>MISRA C:2012, 21.7 - The atof, atoi, atol and atoll functions of &lt;stdlib.h&gt; shall not be used</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/6AQ\" class=\"external-link\" rel=\"nofollow\">CERT, ERR34-C.</a> - Detect errors when converting a string to a number</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-985",
      "type": "Code Smell",
      "summary": "\"errno\" should not be used",
      "description": "<p><tt>errno</tt> is a facility of C++ which should in theory be useful, but which in practice is poorly defined by ISO/IEC 14882:2003. A non-zero value may or may not indicate that a problem has occurred; therefore <tt>errno</tt> shall not be used.</p>\n\n<p>Even for those functions for which the behaviour of <tt>errno</tt> is well defined, it is preferable to check the values of inputs before calling the function rather than relying on using <tt>errno</tt> to trap errors.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;cstdlib&gt;\r\n#include &lt;cerrno&gt;\r\n\r\nvoid f1 ( <span class=\"code-keyword\">const</span> char_t * str )\r\n{\r\n  errno = 0; <span class=\"code-comment\">// Noncompliant\r\n</span>  int32_t i = atoi ( str );\r\n  <span class=\"code-keyword\">if</span> ( 0 != errno ) <span class=\"code-comment\">// Noncompliant\r\n</span>  {\r\n    <span class=\"code-comment\">// handle error <span class=\"code-keyword\">case</span>???\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 20.5 - The error indicator errno shall not be used.</li>\n\t<li>MISRA C++:2008, 19-3-1 - The error indicator errno shall not be used.</li>\n</ul>\n\n\n<h3><a name=\"SeeAlso\"></a>See Also</h3>\n<ul>\n\t<li>ISO/IEC 14882:2003</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-126",
      "type": "Code Smell",
      "summary": "\"if ... else if\" constructs should end with \"else\" clauses",
      "description": "<p>This rule applies whenever an <tt>if</tt> statement is followed by one or more <tt>else if</tt> statements; the final <tt>else if</tt> should be followed by an <tt>else</tt> statement.</p>\n\n<p>The requirement for a final <tt>else</tt> statement is defensive programming.<br/>\nThe <tt>else</tt> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is consistent with the requirement to have a final <tt>default</tt> clause in a <tt>switch</tt> statement.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (x == 0) {\r\n  doSomething();\r\n} <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (x == 1) {\r\n  doSomethingElse();\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (x == 0) {\r\n  doSomething();\r\n} <span class=\"code-keyword\">else</span> <span class=\"code-keyword\">if</span> (x == 1) {\r\n  doSomethingElse();\r\n} <span class=\"code-keyword\">else</span> {\r\n  error();\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause.</li>\n\t<li>MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause.</li>\n\t<li>MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/YgE\" class=\"external-link\" rel=\"nofollow\">CERT, MSC01-C.</a> - Strive for logical completeness</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC01-CPP.</a> - Strive for logical completeness</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/PQHRAw\" class=\"external-link\" rel=\"nofollow\">CERT, MSC57-J.</a> - Strive for logical completeness</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-986",
      "type": "Code Smell",
      "summary": "\"offsetof\" macro from <stddef.h> should not be used",
      "description": "<p><tt>offsetof</tt> can lead to undefined behavior when the argument types are incompatible or when bit fields are used. Therefore <tt>offsetof</tt> should be avoided.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;stddef.h&gt;\r\n\r\nstruct A\r\n{\r\n  int32_t i;\r\n};\r\n\r\nvoid f1 ( )\r\n{\r\n  offsetof ( A, i ); <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 20.6 - The macro offsetof, in library &lt;stddef.h&gt;, shall not be used.</li>\n\t<li>MISRA C++:2008, 18-2-1 - The macro offsetof, in library &lt;stddef.h&gt;, shall not be used.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-982",
      "type": "Code Smell",
      "summary": "\"setjmp\" and \"longjmp\" should not be used",
      "description": "<p><tt>setjmp.h</tt> functions allow the normal function mechanisms to be bypassed and should be used only with extreme caution, if at all. </p>\n\n<p>Calling <tt>setjmp</tt> saves the program environment into the buffer passed into the call. Later calling <tt>longjmp</tt> returns execution to the point at which <tt>setjmp</tt> was called and restores the context that was saved into the buffer. But the values of non-volatile local variables after <tt>longjmp</tt> are indeterminate. Additionally invoking <tt>longjmp</tt> from a nested signal handler is undefined, as is <tt>longjmp</tt>ing back to a method that has already completed execution.</p>\n\n<p>This rule flags all instances of <tt>setjmp</tt>, <tt>_setjmp</tt>, <tt>longjmp</tt>, <tt>_longjmp</tt>, <tt>sigsetjmp</tt>, <tt>siglongjmp</tt> and <tt>&lt;setjmp.h&gt;</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;setjmp.h&gt;  <span class=\"code-comment\">// Noncompliant\r\n</span>\r\njmp_buf buf;\r\n\r\n<span class=\"code-object\">int</span> main(<span class=\"code-object\">int</span> argc, <span class=\"code-object\">char</span>* argv[]) {\r\n  <span class=\"code-object\">int</span> i = setjmp(buf);  <span class=\"code-comment\">// Noncompliant\r\n</span>  <span class=\"code-keyword\">if</span> (i == 0) { <span class=\"code-comment\">// value of i was assigned after env was saved &amp; will be indeterminate after longjmp();\r\n</span>    <span class=\"code-comment\">// normal execution\r\n</span>  } <span class=\"code-keyword\">else</span> { \r\n    <span class=\"code-comment\">// recover\r\n</span>  }\r\n}\r\n\r\n<span class=\"code-comment\">//...\r\n</span>\r\nvoid fun() {\r\n  <span class=\"code-comment\">//...\r\n</span>  longjmp(buf, 1);  <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> main(<span class=\"code-object\">int</span> argc, <span class=\"code-object\">char</span>* argv[]) {\r\n  <span class=\"code-comment\">// normal execution\r\n</span>}\r\n\r\n<span class=\"code-comment\">//...\r\n</span>\r\nvoid fun() {\r\n  <span class=\"code-comment\">//...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 20.7 - The setjmp macro and the longjmp function shall not be used.</li>\n\t<li>MISRA C++:2008, 17-0-5 - The setjmp macro and the longjmp function shall not be used.</li>\n\t<li>MISRA C:2012, 21.4 - The standard header file &lt;setjmp.h&gt; shall not be used</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/rgCMAg\" class=\"external-link\" rel=\"nofollow\">CERT, MSC22-C.</a> - Use the setjmp(), longjmp() facility securely</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/Kgc\" class=\"external-link\" rel=\"nofollow\">CERT, ERR52-CPP.</a> - Do not use setjmp() or longjmp()</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1821",
      "type": "Code Smell",
      "summary": "\"switch\" statements should not be nested",
      "description": "<p>Nested <tt>switch</tt> structures are difficult to understand because you can easily confuse the cases of an inner <tt>switch</tt> as belonging to an outer statement. Therefore nested <tt>switch</tt> statements should be avoided.</p>\n\n<p>Specifically, you should structure your code to avoid the need for nested <tt>switch</tt> statements, but if you cannot, then consider moving the inner <tt>switch</tt> to another function.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid func(<span class=\"code-object\">int</span> n, <span class=\"code-object\">int</span> m) {\r\n\r\n  <span class=\"code-keyword\">switch</span> (n) {\r\n    <span class=\"code-keyword\">case</span> 1:\r\n      <span class=\"code-comment\">// ...\r\n</span>    <span class=\"code-keyword\">case</span> 2:\r\n      <span class=\"code-comment\">// ...\r\n</span>    <span class=\"code-keyword\">case</span> 3:\r\n      <span class=\"code-keyword\">switch</span> (m) {  <span class=\"code-comment\">// Noncompliant\r\n</span>    <span class=\"code-keyword\">case</span> 4:  <span class=\"code-comment\">// Bad indentation makes <span class=\"code-keyword\">this</span> particularly hard to read properly\r\n</span>      <span class=\"code-comment\">// ...\r\n</span>    <span class=\"code-keyword\">case</span> 5:\r\n      <span class=\"code-comment\">// ...\r\n</span>    <span class=\"code-keyword\">case</span> 6:\r\n      <span class=\"code-comment\">// ...\r\n</span>    }\r\n    <span class=\"code-keyword\">case</span> 4:\r\n      <span class=\"code-comment\">// ...\r\n</span>    <span class=\"code-keyword\">default</span>:\r\n      <span class=\"code-comment\">// ...\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid func(<span class=\"code-object\">int</span> n, <span class=\"code-object\">int</span> m) {\r\n\r\n  <span class=\"code-keyword\">switch</span> (n) {\r\n    <span class=\"code-keyword\">case</span> 1:\r\n      <span class=\"code-comment\">// ...\r\n</span>    <span class=\"code-keyword\">case</span> 2:\r\n      <span class=\"code-comment\">// ...\r\n</span>    <span class=\"code-keyword\">case</span> 3:\r\n      <span class=\"code-object\">int</span> m2 = handle_m(m);\r\n    <span class=\"code-keyword\">case</span> 4:\r\n      <span class=\"code-comment\">// ...\r\n</span>    <span class=\"code-keyword\">default</span>:\r\n      <span class=\"code-comment\">// ...\r\n</span>  }\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1259",
      "type": "Code Smell",
      "summary": "\"typedef\" should be used for function pointers",
      "description": "<p>Function pointer syntax can be hard on the eyes, particularly when one function is used as a parameter to another. Providing and using a <tt>typedef</tt> instead can make code easier to read, and should be preferred.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nextern void (*signal(<span class=\"code-object\">int</span>, void(*)(<span class=\"code-object\">int</span>)))(<span class=\"code-object\">int</span>);\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ntypedef void (*SignalHandler)(<span class=\"code-object\">int</span> signum);\r\nextern SignalHandler signal(<span class=\"code-object\">int</span> signum, SignalHandler handler);\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/fwAhAQ\" class=\"external-link\" rel=\"nofollow\">CERT, DCL05-CPP.</a> - Use typedefs to improve code readability</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1482",
      "type": "Code Smell",
      "summary": "Branches should have sufficient coverage by unit tests",
      "description": "<p>An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.</p>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1311",
      "type": "Code Smell",
      "summary": "Classes should not be too complex",
      "description": "<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-854",
      "type": "Code Smell",
      "summary": "Constants of unsigned type should have a \"U\" suffix",
      "description": "<p>The type of an integer is dependent on a complex combination of factors including:</p>\n<ul>\n\t<li>The magnitude of the constant;</li>\n\t<li>The implemented sizes of the integer types;</li>\n\t<li>The presence of any suffixes;</li>\n\t<li>The number base in which the value is expressed (i.e. decimal, octal or hexadecimal).</li>\n</ul>\n\n\n<p>For example, the value 0x8000 is of type <tt>unsigned int</tt> in a 16-bit environment, but of type (<tt>signed</tt>) <tt>int</tt> in a 32-bit environment.<br/>\nNote:</p>\n<ul>\n\t<li>Any value with a \"U\" suffix is of unsigned type;</li>\n\t<li>An unsuffixed decimal value less than 2^31 is of signed type.</li>\n</ul>\n\n\n<p>But:</p>\n<ul>\n\t<li>An unsuffixed hexadecimal value greater than or equal to 2^15 may be of signed or unsigned type;</li>\n\t<li>For C90, an unsuffixed decimal value greater than or equal to 2^31 may be of signed or unsigned type.</li>\n</ul>\n\n\n<p>In C++, if an overload set includes candidates for an <tt>unsigned int</tt> and an <tt>int</tt>, then the overload that would be matched by 0x8000 is therefore dependent on the implemented integer size. Adding a \"U\" suffix to the value specifies that it is unsigned.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 10.6 - A \"U\" suffix shall be applied to all constants of unsigned type.</li>\n\t<li>MISRA C++:2008, 2-13-3 - A \"U\" suffix shall be applied to all octal or hexadecimal integer literals of unsigned type.</li>\n\t<li>MISRA C:2012, 7.2 - A \"u\" or \"U\" suffix shall be applied to all integer constants that are represented in an unsigned type.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-134",
      "type": "Code Smell",
      "summary": "Control flow statements \"if\", \"switch\", \"for\", \"foreach\", \"while\", \"do\"  and \"try\" should not be nested too deeply",
      "description": "<p>Nested <tt>if</tt>, <tt>switch</tt>, <tt>for</tt>, <tt>foreach</tt>, <tt>while</tt>, <tt>do</tt>, and <tt>try</tt> statements are key ingredients for making what's known as \"Spaghetti code\".<br/>\nSuch code is hard to read, refactor and therefore maintain.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition1) <span class=\"code-comment\">// Compliant - depth = 1\r\n</span>{                  \r\n  /* ... */\r\n  <span class=\"code-keyword\">if</span> (condition2) <span class=\"code-comment\">// Compliant - depth = 2\r\n</span>  {                \r\n    /* ... */\r\n    <span class=\"code-keyword\">for</span>(<span class=\"code-object\">int</span> i = 0; i &lt; 10; i++) <span class=\"code-comment\">// Compliant - depth = 3, not exceeding the limit\r\n</span>    {  \r\n      /* ... */\r\n      <span class=\"code-keyword\">if</span> (condition4) <span class=\"code-comment\">// Noncompliant - depth = 4\r\n</span>      {            \r\n        <span class=\"code-keyword\">if</span> (condition5) <span class=\"code-comment\">// Depth = 5, exceeding the limit, but issues are only reported on depth = 4\r\n</span>        {          \r\n          /* ... */\r\n        }\r\n        <span class=\"code-keyword\">return</span>;\r\n      }\r\n    }\r\n  }\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-121",
      "type": "Code Smell",
      "summary": "Control structures should use curly braces",
      "description": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-comment\">// the two statements seems to be attached to the <span class=\"code-keyword\">if</span> statement, but that is only <span class=\"code-keyword\">true</span> <span class=\"code-keyword\">for</span> the first one:\r\n</span><span class=\"code-keyword\">if</span> (condition)\r\n  ExecuteSomething();\r\n  CheckSomething();\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition)\r\n{\r\n  ExecuteSomething();\r\n  CheckSomething();\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>\n\t<li>MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>\n\t<li>MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>\n\t<li>MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>\n\t<li>MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\" class=\"external-link\" rel=\"nofollow\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\" class=\"external-link\" rel=\"nofollow\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-984",
      "type": "Bug",
      "summary": "Dynamic heap memory allocation should not be used",
      "description": "<p>The use of dynamic memory can lead to out-of-storage run-time failures, which are undesirable.</p>\n\n<p>The built-in <tt>new</tt> and <tt>delete</tt> operators, other than the placement versions, use dynamic heap memory. The functions <tt>calloc</tt>, <tt>malloc</tt>, <tt>realloc</tt> and <tt>free</tt> also use dynamic heap memory.</p>\n\n<p>There is a range of unspecified, undefined and implementation-defined behaviour associated with dynamic memory allocation, as well as a number of other potential pitfalls. Dynamic heap memory allocation may lead to memory leaks, data inconsistency, memory exhaustion, non-deterministic behaviour, etc.</p>\n\n<p>Note that some implementations may use dynamic heap memory allocation to implement other functions (for example, functions in the library <tt>cstring</tt>). If this is the case, then these functions shall also be avoided.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> *b;\r\nvoid initialize()\r\n{\r\n  b = (<span class=\"code-object\">int</span> *b) alloc ( 1024 * sizeof ( <span class=\"code-object\">int</span> ) ); <span class=\"code-comment\">// Noncompliant, could lead to an out-of-storage run-time failure.\r\n</span>  <span class=\"code-keyword\">if</span>( b == 0 )\r\n  {\r\n    <span class=\"code-comment\">// handle <span class=\"code-keyword\">case</span> when dynamic allocation failed.\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> b[1024]; <span class=\"code-comment\">// Compliant solution.</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 20.4 - Dynamic heap memory allocation shall not be used.</li>\n\t<li>MISRA C++:2008, 18-4-1 - Dynamic heap memory allocation shall not be used.</li>\n\t<li>MISRA C:2012, 21.3 The memory allocation and deallocation functions of &lt;stdlib.h&gt; shall not be used</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1067",
      "type": "Code Smell",
      "summary": "Expressions should not be too complex",
      "description": "<p>The complexity of an expression is defined by the number of <tt>&amp;&amp;</tt>, <tt>||</tt> and <tt>condition ? ifTrue : ifFalse</tt> operators it contains.<br/>\nA single expression's complexity should not become too high to keep the code readable.</p>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default threshold value 3.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ((myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2324",
      "type": "Code Smell",
      "summary": "Flexible array members should not be declared",
      "description": "<p>Flexible array members are most likely to be used in conjunction with dynamic memory allocation.</p>\n\n<p>The presence of flexible array members modifies the behaviour of the <tt>sizeof</tt> operator in ways that might not be expected by a programmer. The assignment of a structure that contains a flexible array member to another structure of the same type may not behave in the expected manner as it copies only those elements up to but not including the start of the flexible array member.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;stdlib.h&gt;\r\nstruct s\r\n{\r\n  uint16_t len;\r\n  uint32_t data[ ]; <span class=\"code-comment\">// Noncompliant - flexible array member\r\n</span>} str;\r\n\r\nstruct s *copy ( struct s *s1 )\r\n{\r\n  struct s *s2 = malloc ( sizeof ( struct s ) + ( s1-&gt;len * sizeof ( uint32_t ) ) );\r\n  /* Omit malloc ( ) <span class=\"code-keyword\">return</span> check <span class=\"code-keyword\">for</span> brevity */\r\n  *s2 = *s1; /* Only copies s1-&gt;len */\r\n  <span class=\"code-keyword\">return</span> s2;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2012, 18.7 - Flexible array members shall not be declared.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-935",
      "type": "Bug",
      "summary": "Function exit paths should have appropriate return values",
      "description": "<p>Every call to a function with a non-void return type is expected to return some value. Including a return path in a non-void function that does not explicitly return a value results in undefined behavior. </p>\n\n<p>Conversely, every call to a function with a void return type is expected to not return any value. Returning a value from a void function probably indicates a programming error.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> my_func (<span class=\"code-object\">int</span> a) \r\n{\r\n  <span class=\"code-keyword\">if</span> (a &gt; 100) \r\n  {\r\n    <span class=\"code-keyword\">return</span>; <span class=\"code-comment\">// Noncompliant\r\n</span>  }\r\n\r\n  <span class=\"code-keyword\">if</span> (a &gt; 80) \r\n  {\r\n    <span class=\"code-keyword\">throw</span> <span class=\"code-keyword\">new</span> Exception(); <span class=\"code-comment\">// Compliant \r\n</span>  }\r\n\r\n  <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> my_func (<span class=\"code-object\">int</span> a) \r\n{\r\n  <span class=\"code-keyword\">if</span> (a &gt; 100) \r\n  {\r\n    <span class=\"code-keyword\">return</span> 12;\r\n  }\r\n\r\n  <span class=\"code-keyword\">if</span> (a &gt; 80) \r\n  {\r\n    <span class=\"code-keyword\">throw</span> <span class=\"code-keyword\">new</span> Exception();\r\n  }\r\n\r\n  <span class=\"code-keyword\">return</span> a;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>This rule doesn't raise an exception when the <tt>return</tt> statement for a <tt>void</tt> function, is itself a <tt>void</tt> expression.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid foo() {\r\n  <span class=\"code-comment\">// Do stuff ...\r\n</span>}\r\n\r\nvoid bar() {\r\n  <span class=\"code-keyword\">return</span> foo();\r\n}\r\n</pre>\n</div></div>\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 16.8 - All exit paths from a function with non-void return type shall have an explicit return statement with an expression</li>\n\t<li>MISRA C++:2008, 8-4-3 - All exit paths from a function with non-void return type shall have an explicit return statement with an expression</li>\n\t<li>MISRA C:2012, 17.4 - All exit paths from a function with non-void return type shall have an explicit return statement with an expression</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/394.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-394</a> - Unexpected Status Code or Return Value</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/goCGAg\" class=\"external-link\" rel=\"nofollow\">CERT, MSC37-C.</a> - Ensure that control never reaches the end of a non-void function</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/ZoCKC\" class=\"external-link\" rel=\"nofollow\">CERT, MSC52-CPP.</a> - Value-returning functions must return a value from all exit paths</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/dICKC\" class=\"external-link\" rel=\"nofollow\">CERT, MSC53-CPP.</a> - Do not return from a function declared [<span class=\"error\">&#91;noreturn&#93;</span>]</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-960",
      "type": "Code Smell",
      "summary": "Function-like macros should not be used",
      "description": "<p>It is tempting to treat function-like macros as functions, but the two things work differently. For instance, the use of functions offers parameter type-checking, while the use of macros does not. Additionally, with macros, there is the potential for a macro to be evaluated multiple times. In general, functions offer a safer, more robust mechanism than function-like macros, and that safety usually outweighs the speed advantages offered by macros. Therefore functions should be used instead when possible.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define CUBE (X) ((X) * (X) * (X)) <span class=\"code-comment\">// Noncompliant\r\n</span>\r\nvoid func(void) {\r\n  <span class=\"code-object\">int</span> i = 2;\r\n  <span class=\"code-object\">int</span> a = CUBE(++i); <span class=\"code-comment\">// Noncompliant. Expands to: <span class=\"code-object\">int</span> a = ((++i) * (++i) * (++i))\r\n</span>  <span class=\"code-comment\">// ...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ninline <span class=\"code-object\">int</span> cube(<span class=\"code-object\">int</span> i) { \r\n  <span class=\"code-keyword\">return</span> i * i * i;\r\n}\r\n\r\nvoid func(void) {\r\n  <span class=\"code-object\">int</span> i = 2;\r\n  <span class=\"code-object\">int</span> a = cube(++i); <span class=\"code-comment\">// yields 27\r\n</span>  <span class=\"code-comment\">// ...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 19.7 - A function should be used in preference to a function-like macro.</li>\n\t<li>MISRA C++:2008, 16-0-4 - Function-like macros shall not be defined.</li>\n\t<li>MISRA C:2012, Dir. 4.9 - A function should be used in preference to a function-like macro where they are interchangeable</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/VIbu\" class=\"external-link\" rel=\"nofollow\">CERT, PRE00-C.</a> - Prefer inline or static functions to function-like macros</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/EwAhAQ\" class=\"external-link\" rel=\"nofollow\">CERT, PRE00-CPP.</a> - Avoid defining macros</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/N4B8Ag\" class=\"external-link\" rel=\"nofollow\">CERT, PRE10-CPP.</a> - Do not define unsafe macros</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "bad-practice",
        "cert",
        "misra",
        "preprocessor"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-929",
      "type": "Code Smell",
      "summary": "Functions without parameters should be declared with parameter type \"void\"",
      "description": "<p>There is a real, functional difference between a function with an empty parameter list and one with an explicitly <tt>void</tt> parameter list: It is possible to pass parameters to a function with an empty list; the compiler won't complain. That is not the case for a function with a <tt>void</tt> list. Thus, it is possible, and even easy to invoke empty-list functions incorrectly without knowing it, and thereby introduce the kind of subtle bug that can be very difficult to track down.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid myfunc ();  <span class=\"code-comment\">// Noncompliant\r\n</span>\r\n<span class=\"code-comment\">//...\r\n</span>\r\nvoid otherFunc() {\r\n  <span class=\"code-object\">int</span> a = 4;\r\n  <span class=\"code-comment\">//...\r\n</span>  myfunc(a); <span class=\"code-comment\">// <span class=\"code-object\">Compiler</span> allows <span class=\"code-keyword\">this</span>\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid myfunc ( void );\r\n\r\n<span class=\"code-comment\">//...\r\n</span>\r\nvoid otherFunc() {\r\n  <span class=\"code-object\">int</span> a = 4;\r\n  <span class=\"code-comment\">//...\r\n</span>  myfunc(a); <span class=\"code-comment\">// <span class=\"code-object\">Compiler</span> error!\r\n</span>}\r\n\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 16.5 - Functions with no parameters shall be declared with parameter type void</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/9YAzAg\" class=\"external-link\" rel=\"nofollow\">CERT, DCL20-C.</a> - Explicitly specify void when a function accepts no arguments</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1483",
      "type": "Code Smell",
      "summary": "Lines should have sufficient coverage by unit tests",
      "description": "<p>An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.</p>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1541",
      "type": "Code Smell",
      "summary": "Methods and properties should not be too complex",
      "description": "<p>The cyclomatic complexity of methods and properties should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-943",
      "type": "Code Smell",
      "summary": "Object declarations should contain no more than 2 levels of pointer indirection",
      "description": "<p>While they are extraordinarily useful, pointers are not the most intuitive concept in the world. Pointers to pointers are even harder to understand and use correctly. And with each additional level of indirection, pointer variables become more difficult to use correctly. Therefore pointer declarators should be limited to no more than two levels of nesting. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ntypedef <span class=\"code-object\">int</span> * INTPTR;\r\nstruct s {\r\n <span class=\"code-object\">int</span> ** s1;\r\n <span class=\"code-object\">int</span> *** s2; <span class=\"code-comment\">// Noncompliant\r\n</span>};\r\n\r\nstruct s ** ps1;\r\nstruct s *** ps2; <span class=\"code-comment\">// Noncompliant\r\n</span>\r\n<span class=\"code-object\">int</span> ** ( *pfunc1)();\r\n<span class=\"code-object\">int</span> ** ( **pfunc2)();\r\n<span class=\"code-object\">int</span> ** (***pfunc3)(); <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-object\">int</span> *** ( **pfunc4)(); <span class=\"code-comment\">// Noncompliant\r\n</span>\r\nvoid function( <span class=\"code-object\">int</span> ** par1,\r\n               <span class=\"code-object\">int</span> *** par2, <span class=\"code-comment\">// Noncompliant\r\n</span>               INTPTR * par3,\r\n               <span class=\"code-object\">int</span> * par4[],\r\n               <span class=\"code-object\">int</span> ** par5[]) <span class=\"code-comment\">// Noncompliant\r\n</span>{\r\n  <span class=\"code-object\">int</span> ** ptr1;\r\n  <span class=\"code-object\">int</span> *** ptr2; <span class=\"code-comment\">// Noncompliant\r\n</span>  INTPTR * ptr3;\r\n  <span class=\"code-object\">int</span> * ptr4[ 10 ];\r\n  <span class=\"code-object\">int</span> ** ptr5[ 10 ]; <span class=\"code-comment\">//Noncompliant\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ntypedef <span class=\"code-object\">int</span> * INTPTR;\r\nstruct s {\r\n <span class=\"code-object\">int</span> ** s1;\r\n <span class=\"code-object\">int</span> ** s2;\r\n};\r\n\r\nstruct s ** ps1;\r\nstruct s ** ps2;\r\n\r\n<span class=\"code-object\">int</span> ** (*pfunc1)();\r\n<span class=\"code-object\">int</span> ** (**pfunc2)();\r\n<span class=\"code-object\">int</span> ** (**pfunc3)();\r\n<span class=\"code-object\">int</span> ** (**pfunc4)();\r\n\r\nvoid function( <span class=\"code-object\">int</span> ** par1,\r\n               <span class=\"code-object\">int</span> ** par2,\r\n               INTPTR * par3,\r\n               <span class=\"code-object\">int</span> * par4[],\r\n               <span class=\"code-object\">int</span> * par5[])\r\n{\r\n  <span class=\"code-object\">int</span> ** ptr1;\r\n  <span class=\"code-object\">int</span> ** ptr2;\r\n  INTPTR * ptr3;\r\n  <span class=\"code-object\">int</span> * ptr4[ 10 ];\r\n  <span class=\"code-object\">int</span> * ptr5[ 10 ];\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 17.5 - The declaration of objects should contain no more than 2 levels of pointer indirection</li>\n\t<li>MISRA C++:2008, 5-0-19 - The declaration of objects shall contain no more than two levels of pointer indirection</li>\n\t<li>MISRA C:2012, 18.5 - Declarations should contain no more than two levels of pointer nesting</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "brain-overload",
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-2335",
      "type": "Code Smell",
      "summary": "Octal and hexadecimal escape sequences should be terminated",
      "description": "<p>There is potential for confusion if an octal or hexadecimal escape sequence is immediately followed by other characters. Instead, such sequences shall be terminated by either:</p>\n<ul>\n\t<li>The start of another escape sequence.</li>\n\t<li>The end of the character constant or the end of a string literal.</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> *s1 = <span class=\"code-quote\">\"\\x41g\"</span>;  <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-object\">int</span> c1 = '\\141t'; <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> *s2 = <span class=\"code-quote\">\"\\x41\"</span> <span class=\"code-quote\">\"g\"</span>; <span class=\"code-comment\">// Compliant - terminated by end of literal\r\n</span><span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> *s3 = <span class=\"code-quote\">\"\\x41\\x67\"</span>; <span class=\"code-comment\">// Compliant - terminated by another escape\r\n</span><span class=\"code-object\">int</span> c2 = '\\141\\t'; <span class=\"code-comment\">// Compliant - terminated by another escape</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2012, 4.1 - Octal and hexadecimal escape sequences shall be terminated</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-925",
      "type": "Code Smell",
      "summary": "Recursion should not be used",
      "description": "<p>Recursion is a powerful tool, but it can be tricky to get right. Getting it wrong can lead to stack overflow errors and cause system problems. Even when you do get it right, recursive code can be difficult to understand, perhaps leading to maintenance problems in the future. Therefore recursion should be avoided in general and used only with due deliberation and caution when it is strictly necessary.</p>\n\n<p>This rule checks for direct recursion (when a function calls itself).</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> pow(<span class=\"code-object\">int</span> num, <span class=\"code-object\">int</span> exponent) {\r\n  <span class=\"code-keyword\">if</span> (exponent &gt; 1) {\r\n    num = num * pow(num, exponent-1);  <span class=\"code-comment\">// Noncompliant; direct recursion\r\n</span>  }\r\n  <span class=\"code-keyword\">return</span> num;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> pow(<span class=\"code-object\">int</span> num, <span class=\"code-object\">int</span> exponent) {\r\n  <span class=\"code-object\">int</span> val = num;\r\n  <span class=\"code-keyword\">while</span> (exponent &gt; 0) {\r\n    val *= num;\r\n    --exponent;\r\n  }\r\n  <span class=\"code-keyword\">return</span> val;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 16.2 - Functions shall not call themselves, either directly or indirectly.</li>\n\t<li>MISRA C++:2008, 7-5-4 - Functions should not call themselves, either directly or indirectly.</li>\n\t<li>MISRA C:2012, 17.2 - Functions shall not call themselves, either directly or indirectly</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "bad-practice",
        "misra",
        "pitfall"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-873",
      "type": "Code Smell",
      "summary": "\"enum\" values should not be used as operands to built-in operators other than [ ], =, ==, !=, unary &, and the relational operators <, <=, >, >=",
      "description": "<p>Enumerations have implementation-defined representation and so should not be used in arithmetic contexts.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">enum</span> { COLOUR_0, COLOUR_1, COLOUR_2, COLOUR_COUNT } colour;\r\n<span class=\"code-keyword\">if</span> ( COLOUR_0 == colour ) { ... }\r\n<span class=\"code-keyword\">if</span> ( ( COLOUR_0 + COLOUR_1 ) == colour ) { ... } <span class=\"code-comment\">// Noncompliant, arithmetic used\r\n</span><span class=\"code-keyword\">if</span> ( colour &lt; COLOUR_COUNT ) { ... }\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 4-5-2 - Expressions with type enum shall not be used as operands to builtin operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, &gt;, &gt;=</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-907",
      "type": "Code Smell",
      "summary": "\"goto\" statement should not be used",
      "description": "<p><tt>goto</tt> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such as <tt>if</tt>, <tt>for</tt>, <tt>while</tt>, <tt>continue</tt> or <tt>break</tt> should be used instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> i = 0;\r\nloop:\r\n  printf(<span class=\"code-quote\">\"i = %d\\n\"</span>, i);\r\n  i++;\r\n  <span class=\"code-keyword\">if</span> (i &lt; 10){\r\n    <span class=\"code-keyword\">goto</span> loop; <span class=\"code-comment\">// Noncompliant\r\n</span>  }\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span> (<span class=\"code-object\">int</span> i = 0; i &lt; 10; i++) {\r\n  printf(<span class=\"code-quote\">\"i = %d\\n\"</span>, i);\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.4 - The goto statement shall not be used.</li>\n\t<li>MISRA C:2012, 15.1 - The goto statement should not be used</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "brain-overload",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-922",
      "type": "Bug",
      "summary": "\"sizeof\" should not be used on expressions that contain side effects",
      "description": "<p>A possible programming error in C++ is to apply the <tt>sizeof</tt> operator to an expression and expect the expression to be evaluated. However, the expression is not evaluated because <tt>sizeof</tt> only acts on the <em>type</em> of the expression. To avoid this error, <tt>sizeof</tt> should not be used on expressions that would contain side effects if they were used elsewhere, since the side effects will not occur.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nj = sizeof( i = 1234 ); <span class=\"code-comment\">// Noncompliant - j is set to the sizeof the type of i which is an <span class=\"code-object\">int</span>. i is not set to 1234.\r\n</span>\r\nj = sizeof ( b[i++] ); <span class=\"code-comment\">// Noncompliant - i won't be incremented.\r\n</span>\r\nj = sizeof( isPtr(e) ); <span class=\"code-comment\">// Compliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ni = 1234;\r\nj = sizeof( i );\r\n\r\ni++;\r\nj = sizeof ( b[i] );\r\n\r\nj = sizeof( isPtr(e) );\r\n</pre>\n</div></div>\n\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 12.3 - The sizeof operator shall not be used on expressions that contain side effects.</li>\n\t<li>MISRA C++:2008, 5-3-4 - Evaluation of the operand to the sizeof operator shall not contain side effects.</li>\n\t<li>MISRA C:2012, 13.6 - The operand of the sizeof operator shall not contain any expression which has potential side effects</li>\n</ul>\n",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1913",
      "type": "Bug",
      "summary": "\"sizeof(sizeof(...))\" should not be used",
      "description": "<p>A call to <tt>sizeof(sizeof(...))</tt> is equivalent to <tt>sizeof(size_t)</tt>, and indicates a misuse or misunderstanding of the <tt>sizeof</tt> construct.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;string.h&gt;\r\n\r\n<span class=\"code-object\">int</span> main(<span class=\"code-object\">int</span> argc, <span class=\"code-object\">char</span>* argv[])\r\n{\r\n  <span class=\"code-object\">char</span> buffer[42];\r\n  <span class=\"code-object\">char</span> buffer2[sizeof(sizeof(buffer))]; /* Noncompliant - a single sizeof() was intended */\r\n\r\n  memcpy(buffer, <span class=\"code-quote\">\"Hello, world!\"</span>, strlen(<span class=\"code-quote\">\"Hello, world!\"</span>)+1);\r\n  memcpy(buffer2, buffer, sizeof(buffer)); /* Buffer overflow */\r\n\r\n  <span class=\"code-keyword\">return</span> 0;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;string.h&gt;\r\n\r\n<span class=\"code-object\">int</span> main(<span class=\"code-object\">int</span> argc, <span class=\"code-object\">char</span>* argv[])\r\n{\r\n  <span class=\"code-object\">char</span> buffer[42];\r\n  <span class=\"code-object\">char</span> buffer2[sizeof(buffer)]; /* Compliant */\r\n\r\n  memcpy(buffer, <span class=\"code-quote\">\"Hello, world!\"</span>, strlen(<span class=\"code-quote\">\"Hello, world!\"</span>)+1);\r\n  memcpy(buffer2, buffer, sizeof(buffer));\r\n\r\n  <span class=\"code-keyword\">return</span> 0;\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1151",
      "type": "Code Smell",
      "summary": "\"switch case\" clauses should not have too many lines of code",
      "description": "<p>The <tt>switch</tt> statement should be used only to clearly define some new branches in the control flow. As soon as a <tt>case</tt> clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of <tt>case</tt> clause should be extracted in a dedicated function.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (myVariable) {\r\n  <span class=\"code-keyword\">case</span> 0: <span class=\"code-comment\">// 6 lines till next <span class=\"code-keyword\">case</span>\r\n</span>    methodCall1(\"\");\r\n    methodCall2(\"\");\r\n    methodCall3(\"\");\r\n    methodCall4(\"\");\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 1:\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (myVariable) {\r\n  <span class=\"code-keyword\">case</span> 0:\r\n    doSomething();\r\n    <span class=\"code-keyword\">break</span>;\r\n  <span class=\"code-keyword\">case</span> 1:\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n<span class=\"code-comment\">// ...\r\n</span>void doSomething(){\r\n    methodCall1(\"\");\r\n    methodCall2(\"\");\r\n    methodCall3(\"\");\r\n    methodCall4(\"\");\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3562",
      "type": "Code Smell",
      "summary": "\"switch\" statements should cover all cases",
      "description": "<p>For completeness, a <tt>switch</tt> over the values of an <tt>enum</tt> must either address each value in the <tt>enum</tt> or contain a <tt>default</tt> case. <tt>switch</tt> statements that are not over <tt>enum</tt> must end with a <tt>default</tt> case.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ntypedef <span class=\"code-keyword\">enum</span> {APPLE, GRAPE, KIWI} fruit;\r\n\r\nvoid example(fruit f, <span class=\"code-object\">int</span> i) {\r\n  <span class=\"code-keyword\">switch</span> (f) {  <span class=\"code-comment\">// Noncompliant; no <span class=\"code-keyword\">case</span> <span class=\"code-keyword\">for</span> KIWI\r\n</span>    <span class=\"code-keyword\">case</span> APPLE:\r\n      <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">case</span> GRAPE:\r\n      <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">case</span> 3: <span class=\"code-comment\">// Noncompliant; <span class=\"code-keyword\">case</span> value not in <span class=\"code-keyword\">enum</span>\r\n</span>      <span class=\"code-comment\">// ...\r\n</span>  }\r\n\r\n  <span class=\"code-keyword\">switch</span> (i) { <span class=\"code-comment\">// Noncompliant; no <span class=\"code-keyword\">default</span>\r\n</span>    <span class=\"code-keyword\">case</span> 0:\r\n      <span class=\"code-comment\">// ...\r\n</span>    <span class=\"code-keyword\">case</span> 1:\r\n      <span class=\"code-comment\">// ...\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ntypedef <span class=\"code-keyword\">enum</span> {APPLE, GRAPE, KIWI} fruit;\r\n\r\nvoid example(fruit f) {\r\n  <span class=\"code-keyword\">switch</span> (f) {\r\n    <span class=\"code-keyword\">case</span> APPLE:\r\n      <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">case</span> GRAPE:\r\n      <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">default</span>:\r\n      <span class=\"code-comment\">// ...\r\n</span>  }\r\n\r\n  <span class=\"code-keyword\">switch</span> (i) {\r\n    <span class=\"code-keyword\">case</span> 0:\r\n      <span class=\"code-comment\">// ...\r\n</span>    <span class=\"code-keyword\">case</span> 1:\r\n      <span class=\"code-comment\">// ...\r\n</span>    <span class=\"code-keyword\">default</span>:\r\n      <span class=\"code-comment\">// ...\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n<p>or</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ntypedef <span class=\"code-keyword\">enum</span> {APPLE, GRAPE, KIWI} fruit;\r\n\r\nvoid example(fruit f) {\r\n  <span class=\"code-keyword\">switch</span> (f) {\r\n    <span class=\"code-keyword\">case</span> APPLE:\r\n      <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">case</span> GRAPE:\r\n      <span class=\"code-comment\">//...\r\n</span>    <span class=\"code-keyword\">case</span> KIWI:\r\n      <span class=\"code-comment\">//...\r\n</span>  }\r\n\r\n  <span class=\"code-keyword\">switch</span> (i) {\r\n    <span class=\"code-keyword\">case</span> 0:\r\n    <span class=\"code-keyword\">case</span> 1:\r\n      <span class=\"code-comment\">// ...\r\n</span>    <span class=\"code-keyword\">default</span>:\r\n      <span class=\"code-comment\">// ...\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"Seealso\"></a>See also</h2>\n<ul>\n\t<li>S131</li>\n</ul>\n",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-802",
      "type": "Code Smell",
      "summary": "\"typedef\" names should be unique identifiers",
      "description": "<p>Reusing a <tt>typedef</tt> name either as another <tt>typedef</tt> name or for any other purpose may lead to developer confusion.</p>\n\n<p>The same <tt>typedef</tt> shall not be duplicated anywhere in the project, even if the declarations are identical.</p>\n\n<p>Note that where the type definition is made in a header file, and that header file is included in multiple source files, this rule is not violated.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n{\r\n  typedef unsigned <span class=\"code-object\">char</span> uint8_t;\r\n}\r\n\r\n{\r\n  typedef unsigned <span class=\"code-object\">char</span> uint8_t; <span class=\"code-comment\">// Noncompliant, redefinition\r\n</span>}\r\n\r\n{\r\n  unsigned <span class=\"code-object\">char</span> uint8_t; <span class=\"code-comment\">// Noncompliant, reuse of uint8_t <span class=\"code-keyword\">for</span> another purpose\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ntypedef unsigned <span class=\"code-object\">char</span> uint8_t;\r\n{\r\n}\r\n\r\n{\r\n}\r\n\r\n{\r\n  unsigned <span class=\"code-object\">char</span> myChar;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 5.3 - A typedef name shall be a unique identifier.</li>\n\t<li>MISRA C++:2008, 2-10-3 - A typedef name (including qualification, if any) shall be a unique identifier.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-793",
      "type": "Code Smell",
      "summary": "All uses of the #pragma directive should be documented",
      "description": "<p>The <tt>#pragma</tt> directive is implementation-defined, hence it is important both to demonstrate that all uses are correct, and to minimize, localize and encapsulate any use of pragmas within dedicated functions whenever possible.</p>\n\n<p>The meaning of each pragma shall be documented.<br/>\nThere shall be sufficient supporting description to demonstrate that the behavior of the pragma and its implications for the application, have been fully understood.</p>\n\n<p>This rule flags all instances of <tt>#pragma</tt> directives, and leaves it to the user to determine whether they have been properly documented.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 3.4 - All uses of the #pragma directive shall be documented and explained</li>\n\t<li>MISRA C++:2008, 16-6-1 - All uses of the #pragma directive shall be documented</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/KwI\" class=\"external-link\" rel=\"nofollow\">CERT, MSC00-C</a> - Compile cleanly at high warning levels</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/I4IyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC00-CPP</a> - Compile cleanly at high warning levels</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-834",
      "type": "Code Smell",
      "summary": "Array declarations should include an explicit size specification",
      "description": "<p>It is possible to declare an array without explicitly specifying its size, but using an explicit size declaration is clearer, and is therefore preferred.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> arr1 [ ];  <span class=\"code-comment\">// Noncompliant; nothing specified\r\n</span><span class=\"code-object\">int</span> arr2 [ ] = { [0] = 1, [12] = 36, [4] = 93 }; <span class=\"code-comment\">// Noncompliant; highest index determines size. May be difficult to spot\r\n</span><span class=\"code-object\">int</span> pirate [ ] = { 2, 4, 8, 42, 501, 90210, 7, 1776 }; <span class=\"code-comment\">// Noncompliant; size is implicit, not explicit</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> arr1 [10];\r\n<span class=\"code-object\">int</span> arr2 [13] = { [0] = 1, [12] = 36, [4] = 93 };\r\n<span class=\"code-object\">int</span> pirate [10] = { 2, 4, 8, 42, 501, 90210, 7, 1776 }; <span class=\"code-comment\">// Implicitly-assigned size was 8. Desired size was 10.</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 8.12 - When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation</li>\n\t<li>MISRA C++:2008, 3-1-3 - When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization</li>\n\t<li>MISRA C:2012, 8.11 - When an array with external linkage is declared, its size should be explicitely specified</li>\n\t<li>MISRA C:2012, 9.5 - Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/HQEOAQ\" class=\"external-link\" rel=\"nofollow\">CERT, ARR02-C.</a> - Explicitly specify array bounds, even if implicitly defined by an initializer</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/_IAyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, CTR02-CPP.</a> - Explicitly specify array bounds, even if implicitly defined by an initializer</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-784",
      "type": "Code Smell",
      "summary": "Assembly language should be encapsulated and isolated",
      "description": "<p>Ensuring that assembly language code is encapsulated and isolated aids portability. Where assembly language instructions are needed, they shall be encapsulated and isolated in either assembler functions or C++ functions.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid fn ( void )\r\n{\r\n  DoSomething ( );\r\n  asm ( <span class=\"code-quote\">\"NOP\"</span> ); <span class=\"code-comment\">// Noncompliant, asm mixed with C/C++ statements\r\n</span>  DoSomething ( );\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid Delay ( void )\r\n{\r\n  asm ( <span class=\"code-quote\">\"NOP\"</span> ); <span class=\"code-comment\">// Compliant, asm not mixed with C/C++ statements\r\n</span>}\r\n\r\nvoid fn ( void )\r\n{\r\n  DoSomething ( );\r\n  Delay ( ); <span class=\"code-comment\">// Compliant, Assembler is encapsulated\r\n</span>  DoSomething ( );\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 2.1 - Assembly language shall be encapsulated and isolated.</li>\n\t<li>MISRA C++:2008, 7-4-3 - Assembly language shall be encapsulated and isolated.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3687",
      "type": "Code Smell",
      "summary": "Atomic types should be used instead of \"volatile\" types",
      "description": "<p>Except for interactions with <tt>extern volatile</tt> variables provided by libraries, C/C++ programmers should consider <tt>volatile</tt> an esoteric feature that is best avoided. In most cases, it is used in an attempt to provide atomicity, memory ordering, or inter-thread synchronization, but <tt>volatile</tt> does not provide those guarantees. It is only really needed for the kind of low-level code found in kernels, i.e. using memory-mapped I/O registers to manipulate hardware directly. </p>\n\n<p>According to the C standard:</p>\n<blockquote>\n<p><tt>volatile</tt> is a hint to the implementation to avoid aggressive optimization involving the object because the value of the object might be changed by means undetectable by an implementation.</p></blockquote>\n\n<p>Only C11/C++11 \"atomic types\" are free from data races.</p>\n\n<p>This rule raises an issue when a <tt>volatile</tt> type is declared.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">volatile</span> <span class=\"code-object\">int</span> counter; <span class=\"code-comment\">// Noncompliant\r\n</span>User * <span class=\"code-keyword\">volatile</span> vpUser; <span class=\"code-comment\">// Noncompliant; pointer is <span class=\"code-keyword\">volatile</span> \r\n</span>User <span class=\"code-keyword\">volatile</span> * pvUser;  <span class=\"code-comment\">// Compliant; User instance is <span class=\"code-keyword\">volatile</span>, not the pointer</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\natomic_int counter;\r\nstd::atomic&lt;User*&gt; vpUser;\r\nUser <span class=\"code-keyword\">volatile</span> * pvUser;\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/lwBlAQ\" class=\"external-link\" rel=\"nofollow\">CERT, CON01-CPP.</a> - Do not use volatile as a synchronization primitive</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "c11",
        "cert",
        "cpp11",
        "multi-threading"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-874",
      "type": "Bug",
      "summary": "Bitwise operators should not be applied to signed operands",
      "description": "<p>Most bitwise operators (<tt>~</tt>, <tt>&gt;&gt;</tt>, <tt>&gt;&gt;=</tt>, <tt>&amp;</tt>, <tt>&amp;=</tt>, {<sup>}, <tt></sup>=</tt>, <tt>|</tt>, and <tt>|=</tt>) have implementation-dependent results when performed on signed operands, and bitwise left shift (<tt>&lt;&lt;</tt> and <tt>&lt;&lt;=</tt>) has undefined behavior when performed on negative operands. Therefore bitwise operations should not be performed on signed operands.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ( ( uint16_a &amp; int16_b ) == 0x1234U ) \r\n<span class=\"code-keyword\">if</span> ( ~int16_a == 0x1234U ) \r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ( ( uint16_a | uint16_b ) == 0x1234U ) \r\n<span class=\"code-keyword\">if</span> ( ~uint16_a == 0x1234U )\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n\n<p>When used as bit flags, it is acceptable to use preprocessor macros as arguments to the &amp; and | operators even if the value is not explicitly declared as unsigned.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nfd = open(file_name, UO_WRONLY | UO_CREAT | UO_EXCL | UO_TRUNC, 0600);\r\n</pre>\n</div></div>\n\n<p>If the right-side operand to a shift operator is known at compile time, it is acceptable for the value to be represented with a signed type provided it is positive.</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define SHIFT 24\r\nfoo = 15u &gt;&gt; SHIFT;\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 12.7 - Bitwise operators shall not be applied to operands whose underlying type is signed</li>\n\t<li>MISRA C++:2008, 5-0-21 - Bitwise operators shall only be applied to operands of unsigned underlying type</li>\n\t<li>MISRA C:2012, 10.1 - Operands shall not be of an inappropriate essential type</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/BoAD\" class=\"external-link\" rel=\"nofollow\">CERT, INT13-C.</a> - Use bitwise operators only on unsigned operands</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/vIAyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, INT13-CPP.</a> - Use bitwise operators only on unsigned operands</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/682.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-682</a> - Incorrect Calculation</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "bad-practice",
        "cert",
        "cwe",
        "lock-in",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-867",
      "type": "Bug",
      "summary": "Boolean operators should have boolean operands",
      "description": "<p>The use of operands with types other than <tt>bool</tt> with these operators is unlikely to be meaningful (or intended). This rule allows the detection of such uses, which often occur because the logical operators (<tt>&amp;&amp;</tt>, <tt>||</tt> and <tt>!</tt>) can be easily confused with the bitwise operators (<tt>&amp;</tt>, <tt>|</tt> and <tt>~</tt>).</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ( 1 &amp;&amp; ( c &lt; d ) ) <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">if</span> ( ( a &lt; b ) &amp;&amp; ( c + d ) ) <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">if</span> ( u8_a &amp;&amp; ( c + d ) ) <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">if</span> ( !0 ) <span class=\"code-comment\">// Noncompliant, always <span class=\"code-keyword\">true</span>\r\n</span><span class=\"code-keyword\">if</span> ( !ptr ) <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">if</span> ( ( a &lt; b ) &amp;&amp; ( c &lt; d ) ) <span class=\"code-comment\">// Compliant \r\n</span><span class=\"code-keyword\">if</span> ( !<span class=\"code-keyword\">false</span> ) <span class=\"code-comment\">// Compliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ( 1 != 0 &amp;&amp; ( c &lt; d ) ) <span class=\"code-comment\">// Compliant, but left operand is always <span class=\"code-keyword\">true</span>\r\n</span><span class=\"code-keyword\">if</span> ( ( a &lt; b ) &amp;&amp; ( c + d ) != 0 ) <span class=\"code-comment\">// Compliant\r\n</span><span class=\"code-keyword\">if</span> ( u8_a != 0 &amp;&amp; ( c + d ) != 0) <span class=\"code-comment\">// Compliant\r\n</span><span class=\"code-keyword\">if</span> ( 0 == 0 ) <span class=\"code-comment\">// Compliant, always <span class=\"code-keyword\">true</span>\r\n</span><span class=\"code-keyword\">if</span> ( ptr != NULL ) <span class=\"code-comment\">// Compliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 12.6 - The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean. Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, || and !).</li>\n\t<li>MISRA C++:2008, 5-3-1 - Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool.</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/KQHEAw\" class=\"external-link\" rel=\"nofollow\">CERT, EXP54-J.</a> - Understand the differences between bitwise and logical operators</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-835",
      "type": "Code Smell",
      "summary": "Braces should be used to indicate and match the structure in the non-zero initialization of arrays and structures",
      "description": "<p>ISO/IEC 14882:2003 <span class=\"error\">&#91;1&#93;</span> requires initializer lists for arrays, structures and union types to be enclosed in a single pair of braces (though the behaviour if this is not done is undefined). The rule given here goes further in requiring the use of additional braces to indicate nested structures.<br/>\nThis forces the developer to explicitly consider and demonstrate the order in which elements of complex data types are initialized (e.g. multi-dimensional arrays).<br/>\nThe zero initialization of arrays or structures shall only be applied at the top level.<br/>\nThe non-zero initialization of arrays or structures requires an explicit initializer for each element.</p>\n\n<p>A similar principle applies to structures, and nested combinations of structures, arrays and other types.<br/>\nNote also that all the elements of arrays or structures can be initialized (to zero or NULL) by giving an explicit initializer for the first element only. If this method of initialization is chosen then the first element should be initialized to zero (or NULL), and nested braces need not be used.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> a1[3][2] = { 1, 2, 3, 4, 5, 6 }; <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-object\">int</span> a2[5] = { 1, 2, 3 }; <span class=\"code-comment\">// Noncompliant, partial initialization \r\n</span><span class=\"code-object\">int</span> a3[2][2] = { { }, { 1, 2 } }; <span class=\"code-comment\">// Noncompliant, zero initialization at sub-level</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> a1[3][2] = { { 1, 2 }, { 3, 4 }, { 5, 6 } }; <span class=\"code-comment\">// Compliant\r\n</span><span class=\"code-object\">int</span> a2[5] = { 1, 2, 3, 0, 0 }; <span class=\"code-comment\">// Compliant, Non-zero initialization\r\n</span><span class=\"code-object\">int</span> a2[5] = { 0 }; <span class=\"code-comment\">// Compliant, zero initialization\r\n</span><span class=\"code-object\">int</span> a3[2][2] = { }; <span class=\"code-comment\">// Compliant, zero initialization</span>\r\n</pre>\n</div></div>\n\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 9.2 - Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures.</li>\n\t<li>MISRA C++:2008, 8-5-2 - Braces shall be used to indicate and match the structure in the nonzero initialization of arrays and structures.</li>\n\t<li>MISRA C:2012, 9.2 - The initializer of an aggregate or union shall be enclosed in braces.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2260",
      "type": "Code Smell",
      "summary": "C# parser failure",
      "description": "<p>When the C# parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.</p>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1706",
      "type": "Code Smell",
      "summary": "Exceptions should not be used",
      "description": "<p>While exceptions are a common feature of modern languages, there are several reasons to avoid them:</p>\n<ul>\n\t<li>They make the control flow of a program difficult to understand, because they introduce additional exit points.</li>\n\t<li>The use of exceptions in new code can make that code difficult to integrate with existing, exception-free code.</li>\n\t<li>They add to the size of each binary produced, thereby increasing both compile time and final executable size.</li>\n\t<li>They incur a small performance penalty.</li>\n</ul>\n\n\n<p>This C++ code example also applies to Objective-C.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">double</span> myfunction(<span class=\"code-object\">char</span> param) <span class=\"code-keyword\">throw</span> (<span class=\"code-object\">int</span>); <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">try</span> <span class=\"code-comment\">// Noncompliant\r\n</span>{\r\n  do_something();\r\n  <span class=\"code-keyword\">throw</span> 1; <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n<span class=\"code-keyword\">catch</span> (...)\r\n{\r\n  <span class=\"code-comment\">// handle exception\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ndo_something();\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1908",
      "type": "Code Smell",
      "summary": "Files should not be too complex",
      "description": "<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-104",
      "type": "Code Smell",
      "summary": "Files should not have too many lines of code",
      "description": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those smaller files will not only be easier to understand but also probably easier to test.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1244",
      "type": "Bug",
      "summary": "Floating point numbers should not be tested for equality",
      "description": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is not associative; push a <tt>float</tt> or a <tt>double</tt> through a series of simple mathematical operations and the answer will be different based on the order of those operation because of the rounding that takes place at each step.</p>\n\n<p>Even simple floating point assignments are not simple:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">float</span> f = 0.100000001f; <span class=\"code-comment\">// 0.1\r\n</span><span class=\"code-object\">double</span> d = 0.10000000000000001; <span class=\"code-comment\">// 0.1</span>\r\n</pre>\n</div></div>\n\n<p>(Results will vary based on compiler and compiler settings)</p>\n\n<p>Therefore, the use of the equality (<tt>==</tt>) and inequality (<tt>!=</tt>) operators on <tt>float</tt> or <tt>double</tt> values is almost always an error.</p>\n\n<p>This rule checks for the use of direct and indirect equality/inequality tests on floats and doubles.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">float</span> myNumber = 3.146f;\r\n<span class=\"code-keyword\">if</span> ( myNumber == 3.146f ) <span class=\"code-comment\">//Noncompliant. Because of floating point imprecision, <span class=\"code-keyword\">this</span> will be <span class=\"code-keyword\">false</span>\r\n</span>{\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n\r\n<span class=\"code-keyword\">if</span> (myNumber &lt;= 3.146f &amp;&amp; mNumber &gt;= 3.146f) <span class=\"code-comment\">// Noncompliant indirect equality test\r\n</span>{\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n\r\n<span class=\"code-keyword\">if</span> (myNumber &lt; 4 || myNumber &gt; 4) <span class=\"code-comment\">// Noncompliant indirect inequality test\r\n</span>{\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality.</li>\n\t<li>MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-855",
      "type": "Bug",
      "summary": "Function pointers should not be converted to any other type",
      "description": "<p>Conversion of a function pointer to a different type of pointer results in undefined behaviour. This means, for example, that a pointer to a function cannot be converted to a pointer to a different type of function.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> f(<span class=\"code-object\">int</span> a)\r\n{\r\n  <span class=\"code-object\">float</span> (*p)(<span class=\"code-object\">float</span>) = (<span class=\"code-object\">float</span> (*)(<span class=\"code-object\">float</span>)) &amp; f; <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 11.1 - Conversions shall not be performed between a pointer to a function and any type other than an integral type.</li>\n\t<li>MISRA C++:2008, 5-2-6 - A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type.</li>\n\t<li>MISRA C:2012, 11.1 - Conversions shall not be performed between a pointer to a function and any other type</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1142",
      "type": "Code Smell",
      "summary": "Functions should not contain too many return statements",
      "description": "<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a return statement is encountered. This makes it harder to read and understand the logic of the function.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> fun() {\r\n  <span class=\"code-keyword\">if</span> (condition1) {\r\n    <span class=\"code-keyword\">return</span> 1;\r\n  } <span class=\"code-keyword\">else</span> {\r\n    <span class=\"code-keyword\">if</span> (condition2) {\r\n      <span class=\"code-keyword\">return</span> 0;\r\n    } <span class=\"code-keyword\">else</span> {\r\n      <span class=\"code-keyword\">return</span> 1;\r\n    }\r\n  }\r\n  <span class=\"code-keyword\">return</span> 0;\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-138",
      "type": "Code Smell",
      "summary": "Functions/methods should not have too many lines",
      "description": "<p>A function that grows too large tends to aggregate too many responsibilities.<br/>\nSuch functions inevitably become harder to understand and therefore harder to maintain. </p>\n\n<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.<br/>\nThose smaller functions will not only be easier to understand, but also probably easier to test.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-799",
      "type": "Code Smell",
      "summary": "Identifiers should not be longer than 31 characters",
      "description": "<p>In addition to being difficult to use, too-long variable names can limit code portability. The ISO standard requires that variable, type, function and label names be no more than 31 characters long. </p>\n\n<p>Note that 31 characters is an upper bound, rather than a length recommendation. Shorter names are better, as long as they're still communicative.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> this_is_a_very_long_identifier_that_definitely_should_be_renamed = 0;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> reasonable_identifier = 0;\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 5.1 - Identifiers (internal and external) shall not rely on the significance of more than 31 character.</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/QAU\" class=\"external-link\" rel=\"nofollow\">CERT, DCL23-C.</a> - Guarantee that mutually visible identifiers are unique</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-881",
      "type": "Code Smell",
      "summary": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
      "description": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n\t<li>It can significantly impair the readability of the code.</li>\n\t<li>It introduces additional side effects into a statement, with the potential for undefined behavior.</li>\n\t<li>It is safer to use these operators in isolation from any other arithmetic operators.</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nu8a = ++u8b + u8c--; \r\nfoo = bar++ / 4;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n++u8b;    \r\nu8a = u8b + u8c; \r\nu8c--; \r\nfoo = bar / 4;\r\nbar++;\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions.</li>\n\t<li>MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.</li>\n\t<li>MISRA C+<ins>:2008, 5-2-10 - The increment (</ins>+) and decrement (--) operator should not be mixed with other operators in an expression.</li>\n\t<li>MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit</li>\n\t<li>MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that cause by the increment or decrement operator</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\" class=\"external-link\" rel=\"nofollow\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side effects</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\" class=\"external-link\" rel=\"nofollow\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the same object within an expression</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-864",
      "type": "Code Smell",
      "summary": "Limited dependence should be placed on operator precedence rules in expressions",
      "description": "<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex statements. However, this does not mean that parentheses should be gratuitously added around every operation.</p>\n\n<p>Parentheses are not needed:</p>\n<ul>\n\t<li>with a unary operator</li>\n\t<li>when all the operators in an expression are the same</li>\n\t<li>when only a single operator is involved</li>\n\t<li>around the right-hand side of an assignment operator unless the right-hand side itself contains an assignment</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nx = a + b;\r\nx = a * -1;\r\nx = a + b + c;\r\nx = f ( a + b, c );\r\n\r\nx = a == b ? a : a - b; <span class=\"code-comment\">// Noncompliant\r\n</span>x = a + b - c + d; <span class=\"code-comment\">// Noncompliant\r\n</span>x = a * 3 + c + d; <span class=\"code-comment\">// Noncompliant\r\n</span>\r\n<span class=\"code-keyword\">if</span> (a = f(b,c) == <span class=\"code-keyword\">true</span>) { ... } <span class=\"code-comment\">// Noncompliant; == evaluated first</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nx = a + b;\r\nx = a * -1;\r\nx = a + b + c;\r\nx = f ( a + b, c );\r\n\r\nx = ( a == b ) ? a : ( a - b );\r\nx = ( a + b ) - ( c + d );\r\nx = ( a * 3 ) + c + d;\r\n\r\n<span class=\"code-keyword\">if</span> ( (a = f(b,c)) == <span class=\"code-keyword\">true</span>) { ... }\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions</li>\n\t<li>MISRA C:2004, 12.2 - The value of an expression shall be the same under any order of evaluation that the standard permits.</li>\n\t<li>MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions.</li>\n\t<li>MISRA C++:2008, 5-0-1 - The value of an expression shall be the same under any order of evaluation that the standard permits.</li>\n\t<li>MISRA C+<ins>:2008, 5-0-2 - Limited dependence should be placed on C</ins>+ operator precedence rules in expressions</li>\n\t<li>MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression.</li>\n\t<li>MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/_wI\" class=\"external-link\" rel=\"nofollow\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/VoAyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, EXP00-CPP.</a> - Use parentheses for precedence of operation</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/9wHEAw\" class=\"external-link\" rel=\"nofollow\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/783.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-783</a> - Operator Precedence Logic Error</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-103",
      "type": "Code Smell",
      "summary": "Lines should not be too long",
      "description": "<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-966",
      "type": "Bug",
      "summary": "Macros used in preprocessor directives should be defined before use",
      "description": "<p>An attempt to use an undefined identifier may elicit a warning from the preprocessor. Or it may not; the preprocessor may simply assume that the undefined token has a value of 0. </p>\n\n<p>Therefore macro identifiers should not be used in preprocessor directives until after they have been defined, and this limited usage should be enforced with the use of definition tests.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#<span class=\"code-keyword\">if</span> x &gt; 0  /* x assumed to be zero <span class=\"code-keyword\">if</span> not defined */\r\n#include SOMETHING_IMPORTANT\r\n#endif\r\n\r\n#ifdef y  /* Okay; y is not evaluated */\r\n#<span class=\"code-keyword\">if</span> y &gt; 0 /* Okay; y must be defined to reach <span class=\"code-keyword\">this</span> point */\r\n...\r\n#endif\r\n#endif\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define x 10\r\n...\r\n#<span class=\"code-keyword\">if</span> x &gt; 0\r\n#include SOMETHING_IMPORTANT\r\n#endif\r\n\r\n#<span class=\"code-keyword\">if</span> defined ( y ) &amp;&amp; ( y &gt; 0 )  /* more compact form, same result as before */\r\n...\r\n#endif\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 19.11 - All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator.</li>\n\t<li>MISRA C:2012, 20.9 - All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define’d before evaluation</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "preprocessor"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-109",
      "type": "Code Smell",
      "summary": "Magic numbers should not be used",
      "description": "<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the number of iterations of a loops, to test the value of a property, etc.</p>\n\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at debugging time.</p>\n\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n\n<p>-1, 0 and 1 are not considered magic numbers.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid doSomething() {\r\n  <span class=\"code-keyword\">for</span>(<span class=\"code-object\">int</span> i = 0; i &lt; 42; i++) {               <span class=\"code-comment\">// Noncompliant - 42 is a magic number\r\n</span>    <span class=\"code-comment\">// ...\r\n</span>  }\r\n\r\n  <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">var</span> == 42) {                            <span class=\"code-comment\">// Noncompliant - magic number\r\n</span>    <span class=\"code-comment\">// ...\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define STATUS_OK 42\r\n\r\nvoid doSomething() {\r\n  <span class=\"code-object\">int</span> maxIterations = 42;                     <span class=\"code-comment\">// Compliant - in a declaration\r\n</span>  <span class=\"code-keyword\">for</span>(<span class=\"code-object\">int</span> i = 0; i &lt; maxIterations ; i++){    <span class=\"code-comment\">// Compliant\r\n</span>    <span class=\"code-comment\">// ...\r\n</span>  }\r\n\r\n  <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">var</span> == 0) {                             <span class=\"code-comment\">// Compliant - 0 is excluded\r\n</span>    <span class=\"code-comment\">// ...\r\n</span>  }\r\n\r\n  <span class=\"code-keyword\">if</span> (<span class=\"code-keyword\">var</span> == STATUS_OK) {                     <span class=\"code-comment\">// Compliant - number comes from a macro\r\n</span>    <span class=\"code-comment\">// ...\r\n</span>  }\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-856",
      "type": "Bug",
      "summary": "Object pointers should only be converted to other object pointers, integral types or \"void\" pointers",
      "description": "<p>Such conversions are undefined.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstruct S1 *p1;\r\nstruct S2;\r\nvoid f ()\r\n{\r\n  (<span class=\"code-object\">float</span>) p1; <span class=\"code-comment\">// Noncompliant, conversion to floating point type\r\n</span>  (<span class=\"code-object\">int</span> *) p1; <span class=\"code-comment\">// Noncompliant\r\n</span>  (<span class=\"code-object\">int</span>) p1; <span class=\"code-comment\">// Compliant, conversion to an integral type\r\n</span>  (void *) p1; <span class=\"code-comment\">// Compliant, conversion to 'void *'\r\n</span>  (struct S2 *)p1; <span class=\"code-comment\">// Compliant, conversion to another type.\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 11.2 - Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void.</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/toAyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, INT11-CPP.</a> - Take care when converting from pointer to integer or integer to pointer</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-868",
      "type": "Code Smell",
      "summary": "Operands of \"&&\" and \"||\" should be primary (C) or postfix (C++) expressions",
      "description": "<p>The effect of this rule is to require that operands are appropriately parenthesized. Parentheses are important in this situation both for readability of code and for ensuring that the behavior is as the developer intended.<br/>\nWhere an expression consists of either a sequence of only logical <tt>&amp;&amp;</tt> or a sequence of logical <tt>||</tt>, extra parentheses are not required.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (x == 0 &amp;&amp; ishigh);                   <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">if</span> (x || y || z);\r\n<span class=\"code-keyword\">if</span> (x || y &amp;&amp; z);                        <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">if</span> (x &amp;&amp; !y);                            <span class=\"code-comment\">// Noncompliant\r\n</span><span class=\"code-keyword\">if</span> (is_odd(y) &amp;&amp; x);\r\n<span class=\"code-keyword\">if</span> ((x &gt; c1) &amp;&amp; (y &gt; c2) &amp;&amp; (z &gt; c3));\r\n<span class=\"code-keyword\">if</span> ((x &gt; c1) &amp;&amp; (y &gt; c2) || (z &gt; c3));   <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ((x == 0) &amp;&amp; ishigh);\r\n<span class=\"code-keyword\">if</span> (x || y || z);\r\n<span class=\"code-keyword\">if</span> (x || (y &amp;&amp; z));\r\n<span class=\"code-keyword\">if</span> (x &amp;&amp; (!y));\r\n<span class=\"code-keyword\">if</span> (is_odd(y) &amp;&amp; x);\r\n<span class=\"code-keyword\">if</span> ((x &gt; c1) &amp;&amp; (y &gt; c2) &amp;&amp; (z &gt; c3));\r\n<span class=\"code-keyword\">if</span> ((x &gt; c1) &amp;&amp; ((y &gt; c2) || (z &gt; c3)));\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions.</li>\n\t<li>MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-926",
      "type": "Code Smell",
      "summary": "Parameters in a function prototype should be named",
      "description": "<p>Naming the parameters in a function prototype helps identify how they'll be used by the function, thereby acting as a thin layer of documentation for the function.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid divide (<span class=\"code-object\">int</span>, <span class=\"code-object\">int</span>);\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid divide (<span class=\"code-object\">int</span> numerator, <span class=\"code-object\">int</span> denominator);\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 16.3 - Identifiers shall be given for all of the parameters in a function prototype declaration</li>\n\t<li>MISRA C:2012, 8.2 - Function types shall be in prototype form with named parameters</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-853",
      "type": "Bug",
      "summary": "Results of ~ and << operations on operands of underlying types unsigned char and unsigned short should immediately be cast to the operand's underlying type",
      "description": "<p>When <tt>~</tt> and <tt>&lt;&lt;</tt> are applied to small integer types (<tt>unsigned char</tt> or <tt>unsigned short</tt>), the operations are preceded by integral promotion, and the result may contain high-order bits which have not been anticipated.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nunsigned <span class=\"code-object\">char</span> port = 0x5aU;\r\nunsigned <span class=\"code-object\">char</span> result_8;\r\nunsigned <span class=\"code-object\">short</span> result_16;\r\nunsigned <span class=\"code-object\">short</span> mode;\r\nresult_8 = (~port) &gt;&gt; 4; <span class=\"code-comment\">// Noncompliant; '~port' is 0xFFA5 on a 16-bit machine but 0xFFFFFFA5 on a 32-bit machine. Result is 0xFA <span class=\"code-keyword\">for</span> both, but 0x0A may have been expected.\r\n</span>result_16 = ((port &lt;&lt; 4) &amp; mode) &gt;&gt; 6; <span class=\"code-comment\">// Noncompliant; result_16 value depends on the implemented size of an <span class=\"code-object\">int</span>.</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nresult_8 = ((unsigned <span class=\"code-object\">char</span>)(~port)) &gt;&gt; 4; <span class=\"code-comment\">// Compliant\r\n</span>result_16 = ((unsigned <span class=\"code-object\">short</span>)((unsigned <span class=\"code-object\">short</span>) port &lt;&lt; 4) &amp; mode) &gt;&gt; 6; <span class=\"code-comment\">// Compliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 10.5 - If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand.</li>\n\t<li>MISRA C++:2008, 5-0-10 - If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand.</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SADFAQ\" class=\"external-link\" rel=\"nofollow\">CERT, EXP15-CPP.</a> - Beware of integer promotion when performing bitwise operations on chars or shorts</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-122",
      "type": "Code Smell",
      "summary": "Statements should be on separate lines",
      "description": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nfoo(); bar(); <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nfoo();\r\nbar();\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Control flow statements with a single nested statement are ignored.</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (condition) doSomething();       <span class=\"code-comment\">// Compliant\r\n</span><span class=\"code-keyword\">while</span> (condition) doSomething();    <span class=\"code-comment\">// Compliant</span>\r\n</pre>\n</div></div>\n\n<p><tt>case</tt> or <tt>default</tt> statements containing a single statement and followed by <tt>break</tt> are ignored.</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">switch</span> (foo) {\r\n  <span class=\"code-keyword\">case</span>  0: doSomething(); <span class=\"code-keyword\">break</span>;    <span class=\"code-comment\">// Compliant\r\n</span>  <span class=\"code-keyword\">default</span>: doSomething(); <span class=\"code-keyword\">break</span>;    <span class=\"code-comment\">// Compliant\r\n</span>}\r\n</pre>\n</div></div>\n\n<p>Statements enclosed in curly braces on the same line are ignored.</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nauto lambda = [](<span class=\"code-object\">int</span> x) { doSomething(x); <span class=\"code-keyword\">return</span> x; }; <span class=\"code-comment\">// Compliant</span>\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "style"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2393",
      "type": "Bug",
      "summary": "The \"<stdlib.h>\" functions \"bsearch\" and \"qsort\" should not be used",
      "description": "<p>The identifiers <tt>bsearch</tt> and <tt>qsort</tt> shall not be used and no macro with one of these names shall be expanded. </p>\n\n<p>These two functions take as arguments a caller-defined comparison function. If the comparison function does not behave consistently when comparing elements, or if it modifies any of the elements, the behavior is undefined.</p>\n\n<p>Note: the unspecified behavior, which relates to the treatment of elements that compare as equal, can be avoided by ensuring that the comparison function never returns 0. When two elements are otherwise equal, the comparison function could return a value that indicates their relative order in the initial array. </p>\n\n<p>Further, the implementation of <tt>qsort</tt> is likely to be recursive and will therefore place unknown demands on stack resources. This is of concern in embedded systems because the stack is likely to have a fixed, often small, size.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2012, 21.9 - The library functions <tt>bsearch</tt> and <tt>qsort</tt> of <tt>&lt;stdlib.h&gt;</tt> shall not be used.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra",
        "unpredictable"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-930",
      "type": "Bug",
      "summary": "The number of arguments passed to a function should match the number of parameters",
      "description": "<p>This problem is completely avoided by the use of function prototypes. See MISRA C:2004 Rule 8.1. This rule is retained since compilers may not flag this constraint error.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters.</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/628.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-628</a> - Function Call with Incorrectly Specified Arguments</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/LoAg\" class=\"external-link\" rel=\"nofollow\">CERT, DCL07-C.</a> - Include the appropriate type information in function declarators</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/VQBc\" class=\"external-link\" rel=\"nofollow\">CERT, EXP37-C.</a> - Call functions with the correct number and type of arguments</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1774",
      "type": "Code Smell",
      "summary": "The ternary operator should not be used",
      "description": "<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more verbose <tt>if</tt>/<tt>else</tt> structure.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nprintf(<span class=\"code-quote\">\"%s\"</span>, (i&gt;10?<span class=\"code-quote\">\"yes\"</span>:<span class=\"code-quote\">\"no\"</span>));\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> (i &gt; 10) {\r\n  printf(<span class=\"code-quote\">\"yes\"</span>);\r\n} <span class=\"code-keyword\">else</span> {\r\n  printf(<span class=\"code-quote\">\"no\"</span>);\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-886",
      "type": "Bug",
      "summary": "The three expressions of a \"for\" statement should only be concerned with loop control",
      "description": "<p>The <tt>for</tt> statement provides a general-purpose looping facility. Using a restricted form of loop makes code easier to review and to analyse.</p>\n\n<p>The three clauses of a for statement are the:</p>\n<ul>\n\t<li>First clause which should\n\t<ul>\n\t\t<li>be empty, or</li>\n\t\t<li>assign a value to the loop counter, or</li>\n\t\t<li>define and initialize the loop counter (C99).</li>\n\t</ul>\n\t</li>\n\t<li>Second clause which should\n\t<ul>\n\t\t<li>be an expression that has no persistent side effects, and</li>\n\t\t<li>not use objects that are modified in the for loop body.</li>\n\t</ul>\n\t</li>\n\t<li>Third clause which should\n\t<ul>\n\t\t<li>be an expression whose only persistent side effect is to modify the value of the loop counter, and</li>\n\t\t<li>not use objects that are modified in the for loop body.</li>\n\t</ul>\n\t</li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">for</span>( <span class=\"code-object\">int</span> i = 0 ; i++ &lt; 10 ; i += 1 ) { <span class=\"code-comment\">// Noncompliant, loop counter is updated in the condition\r\n</span>}\r\n\r\n<span class=\"code-keyword\">for</span>( <span class=\"code-object\">int</span> i = 0 ; ; ) { <span class=\"code-comment\">// Noncompliant, initialized variable i is not used in the condition\r\n</span>}\r\n\r\n<span class=\"code-keyword\">for</span>( <span class=\"code-object\">int</span> i = 0 , j = 0 ; i &lt; 10 ; i += j) { <span class=\"code-comment\">// Noncompliant, j is modified in the body\r\n</span>  j = i + 1;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 13.5 - The three expressions of a for statement shall be concerned only with loop control.</li>\n\t<li>MISRA C++:2008, 6-5-5 - A <em>loop-control-variable</em> other than the <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>expression</em>.</li>\n\t<li>MISRA C:2012, 14.2 - A for loop shall be well-formed</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-851",
      "type": "Code Smell",
      "summary": "The value of a complex expression should only be cast to a type that is narrower and of the same signedness as the underlying type of the expression",
      "description": "<p>If a cast is to be used on any complex expression, the type of cast that may be applied is severely restricted. As explained in MISRA C 2004, section 6.10, conversions on complex expressions are often a source of confusion and it is therefore wise to be cautious. In order to comply with these rules, it may be necessary to use a temporary variable and introduce an extra statement.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n  ... (float32_t)(f64a + f64b)\r\n  ... (float64_t)(f32a + f32b) <span class=\"code-comment\">// Noncompliant\r\n</span>  ... (float64_t)f32a\r\n  ... (float64_t)(s32a / s32b) <span class=\"code-comment\">// Noncompliant\r\n</span>  ... (float64_t)(s32a &gt; s32b) <span class=\"code-comment\">// Noncompliant\r\n</span>  ... (float64_t)s32a / (float32_t)s32b\r\n  ... (uint32_t)(u16a + u16b) <span class=\"code-comment\">// Noncompliant\r\n</span>  ... (uint32_t)u16a + u16b\r\n  ... (uint32_t)u16a + (uint32_t)u16b\r\n  ... (int16_t)(s32a - 12345) \r\n  ... (uint8_t)(u16a * u16b) \r\n  ... (uint16_t)(u8a * u8b) <span class=\"code-comment\">// Noncompliant\r\n</span>  ... (int16_t)(s32a * s32b) \r\n  ... (int32_t)(s16a * s16b) <span class=\"code-comment\">// Noncompliant\r\n</span>  ... (uint16_t)(f64a + f64b) <span class=\"code-comment\">// Noncompliant\r\n</span>  ... (float32_t)(u16a + u16b) <span class=\"code-comment\">// Noncompliant\r\n</span>  ... (float64_t)foo1(u16a + u16b)\r\n  ... (int32_t)buf16a[u16a + u16b]\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 10.3 - The value of a complex expression of integer type may only be cast to a type that is narrower and of the same signedness as the underlying type of the expression.</li>\n\t<li>MISRA C:2004, 10.4 - The value of a complex expression of floating type may only be cast to a narrower floating type.</li>\n</ul>\n\n\n\n<h3><a name=\"SeeAlso\"></a>See Also</h3>\n<ul>\n\t<li>MISRA C:2004, section 6.10</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1291",
      "type": "Code Smell",
      "summary": "Track uses of \"NOSONAR\" comments",
      "description": "<p>Any issue to quality rule can be deactivated with the <tt>NOSONAR</tt> marker. This marker is pretty useful to exclude false-positive results but it can also be used abusively to hide real quality flaws.</p>\n\n<p>This rule raises an issue when <tt>NOSONAR</tt> is used.</p>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1762",
      "type": "Code Smell",
      "summary": "\"#pragma warning (default: ...)\" should not be used",
      "description": "<p>Using \"#pragma warning (default: ...)\" resets the warning in question to its default settings, which may not be what the compiler was initially invoked with. Typically, this usage is seen after a warning is turned off, in preparation for code that is known to cause warnings. Instead, the warning's current state should be saved, and then restored after the code in question.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#pragma warning (disable: TheWarning)\r\n#include problem_code.h\r\n#pragma warning (<span class=\"code-keyword\">default</span>: TheWarning)\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#pragma warning (push)\r\n#include problem_code.h\r\n#pragma warning (pop)\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/KwI\" class=\"external-link\" rel=\"nofollow\">CERT, MSC00-C.</a> - Compile cleanly at high warning levels</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/I4IyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC00-CPP.</a> - Compile cleanly at high warning levels</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-909",
      "type": "Code Smell",
      "summary": "\"continue\" should not be used",
      "description": "<p><tt>continue</tt> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured control flow statements such as <tt>if</tt> should be used instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> i;\r\n<span class=\"code-keyword\">for</span> (i = 0; i &lt; 10; i++) {\r\n  <span class=\"code-keyword\">if</span> (i == 5) {\r\n    <span class=\"code-keyword\">continue</span>;  /* Noncompliant */\r\n  }\r\n  printf(<span class=\"code-quote\">\"i = %d\\n\"</span>, i);\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> i;\r\n<span class=\"code-keyword\">for</span> (i = 0; i &lt; 10; i++) {\r\n  <span class=\"code-keyword\">if</span> (i != 5) {\r\n    printf(<span class=\"code-quote\">\"i = %d\\n\"</span>, i);\r\n  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.5 - The continue statement shall not be used.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "bad-practice",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1642",
      "type": "Code Smell",
      "summary": "\"struct\" names should comply with a naming convention",
      "description": "<p>Sharing some naming conventions enables teams to collaborate more efficiently. This rule checks that all <tt>struct</tt> names match a provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>Using the default regular expression <tt><span class=\"error\">&#91;A-Z&#93;</span><span class=\"error\">&#91;a-zA-Z0-9&#93;</span>*+</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstruct myStruct {\r\n  <span class=\"code-object\">int</span> one;\r\n  <span class=\"code-object\">int</span> two;\r\n};\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstruct MyStruct {\r\n  <span class=\"code-object\">int</span> one;\r\n  <span class=\"code-object\">int</span> two;\r\n};\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1878",
      "type": "Code Smell",
      "summary": "\"union\" names should comply with a naming convention",
      "description": "<p>Sharing some naming conventions enables teams to collaborate more efficiently. This rule checks that all <tt>union</tt> names match a provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>Using the default regular expression <tt><span class=\"error\">&#91;A-Z&#93;</span><span class=\"error\">&#91;a-zA-Z0-9&#93;</span>*+</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nunion my_union {\r\n    <span class=\"code-object\">int</span> one;\r\n    <span class=\"code-object\">int</span> two;\r\n};\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nunion MyUnion {\r\n    <span class=\"code-object\">int</span> one;\r\n    <span class=\"code-object\">int</span> two;\r\n};\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1005",
      "type": "Code Smell",
      "summary": "A function should have a single point of exit at the end of the function",
      "description": "<p>This is required by IEC 61508, under good programming style.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> function1()\r\n{\r\n  <span class=\"code-keyword\">return</span> 3;\r\n}\r\n\r\nvoid function2()\r\n{\r\n  function1();\r\n}\r\n\r\n<span class=\"code-object\">int</span> function3(<span class=\"code-object\">char</span>* ptr) /* Noncompliant; two explicit returns */\r\n{\r\n  <span class=\"code-keyword\">if</span> (ptr == NULL) <span class=\"code-keyword\">return</span> -1;\r\n\r\n  <span class=\"code-keyword\">return</span> 7;\r\n}\r\n\r\nvoid function4(<span class=\"code-object\">char</span> *ptr) /* Noncompliant; two returns, one explicit and one implicit */\r\n{\r\n  <span class=\"code-keyword\">if</span> (1) <span class=\"code-keyword\">return</span>;\r\n\r\n  printf(<span class=\"code-quote\">\"hello world!\\n\"</span>);\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.7 - A function shall have a single point of exit at the end of the function.</li>\n\t<li>MISRA C++:2008, 6-6-5 - A function shall have a single point of exit at the end of the function</li>\n\t<li>MISRA C:2012, 15.5 - A function should have a single point of exit at the end</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "brain-overload",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-810",
      "type": "Code Smell",
      "summary": "Appropriate char types should be used for character and integer values",
      "description": "<p>There are three distinct <tt>char</tt> types, (plain) <tt>char</tt>, <tt>signed char</tt> and <tt>unsigned char</tt>. <tt>signed char</tt> and <tt>unsigned char</tt> should only be used for numeric data, and plain <tt>char</tt> should only be used for character data. Since it is implementation-defined, the signedness of the plain <tt>char</tt> type should not be assumed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nsigned <span class=\"code-object\">char</span> a = 'a'; <span class=\"code-comment\">// Noncompliant, explicitly signed \r\n</span>unsigned <span class=\"code-object\">char</span> b = '\\r'; <span class=\"code-comment\">// Noncompliant, explicitly unsigned \r\n</span><span class=\"code-object\">char</span> c = 10; <span class=\"code-comment\">// Noncompliant\r\n</span>\r\nunsigned <span class=\"code-object\">char</span> d = c; <span class=\"code-comment\">// Noncompliant, d is explicitly signed <span class=\"code-keyword\">while</span> c is not\r\n</span><span class=\"code-object\">char</span> e = a; <span class=\"code-comment\">// Noncompliant, a is explicitly signed <span class=\"code-keyword\">while</span> e is not</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">char</span> a = 'a'; <span class=\"code-comment\">// Compliant, explicitly signed \r\n</span><span class=\"code-object\">char</span> b = '\\r'; <span class=\"code-comment\">// Compliant, explicitly unsigned \r\n</span>unsigned <span class=\"code-object\">char</span> c = 10; <span class=\"code-comment\">// Compliant, or\r\n</span>signed <span class=\"code-object\">char</span> c = 10; <span class=\"code-comment\">// Compliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 6.1 - The plain char type shall be used only for the storage and use of character values</li>\n\t<li>MISRA C:2004, 6.2 - signed and unsigned char type shall be used only for the storage and use of number values</li>\n\t<li>MISRA C++:2008, 5-0-11 - The plain char type shall only be used for the storage and use of character values</li>\n\t<li>MISRA C++:2008, 5-0-12 - signed char and unsigned char type shall only be used for the storage and use of numeric values</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/-As\" class=\"external-link\" rel=\"nofollow\">CERT, INT07-C.</a> - Use only explicitly signed or unsigned char type for numeric values</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/rYAyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, INT07-CPP.</a> - Use only explicitly signed or unsigned char type for numeric values</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/5AD7\" class=\"external-link\" rel=\"nofollow\">CERT, STR00-C.</a> - Represent characters using an appropriate type</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/IoEyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, STR04-CPP.</a> - Use plain char for characters in the basic character set</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/JABi\" class=\"external-link\" rel=\"nofollow\">CERT, STR04-C.</a> - Use plain char for characters in the basic character set</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "confusing",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-101",
      "type": "Code Smell",
      "summary": "Class names should comply with a naming convention",
      "description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.<br/>\nThis rule allows to check that all class names (along with Objective-C interface, protocol and implementation names) match a provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With default provided regular expression <tt><span class=\"error\">&#91;A-Z&#93;</span><span class=\"error\">&#91;a-zA-Z0-9&#93;</span>++</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-comment\">// C++\r\n</span>class foo <span class=\"code-comment\">// Noncompliant\r\n</span>{\r\n};\r\n\r\n<span class=\"code-comment\">// Objective-C\r\n</span>@<span class=\"code-keyword\">interface</span> nonCompliant : NSObject\r\n@end\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-comment\">// C++\r\n</span>class Foo <span class=\"code-comment\">// Compliant\r\n</span>{\r\n};\r\n\r\n<span class=\"code-comment\">// Objective-C\r\n</span>@<span class=\"code-keyword\">interface</span> Compliant : NSObject\r\n@end\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1917",
      "type": "Code Smell",
      "summary": "Comment styles \"//\" and \"/* ... */\" should not be mixed within a file",
      "description": "<p>Use either the <tt>// ...</tt> or <tt>/* ... */</tt> comment syntax, but be consistent and do not mix them within the same file.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n/* Noncompliant; both comment syntaxes are used in the same file */\r\n<span class=\"code-comment\">// Foo\r\n</span>/* Bar */\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-comment\">// Compliant; uniform comment syntax\r\n</span><span class=\"code-comment\">// Foo\r\n</span><span class=\"code-comment\">// Bar</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/DQBWB\" class=\"external-link\" rel=\"nofollow\">CERT, MSC55-J.</a> - Use comments consistently and in a readable fashion</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-139",
      "type": "Code Smell",
      "summary": "Comments should not be located at the end of lines of code",
      "description": "<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable. Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\na = b + c;   <span class=\"code-comment\">// This is a trailing comment that could be very very <span class=\"code-object\">long</span></span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-comment\">// This very <span class=\"code-object\">long</span> comment is better placed before the line of code\r\n</span>a = b + c;\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1772",
      "type": "Code Smell",
      "summary": "Constants should come first in equality tests",
      "description": "<p>The result of the comparison is the same, regardless of whether the constant is on the left or right-hand side. But following this convention will help pinpoint the occasional error where <tt>=</tt> (assignment) is substituted for <tt>==</tt> (comparison). </p>\n\n<p>If the constant is on the right-hand side of the expression in such cases, the code will still compile and run - just not as expected. If the constant is on the left-hand side, the error will be caught at the first attempt to compile.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ( <span class=\"code-keyword\">var</span> == constant ) \r\n<span class=\"code-keyword\">if</span> ( pointer == NULL )\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ( constant == <span class=\"code-keyword\">var</span> )\r\n<span class=\"code-keyword\">if</span> ( NULL == pointer )\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1986",
      "type": "Code Smell",
      "summary": "Curly braces should not be used on interfaces without instance variables",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that curly braces are omitted from interfaces with no instance variables. </p>\n\n<p>Using curly braces in such a situation means that the reader of the code must pause to find the close curly brace before understanding that there are no variables. On the other hand, omitting the curly braces is a quick, clear indicator that there are no variables. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n@<span class=\"code-keyword\">interface</span> Foo : NSObject { <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n\r\n-(void) doSomething;\r\n\r\n@end\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n@<span class=\"code-keyword\">interface</span> Foo : NSObject\r\n\r\n-(void) doSomething;\r\n\r\n@end\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-2343",
      "type": "Code Smell",
      "summary": "Enumeration values should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all enumeration values match a provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With default provided regular expression:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">enum</span> SomeEnumeration {\r\n    some  <span class=\"code-comment\">// Non-Compliant\r\n</span>};\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">enum</span> SomeEnumeration {\r\n    SOME\r\n};\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-116",
      "type": "Code Smell",
      "summary": "Field names should comply with a naming convention",
      "description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field names match a provided regular expression.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression <tt>^<span class=\"error\">&#91;a-z&#93;</span><span class=\"error\">&#91;a-zA-Z0-9&#93;</span>*$</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass {\r\n  <span class=\"code-object\">int</span> my_field;\r\n};\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass {\r\n  <span class=\"code-object\">int</span> myField;\r\n};\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1578",
      "type": "Code Smell",
      "summary": "File names should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate effectively. For that reason, file names should conform to a defined standard. This rule raises an issue when the names of analyzed files don't match the provided regular expression.</p>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/P4IyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC09-CPP.</a> - Character encoding: Use subset of ASCII for safety</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/lQAl\" class=\"external-link\" rel=\"nofollow\">CERT, MSC09-C.</a> - Character encoding: Use subset of ASCII for safety</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-113",
      "type": "Code Smell",
      "summary": "Files should contain an empty newline at the end",
      "description": "<p>Some tools work better when files end with an empty line.<br/>\nThis rule simply generates an issue if it is missing.</p>\n\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n+class Test {\r\n+}\r\n\\ No newline at end of file\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1226",
      "type": "Bug",
      "summary": "Function parameters' initial values should not be ignored",
      "description": "<p>While it is technically correct to assign to parameters from within function bodies, doing so before the parameter value is read is likely a bug. Instead, initial values of parameters should be, if not treated as <tt>final</tt>, then at least read before reassignment.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> glob = 0;\r\nvoid function (<span class=\"code-object\">int</span> a) {\r\n  a = glob; <span class=\"code-comment\">// Noncompliant\r\n</span>  ...\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> glob = 0;\r\nvoid function (<span class=\"code-object\">int</span> a) {\r\n  <span class=\"code-object\">int</span> b = glob;\r\n  ...\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2012, 17.8 - A function parameter should not be modified</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3715",
      "type": "Code Smell",
      "summary": "GNU extensions should not be used",
      "description": "<p>Proprietary compiler extensions can be handy, but they commit you to always using that compiler. This rule raises an issue when the following GNU extensions are used:</p>\n\n<ul>\n\t<li>A array initializer without <tt>=</tt>, which has been obsolete since GCC 2.5</li>\n\t<li>A structure member initializer with a colon, which has been obsolete since GCC 2.5.</li>\n\t<li>Case ranges</li>\n\t<li>Ternary operator with omitted second operand</li>\n</ul>\n\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstruct S {\r\n  <span class=\"code-object\">int</span> f;\r\n};\r\n\r\nstruct S s[] = {\r\n  [0] { <span class=\"code-comment\">// Noncompliant\r\n</span>    f : 0 <span class=\"code-comment\">// Noncompliant\r\n</span>  }\r\n};\r\n\r\n<span class=\"code-object\">int</span> fun(<span class=\"code-object\">int</span> p) {\r\n  <span class=\"code-keyword\">switch</span> (p) {\r\n    <span class=\"code-keyword\">case</span> 0 ... 1: <span class=\"code-comment\">// Noncompliant\r\n</span>      do_the_thing();\r\n      <span class=\"code-keyword\">break</span>;\r\n    <span class=\"code-keyword\">case</span> 2:\r\n      <span class=\"code-comment\">//...\r\n</span>  }\r\n\r\n  <span class=\"code-keyword\">return</span> p ?: 0; <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstruct S {\r\n  <span class=\"code-object\">int</span> f;\r\n};\r\n\r\nstruct S s[] = {\r\n  [0] = {\r\n    .f = 0\r\n  }\r\n};\r\n\r\n<span class=\"code-object\">int</span> fun(<span class=\"code-object\">int</span> p) {\r\n  <span class=\"code-keyword\">switch</span> (p) {\r\n    <span class=\"code-keyword\">case</span> 0:\r\n    <span class=\"code-keyword\">case</span> 1:\r\n      do_the_thing();\r\n      <span class=\"code-keyword\">break</span>;\r\n    <span class=\"code-keyword\">case</span> 2:\r\n      <span class=\"code-comment\">//...\r\n</span>  }\r\n\r\n  <span class=\"code-keyword\">return</span> p ? p: 0;\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "gnu",
        "lock-in",
        "obsolete"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3222",
      "type": "Code Smell",
      "summary": "Label names should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate effectively. This rule checks that labels match a provided regular expression.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With default provided regular expression <tt><span class=\"error\">&#91;A-Z&#93;</span><span class=\"error\">&#91;A-Z0-9-_&#93;</span>++</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nexit:  <span class=\"code-comment\">// Noncompliant\r\n</span>  doCleanup();\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nEXIT:  <span class=\"code-comment\">// Compliant\r\n</span>  doCleanup();\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1131",
      "type": "Code Smell",
      "summary": "Lines should not end with trailing whitespaces",
      "description": "<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same file.</p>\n\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the opportunity to do so. </p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-117",
      "type": "Code Smell",
      "summary": "Local variable and function parameter names should comply with a naming convention",
      "description": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does not match the provided regular expression.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression <tt>^<span class=\"error\">&#91;a-z&#93;</span><span class=\"error\">&#91;a-zA-Z0-9&#93;</span>*$</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid doSomething(<span class=\"code-object\">int</span> my_param) {\r\n  <span class=\"code-object\">int</span> LOCAL;\r\n  ...\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid doSomething(<span class=\"code-object\">int</span> myParam) {\r\n  <span class=\"code-object\">int</span> local;\r\n  ...\r\n}\r\n</pre>\n</div></div>\n\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Loop counters and <tt>const</tt> variables are ignored by this rule.</p>\n",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1543",
      "type": "Code Smell",
      "summary": "Macro names should comply with a naming convention",
      "description": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all macro names match a provided regular expression.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define foo <span class=\"code-comment\">// Noncompliant</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#define FOO\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention",
        "preprocessor"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-100",
      "type": "Code Smell",
      "summary": "Methods and properties should be named in camel case",
      "description": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not method and property names are camel cased. To reduce noise, two consecutive upper case characters are allowed unless they form the whole name. So, <tt>MyXMethod</tt> is compliant, but <tt>XM</tt> on its own is not.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">public</span> <span class=\"code-object\">int</span> doSomething(){...}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">public</span> <span class=\"code-object\">int</span> DoSomething(){...}\r\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>The rule ignores members in types that are marked with <tt>ComImportAttribute</tt> or <tt>InterfaceTypeAttribute</tt>. <tt>extern</tt> methods are also excluded from the check. Furthermore, when <tt>'_'</tt> character is found in a name, the camel casing is not enforced.</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid My_method(){...} <span class=\"code-comment\">// valid\r\n</span>void My_method_(){...} <span class=\"code-comment\">// invalid, leading and trailing underscores are reported</span>\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3400",
      "type": "Code Smell",
      "summary": "Methods should not return constants",
      "description": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a method call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n\n<p>This rule raises an issue if on methods that contain only one  statement: the <tt>return</tt> of a constant value. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> getBestNumber() {\r\n  <span class=\"code-keyword\">return</span> 12;  <span class=\"code-comment\">// Noncompliant\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">static</span> <span class=\"code-object\">int</span> bestNumber = 12;\r\n</pre>\n</div></div><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p><tt>override</tt>, <tt>final</tt>, <tt>virtual</tt> and overriding functions are ignored.</p>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1659",
      "type": "Code Smell",
      "summary": "Multiple variables should not be declared on the same line",
      "description": "<p>Declaring multiple variable on one line is difficult to read.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass \r\n{\r\n  <span class=\"code-keyword\">private</span> <span class=\"code-object\">int</span> a, b; <span class=\"code-comment\">// Noncompliant\r\n</span>\r\n  <span class=\"code-keyword\">public</span> void Method()\r\n  {\r\n    <span class=\"code-object\">int</span> c, d; <span class=\"code-comment\">// Noncompliant\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nclass MyClass \r\n{\r\n  <span class=\"code-keyword\">private</span> <span class=\"code-object\">int</span> a;\r\n  <span class=\"code-keyword\">private</span> <span class=\"code-object\">int</span> b;\r\n\r\n  <span class=\"code-keyword\">public</span> void Method()\r\n  {\r\n    <span class=\"code-object\">int</span> c;\r\n    <span class=\"code-object\">int</span> d;\r\n  }\r\n}\r\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/7wHEAw\" class=\"external-link\" rel=\"nofollow\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/VgU\" class=\"external-link\" rel=\"nofollow\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/fAAhAQ\" class=\"external-link\" rel=\"nofollow\">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "convention",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-995",
      "type": "Code Smell",
      "summary": "Pointer and reference parameters should be \"const\" if the corresponding object is not modified",
      "description": "<p>This rule leads to greater precision in the definition of the function interface. The <tt>const</tt> qualification shall be applied to the object pointed to, not to the pointer, since it is the object itself that is being protected.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid myfunc (      <span class=\"code-object\">int</span> * param1,  <span class=\"code-comment\">// object is modified\r\n</span>             <span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span> * param2,\r\n                   <span class=\"code-object\">int</span> * param3, <span class=\"code-comment\">// Noncompliant\r\n</span>                   <span class=\"code-object\">int</span> * param4) <span class=\"code-comment\">// Noncompliant\r\n</span>{\r\n  *param1 = *param2 + *param3 + *param4;\r\n}\r\n\r\n<span class=\"code-object\">int</span> main (<span class=\"code-object\">int</span> argc,\r\n          <span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> * * argv) <span class=\"code-comment\">// Noncompliant\r\n</span>{\r\n  <span class=\"code-keyword\">return</span> argc;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid myfunc (      <span class=\"code-object\">int</span> * param1,  <span class=\"code-comment\">// object is modified\r\n</span>             <span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span> * param2,\r\n             <span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span> * param3,\r\n             <span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span> * param4)\r\n{\r\n  *param1 = *param2 + *param3 + *param4;\r\n}\r\n\r\n<span class=\"code-object\">int</span> main (<span class=\"code-object\">int</span> argc,\r\n          <span class=\"code-keyword\">const</span> <span class=\"code-object\">char</span> * <span class=\"code-keyword\">const</span> * argv)\r\n{\r\n  <span class=\"code-keyword\">return</span> argc;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 16.7 - A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object.</li>\n\t<li>MISRA C++:2008, 7-1-2 - A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified.</li>\n\t<li>MISRA C:2012, 8.13 - A pointer should point to a const-qualified type whenever possible</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/lwAhAQ\" class=\"external-link\" rel=\"nofollow\">CERT, DCL13-CPP.</a> - Declare function parameters that are pointers to values not changed by the function as const</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "bad-practice",
        "cert",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-3424",
      "type": "Code Smell",
      "summary": "Skipped unit tests should be either removed or fixed",
      "description": "<p>Skipped unit tests are considered dead code. Either they should be activated again (and updated) or they should be removed.</p>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-787",
      "type": "Code Smell",
      "summary": "Source code should only use /* ... */ style comments",
      "description": "<p>This excludes the use of <tt>//</tt> C99 style comments and C++ style comments, since these are not permitted in C90. Many compilers support the <tt>//</tt> style of comments as an extension to C90. The use of <tt>//</tt> in preprocessor directives (e.g. <tt>#define</tt>) can vary. Also the mixing of <tt>/* ... */</tt> and <tt>//</tt> is not consistent. This is more than a style issue, since different (pre C99) compilers may behave differently.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> main(<span class=\"code-object\">int</span> argc, <span class=\"code-object\">char</span>* argv[])\r\n{\r\n  <span class=\"code-comment\">// Do nothing - Noncompliant\r\n</span>  <span class=\"code-keyword\">return</span> 0;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> main(<span class=\"code-object\">int</span> argc, <span class=\"code-object\">char</span>* argv[])\r\n{\r\n  /* Do nothing - Compliant */\r\n  <span class=\"code-keyword\">return</span> 0;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 2.2 - Source code shall only use /* ... &#42;/ style comments.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "convention",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-950",
      "type": "Code Smell",
      "summary": "Structure and union types should be complete at the end of a translation unit",
      "description": "<p>A complete declaration of the structure or union shall be included within any translation unit that refers to that structure. See section 6.1.2.5 of ISO 9899:1990 <span class=\"error\">&#91;2&#93;</span> for a full description of incomplete types.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstruct tnode * pt; <span class=\"code-comment\">// tnode is incomplete</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nstruct tnode * pt; <span class=\"code-comment\">// tnode is incomplete at <span class=\"code-keyword\">this</span> point\r\n</span>struct tnode\r\n{\r\n  <span class=\"code-object\">int</span> count;\r\n  struct tnode * left;\r\n  struct tnode * right;\r\n}; <span class=\"code-comment\">// type tnode is now complete</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 18.1 - All structure and union types shall be complete at the end of a translation unit.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-920",
      "type": "Code Smell",
      "summary": "Switch statement conditions should not have essentially boolean type",
      "description": "<p>When there is only a single condition to test, you have the option of using either a <tt>switch</tt> statement or an <tt>if</tt>&#45;<tt>else if</tt>&#45;<tt>else</tt> statement. For a larger set of potential values, a <tt>switch</tt> can be easier to read, but when the condition being tested is essentially boolean, then an <tt>if</tt>/<tt>else</tt> statement should be used instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n_Bool b = p &gt; 0;\r\n<span class=\"code-keyword\">switch</span> (b) { <span class=\"code-comment\">// Noncompliant\r\n</span>...\r\n}\r\n<span class=\"code-keyword\">switch</span> (x == 0) { <span class=\"code-comment\">// Noncompliant\r\n</span>... \r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n_Bool b = p &gt; 0;\r\n<span class=\"code-keyword\">if</span> (b) {\r\n...\r\n} <span class=\"code-keyword\">else</span> {\r\n...\r\n}\r\n<span class=\"code-keyword\">if</span> (x == 0) {\r\n...\r\n} <span class=\"code-keyword\">else</span> {\r\n...\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 15.4 - A switch expression shall not represent a value that is effectively Boolean</li>\n\t<li>MISRA C++:2008, 6-4-7 - The condition of a switch statement shall not have bool type</li>\n\t<li>MISRA C:2012, 16.7 - A switch-expression shall not have essentially Boolean type</li>\n</ul>\n",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-105",
      "type": "Code Smell",
      "summary": "Tabulation characters should not be used",
      "description": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.<br/>\nSo the use of the tabulation character must be banned.</p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-883",
      "type": "Code Smell",
      "summary": "Tests of non-Boolean values against zero should be explicit",
      "description": "<p>Where a data value is to be tested against zero then the test should be made explicit. The exception to this rule is when data represents a Boolean value, even though in C this will in practice be an integer.</p>\n\n<p>This rule is in the interests of clarity, and makes clear the distinction between integers and logical values.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ( x ) <span class=\"code-comment\">// Noncompliant, unless x is effectively <span class=\"code-object\">Boolean</span> data</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-keyword\">if</span> ( x == 0) <span class=\"code-comment\">// Compliant solution</span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 13.2 - Tests of a value against zero should be made explicit, unless the operand is effectively Boolean.</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1705",
      "type": "Code Smell",
      "summary": "The prefix increment/decrement form should be used",
      "description": "<p>Postfix increment and decrement typically involves making a copy of the object being incremented or decremented, whereas its prefix form does not. Therefore the prefix form is usually the more efficient form, and should be preferred.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid myFunc(<span class=\"code-object\">int</span> lim)\r\n{\r\n  <span class=\"code-object\">int</span> i;\r\n  <span class=\"code-keyword\">for</span> (i = 0; i &lt; lim; i++)\r\n  {\r\n    <span class=\"code-comment\">// <span class=\"code-keyword\">do</span> something\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\nvoid myFunc(<span class=\"code-object\">int</span> lim)\r\n{\r\n  <span class=\"code-object\">int</span> i;\r\n  <span class=\"code-keyword\">for</span> (i = 0; i &lt; lim; ++i)\r\n  {\r\n    <span class=\"code-comment\">// <span class=\"code-keyword\">do</span> something\r\n</span>  }\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/TABi\" class=\"external-link\" rel=\"nofollow\">CERT, EXP18-CPP.</a> - Prefer the prefix forms of <tt>++</tt> and <tt>--</tt></li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "performance"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1707",
      "type": "Code Smell",
      "summary": "Track \"TODO\" and \"FIXME\" comments that do not contain a reference to a person",
      "description": "<p>TODO and FIXME comments are typically intended to be short-lived; they are placeholders and reminders that programmers leave for themselves. Unfortunately, even with the best of intentions, those comments are not always acted on and removed in a timely manner. Thus, they can become mysterious, lingering cruft in a code base, reducing both readability and understand-ability.</p>\n\n<p>This rule flags all FIXME and TODO comments that do not have an attribution matching the specified regular expression immediately after the FIXME or TODO. Ideally, such comments will also contain information about what needs to be fixed or done, but this rule does not enforce that.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>Using the default regular expression: <tt>[ ]*&#40;[ _a-zA-Z0-9@.]+&#41;</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-comment\">// TODO </span>\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-comment\">// TODO(ganncamp) per the business partners, more checks needed</span>\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1484",
      "type": "Code Smell",
      "summary": "Track instances of below-threshold comment line density",
      "description": "<p>An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.</p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1749",
      "type": "Code Smell",
      "summary": "Type specifiers should be listed in a standard order",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that type specifiers always appear in the following order:</p>\n<ol>\n\t<li><tt>typedef</tt></li>\n\t<li><tt>const</tt></li>\n\t<li>type name, spelling of built-in types with more than one type-specifier:\n\t<ol>\n\t\t<li>signedness - <tt>signed</tt> or <tt>unsigned</tt></li>\n\t\t<li>last single type-specifier or\n\t\t<ul>\n\t\t\t<li><tt>short int</tt></li>\n\t\t\t<li><tt>long int</tt></li>\n\t\t\t<li><tt>long long int</tt></li>\n\t\t\t<li><tt>long double</tt></li>\n\t\t</ul>\n\t\t</li>\n\t</ol>\n\t</li>\n</ol>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> typedef T;\r\n\r\n<span class=\"code-object\">double</span> <span class=\"code-object\">long</span> d;\r\n<span class=\"code-object\">char</span> unsigned ch;\r\n<span class=\"code-object\">long</span> signed <span class=\"code-object\">int</span> i;\r\n\r\n<span class=\"code-object\">int</span> <span class=\"code-keyword\">const</span> *p;\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\ntypedef <span class=\"code-object\">int</span> T;\r\n\r\n<span class=\"code-object\">long</span> <span class=\"code-object\">double</span> d;\r\nunsigned <span class=\"code-object\">char</span> ch;\r\nsigned <span class=\"code-object\">long</span> <span class=\"code-object\">int</span> i;\r\n\r\n<span class=\"code-keyword\">const</span> <span class=\"code-object\">int</span> *p; <span class=\"code-comment\">// or <span class=\"code-quote\">\"<span class=\"code-object\">int</span> * <span class=\"code-keyword\">const</span> p;\"</span></span>\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1227",
      "type": "Code Smell",
      "summary": "break statements should not be used except for switch cases",
      "description": "<p><tt>break;</tt> is an unstructured control flow statement which makes code harder to read.<br/>\nIdeally, every loop should have a single termination condition.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> i = 0;\r\n<span class=\"code-keyword\">while</span> (<span class=\"code-keyword\">true</span>)\r\n{\r\n  <span class=\"code-keyword\">if</span> (i == 10)\r\n  {\r\n    <span class=\"code-keyword\">break</span>;      <span class=\"code-comment\">// Non-Compliant\r\n</span>  }\r\n\r\n  Console.WriteLine(i);\r\n  i++;\r\n}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> i = 0;\r\n<span class=\"code-keyword\">while</span> (i != 10) <span class=\"code-comment\">// Compliant\r\n</span>{\r\n  Console.WriteLine(i);\r\n  i++;\r\n}\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-813",
      "type": "Code Smell",
      "summary": "typedefs that indicate size and signedness should be used in place of the basic types",
      "description": "<p>The basic numeric types <tt>char</tt>, <tt>int</tt>, <tt>short</tt>, <tt>long</tt>, <tt>float</tt>, <tt>double</tt>, and <tt>long double</tt> should not be used. Instead, specific-length typedefs should be. This rule helps to clarify the size of the storage, but does not guarantee portability because of the asymmetric behavior of integral promotion. </p>\n\n<p>Note that it is still important to understand the integer size of the implementation, and developers should be aware of the actual implementation of the typedefs under these definitions.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n<span class=\"code-object\">int</span> function(unsigned <span class=\"code-object\">short</span> a) <span class=\"code-comment\">// Noncompliant\r\n</span>{\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#include &lt;stdint.h&gt;\r\nint32_t function(uint16_t a) <span class=\"code-comment\">// Compliant\r\n</span>{\r\n  <span class=\"code-comment\">// ...\r\n</span>}\r\n</pre>\n</div></div>\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 6.3 - typedefs that indicate size and signedness should be used in place of the basic types</li>\n\t<li>MISRA C++:2008, 3-9-2 - typedefs that indicate size and signedness should be used in place of the basic numerical types</li>\n</ul>\n\n\n<h3><a name=\"SeeAlso\"></a>See Also</h3>\n<ul>\n\t<li>MISRA C++ 2008 Section 6.5.0 on integral promotion</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1914",
      "type": "Code Smell",
      "summary": "Track instances of the \"#error\" preprocessor directive being reached",
      "description": "<p>This rule creates a issue whenever an <tt>#error</tt> preprocessor directive is reached during the project's analysis. In most cases, this indicates that the preprocessor was badly configured. Some predefined macros or library include paths might be required to fix the configuration.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">\r\n#error This is an error\r\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": false,
      "defaultSeverity": "Info"
    }
  ]
}