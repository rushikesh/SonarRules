{
  "types": {
    "Code Smell": 36,
    "Vulnerability": 1,
    "Bug": 12
  },
  "standards": [{
      "name": "CWE",
      "count": 5
    },
    {
      "name": "OWASP",
      "count": 1
    },
    {
      "name": "MISRA",
      "count": 6
    },
    {
      "name": "CERT",
      "count": 9
    }
  ],
  "tags": [{
      "name": "convention",
      "count": 3
    },
    {
      "name": "unpredictable",
      "count": 2
    },
    {
      "name": "obsolete",
      "count": 4
    },
    {
      "name": "cert",
      "count": 9
    },
    {
      "name": "suspicious",
      "count": 6
    },
    {
      "name": "pitfall",
      "count": 3
    },
    {
      "name": "sql",
      "count": 9
    },
    {
      "name": "cwe",
      "count": 5
    },
    {
      "name": "performance",
      "count": 3
    },
    {
      "name": "brain-overload",
      "count": 5
    },
    {
      "name": "design",
      "count": 2
    },
    {
      "name": "misra",
      "count": 6
    },
    {
      "name": "bad-practice",
      "count": 1
    },
    {
      "name": "style",
      "count": 1
    },
    {
      "name": "unused",
      "count": 7
    },
    {
      "name": "confusing",
      "count": 1
    },
    {
      "name": "clumsy",
      "count": 1
    },
    {
      "name": "owasp-a3",
      "count": 1
    }
  ],
  "rules": [{
      "ruleKey": "RSPEC-1590",
      "type": "Bug",
      "summary": "\"DELETE\" and \"UPDATE\" statements should contain \"WHERE\" clauses",
      "description": "<p><tt>UPDATE</tt> and <tt>DELETE</tt> statements should contain <tt>WHERE</tt> clauses to keep the modification of records under control. Otherwise unexpected data loss could result.</p>",
      "standards": [],
      "tags": [
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Blocker"
    },
    {
      "ruleKey": "RSPEC-4094",
      "type": "Bug",
      "summary": "\"CASE\" input expressions should be invariant",
      "description": "<p>Under the covers, Simple <tt>CASE</tt> expressions are evaluated as searched <tt>CASE</tt> expressions. That is,</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CASE @foo\nWHEN 1 THEN 'a'\nWHEN 2 THEN 'b'\n</pre>\n</div></div>\n\n<p>is actually evaluated as</p>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CASE \nWHEN @foo = 1 THEN 'a'\nWHEN @foo = 2 THEN 'b'\n</pre>\n</div></div>\n\n<p>In most situations the difference is inconsequential, but when the input expression isn't fixed, for instance if <tt>RAND()</tt> is involved, it is likely to yield unexpected results. For that reason, it is better to evaluate the input expression once, assign it to a variable, and use the variable as the <tt>CASE</tt>'s input expression.</p>\n\n<p>This rule raises an issue when any of the following is used in a <tt>CASE</tt> input expression: <tt>RAND</tt>, <tt>NEWID</tt>, <tt>CRYPT_GEN_RANDOM</tt>.</p>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CASE CONVERT(SMALLINT, RAND()*@foo)  -- Noncompliant\nWHEN 1 THEN 'a'\nWHEN 2 THEN 'b'\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">DECLARE @bar SMALLINT = CONVERT(SMALLINT, RAND()*@foo) \nCASE @bar\nWHEN 1 THEN 'a'\nWHEN 2 THEN 'b'\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "unpredictable"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1745",
      "type": "Code Smell",
      "summary": "\"INSERT\" statements should explicitly list the columns to be set",
      "description": "<p>An <tt>INSERT</tt> statement that does not explicitly list the columns being inserted into, as well as the values being inserted, is dependent for correct functioning on the structure of the table not changing. Additionally, not having the explicit column list degrades the readability and understandability of the code. Therefore, <tt>INSERT</tt> statements should always contain an explicit column list.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">INSERT INTO PERSONS VALUES (1, 'DUPONT', 'Marcel')\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">INSERT INTO PERSONS (ID, LAST_NAME, FIRST_NAME) \nVALUES (1, 'DUPONT', 'Marcel')\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1523",
      "type": "Vulnerability",
      "summary": "Code should not be dynamically injected and executed",
      "description": "<p>Both <tt>EXECUTE( ... )</tt> and <tt>EXEC( ... )</tt> execute as a command the string passed as an argument. They are safe only if the argument is composed of constant character string expressions. But if the command string is dynamically built using external parameters, then it is considered very dangerous because executing a random string allows the execution of arbitrary code. If you really need to build a command string using external parameters, you should use <tt>EXEC sp_executesql</tt> instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CREATE PROCEDURE USER_BY_EMAIL(@email VARCHAR(255)) AS\nBEGIN\n  EXEC('USE AuthDB; SELECT id FROM user WHERE email = ''' + @email + ''' ;'); -- Noncompliant could inject code using @email\nEND\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CREATE PROCEDURE USER_BY_EMAIL(@email VARCHAR(255)) AS\nBEGIN\n  EXEC sp_executesql 'USE AuthDB; SELECT id FROM user WHERE email = @user_email;',\n                     '@user_email VARCHAR(255)',\n                      @user_email = @email;\nEND\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/95.html\" class=\"external-link\" rel=\"nofollow\">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</li>\n\t<li><a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\" class=\"external-link\" rel=\"nofollow\">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting (XSS)</li>\n</ul>\n",
      "standards": [
        "CWE",
        "OWASP"
      ],
      "tags": [
        "cwe",
        "owasp-a3"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-3972",
      "type": "Code Smell",
      "summary": "Conditionals should start on new lines",
      "description": "<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <tt>IF</tt> and its resulting <em>then</em> statement. However, when an <tt>IF</tt> is placed on the same line as the closing <tt>END</tt> from a preceding <tt>ELSE</tt> or <tt>ELSE IF</tt>, it is either an error - <tt>ELSE</tt> is missing - or the invitation to a future error as maintainers fail to understand that the two statements are unconnected.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF (condition1) BEGIN\n  EXEC something\nEND IF (condition2) BEGIN  -- Noncompliant\n  EXEC something\nEND\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF (condition1) BEGIN\n  EXEC something\nEND ELSE IF (condition2) BEGIN\n  EXEC something\nEND\n</pre>\n</div></div>\n<p>Or</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF (condition1) BEGIN\n  EXEC something\nEND\n\nIF (condition2) BEGIN\n  EXEC something\nEND\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-4078",
      "type": "Code Smell",
      "summary": "Size should be specified for \"varchar\" variables and parameters",
      "description": "<p>String data types (<tt>char</tt>, <tt>varchar</tt>, <tt>nchar</tt>, <tt>nvarchar</tt>) default to a size of 1 if no size is specified in the declaration. For <tt>char</tt> and <tt>nchar</tt> this is confusing at best, but it is most probably a mistake for <tt>varchar</tt> and <tt>nvarchar</tt>.</p>\n\n<p>This rule raises an issue when no size is specified for <tt>varchar</tt> or <tt>nvarchar</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">DECLARE @myStr varchar;  -- Noncompliant\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">DECLARE @myStr varchar(255);\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-4103",
      "type": "Bug",
      "summary": "The number of variables in a FETCH statement should match the number of columns in the cursor",
      "description": "<p>A <tt>FETCH</tt> statement fails when the number of variables does not match the number of columns selected in the CURSOR definition.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">DECLARE c1 cursor FOR SELECT FirstName, LastName FROM customer;\nOPEN c1;\nFETCH NEXT FROM c1 INTO @Name; -- Noncompliant\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">DECLARE c1 cursor FOR SELECT FirstName, LastName FROM customer;\nOPEN c1;\nFETCH NEXT FROM c1 INTO @FirstName, @LastName;\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-4108",
      "type": "Code Smell",
      "summary": "\"@@IDENTITY\" should not be used",
      "description": "<p><tt>@@IDENTITY</tt> returns the last identity column value created on a connection, regardless of the scope. That means it could return the last identity value you produced, or it could return a value generated by a user defined function or trigger, possibly one fired because of your insert. In order to access the last identity value created in your scope, use <tt>SCOPE_IDENTITY()</tt> instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">INSERT ...\n\nSET @id = @@IDENTITY  -- Noncompliant\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">INSERT ...\n\nSET @id = SCOPE_IDENTITY()\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "suspicious",
        "unpredictable"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-4154",
      "type": "Code Smell",
      "summary": "\"ANSI_NULLS\", \"ANSI_PADDING\" and \"CONCAT_NULL_YIELDS_NULL\" should not be configured",
      "description": "<p>Changing the configuration of database options <tt>ANSI_NULLS</tt>, <tt>ANSI_PADDING</tt> and <tt>CONCAT_NULL_YIELDS_NULL</tt> is deprecated. The future versions of SQL Server will only support the \"ON\" value, and the <tt>SET</tt> statement for those options will eventually be removed from the language.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SET ANSI_NULLS OFF -- Noncompliant\nSELECT column1 FROM table1 WHERE id = NULL\n\nSET ANSI_PADDING ON -- Noncompliant\nSET CONCAT_NULL_YIELDS_NULL ON -- Noncompliant\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT column1 FROM table1 WHERE id IS NULL\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1479",
      "type": "Code Smell",
      "summary": "\"CASE\" expressions should not have too many \"WHEN\" clauses",
      "description": "<p><tt>CASE</tt> expressions with large sets of <tt>WHEN</tt> clauses are difficult to understand and maintain, and should be refactored to include fewer <tt>WHEN</tt> clauses.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-4102",
      "type": "Code Smell",
      "summary": "\"CHECK\" or \"NOCHECK\" should be specified explicitly when constraints are activated",
      "description": "<p>When you add a new constraint to a table, (<tt>ALTER TABLE ... ADD CONSTRAINT ...</tt>), <tt>WITH CHECK</tt> is assumed by default, and existing data are automatically validated.</p>\n\n<p>But when you disable/enable an existing constraint, <tt>WITH NOCHECK</tt> is assumed by default, and existing data are no longer trusted. In this case you will face an integrity issue that prevents some rows from being updated, and a performance issue because the query optimizer cannot trust this constraint anymore. </p>\n\n<p>Of course, <tt>WITH CHECK</tt> is obviously preferred, but if <tt>NOCHECK</tt> behavior is desired, it should not be selected by omission, but specified explicitly because <tt>WITH NOCHECK</tt> has such a significant impact. By making <tt>NOCHECK</tt> explicit, the developer documents that this behavior has been selected on purpose.</p>\n\n<p>Note: You can list the existing constraints that are in an untrusted state using:<br/>\n<tt>SELECT * FROM sys.foreign_keys WHERE is_not_trusted = 1;</tt><br/>\n<tt>SELECT * FROM sys.check_constraints WHERE is_not_trusted = 1;</tt></p>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">-- Create a trusted constraint\nALTER TABLE users ADD CONSTRAINT max_age CHECK (age &lt; 200) ;\n\n-- Disable the constraint\nALTER TABLE users NOCHECK CONSTRAINT max_age;\n\n-- Enable the constraint\nALTER TABLE users CHECK CONSTRAINT max_age; -- Noncompliant, 'WITH NOCHECK' is the <span class=\"code-keyword\">default</span> mode, but is it really intentional?\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">-- Create a trusted constraint\nALTER TABLE users ADD CONSTRAINT max_age CHECK (age &lt; 200) ;\n\n-- Disable the constraint\nALTER TABLE users NOCHECK CONSTRAINT max_age;\n\n-- Enable the constraint\nALTER TABLE users WITH CHECK CHECK CONSTRAINT max_age;\n-- OR\nALTER TABLE users WITH NOCHECK CHECK CONSTRAINT max_age;\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-907",
      "type": "Code Smell",
      "summary": "\"GOTO\" statements should not be used",
      "description": "<p>A <tt>GOTO</tt> statement is an unstructured change in the control flow. They should be avoided and replaced by structured constructs.</p><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.4 - The goto statement shall not be used.</li>\n\t<li>MISRA C:2012, 15.1 - The goto statement should not be used</li>\n</ul>\n",
      "standards": [
        "MISRA"
      ],
      "tags": [
        "brain-overload",
        "misra"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1739",
      "type": "Code Smell",
      "summary": "\"LIKE\" clauses should not start with wildcard characters",
      "description": "<p>When the value of a <tt>LIKE</tt> clause starts with '%', '<span class=\"error\">&#91;...&#93;</span>' or '_', indexes on the searched column are ignored, and a full table scan is performed instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT FIRST_NAME, LAST_NAME FROM PERSONS\nWHERE LAST_NAME LIKE '%PONT'\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2527",
      "type": "Bug",
      "summary": "\"NULL\" should not be compared directly",
      "description": "<p>In a Zen-like manner, \"NULL\" is never equal to anything, even itself. Therefore comparisons using equality operators will always return <tt>False</tt>, even when the value actually <tt>IS NULL</tt>.</p>\n\n<p>For that reason, comparison operators should never be used to make comparisons with <tt>NULL</tt>; <tt>IS NULL</tt> and <tt>IS NOT NULL</tt> should be used instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">UPDATE books\nSET title = 'unknown'\nWHERE title = NULL -- Noncompliant \n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">UPDATE books\nSET title = 'unknown'\nWHERE title IS NULL\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3633",
      "type": "Bug",
      "summary": "\"WHERE\" clause conditions should not be contradictory",
      "description": "<p>Queries with contradictory <tt>WHERE</tt> clauses will always return empty result sets. This is clearly a bug.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT *\nFROM fruit\nWHERE type='apple' AND type='orange'  -- Noncompliant\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-3923",
      "type": "Bug",
      "summary": "All branches in a conditional structure should not have exactly the same implementation",
      "description": "<p>Having all branches in a <tt>CASE</tt>, <tt>IF</tt> or <tt>IIF</tt> chain with the same implementation is an error. Either a copy-paste error was made and something different should be executed, or there shouldn't be a <tt>CASE</tt>/<tt>IF</tt>/<tt>IIF</tt> chain at all. Note that this rule does not apply to <tt>IF</tt>/<tt>CASE</tt> chains without <tt>ELSE</tt> clauses.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF @x &lt; 25 -- Noncompliant\n  PRINT 'A'\nELSE IF @x &lt; 10\n  PRINT 'A'\nELSE\n  PRINT 'A'\n\nSELECT\n  CASE col1 -- Noncompliant\n    WHEN 1 THEN 'A'\n    WHEN 2 THEN 'A'\n    ELSE        'A'\n  END,\n  IIF(col1 &lt; 25, 'A', 'A') -- Noncompliant\n FROM table1\n</pre>\n</div></div>",
      "standards": [],
      "tags": [],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1066",
      "type": "Code Smell",
      "summary": "Collapsible \"if\" statements should be merged",
      "description": "<p>Merging collapsible <tt>if</tt> statements increases the code's readability.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF something\n  IF something_else\n    -- ...\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF something AND something_else\n  -- ...\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "clumsy"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1735",
      "type": "Code Smell",
      "summary": "Column names should be used in an \"ORDER BY\" clause",
      "description": "<p>Even though the <tt>ORDER BY</tt> clause supports using column numbers, doing so makes the code difficult to read and maintain. Therefore the use of column names is preferred.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT FIRST_NAME, LAST_NAME, REGION\nFROM PERSONS\nORDER BY 2, 1\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT FIRST_NAME, LAST_NAME, REGION\nFROM PERSONS\nORDER BY LAST_NAME, FIRST_NAME\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1499",
      "type": "Code Smell",
      "summary": "Columns to be read with a \"SELECT\" statement should be clearly defined",
      "description": "<p><tt>SELECT *</tt> should be avoided because it releases control of the returned columns and could therefore lead to errors and potentially to performance issues.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT *     -- Noncompliant\n       FROM persons \n       WHERE city = 'NEW YORK'\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT firstname, lastname \n       FROM persons \n       WHERE city = 'NEW YORK'\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "performance",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-4075",
      "type": "Code Smell",
      "summary": "Deprecated features should not be used",
      "description": "<p>Deprecated language features are those that have been retained temporarily for backward compatibility, but which will eventually be removed from the language. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated features should be added to the code, and all existing uses should be gradually removed.</p>\n\n<p>The following features are deprecated or (depending on your version) already removed from TSQL:</p>\n\n<table class='confluenceTable'><tbody>\n<tr>\n<th class='confluenceTh'>Instead of</th>\n<th class='confluenceTh'>Use</th>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>WRITETEXT</tt>, <tt>UPDATETEXT</tt>, <tt>READTEXT</tt></td>\n<td class='confluenceTd'><tt>VARCHAR</tt></td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>GROUP BY ALL</tt></td>\n<td class='confluenceTd'><tt>UNION</tt> or a derived table</td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>FASTFIRSTROW</tt></td>\n<td class='confluenceTd'><tt>FAST n</tt></td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>SETUSER</tt></td>\n<td class='confluenceTd'><tt>EXECUTE AS</tt></td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>PASSWORD</tt>, <tt>MEDIAPASSWORD</tt> in <tt>BACKUP</tt> or <tt>RESTORE</tt></td>\n<td class='confluenceTd'>use access control on the directory or <tt>WITH RESTRICTED_USER</tt> for <tt>RESTORE</tt></td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>DBCC DBREINDEX</tt></td>\n<td class='confluenceTd'><tt>ALTER INDEX REBUILD</tt></td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>DBCC INDEXDEFRAG</tt></td>\n<td class='confluenceTd'><tt>ALTER INDEX DEFRAG</tt></td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>DBCC SHOWCONTIG</tt></td>\n<td class='confluenceTd'><tt>sys.dm_db_index_physical_stats</tt></td>\n</tr>\n<tr>\n<td class='confluenceTd'>DBCC CONCURRENCYVIOLATION</td>\n<td class='confluenceTd'>no replacement</td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>SET ROWCOUNT</tt></td>\n<td class='confluenceTd'><tt>TOP<img class=\"emoticon\" src=\"https://jira-for-tooling.sonarsource.com/images/icons/emoticons/thumbs_down.png\" height=\"16\" width=\"16\" align=\"absmiddle\" alt=\"\" border=\"0\"/></tt></td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>SET REMOTE_PROC_TRANSACTIONS</tt></td>\n<td class='confluenceTd'>distributed queries that reference linked servers (<tt>sp_addlinkedserver</tt>)</td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>RAISERROR @Errno @ErrMsg</tt></td>\n<td class='confluenceTd'>the <tt>RAISERROR</tt> syntax using parentheses</td>\n</tr>\n<tr>\n<td class='confluenceTd'>DROP INDEX with two-part name</td>\n<td class='confluenceTd'>Move table (and database) to an <tt>ON</tt> clause</td>\n</tr>\n<tr>\n<td class='confluenceTd'>String literals as column aliases</td>\n<td class='confluenceTd'>Remove the quotes around the alias. Use square brackets if escaping is necessary</td>\n</tr>\n<tr>\n<td class='confluenceTd'>Numbered procedures</td>\n<td class='confluenceTd'>Replace with un-numbered procedures</td>\n</tr>\n<tr>\n<td class='confluenceTd'>System stored procedure</td>\n<td class='confluenceTd'>no replacement</td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>fn_virtualservernodes</tt></td>\n<td class='confluenceTd'><tt>sys.dm_os_cluster_nodes</tt></td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>fn_servershareddrives</tt></td>\n<td class='confluenceTd'><tt>sys.dm_io_cluster_shared_drives</tt></td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>GRANT / DENY / REVOKE ALL</tt></td>\n<td class='confluenceTd'>List the specific permissions </td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>TORN_PAGE_DETECTION</tt></td>\n<td class='confluenceTd'>checksum</td>\n</tr>\n<tr>\n<td class='confluenceTd'><tt>TAPE</tt></td>\n<td class='confluenceTd'><tt>DISK</tt> or <tt>URL</tt></td>\n</tr>\n<tr>\n<td class='confluenceTd'>Table hint without <tt>WITH</tt></td>\n<td class='confluenceTd'><tt>WITH(hint)</tt></td>\n</tr>\n</tbody></table>\n",
      "standards": [],
      "tags": [
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-4155",
      "type": "Code Smell",
      "summary": "Deprecated system tables and views should not be used",
      "description": "<p>Deprecated system tables and views are those that have been retained temporarily for backward compatibility, but which will eventually be removed from the language. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones.</p>\n\n<p>This rule raises an issue when system tables or views are used. Catalog tables and views should be used instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT name FROM syscolumns -- Noncompliant\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT name FROM sys.columns\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1542",
      "type": "Code Smell",
      "summary": "Function and procedure names should comply with a naming convention",
      "description": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CREATE PROCEDURE sp_PrintMagicNumber\nAS\nBEGIN\n  PRINT 42\nEND\nGO\n\nCREATE FUNCTION MagicNumber()\nRETURNS INT\nAS \nBEGIN \n  RETURN 42\nEND\nGO\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CREATE PROCEDURE usp_PrintMagicNumber\nAS\nBEGIN\n  PRINT 42\nEND\nGO\n\nCREATE FUNCTION fn_MagicNumber()\nRETURNS INT\nAS \nBEGIN \n  RETURN 42\nEND\nGO\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-107",
      "type": "Code Smell",
      "summary": "Functions and procedures should not have too many parameters",
      "description": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function or procedure is doing too many things.</p>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1764",
      "type": "Bug",
      "summary": "Identical expressions should not be used on both sides of a binary operator",
      "description": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n\n<p>This rule ignores operators <tt>+</tt> and <tt>*</tt>, and expressions: <tt>1=1</tt>, <tt>1&lt;&gt;1</tt> and <tt>1!=1</tt>.</p><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n\t<li>S1656 - Implements a check on <tt>=</tt>.</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1763",
      "type": "Bug",
      "summary": "Jump statements should not be followed by other statements",
      "description": "<p>Jump statements (<tt>BREAK</tt>, <tt>CONTINUE</tt>, <tt>RETURN</tt>, <tt>GOTO</tt>, and <tt>THROW</tt>), move control flow out of the current code block. Typically, any statements in a block that come after a jump are simply wasted keystrokes lying in wait to confuse the unwary. </p>\n\n<p>This rule detects statements that follow:</p>\n<ul>\n\t<li><tt>BREAK</tt></li>\n\t<li><tt>CONTINUE</tt></li>\n\t<li><tt>RETURN</tt></li>\n\t<li><tt>GOTO</tt></li>\n\t<li><tt>THROW</tt></li>\n</ul>\n\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CREATE PROCEDURE\n    AS\nBEGIN\n  ...\n  RETURN -- Noncompliant, remove following statements\n\n  PRINT 'End'\nEND\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CREATE PROCEDURE\n    AS\nBEGIN\n  ...\n  RETURN\nEND\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.1 - There shall be no unreachable code</li>\n\t<li>MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code</li>\n\t<li>MISRA C++:2008, 0-1-9 - There shall be no dead code</li>\n\t<li>MISRA C:2012, 2.1 - A project shall not contain unreachable code</li>\n\t<li>MISRA C:2012, 2.2 - There shall be no dead code</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/561.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-561</a> - Dead Code</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\" class=\"external-link\" rel=\"nofollow\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC07-CPP.</a> - Detect and remove dead code</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2681",
      "type": "Code Smell",
      "summary": "Multiline blocks should be enclosed in BEGIN...END blocks",
      "description": "<p><tt>BEGIN...END</tt> can be omitted from a one-line block, such as with an <tt>IF</tt> statement or <tt>WHILE</tt> loop, but doing so can be misleading and induce bugs. </p>\n\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the omission of <tt>BEGIN...END</tt> means the lines will be unconditionally executed once.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF (0=1)\n  EXEC firstActionInBlock;\n  EXEC secondAction;  -- Noncompliant; executed unconditionally\nEXEC thirdAction;\n\nIF (0=1) EXEC firstActionInBlock; EXEC secondAction;  -- Noncompliant; secondAction executed unconditionally\n\nIF (0=1) EXEC firstActionInBlock;  -- Noncompliant\n  EXEC secondAction;  -- Executed unconditionally\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF (0=1) BEGIN\n  EXEC firstActionInBlock;\n  EXEC secondAction;\nEND\nEXEC thirdAction;\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/483.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-483</a> - Incorrect Block Delimitation</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\" class=\"external-link\" rel=\"nofollow\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE"
      ],
      "tags": [
        "cert",
        "cwe"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-4196",
      "type": "Bug",
      "summary": "Output parameters should be assigned",
      "description": "<p>Marking a parameter for output means that callers will expect its value to be updated with a result from the execution of the procedure. Failing to update the parameter before the procedure returns is surely an error.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CREATE PROCEDURE greet\n  @Name varchar(20),\n  @Greeting varchar(25) OUTPUT  -- Noncompliant\nAS\n  DECLARE @Message VARCHAR(45)\n  SET @Message = N'Hello ' + RTRIM(@Name);\n  PRINT @Message\nGO\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CREATE PROCEDURE greet\n  @Name varchar(20),\n  @Greeting varchar(25) OUTPUT\nAS\n  SELECT @Greeting = N'Hello ' + RTRIM(@Name);\nGO\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "pitfall"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1631",
      "type": "Code Smell",
      "summary": "Queries should not join too many tables",
      "description": "<p>When you need access to data from multiple tables, it is more efficient, effective, and understandable to use pre-built views than to select the data from a large number of tables - effectively creating in-memory views - at runtime.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<p>With a maximum number of 3 joined tables:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME\nFROM PERSONS \n  INNER JOIN COUNTRIES ON COUNTRIES.ID = PERSON.COUNTRY_ID\n  INNER JOIN GENRES ON GENRES.ID = PERSONS.GENRE_ID\n  INNER JOIN PROFESSIONS ON PROFESSIONS.ID = PERSONS.PROFESSIONS_ID  -- Noncompliant; <span class=\"code-keyword\">this</span> is table #4\nWHERE COUNTRIES.CODE = 'US'\n\nSELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME\nFROM PERSONS, COUNTRIES, GENRES, PROFESSIONS -- Noncompliant\nWHERE COUNTRIES.CODE = 'US' AND COUNTRIES.ID = PERSON.COUNTRY_ID AND GENRES.ID = PERSONS.GENRE_ID AND PROFESSIONS.ID = PERSONS.PROFESSIONS_ID\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload",
        "performance",
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-4054",
      "type": "Bug",
      "summary": "Queries that use \"TOP\" should have an \"ORDER BY\"",
      "description": "<p>Using <tt>TOP</tt> in a <tt>SELECT</tt> without ordering the results from which the \"top\" results are chosen will return a seemingly random set of rows, and is surely a mistake.<br/>\nThe same random behavior also occurs when using <tt>TOP</tt> in a <tt>DELETE</tt>, <tt>INSERT</tt>, <tt>UPDATE</tt> and <tt>MERGE</tt>.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT TOP 10 -- Noncompliant selects 10 random rows\n  fname, lname, city\n  FROM people\n  WHERE city IS NOT NULL;\n\nDELETE TOP (10) -- Noncompliant deletes 10 random rows\n  FROM PurchaseOrder\n  WHERE DueDate &lt; '20020701';\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT TOP 10\n  fname, lname, city\n  FROM people\n  WHERE city IS NOT NULL\n  ORDER BY birthdate;\n\nDELETE\n  FROM PurchaseOrder\n  WHERE OrderID IN (\n    SELECT TOP 10\n      OrderID\n      FROM PurchaseOrder\n      WHERE DueDate &lt; '20020701'\n      ORDER BY DueDate ASC\n  );\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "sql"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1110",
      "type": "Code Smell",
      "summary": "Redundant pairs of parentheses should be removed",
      "description": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But redundant pairs of parentheses could be misleading, and should be removed. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">DECLARE @x INT = (@y / 2 + 1); -- Compliant even <span class=\"code-keyword\">if</span> the parentheses are ignored\nIF (@x &gt; 0) AND ((@x+@y &gt; 0)) -- Noncompliant\nBEGIN\n  -- ...\nEND\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">DECLARE @x INT = (@y / 2 + 1);\nIF (@x &gt; 0) AND (@x+@y &gt; 0)\nBEGIN\n  -- ...\nEND\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "confusing"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1862",
      "type": "Bug",
      "summary": "Related \"IF\"/\"ELSE IF\" statements and \"WHEN\" clauses in a \"CASE\" should not have the same condition",
      "description": "<p>A <tt>CASE</tt> and a chain of <tt>IF</tt>/<tt>ELSE IF</tt> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <tt>true</tt>.</p>\n\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF @x = 1\n  PRINT 'A'\nELSE IF @x = 2\n  PRINT 'B'\nELSE IF @x = 1 -- Noncompliant\n  PRINT 'C'\n\nSELECT\n  CASE col1\n    WHEN 1 \n      THEN 'A'\n    WHEN 2 \n      THEN 'B'\n    WHEN 1  -- Noncompliant\n      THEN 'C'\n    ELSE 'D'\n  END\nFROM table1\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF @x = 1\n  PRINT 'A'\nELSE IF @x = 2\n  PRINT 'B'\nELSE IF @x = 3\n  PRINT 'C'\n\nSELECT\n  CASE col1\n    WHEN 1 \n      THEN 'A'\n    WHEN 2 \n      THEN 'B'\n    WHEN 3 \n      THEN 'C'\n    ELSE 'D'\n  END\nFROM table1\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert",
        "pitfall",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1871",
      "type": "Code Smell",
      "summary": "Two branches in a conditional structure should not have exactly the same implementation",
      "description": "<p>Having two branches in an <tt>IF</tt>/<tt>ELSE IF</tt> chain with the same implementation is at best duplicate code, and at worst a coding error.<br/>\nIf the same logic is truly needed for both instances, then in an <tt>IF</tt> chain they should be combined.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF @SortOrder = 1\n  BEGIN\n    SELECT LastName, FirstName\n      FROM Employees\n      ORDER BY LastName\n  END\nELSE IF @SortOrder = 2\n  BEGIN\n    SELECT LastName, FirstName\n      FROM Employees\n      ORDER BY LastName -- Noncompliant\n  END\nELSE\n  BEGIN\n    SELECT LastName, FirstName\n      FROM Employees\n  END\nGO\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF @SortOrder = 1 OR @SortOrder = 2\n  BEGIN\n    SELECT LastName, FirstName\n    FROM Employees\n    ORDER BY LastName\n  END\nELSE\n  BEGIN\n    SELECT LastName, FirstName\n    FROM Employees\n  END\nGO\n\n-- ----\n--  OR\n-- ----\n\nIF @SortOrder = 1\n  BEGIN\n    SELECT LastName, FirstName\n    FROM Employees\n    ORDER BY LastName\n  END\nELSE IF @SortOrder = 2\n  BEGIN\n    SELECT LastName, FirstName\n    FROM Employees\n    ORDER BY FirstName\n  END\nELSE\n  BEGIN\n    SELECT LastName, FirstName\n    FROM Employees\n  END\nGO\n</pre>\n</div></div>\n\n<h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>Branches in an <tt>IF</tt>/<tt>ELSE IF</tt> chain with implementation that contains a single line of code are ignored.</p>",
      "standards": [],
      "tags": [
        "design",
        "suspicious"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1065",
      "type": "Code Smell",
      "summary": "Unused labels should be removed",
      "description": "<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.<br/>\nThis will improve maintainability as developers will not wonder what this label is used for.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">label: -- Noncompliant\n  PRINT 'hello world';\nGO\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">PRINT 'hello world';\nGO\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2012, 2.6 - A function should not contain unused label declarations</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1172",
      "type": "Code Smell",
      "summary": "Unused procedure and function parameters should be removed",
      "description": "<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CREATE PROCEDURE SalesByCustomer\n  @CustomerName nvarchar(50) -- Noncompliant\nAS\nSELECT c.customer_name, sum(ctr.amount) AS TotalAmount\n  FROM customers c, contracts ctr\nWHERE c.customer_id = ctr.customer_id\nGROUP BY c.customer_name\nORDER BY c.customer_name\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CREATE PROCEDURE SalesByCustomer\n  @CustomerName nvarchar(50)\nAS\nSELECT c.customer_name, sum(ctr.amount) AS TotalAmount\n  FROM customers c, contracts ctr\nWHERE c.customer_id = ctr.customer_id\n     AND c.customer_name = @CustomerName\nGROUP BY c.customer_name\nORDER BY c.customer_name\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions.</li>\n\t<li>MISRA C:2012, 2.7 - There should be no unused parameters in functions</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1656",
      "type": "Bug",
      "summary": "Variables should not be self-assigned",
      "description": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">DECLARE @a INT;\nDECLARE @b INT = 2;\nSET @a = @a; -- Noncompliant\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">DECLARE @a INT;\nDECLARE @b INT = 2;\nSET @a = @b;\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n</ul>\n",
      "standards": [
        "CERT"
      ],
      "tags": [
        "cert"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-4149",
      "type": "Code Smell",
      "summary": "Column references should not have more than two-parts",
      "description": "<p>Referencing a column by specifying the schema or the database is deprecated. It is retained temporarily for backward compatibility, but it will eventually be removed from the language. You should only use one part (<tt>column_name</tt>) or two part (<tt>table_name.column_name</tt>) references.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT dbo.table1.col1,       -- Noncompliant, three-part column reference\n       MY_DB.dbo.table1.col2  -- Noncompliant, four-part column reference\n       FROM MY_DB.dbo.table1;\n\nSELECT dbo.table1.name,       -- Noncompliant\n       dbo.table2.name        -- Noncompliant\n       FROM dbo.table1\n       JOIN dbo.table2\n         ON dbo.table2.id = dbo.table1.id; -- Noncompliant\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT col1,\n       col2\n       FROM MY_DB.dbo.table1;\n\nSELECT table1.name,\n       table2.name\n       FROM dbo.table1\n       JOIN dbo.table2\n         ON table2.id = table1.id;\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "obsolete"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1116",
      "type": "Code Smell",
      "summary": "Empty statements should be removed",
      "description": "<p>Empty statements, i.e. <tt>;</tt>, are usually introduced by mistake, for example because:</p>\n<ul>\n\t<li>It was meant to be replaced by an actual statement, but this was forgotten.</li>\n\t<li>There was a typo which lead the semicolon to be doubled, i.e. <tt>;;</tt>.</li>\n</ul>\n\n\n<h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.</li>\n\t<li>MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/7gCTAw\" class=\"external-link\" rel=\"nofollow\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while condition</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/i4FtAg\" class=\"external-link\" rel=\"nofollow\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while statement</li>\n</ul>\n",
      "standards": [
        "CERT",
        "MISRA"
      ],
      "tags": [
        "cert",
        "misra",
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-117",
      "type": "Code Smell",
      "summary": "Local variable and parameter names should comply with a naming convention",
      "description": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does not match the provided regular expression.</p><h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default regular expression <tt>@<span class=\"error\">&#91;a-zA-Z0-9_&#93;</span>*</tt>:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CREATE PROCEDURE proc1\n    @@var1 INT -- Noncompliant\nAS\nBEGIN\n    DECLARE @@var2 INT; -- Noncompliant\nEND\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-4109",
      "type": "Code Smell",
      "summary": "Triggers should not \"PRINT\", \"SELECT\", or \"FETCH\"",
      "description": "<p>There's almost no point in returning results from a trigger. Because there is generally no expectation that triggers will return anything, any such results are likely to be ignored nearly all the time. </p>\n\n<p>This rule raises an issue when <tt>PRINT</tt> is used inside a trigger, and when <tt>SELECT</tt>, or <tt>FETCH</tt> is used inside a trigger without the retrieved data subsequently being used inside the trigger itself.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">ALTER TRIGGER TRG_myTrigger\n...\n  PRINT @diagnostic_message -- Noncompliant\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1481",
      "type": "Code Smell",
      "summary": "Unused local variables should be removed",
      "description": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.</p>",
      "standards": [],
      "tags": [
        "unused"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Minor"
    },
    {
      "ruleKey": "RSPEC-1135",
      "type": "Code Smell",
      "summary": "Track uses of \"TODO\" tags",
      "description": "<p><tt>TODO</tt> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.<br/>\nSometimes the developer will not have the time or will simply forget to get back to that tag.<br/>\nThis rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">CREATE PROCEDURE doSomething\n\tAS\nBEGIN\n  ...\n  -- TODO something\n  ...\nEND\nGO\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/546.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-546</a> - Suspicious Comment</li>\n</ul>\n",
      "standards": [
        "CWE"
      ],
      "tags": [
        "cwe"
      ],
      "inDefaultProfile": true,
      "defaultSeverity": "Info"
    },
    {
      "ruleKey": "RSPEC-131",
      "type": "Code Smell",
      "summary": "\"CASE\" expressions should end with \"ELSE\" clauses",
      "description": "<p>The requirement for a final <tt>ELSE</tt> clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT\n  CASE category\n    WHEN 'A' THEN 21\n    WHEN 'B' THEN 33\nEND shipping_cost\nFROM product\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT\n  CASE category\n    WHEN 'A' THEN 21\n    WHEN 'B' THEN 33\n    ELSE 42\nEND shipping_cost\nFROM product\n</pre>\n</div></div><h2><a name=\"See\"></a>See</h2>\n<ul>\n\t<li>MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n\t<li>MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause</li>\n\t<li>MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n\t<li>MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause</li>\n\t<li>MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n\t<li>MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label</li>\n\t<li>MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement</li>\n\t<li><a href=\"http://cwe.mitre.org/data/definitions/478.html\" class=\"external-link\" rel=\"nofollow\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/YgE\" class=\"external-link\" rel=\"nofollow\">CERT, MSC01-C.</a> - Strive for logical completeness</li>\n\t<li><a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\" class=\"external-link\" rel=\"nofollow\">CERT, MSC01-CPP.</a> - Strive for logical completeness</li>\n</ul>\n",
      "standards": [
        "CERT",
        "CWE",
        "MISRA"
      ],
      "tags": [
        "cert",
        "cwe",
        "misra"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1192",
      "type": "Code Smell",
      "summary": "String literals should not be duplicated",
      "description": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.<br/>\nOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF @x='Yes'\n  SELECT ...\n    FROM ...\n    WHERE field='Yes'\n...\n...\nIF @x='Yes'\n  ...\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">DECLARE @Yes VARCHAR(3) = 'Yes'\nIF @x=@Yes\n  SELECT ...\n    FROM ...\n    WHERE field=@Yes\n...\n...\nIF @x=@Yes\n  ...\n</pre>\n</div></div><h2><a name=\"Exceptions\"></a>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",
      "standards": [],
      "tags": [
        "design"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Critical"
    },
    {
      "ruleKey": "RSPEC-1151",
      "type": "Code Smell",
      "summary": "\"WHEN\" clauses should not have too many lines of code",
      "description": "<p>As soon as a <tt>WHEN</tt> clause contains too much logic this highly decreases the readability of the overall expression. In such case, the content of the <tt>WHEN</tt> clause may be extracted into a dedicated function.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT CASE column1\n  WHEN 1 THEN\n    CASE column2\n      WHEN 'a' THEN -- Noncompliant, 7 lines till ELSE\n        'x'\n      ELSE\n        'y'\n      END\n  ELSE\n    42\n  END \nFROM table1;\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SELECT CASE\n  WHEN column1 = 1 AND column2 = 'a' THEN\n    'x'\n  WHEN column1 = 1 THEN\n    'y'\n  ELSE\n    42\n  END \nFROM table1;\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "brain-overload"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-4142",
      "type": "Code Smell",
      "summary": "Duplicate values should not be passed as arguments",
      "description": "<p>There are valid cases for passing a variable multiple times into the same function or procedure call, but usually doing so is a mistake, and something else was intended for one of the arguments.</p>\n\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SET @result = dbo.MyAdd(@val1, @val1) -- Noncompliant\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">SET @result = dbo.MyAdd(@val1, @val2)\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-103",
      "type": "Code Smell",
      "summary": "Lines should not be too long",
      "description": "<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>",
      "standards": [],
      "tags": [
        "convention"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-122",
      "type": "Code Smell",
      "summary": "Statements should be on separate lines",
      "description": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2><a name=\"NoncompliantCodeExample\"></a>Noncompliant Code Example</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF @x &gt; 0 SET @x = 0; IF @y &gt; 0 SET @y = 0; -- Noncompliant\n</pre>\n</div></div>\n\n<h2><a name=\"CompliantSolution\"></a>Compliant Solution</h2>\n<div class=\"code panel\" style=\"border-width: 1px;\"><div class=\"codeContent panelContent\">\n<pre class=\"code-java\">IF @x &gt; 0 SET @x = 0;\nIF @y &gt; 0 SET @y = 0;\n</pre>\n</div></div>",
      "standards": [],
      "tags": [
        "style"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-2260",
      "type": "Code Smell",
      "summary": "Track parsing failures",
      "description": "<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files that do not parse but also to easily find out why they do not parse.</p>",
      "standards": [],
      "tags": [
        "suspicious"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    },
    {
      "ruleKey": "RSPEC-1291",
      "type": "Code Smell",
      "summary": "Track uses of \"NOSONAR\" comments",
      "description": "<p>Any issue to quality rule can be deactivated with the <tt>NOSONAR</tt> marker. This marker is pretty useful to exclude false-positive results but it can also be used abusively to hide real quality flaws.</p>\n\n<p>This rule raises an issue when <tt>NOSONAR</tt> is used.</p>",
      "standards": [],
      "tags": [
        "bad-practice"
      ],
      "inDefaultProfile": false,
      "defaultSeverity": "Major"
    }
  ]
}