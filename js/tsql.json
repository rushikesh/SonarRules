{"types":{"Vulnerability":1,"Code Smell":41,"Bug":13,"Other":0},"rules":[{"summary":"Failed unit tests should be fixed","type":"Bug","defaultSeverity":"Major","description":"Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions."},{"summary":"Source files should not have any duplicated blocks","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as there is at least one block of duplicated code on this file","debt":"10min"},{"summary":"Skipped unit tests should be either removed or fixed","type":"Code Smell","defaultSeverity":"Major","description":"Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed."},{"summary":"Source files should have a sufficient density of comment lines","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message."},{"summary":"Lines should have sufficient coverage by tests","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold."},{"summary":"Branches should have sufficient coverage by tests","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold."},{"summary":"\"WHERE\" clause conditions should not be contradictory","type":"Bug","defaultSeverity":"Major","description":"<p>Queries with contradictory <code>WHERE</code> clauses will always return empty result sets. This is clearly a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT *\nFROM fruit\nWHERE type='apple' AND type='orange'  -- Noncompliant\n</pre>","debt":"15min"},{"summary":"Columns to be read with a \"SELECT\" statement should be clearly defined","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>SELECT *</code> should be avoided because it releases control of the returned columns and could therefore lead to errors and potentially to\nperformance issues.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT *     -- Noncompliant\n       FROM persons\n       WHERE city = 'NEW YORK'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT firstname, lastname\n       FROM persons\n       WHERE city = 'NEW YORK'\n</pre>","debt":"30min"},{"summary":"Track uses of \"TODO\" tags","type":"Code Smell","defaultSeverity":"Info","description":"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCREATE PROCEDURE doSomething\n\tAS\nBEGIN\n  ...\n  -- TODO something\n  ...\nEND\nGO\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>"},{"summary":"\"LIKE\" clauses should not start with wildcard characters","type":"Code Smell","defaultSeverity":"Major","description":"<p>When the value of a <code>LIKE</code> clause starts with '%', '[...]' or '_', indexes on the searched column are ignored, and a full table scan is\nperformed instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT FIRST_NAME, LAST_NAME FROM PERSONS\nWHERE LAST_NAME LIKE '%PONT'\n</pre>","debt":"30min"},{"summary":"Column names should be used in an \"ORDER BY\" clause","type":"Code Smell","defaultSeverity":"Major","description":"<p>Even though the <code>ORDER BY</code> clause supports using column numbers, doing so makes the code difficult to read and maintain. Therefore the\nuse of column names is preferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT FIRST_NAME, LAST_NAME, REGION\nFROM PERSONS\nORDER BY 2, 1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT FIRST_NAME, LAST_NAME, REGION\nFROM PERSONS\nORDER BY LAST_NAME, FIRST_NAME\n</pre>","debt":"10min"},{"summary":"Variables should not be self-assigned","type":"Bug","defaultSeverity":"Major","description":"<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDECLARE @a INT;\nDECLARE @b INT = 2;\nSET @a = @a; -- Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDECLARE @a INT;\nDECLARE @b INT = 2;\nSET @a = @b;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"3min"},{"summary":"\"GOTO\" statements should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>A <code>GOTO</code> statement is an unstructured change in the control flow. They should be avoided and replaced by structured constructs.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>\n  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>\n</ul>","debt":"10min"},{"summary":"Lines should not be too long","type":"Code Smell","defaultSeverity":"Major","description":"<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>","debt":"1min"},{"summary":"Unused procedure and function parameters should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCREATE PROCEDURE SalesByCustomer\n  @CustomerName nvarchar(50) -- Noncompliant\nAS\nSELECT c.customer_name, sum(ctr.amount) AS TotalAmount\n  FROM customers c, contracts ctr\nWHERE c.customer_id = ctr.customer_id\nGROUP BY c.customer_name\nORDER BY c.customer_name\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCREATE PROCEDURE SalesByCustomer\n  @CustomerName nvarchar(50)\nAS\nSELECT c.customer_name, sum(ctr.amount) AS TotalAmount\n  FROM customers c, contracts ctr\nWHERE c.customer_id = ctr.customer_id\n     AND c.customer_name = @CustomerName\nGROUP BY c.customer_name\nORDER BY c.customer_name\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"5min"},{"summary":"Track parsing failures","type":"Code Smell","defaultSeverity":"Major","description":"<p>When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it possible to track the number of files\nthat do not parse but also to easily find out why they do not parse.</p>","debt":"30min"},{"summary":"Functions and procedures should not have too many parameters","type":"Code Smell","defaultSeverity":"Major","description":"<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function or procedure is\ndoing too many things.</p>","debt":"20min"},{"summary":"Related \"IF\"/\"ELSE IF\" statements and \"WHEN\" clauses in a \"CASE\" should not have the same condition","type":"Bug","defaultSeverity":"Major","description":"<p>A <code>CASE</code> and a chain of <code>IF</code>/<code>ELSE IF</code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIF @x = 1\n  PRINT 'A'\nELSE IF @x = 2\n  PRINT 'B'\nELSE IF @x = 1 -- Noncompliant\n  PRINT 'C'\n\nSELECT\n  CASE col1\n    WHEN 1\n      THEN 'A'\n    WHEN 2\n      THEN 'B'\n    WHEN 1  -- Noncompliant\n      THEN 'C'\n    ELSE 'D'\n  END\nFROM table1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIF @x = 1\n  PRINT 'A'\nELSE IF @x = 2\n  PRINT 'B'\nELSE IF @x = 3\n  PRINT 'C'\n\nSELECT\n  CASE col1\n    WHEN 1\n      THEN 'A'\n    WHEN 2\n      THEN 'B'\n    WHEN 3\n      THEN 'C'\n    ELSE 'D'\n  END\nFROM table1\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"10min"},{"summary":"Function and procedure names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Major","description":"<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCREATE PROCEDURE sp_PrintMagicNumber\nAS\nBEGIN\n  PRINT 42\nEND\nGO\n\nCREATE FUNCTION MagicNumber()\nRETURNS INT\nAS\nBEGIN\n  RETURN 42\nEND\nGO\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCREATE PROCEDURE usp_PrintMagicNumber\nAS\nBEGIN\n  PRINT 42\nEND\nGO\n\nCREATE FUNCTION fn_MagicNumber()\nRETURNS INT\nAS\nBEGIN\n  RETURN 42\nEND\nGO\n</pre>","debt":"10min"},{"summary":"Unused labels should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlabel: -- Noncompliant\n  PRINT 'hello world';\nGO\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPRINT 'hello world';\nGO\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 2.6 - A function should not contain unused label declarations </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>","debt":"2min"},{"summary":"Collapsible \"if\" statements should be merged","type":"Code Smell","defaultSeverity":"Major","description":"<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIF something\n  IF something_else\n    -- ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIF something AND something_else\n  -- ...\n</pre>","debt":"5min"},{"summary":"Statements should be on separate lines","type":"Code Smell","defaultSeverity":"Major","description":"<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIF @x &gt; 0 SET @x = 0; IF @y &gt; 0 SET @y = 0; -- Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIF @x &gt; 0 SET @x = 0;\nIF @y &gt; 0 SET @y = 0;\n</pre>","debt":"1min"},{"summary":"All branches in a conditional structure should not have exactly the same implementation","type":"Bug","defaultSeverity":"Major","description":"<p>Having all branches in a <code>CASE</code>, <code>IF</code> or <code>IIF</code> chain with the same implementation is an error. Either a copy-paste\nerror was made and something different should be executed, or there shouldn't be a <code>CASE</code>/<code>IF</code>/<code>IIF</code> chain at all.\nNote that this rule does not apply to <code>IF</code>/<code>CASE</code> chains without <code>ELSE</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIF @x &lt; 25 -- Noncompliant\n  PRINT 'A'\nELSE IF @x &lt; 10\n  PRINT 'A'\nELSE\n  PRINT 'A'\n\nSELECT\n  CASE col1 -- Noncompliant\n    WHEN 1 THEN 'A'\n    WHEN 2 THEN 'A'\n    ELSE        'A'\n  END,\n  IIF(col1 &lt; 25, 'A', 'A') -- Noncompliant\n FROM table1\n</pre>","debt":"15min"},{"summary":"\"INSERT\" statements should explicitly list the columns to be set","type":"Code Smell","defaultSeverity":"Critical","description":"<p>An <code>INSERT</code> statement that does not explicitly list the columns being inserted into, as well as the values being inserted, is dependent\nfor correct functioning on the structure of the table not changing. Additionally, not having the explicit column list degrades the readability and\nunderstandability of the code. Therefore, <code>INSERT</code> statements should always contain an explicit column list.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nINSERT INTO PERSONS VALUES (1, 'DUPONT', 'Marcel')\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nINSERT INTO PERSONS (ID, LAST_NAME, FIRST_NAME)\nVALUES (1, 'DUPONT', 'Marcel')\n</pre>","debt":"10min"},{"summary":"Queries that use \"TOP\" should have an \"ORDER BY\"","type":"Bug","defaultSeverity":"Major","description":"<p>Using <code>TOP</code> in a <code>SELECT</code> without ordering the results from which the \"top\" results are chosen will return a seemingly random\nset of rows, and is surely a mistake.</p>\n<p>The same random behavior also occurs when using <code>TOP</code> in a <code>DELETE</code>, <code>INSERT</code>, <code>UPDATE</code> and\n<code>MERGE</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT TOP 10 -- Noncompliant selects 10 random rows\n  fname, lname, city\n  FROM people\n  WHERE city IS NOT NULL;\n\nDELETE TOP (10) -- Noncompliant deletes 10 random rows\n  FROM PurchaseOrder\n  WHERE DueDate &lt; '20020701';\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT TOP 10\n  fname, lname, city\n  FROM people\n  WHERE city IS NOT NULL\n  ORDER BY birthdate;\n\nDELETE\n  FROM PurchaseOrder\n  WHERE OrderID IN (\n    SELECT TOP 10\n      OrderID\n      FROM PurchaseOrder\n      WHERE DueDate &lt; '20020701'\n      ORDER BY DueDate ASC\n  );\n</pre>","debt":"5min"},{"summary":"\"CASE\" input expressions should be invariant","type":"Bug","defaultSeverity":"Critical","description":"<p>Under the covers, Simple <code>CASE</code> expressions are evaluated as searched <code>CASE</code> expressions. That is,</p>\n<pre>\nCASE @foo\nWHEN 1 THEN 'a'\nWHEN 2 THEN 'b'\n</pre>\n<p>is actually evaluated as</p>\n<pre>\nCASE\nWHEN @foo = 1 THEN 'a'\nWHEN @foo = 2 THEN 'b'\n</pre>\n<p>In most situations the difference is inconsequential, but when the input expression isn't fixed, for instance if <code>RAND()</code> is involved,\nit is likely to yield unexpected results. For that reason, it is better to evaluate the input expression once, assign it to a variable, and use the\nvariable as the <code>CASE</code>'s input expression.</p>\n<p>This rule raises an issue when any of the following is used in a <code>CASE</code> input expression: <code>RAND</code>, <code>NEWID</code>,\n<code>CRYPT_GEN_RANDOM</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCASE CONVERT(SMALLINT, RAND()*@foo)  -- Noncompliant\nWHEN 1 THEN 'a'\nWHEN 2 THEN 'b'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDECLARE @bar SMALLINT = CONVERT(SMALLINT, RAND()*@foo)\nCASE @bar\nWHEN 1 THEN 'a'\nWHEN 2 THEN 'b'\n</pre>","debt":"5min"},{"summary":"Local variable and parameter names should comply with a naming convention","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>@[a-zA-Z0-9_]*</code>:</p>\n<pre>\nCREATE PROCEDURE proc1\n    @@var1 INT -- Noncompliant\nAS\nBEGIN\n    DECLARE @@var2 INT; -- Noncompliant\nEND\n</pre>","debt":"2min"},{"summary":"Column references should not have more than two-parts","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Referencing a column by specifying the schema or the database is deprecated. It is retained temporarily for backward compatibility, but it will\neventually be removed from the language. You should only use one part (<code>column_name</code>) or two part (<code>table_name.column_name</code>)\nreferences.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT dbo.table1.col1,       -- Noncompliant, three-part column reference\n       MY_DB.dbo.table1.col2  -- Noncompliant, four-part column reference\n       FROM MY_DB.dbo.table1;\n\nSELECT dbo.table1.name,       -- Noncompliant\n       dbo.table2.name        -- Noncompliant\n       FROM dbo.table1\n       JOIN dbo.table2\n         ON dbo.table2.id = dbo.table1.id; -- Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT col1,\n       col2\n       FROM MY_DB.dbo.table1;\n\nSELECT table1.name,\n       table2.name\n       FROM dbo.table1\n       JOIN dbo.table2\n         ON table2.id = table1.id;\n</pre>","debt":"1min"},{"summary":"Queries should not join too many tables","type":"Code Smell","defaultSeverity":"Major","description":"<p>When you need access to data from multiple tables, it is more efficient, effective, and understandable to use pre-built views than to select the\ndata from a large number of tables - effectively creating in-memory views - at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 3 joined tables:</p>\n<pre>\nSELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME\nFROM PERSONS\n  INNER JOIN COUNTRIES ON COUNTRIES.ID = PERSON.COUNTRY_ID\n  INNER JOIN GENRES ON GENRES.ID = PERSONS.GENRE_ID\n  INNER JOIN PROFESSIONS ON PROFESSIONS.ID = PERSONS.PROFESSIONS_ID  -- Noncompliant; this is table #4\nWHERE COUNTRIES.CODE = 'US'\n\nSELECT PERSONS.NAME, COUNTRIES.NAME, GENRES.NAME, PROFESSIONS.NAME\nFROM PERSONS, COUNTRIES, GENRES, PROFESSIONS -- Noncompliant\nWHERE COUNTRIES.CODE = 'US' AND COUNTRIES.ID = PERSON.COUNTRY_ID AND GENRES.ID = PERSONS.GENRE_ID AND PROFESSIONS.ID = PERSONS.PROFESSIONS_ID\n</pre>","debt":"30min"},{"summary":"Two branches in a conditional structure should not have exactly the same implementation","type":"Code Smell","defaultSeverity":"Major","description":"<p>Having two branches in an <code>IF</code>/<code>ELSE IF</code> chain with the same implementation is at best duplicate code, and at worst a coding\nerror.</p>\n<p>If the same logic is truly needed for both instances, then in an <code>IF</code> chain they should be combined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIF @SortOrder = 1\n  BEGIN\n    SELECT LastName, FirstName\n      FROM Employees\n      ORDER BY LastName\n  END\nELSE IF @SortOrder = 2\n  BEGIN\n    SELECT LastName, FirstName\n      FROM Employees\n      ORDER BY LastName -- Noncompliant\n  END\nELSE\n  BEGIN\n    SELECT LastName, FirstName\n      FROM Employees\n  END\nGO\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIF @SortOrder = 1 OR @SortOrder = 2\n  BEGIN\n    SELECT LastName, FirstName\n    FROM Employees\n    ORDER BY LastName\n  END\nELSE\n  BEGIN\n    SELECT LastName, FirstName\n    FROM Employees\n  END\nGO\n\n-- ----\n--  OR\n-- ----\n\nIF @SortOrder = 1\n  BEGIN\n    SELECT LastName, FirstName\n    FROM Employees\n    ORDER BY LastName\n  END\nELSE IF @SortOrder = 2\n  BEGIN\n    SELECT LastName, FirstName\n    FROM Employees\n    ORDER BY FirstName\n  END\nELSE\n  BEGIN\n    SELECT LastName, FirstName\n    FROM Employees\n  END\nGO\n</pre>\n<h2>Exceptions</h2>\n<p>Branches in an <code>IF</code>/<code>ELSE IF</code> chain with implementation that contains a single line of code are ignored.</p>","debt":"10min"},{"summary":"Conditionals should start on new lines","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>IF</code> and its\nresulting <em>then</em> statement. However, when an <code>IF</code> is placed on the same line as the closing <code>END</code> from a preceding\n<code>ELSE</code> or <code>ELSE IF</code>, it is either an error - <code>ELSE</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIF (condition1) BEGIN\n  EXEC something\nEND IF (condition2) BEGIN  -- Noncompliant\n  EXEC something\nEND\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIF (condition1) BEGIN\n  EXEC something\nEND ELSE IF (condition2) BEGIN\n  EXEC something\nEND\n</pre>\n<p>Or</p>\n<pre>\nIF (condition1) BEGIN\n  EXEC something\nEND\n\nIF (condition2) BEGIN\n  EXEC something\nEND\n</pre>","debt":"10min"},{"summary":"Redundant pairs of parentheses should be removed","type":"Code Smell","defaultSeverity":"Major","description":"<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDECLARE @x INT = (@y / 2 + 1); -- Compliant even if the parenthesis are ignored\nIF (@x &gt; 0) AND ((@x+@y &gt; 0)) -- Noncompliant\nBEGIN\n  -- ...\nEND\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDECLARE @x INT = (@y / 2 + 1);\nIF (@x &gt; 0) AND (@x+@y &gt; 0)\nBEGIN\n  -- ...\nEND\n</pre>","debt":"1min"},{"summary":"\"CASE\" expressions should end with \"ELSE\" clauses","type":"Code Smell","defaultSeverity":"Critical","description":"<p>The requirement for a final <code>ELSE</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT\n  CASE category\n    WHEN 'A' THEN 21\n    WHEN 'B' THEN 33\nEND shipping_cost\nFROM product\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT\n  CASE category\n    WHEN 'A' THEN 21\n    WHEN 'B' THEN 33\n    ELSE 42\nEND shipping_cost\nFROM product\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n</ul>","debt":"5min"},{"summary":"The number of variables in a FETCH statement should match the number of columns in the cursor","type":"Bug","defaultSeverity":"Critical","description":"<p>A <code>FETCH</code> statement fails when the number of variables does not match the number of columns selected in the CURSOR definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDECLARE c1 cursor FOR SELECT FirstName, LastName FROM customer;\nOPEN c1;\nFETCH NEXT FROM c1 INTO @Name; -- Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDECLARE c1 cursor FOR SELECT FirstName, LastName FROM customer;\nOPEN c1;\nFETCH NEXT FROM c1 INTO @FirstName, @LastName;\n</pre>","debt":"10min"},{"summary":"Multiline blocks should be enclosed in BEGIN...END blocks","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>BEGIN...END</code> can be omitted from a one-line block, such as with an <code>IF</code> statement or <code>WHILE</code> loop, but doing so\ncan be misleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of <code>BEGIN...END</code> means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nIF (0=1)\n  EXEC firstActionInBlock;\n  EXEC secondAction;  -- Noncompliant; executed unconditionally\nEXEC thirdAction;\n\nIF (0=1) EXEC firstActionInBlock; EXEC secondAction;  -- Noncompliant; secondAction executed unconditionally\n\nIF (0=1) EXEC firstActionInBlock;  -- Noncompliant\n  EXEC secondAction;  -- Executed unconditionally\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nIF (0=1) BEGIN\n  EXEC firstActionInBlock;\n  EXEC secondAction;\nEND\nEXEC thirdAction;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>","debt":"5min"},{"summary":"\"CHECK\" or \"NOCHECK\" should be specified explicitly when constraints are activated","type":"Code Smell","defaultSeverity":"Major","description":"<p>When you add a new constraint to a table, (<code>ALTER TABLE ... ADD CONSTRAINT ...</code>), <code>WITH CHECK</code> is assumed by default, and\nexisting data are automatically validated.</p>\n<p>But when you disable/enable an existing constraint, <code>WITH NOCHECK</code> is assumed by default, and existing data are no longer trusted. In\nthis case you will face an integrity issue that prevents some rows from being updated, and a performance issue because the query optimizer cannot\ntrust this constraint anymore. </p>\n<p>Of course, <code>WITH CHECK</code> is obviously preferred, but if <code>NOCHECK</code> behavior is desired, it should not be selected by omission,\nbut specified explicitly because <code>WITH NOCHECK</code> has such a significant impact. By making <code>NOCHECK</code> explicit, the developer\ndocuments that this behavior has been selected on purpose.</p>\n<p>Note: You can list the existing constraints that are in an untrusted state using:</p>\n<p><code>SELECT * FROM sys.foreign_keys WHERE is_not_trusted = 1;</code></p>\n<p><code>SELECT * FROM sys.check_constraints WHERE is_not_trusted = 1;</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n-- Create a trusted constraint\nALTER TABLE users ADD CONSTRAINT max_age CHECK (age &lt; 200) ;\n\n-- Disable the constraint\nALTER TABLE users NOCHECK CONSTRAINT max_age;\n\n-- Enable the constraint\nALTER TABLE users CHECK CONSTRAINT max_age; -- Noncompliant, 'WITH NOCHECK' is the default mode, but is it really intentional?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n-- Create a trusted constraint\nALTER TABLE users ADD CONSTRAINT max_age CHECK (age &lt; 200) ;\n\n-- Disable the constraint\nALTER TABLE users NOCHECK CONSTRAINT max_age;\n\n-- Enable the constraint\nALTER TABLE users WITH CHECK CHECK CONSTRAINT max_age;\n-- OR\nALTER TABLE users WITH NOCHECK CHECK CONSTRAINT max_age;\n</pre>","debt":"5min"},{"summary":"Track uses of \"NOSONAR\" comments","type":"Code Smell","defaultSeverity":"Major","description":"<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>","debt":"1min"},{"summary":"Triggers should not \"PRINT\", \"SELECT\", or \"FETCH\"","type":"Code Smell","defaultSeverity":"Minor","description":"<p>There's almost no point in returning results from a trigger. Because there is generally no expectation that triggers will return anything, any such\nresults are likely to be ignored nearly all the time. </p>\n<p>This rule raises an issue when <code>PRINT</code> is used inside a trigger, and when <code>SELECT</code>, or <code>FETCH</code> is used inside a\ntrigger without the retrieved data subsequently being used inside the trigger itself.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nALTER TRIGGER TRG_myTrigger\n...\n  PRINT @diagnostic_message -- Noncompliant\n</pre>","debt":"15min"},{"summary":"\"NULL\" should not be compared directly","type":"Bug","defaultSeverity":"Major","description":"<p>In a Zen-like manner, \"NULL\" is never equal to anything, even itself. Therefore comparisons using equality operators will always return\n<code>False</code>, even when the value actually <code>IS NULL</code>.</p>\n<p>For that reason, comparison operators should never be used to make comparisons with <code>NULL</code>; <code>IS NULL</code> and <code>IS NOT\nNULL</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nUPDATE books\nSET title = 'unknown'\nWHERE title = NULL -- Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nUPDATE books\nSET title = 'unknown'\nWHERE title IS NULL\n</pre>","debt":"20min"},{"summary":"\"@@IDENTITY\" should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>@@IDENTITY</code> returns the last identity column value created on a connection, regardless of the scope. That means it could return the\nlast identity value you produced, or it could return a value generated by a user defined function or trigger, possibly one fired because of your\ninsert. In order to access the last identity value created in your scope, use <code>SCOPE_IDENTITY()</code> instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nINSERT ...\n\nSET @id = @@IDENTITY  -- Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nINSERT ...\n\nSET @id = SCOPE_IDENTITY()\n</pre>","debt":"5min"},{"summary":"\"CASE\" expressions should not have too many \"WHEN\" clauses","type":"Code Smell","defaultSeverity":"Major","description":"<p><code>CASE</code> expressions with large sets of <code>WHEN</code> clauses are difficult to understand and maintain, and should be refactored to\ninclude fewer <code>WHEN</code> clauses.</p>","debt":"30min"},{"summary":"Empty statements should be removed","type":"Code Smell","defaultSeverity":"Minor","description":"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7gCTAw\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4FtAg\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>","debt":"2min"},{"summary":"\"WHEN\" clauses should not have too many lines of code","type":"Code Smell","defaultSeverity":"Major","description":"<p>As soon as a <code>WHEN</code> clause contains too much logic this highly decreases the readability of the overall expression. In such case, the\ncontent of the <code>WHEN</code> clause may be extracted into a dedicated function.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nSELECT CASE column1\n  WHEN 1 THEN\n    CASE column2\n      WHEN 'a' THEN -- Noncompliant, 7 lines till ELSE\n        'x'\n      ELSE\n        'y'\n      END\n  ELSE\n    42\n  END\nFROM table1;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT CASE\n  WHEN column1 = 1 AND column2 = 'a' THEN\n    'x'\n  WHEN column1 = 1 THEN\n    'y'\n  ELSE\n    42\n  END\nFROM table1;\n</pre>","debt":"5min"},{"summary":"\"DELETE\" and \"UPDATE\" statements should contain \"WHERE\" clauses","type":"Bug","defaultSeverity":"Blocker","description":"<p><code>UPDATE</code> and <code>DELETE</code> statements should contain <code>WHERE</code> clauses to keep the modification of records under control.\nOtherwise unexpected data loss could result.</p>","debt":"30min"},{"summary":"String literals should not be duplicated","type":"Code Smell","defaultSeverity":"Critical","description":"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nIF @x='Yes'\n  SELECT ...\n    FROM ...\n    WHERE field='Yes'\n...\n...\nIF @x='Yes'\n  ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDECLARE @Yes VARCHAR(3) = 'Yes'\nIF @x=@Yes\n  SELECT ...\n    FROM ...\n    WHERE field=@Yes\n...\n...\nIF @x=@Yes\n  ...\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>","debt":"2min"},{"summary":"Duplicate values should not be passed as arguments","type":"Code Smell","defaultSeverity":"Major","description":"<p>There are valid cases for passing a variable multiple times into the same function or procedure call, but usually doing so is a mistake, and\nsomething else was intended for one of the arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET @result = dbo.MyAdd(@val1, @val1) -- Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSET @result = dbo.MyAdd(@val1, @val2)\n</pre>","debt":"5min"},{"summary":"Identical expressions should not be used on both sides of a binary operator","type":"Bug","defaultSeverity":"Major","description":"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores operators <code>+</code> and <code>*</code>, and expressions: <code>1=1</code>, <code>1&lt;&gt;1</code> and\n<code>1!=1</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href='/coding_rules#rule_key=tsql%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>","debt":"2min"},{"summary":"Jump statements should not be followed by other statements","type":"Bug","defaultSeverity":"Major","description":"<p>Jump statements (<code>BREAK</code>, <code>CONTINUE</code>, <code>RETURN</code>, <code>GOTO</code>, and <code>THROW</code>), move control flow out\nof the current code block. Typically, any statements in a block that come after a jump are simply wasted keystrokes lying in wait to confuse the\nunwary. </p>\n<p>This rule detects statements that follow:</p>\n<ul>\n  <li> <code>BREAK</code> </li>\n  <li> <code>CONTINUE</code> </li>\n  <li> <code>RETURN</code> </li>\n  <li> <code>GOTO</code> </li>\n  <li> <code>THROW</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCREATE PROCEDURE\n    AS\nBEGIN\n  ...\n  RETURN -- Noncompliant, remove following statements\n\n  PRINT 'End'\nEND\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCREATE PROCEDURE\n    AS\nBEGIN\n  ...\n  RETURN\nEND\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/561.html\">MITRE, CWE-561</a> - Dead Code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>","debt":"5min"},{"summary":"Deprecated system tables and views should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>Deprecated system tables and views are those that have been retained temporarily for backward compatibility, but which will eventually be removed\nfrom the language. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones.</p>\n<p>This rule raises an issue when system tables or views are used. Catalog tables and views should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSELECT name FROM syscolumns -- Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT name FROM sys.columns\n</pre>","debt":"10min"},{"summary":"Size should be specified for \"varchar\" variables and parameters","type":"Code Smell","defaultSeverity":"Critical","description":"<p>String data types (<code>char</code>, <code>varchar</code>, <code>nchar</code>, <code>nvarchar</code>) default to a size of 1 if no size is\nspecified in the declaration. For <code>char</code> and <code>nchar</code> this is confusing at best, but it is most probably a mistake for\n<code>varchar</code> and <code>nvarchar</code>.</p>\n<p>This rule raises an issue when no size is specified for <code>varchar</code> or <code>nvarchar</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDECLARE @myStr varchar;  -- Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDECLARE @myStr varchar(255);\n</pre>","debt":"5min"},{"summary":"Code should not be dynamically injected and executed","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>Both <code>EXECUTE( ... )</code> and <code>EXEC( ... )</code> execute as a command the string passed as an argument. They are safe only if the\nargument is composed of constant character string expressions. But if the command string is dynamically built using external parameters, then it is\nconsidered very dangerous because executing a random string allows the execution of arbitrary code. If you really need to build a command string using\nexternal parameters, you should use <code>EXEC sp_executesql</code> instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCREATE PROCEDURE USER_BY_EMAIL(@email VARCHAR(255)) AS\nBEGIN\n  EXEC('USE AuthDB; SELECT id FROM user WHERE email = ''' + @email + ''' ;'); -- Noncompliant could inject code using @email\nEND\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCREATE PROCEDURE USER_BY_EMAIL(@email VARCHAR(255)) AS\nBEGIN\n  EXEC sp_executesql 'USE AuthDB; SELECT id FROM user WHERE email = @user_email;',\n                     '@user_email VARCHAR(255)',\n                      @user_email = @email;\nEND\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/95.html\">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically\n  Evaluated Code ('Eval Injection') </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)\">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting\n  (XSS) </li>\n</ul>","debt":"30min"},{"summary":"Unused local variables should be removed","type":"Code Smell","defaultSeverity":"Minor","description":"<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>","debt":"5min"},{"summary":"\"ANSI_NULLS\", \"ANSI_PADDING\" and \"CONCAT_NULL_YIELDS_NULL\" should not be configured","type":"Code Smell","defaultSeverity":"Major","description":"<p>Changing the configuration of database options <code>ANSI_NULLS</code>, <code>ANSI_PADDING</code> and <code>CONCAT_NULL_YIELDS_NULL</code> is\ndeprecated. The future versions of SQL Server will only support the \"ON\" value, and the <code>SET</code> statement for those options will eventually\nbe removed from the language.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET ANSI_NULLS OFF -- Noncompliant\nSELECT column1 FROM table1 WHERE id = NULL\n\nSET ANSI_PADDING ON -- Noncompliant\nSET CONCAT_NULL_YIELDS_NULL ON -- Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSELECT column1 FROM table1 WHERE id IS NULL\n</pre>","debt":"15min"},{"summary":"Output parameters should be assigned","type":"Bug","defaultSeverity":"Major","description":"<p>Marking a parameter for output means that callers will expect its value to be updated with a result from the execution of the procedure. Failing to\nupdate the parameter before the procedure returns is surely an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCREATE PROCEDURE greet\n  @Name varchar(20),\n  @Greeting varchar(25) OUTPUT  -- Noncompliant\nAS\n  DECLARE @Message VARCHAR(45)\n  SET @Message = N'Hello ' + RTRIM(@Name);\n  PRINT @Message\nGO\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCREATE PROCEDURE greet\n  @Name varchar(20),\n  @Greeting varchar(25) OUTPUT\nAS\n  SELECT @Greeting = N'Hello ' + RTRIM(@Name);\nGO\n</pre>","debt":"15min"},{"summary":"Deprecated features should not be used","type":"Code Smell","defaultSeverity":"Major","description":"<p>Deprecated language features are those that have been retained temporarily for backward compatibility, but which will eventually be removed from\nthe language. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no\nuse of the deprecated features should be added to the code, and all existing uses should be gradually removed.</p>\n<p>The following features are deprecated or (depending on your version) already removed from TSQL:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Instead of</th>\n      <th>Use</th>\n    </tr>\n    <tr>\n      <td><code>WRITETEXT</code>, <code>UPDATETEXT</code>, <code>READTEXT</code></td>\n      <td><code>VARCHAR</code></td>\n    </tr>\n    <tr>\n      <td><code>GROUP BY ALL</code></td>\n      <td><code>UNION</code> or a derived table</td>\n    </tr>\n    <tr>\n      <td><code>FASTFIRSTROW</code></td>\n      <td><code>FAST n</code></td>\n    </tr>\n    <tr>\n      <td><code>SETUSER</code></td>\n      <td><code>EXECUTE AS</code></td>\n    </tr>\n    <tr>\n      <td><code>PASSWORD</code>, <code>MEDIAPASSWORD</code> in <code>BACKUP</code> or <code>RESTORE</code></td>\n      <td>use access control on the directory or <code>WITH RESTRICTED_USER</code> for <code>RESTORE</code></td>\n    </tr>\n    <tr>\n      <td><code>DBCC DBREINDEX</code></td>\n      <td><code>ALTER INDEX REBUILD</code></td>\n    </tr>\n    <tr>\n      <td><code>DBCC INDEXDEFRAG</code></td>\n      <td><code>ALTER INDEX DEFRAG</code></td>\n    </tr>\n    <tr>\n      <td><code>DBCC SHOWCONTIG</code></td>\n      <td><code>sys.dm_db_index_physical_stats</code></td>\n    </tr>\n    <tr>\n      <td>DBCC CONCURRENCYVIOLATION</td>\n      <td>no replacement</td>\n    </tr>\n    <tr>\n      <td><code>SET ROWCOUNT</code></td>\n      <td><code>TOP(n)</code></td>\n    </tr>\n    <tr>\n      <td><code>SET REMOTE_PROC_TRANSACTIONS</code></td>\n      <td>distributed queries that reference linked servers (<code>sp_addlinkedserver</code>)</td>\n    </tr>\n    <tr>\n      <td><code>RAISERROR @Errno @ErrMsg</code></td>\n      <td>the <code>RAISERROR</code> syntax using parentheses</td>\n    </tr>\n    <tr>\n      <td>DROP INDEX with two-part name</td>\n      <td>Move table (and database) to an <code>ON</code> clause</td>\n    </tr>\n    <tr>\n      <td>String literals as column aliases</td>\n      <td>Remove the quotes around the alias. Use square brackets if escaping is necessary</td>\n    </tr>\n    <tr>\n      <td>Numbered procedures</td>\n      <td>Replace with un-numbered procedures</td>\n    </tr>\n    <tr>\n      <td>System stored procedure</td>\n      <td>no replacement</td>\n    </tr>\n    <tr>\n      <td><code>fn_virtualservernodes</code></td>\n      <td><code>sys.dm_os_cluster_nodes</code></td>\n    </tr>\n    <tr>\n      <td><code>fn_servershareddrives</code></td>\n      <td><code>sys.dm_io_cluster_shared_drives</code></td>\n    </tr>\n    <tr>\n      <td><code>GRANT / DENY / REVOKE ALL</code></td>\n      <td>List the specific permissions </td>\n    </tr>\n    <tr>\n      <td><code>TORN_PAGE_DETECTION</code></td>\n      <td>checksum</td>\n    </tr>\n    <tr>\n      <td><code>TAPE</code></td>\n      <td><code>DISK</code> or <code>URL</code></td>\n    </tr>\n    <tr>\n      <td>Table hint without <code>WITH</code></td>\n      <td><code>WITH(hint)</code></td>\n    </tr>\n  </tbody>\n</table>","debt":"15min"}]}