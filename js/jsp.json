{"types":{"Vulnerability":6,"Code Smell":5,"Bug":1,"Other":0},"rules":[{"summary":"Failed unit tests should be fixed","type":"Bug","defaultSeverity":"Major","description":"Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions."},{"summary":"Skipped unit tests should be either removed or fixed","type":"Code Smell","defaultSeverity":"Major","description":"Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed."},{"summary":"Source files should not have any duplicated blocks","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as there is at least one block of duplicated code on this file","debt":"10min"},{"summary":"Source files should have a sufficient density of comment lines","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message."},{"summary":"Lines should have sufficient coverage by tests","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold."},{"summary":"Branches should have sufficient coverage by tests","type":"Code Smell","defaultSeverity":"Major","description":"An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold."},{"summary":"Security - Potential XSS in JSP","type":"Vulnerability","defaultSeverity":"Major","description":"<p>A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n    <pre><%\nString taintedInput = (String) request.getAttribute(\"input\");\n%>\n[...]\n&lt;%= taintedInput %&gt;</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>\n&lt;%\nString taintedInput = (String) request.getAttribute(\"input\");\n%&gt;\n[...]\n&lt;%= Encode.forHtml(taintedInput) %&gt;\n    </pre>\n</p>\n<p>\nThe best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider: \nHTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,\nwhich explains these defenses in significant detail.\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n<a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>\n<a href=\"https://code.google.com/p/owasp-java-encoder/\">OWASP Java Encoder</a><br/>\n</p>"},{"summary":"Security - Escaping of special XML characters is disabled","type":"Vulnerability","defaultSeverity":"Major","description":"<p>A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n    <pre>&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;\n\n&lt;c:out value=\"${param.test_param}\" escapeXml=\"false\"/&gt;</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>&lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt;\n\n&lt;c:out value=\"${param.test_param}\"/&gt;</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting\">WASC-8: Cross Site Scripting</a><br/>\n<a href=\"https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet\">OWASP: XSS Prevention Cheat Sheet</a><br/>\n<a href=\"https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29\">OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)</a><br/>\n<a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</a><br/>\n<a href=\"http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/out.html\">JSTL Javadoc: Out tag</a><br/>\n</p>"},{"summary":"Security - A malicious XSLT could be provided","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>\n    \"XSLT (Extensible Stylesheet Language Transformations) is a language for transforming XML documents into other XML documents\".<sup>[1]</sup><br/>\n    It is possible to attach malicious behavior to those stylesheets. Therefore, if an attacker can control the content or the source of the\n    stylesheet, he might be able to trigger remote code execution.<sup>[2]</sup>\n</p>\n<p>\n<b>Code at risk:</b><br/>\n<pre>\n&#x3C;x:transform xml=&#x22;${xmlData}&#x22; xslt=&#x22;${xsltControlledByUser}&#x22; /&#x3E;\n</pre>\n</p>\n<p>\n<b>Solution:</b><br/>\n<p>\nThe solution would be to make sure the stylesheet is loaded from a safe sources and make sure that vulnerabilities such as\nPath traversal <sup>[3][4]</sup> are not possible.\n</p>\n<p>\n<b>References</b><br/>\n[1] <a href=\"https://en.wikipedia.org/wiki/XSLT\">Wikipedia: XSLT (Extensible Stylesheet Language Transformations)</a><br/>\n<a href=\"https://prezi.com/y_fuybfudgnd/offensive-xslt/\">Offensive XSLT</a> by Nicolas Gregoire<br/>\n[2] <a href=\"http://www.agarri.fr/kom/archives/2012/07/02/from_xslt_code_execution_to_meterpreter_shells/index.html\">From XSLT code execution to Meterpreter shells</a> by Nicolas Gregoire<br/>\n<a href=\"http://xhe.myxwiki.org/xwiki/bin/view/Main/\">XSLT Hacking Encyclopedia</a> by Nicolas Gregoire<br/>\n<a href=\"http://www.acunetix.com/blog/articles/the-hidden-dangers-of-xsltprocessor-remote-xsl-injection/\">Acunetix.com : The hidden dangers of XSLTProcessor - Remote XSL injection</a><br/>\n<a href=\"https://www.w3.org/TR/xslt\">w3.org XSL Transformations (XSLT) Version 1.0</a> : w3c specification<br/>\n[3] <a href=\"http://projects.webappsec.org/w/page/13246952/Path%20Traversal\">WASC: Path Traversal</a><br/>\n[4] <a href=\"https://www.owasp.org/index.php/Path_Traversal\">OWASP: Path Traversal</a><br/>\n</p>"},{"summary":"Security - JSP reflected cross site scripting vulnerability","type":"Vulnerability","defaultSeverity":"Major","description":"<p>This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting\nvulnerability. See <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that FindBugs doesn't report. If you are concerned about cross site scripting, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>"},{"summary":"Security - Dynamic JSP inclusion","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>The inclusion of JSP file allow the entry of dynamic value. It may allow an attacker to control the JSP page included.\nIf this is the case, an attacker will try to include a file on disk that he controls. By including arbitrary files, the\nattacker gets the ability to execute any code.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n    <pre>&lt;jsp:include page=\"${param.secret_param}\" /&gt;</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>&lt;c:if test=\"${param.secret_param == 'page1'}\"&gt;\n    &lt;jsp:include page=\"page1.jsp\" /&gt;\n&lt;/c:if&gt;</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n<a href=\"http://resources.infosecinstitute.com/file-inclusion-attacks/\">InfosecInstitute: File Inclusion Attacks</a><br/>\n<a href=\"http://projects.webappsec.org/w/page/13246955/Remote%20File%20Inclusion\">WASC-05: Remote File Inclusion</a><br/>\n</p>"},{"summary":"Security - Dynamic variable in Spring expression","type":"Vulnerability","defaultSeverity":"Critical","description":"<p>A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\n</p>\n<p>\n    <b>Vulnerable Code:</b>\n    <pre>&lt;%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %&gt;\n\n&lt;spring:eval expression=\"${param.lang}\" var=\"lang\" /&gt;</pre>\n    <br>\n    <pre>&lt;%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %&gt;\n\n&lt;spring:eval expression=\"'${param.lang}'=='fr'\" var=\"languageIsFrench\" /&gt;</pre>\n</p>\n<p>\n    <b>Solution:</b>\n    <pre>&lt;c:set var=\"lang\" value=\"${param.lang}\"/&gt;</pre>\n    <br/>\n    <pre>&lt;c:set var=\"languageIsFrench\" value=\"${param.lang == 'fr'}\"/&gt;</pre>\n</p>\n<br/>\n<p>\n<b>References</b><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/94.html\">CWE-94: Improper Control of Generation of Code ('Code Injection')</a><br/>\n    <a href=\"http://cwe.mitre.org/data/definitions/95.html\">CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</a><br/>\n</p>"}]}